{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/pkg/nowcom/pages/forms.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/pkg/nowcom/pages/forms.vue","mtime":1716430386794},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CmltcG9ydCBBc3luY0J1dHRvbiBmcm9tICdAc2hlbGwvY29tcG9uZW50cy9Bc3luY0J1dHRvbic7CmltcG9ydCB7IF9DUkVBVEUgfSBmcm9tICdAc2hlbGwvY29uZmlnL3F1ZXJ5LXBhcmFtcyc7CmltcG9ydCB7IGV4Y2VwdGlvblRvRXJyb3JzQXJyYXkgfSBmcm9tICdAc2hlbGwvdXRpbHMvZXJyb3InOwppbXBvcnQgeyBOQU1FU1BBQ0UsIE5PREUsIE5PUk1BTiwgTUFOQUdFTUVOVH0gZnJvbSAnQHNoZWxsL2NvbmZpZy90eXBlcyc7CmltcG9ydCBOYW1lc3BhY2UgZnJvbSAnQHNoZWxsL21vZGVscy9uYW1lc3BhY2UnOwoKZXhwb3J0IGRlZmF1bHQgewpjb21wb25lbnRzOiB7CiAgICBBc3luY0J1dHRvbiwKICAgIGV4Y2VwdGlvblRvRXJyb3JzQXJyYXksCiAgfSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgZXJyb3JzOiAgICAgICAgICAgW10sCiAgICAgIHZhbHVlOiAgICAgICAgICAgeyBuYW1lOiAnJyB9LAogICAgICBzdWJtaXR0ZWQ6ICAgICAgIGZhbHNlLAogICAgICBtb2RlOiAgICAgICAgICAgIF9DUkVBVEUKICAgIH07CiAgfSwKICBtZXRob2RzOnsKICAgIGFzeW5jIHN1Ym1pdChidXR0b25DYikgewoKICAgICAgICB0cnkgewogICAgICAgICAgICAvLyBjb25zb2xlLmxvZygidGVzdCBOQU1FU1BBQ0UiKQogICAgICAgICAgICAvL2F3YWl0IHRoaXMuJHJlZnMuY2hhbmdlUGFzc3dvcmQuc2F2ZSgpOwogICAgICAgICAgICB0aGlzLnZhbHVlID0gYXdhaXQgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ21hbmFnZW1lbnQvZmluZEFsbCcsIHsKICAgICAgICAgICAgICAgIHR5cGU6IE1BTkFHRU1FTlQsCiAgICAgICAgICAgICAgICBtZXRhZGF0YTogewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICd0ZXN0aW5nJywKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBraW5kOiAiTmFtZXNwYWNlcyIsCiAgICAgICAgICAgICAgICBhcGlWZXJzaW9uOiAidjEiLAogICAgICAgICAgICAgICAgc3RhdHVzOiB7CiAgICAgICAgICAgICAgICAgICAgcGhhc2U6ICJBY3RpdmUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy4kc3RvcmUuZ2V0dGVyc1snZGVmYXVsdE5hbWVzcGFjZSddKQoKICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy52YWx1ZSkKICAgICAgICAgICAgLy8idHlwZSI6Im5hbWVzcGFjZSIsIm1ldGFkYXRhIjp7ImFubm90YXRpb25zIjp7ImZpZWxkLmNhdHRsZS5pby9jb250YWluZXJEZWZhdWx0UmVzb3VyY2VMaW1pdCI6Int9In0sIm5hbWUiOiJ0ZXN0aW5nIn0sImRpc2FibGVPcGVuQXBpVmFsaWRhdGlvbiI6ZmFsc2V9CiAgICAgICAgICAgIC8vIHRoaXMuc2hvdyhmYWxzZSk7CiAgICAgICAgICAgIGJ1dHRvbkNiKHRydWUpOwogICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZyhgZXJyYCwgZXJyKQogICAgICAgICAgICBidXR0b25DYihmYWxzZSk7CiAgICAgICAgfQogICAgfSwKICAgIGFzeW5jIGNyZWF0ZU5hbWVzcGFjZShidXR0b25DYikgewogICAgICAgIC8vIEZ1bmN0aW9uIHRvIGdldCB0aGUgQ1NSRiB0b2tlbiBmcm9tIHRoZSAnQ1NSRicgY29va2llCiAgICAgICAgZnVuY3Rpb24gZ2V0Q3NyZlRva2VuRnJvbUNvb2tpZSgpIHsKICAgICAgICAgICAgY29uc3QgY3NyZkNvb2tpZU5hbWUgPSAnQ1NSRic7IC8vIFJlcGxhY2Ugd2l0aCB5b3VyIGFjdHVhbCBDU1JGIGNvb2tpZSBuYW1lCiAgICAgICAgICAgIGNvbnN0IGNvb2tpZVZhbHVlID0gZG9jdW1lbnQuY29va2llCiAgICAgICAgICAgIC5zcGxpdCgnOyAnKQogICAgICAgICAgICAuZmluZChyb3cgPT4gcm93LnN0YXJ0c1dpdGgoYCR7Y3NyZkNvb2tpZU5hbWV9PWApKTsKCiAgICAgICAgICAgIGlmIChjb29raWVWYWx1ZSkgewogICAgICAgICAgICByZXR1cm4gY29va2llVmFsdWUuc3BsaXQoJz0nKVsxXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gUmV0dXJuIGEgZGVmYXVsdCB2YWx1ZSBvciBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvb2tpZSBpcyBub3QgZm91bmQKICAgICAgICAgICAgcmV0dXJuICdkZWZhdWx0LWNzcmYtdG9rZW4nOwogICAgICAgIH0KCiAgICAgICAgY29uc3QgcGF5bG9hZCA9IHsKICAgICAgICAgICAgdHlwZTogJ25hbWVzcGFjZScsCiAgICAgICAgICAgIG1ldGFkYXRhOiB7CiAgICAgICAgICAgIGFubm90YXRpb25zOiB7CiAgICAgICAgICAgICAgICAnZmllbGQuY2F0dGxlLmlvL2NvbnRhaW5lckRlZmF1bHRSZXNvdXJjZUxpbWl0JzogJ3t9JywKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbmFtZTogJ3Rlc3RpbmcnLAogICAgICAgICAgICB9LAogICAgICAgICAgICBkaXNhYmxlT3BlbkFwaVZhbGlkYXRpb246IGZhbHNlLAogICAgICAgIH07CgogICAgICAgIC8vIE1ha2UgdGhlIHJlcXVlc3QgdXNpbmcgQXhpb3Mgd2l0aCB0aGUgJ1gtQXBpLUNzcmYnIGhlYWRlciBzZXQgdG8gdGhlICdDU1JGJyBjb29raWUgdmFsdWUKICAgICAgICBheGlvcwogICAgICAgICAgICAucG9zdChgL3YxL25hbWVzcGFjZXNgLCBwYXlsb2FkLCB7CiAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsIC8vIFNldCB0aGUgQ29udGVudC1UeXBlIGhlYWRlcgogICAgICAgICAgICAgICAgJ1gtQXBpLUNzcmYnOiBnZXRDc3JmVG9rZW5Gcm9tQ29va2llKCksIC8vIEluY2x1ZGUgQ1NSRiB0b2tlbiBpbiB0aGUgaGVhZGVycwogICAgICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJywgLy8gU3BlY2lmeSB0aGF0IHlvdSBleHBlY3QgSlNPTiBpbiB0aGUgcmVzcG9uc2UKICAgICAgICAgICAgfSwKICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0cnVlLCAvLyBFbmFibGUgc2VuZGluZyBhbmQgcmVjZWl2aW5nIGNvb2tpZXMKICAgICAgICAgICAgfSkKICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgICAgICAgICAgLy8gSGFuZGxlIHRoZSByZXNwb25zZSBoZXJlCiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnTmFtZXNwYWNlIGNyZWF0ZWQ6JywgcmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgICAgICBidXR0b25DYih0cnVlKTsKICAgICAgICAgICAgfSkKICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHsKICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBhbnkgZXJyb3JzIGhlcmUKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNyZWF0aW5nIG5hbWVzcGFjZTonLCBlcnJvcik7CiAgICAgICAgICAgICAgICBidXR0b25DYihmYWxzZSk7CiAgICAgICAgICAgIH0pOwogICAgfQoKCiAgICAgCgogICAgLy8gT3RoZXIgbWV0aG9kcyBoZXJlCiAgfQoKfTsK"},{"version":3,"sources":["forms.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;;AAEA","file":"forms.vue","sourceRoot":"pages","sourcesContent":["<script>\nimport axios from 'axios';\nimport AsyncButton from '@shell/components/AsyncButton';\nimport { _CREATE } from '@shell/config/query-params';\nimport { exceptionToErrorsArray } from '@shell/utils/error';\nimport { NAMESPACE, NODE, NORMAN, MANAGEMENT} from '@shell/config/types';\nimport Namespace from '@shell/models/namespace';\n\nexport default {\ncomponents: {\n    AsyncButton,\n    exceptionToErrorsArray,\n  },\n  data() {\n    return {\n      errors:           [],\n      value:           { name: '' },\n      submitted:       false,\n      mode:            _CREATE\n    };\n  },\n  methods:{\n    async submit(buttonCb) {\n\n        try {\n            // console.log(\"test NAMESPACE\")\n            //await this.$refs.changePassword.save();\n            this.value = await this.$store.dispatch('management/findAll', {\n                type: MANAGEMENT,\n                metadata: {\n                    name: 'testing',\n                },\n                kind: \"Namespaces\",\n                apiVersion: \"v1\",\n                status: {\n                    phase: \"Active\"\n                }\n            });\n\n            // console.log(this.$store.getters['defaultNamespace'])\n\n            console.log(this.value)\n            //\"type\":\"namespace\",\"metadata\":{\"annotations\":{\"field.cattle.io/containerDefaultResourceLimit\":\"{}\"},\"name\":\"testing\"},\"disableOpenApiValidation\":false}\n            // this.show(false);\n            buttonCb(true);\n        } catch (err) {\n            console.log(`err`, err)\n            buttonCb(false);\n        }\n    },\n    async createNamespace(buttonCb) {\n        // Function to get the CSRF token from the 'CSRF' cookie\n        function getCsrfTokenFromCookie() {\n            const csrfCookieName = 'CSRF'; // Replace with your actual CSRF cookie name\n            const cookieValue = document.cookie\n            .split('; ')\n            .find(row => row.startsWith(`${csrfCookieName}=`));\n\n            if (cookieValue) {\n            return cookieValue.split('=')[1];\n            }\n\n            // Return a default value or handle the case where the cookie is not found\n            return 'default-csrf-token';\n        }\n\n        const payload = {\n            type: 'namespace',\n            metadata: {\n            annotations: {\n                'field.cattle.io/containerDefaultResourceLimit': '{}',\n            },\n            name: 'testing',\n            },\n            disableOpenApiValidation: false,\n        };\n\n        // Make the request using Axios with the 'X-Api-Csrf' header set to the 'CSRF' cookie value\n        axios\n            .post(`/v1/namespaces`, payload, {\n            headers: {\n                'Content-Type': 'application/json', // Set the Content-Type header\n                'X-Api-Csrf': getCsrfTokenFromCookie(), // Include CSRF token in the headers\n                'Accept': 'application/json', // Specify that you expect JSON in the response\n            },\n            withCredentials: true, // Enable sending and receiving cookies\n            })\n            .then(response => {\n                // Handle the response here\n                console.log('Namespace created:', response.data);\n                buttonCb(true);\n            })\n            .catch(error => {\n                // Handle any errors here\n                console.error('Error creating namespace:', error);\n                buttonCb(false);\n            });\n    }\n\n\n     \n\n    // Other methods here\n  }\n\n};\n</script>\n<template>\n<AsyncButton\n  type=\"submit\"\n  mode=\"apply\"\n  class=\"btn bg-error ml-10\"\n  value=\"LOGIN\"\n  @click=\"submit\"\n/>\n</template>"]}]}