{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/ResourceList/ResourceLoadingIndicator.vue?vue&type=style&index=0&id=6457c305&prod&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/ResourceList/ResourceLoadingIndicator.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5yZXNvdXJjZS1sb2FkaW5nLWluZGljYXRvciB7CiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tbGluayk7CiAgYm9yZGVyLXJhZGl1czogMTBweDsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgd2lkdGg6IG1pbi1jb250ZW50OwogIG92ZXJmbG93OiBoaWRkZW47CgogIC5yZXNvdXJjZS1sb2FkZXI6bGFzdC1jaGlsZCB7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICB0b3A6IDA7CgogICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbGluayk7CiAgICBjb2xvcjogdmFyKC0tbGluay10ZXh0KTsKICAgIG92ZXJmbG93OiBoaWRkZW47CiAgICB3aGl0ZS1zcGFjZTogbm93cmFwOwogIH0KCiAgLnJlc291cmNlLWxvYWRlciB7CiAgICBwYWRkaW5nOiAxcHggMTBweDsKICAgIHdpZHRoOiBtYXgtY29udGVudDsKCiAgICAucmwtZmcsIC5ybC1iZyB7CiAgICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjsKICAgICAgZGlzcGxheTogZmxleDsKCiAgICAgID4gaSB7CiAgICAgICAgZm9udC1zaXplOiAxOHB4OwogICAgICAgIGxpbmUtaGVpZ2h0OiAxOHB4OwogICAgICB9CgogICAgICA+IHNwYW4gewogICAgICAgIG1hcmdpbi1sZWZ0OiA1cHg7CiAgICAgIH0KICAgIH0KICB9Cn0K"},{"version":3,"sources":["ResourceLoadingIndicator.vue"],"names":[],"mappings":";AA0IA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"ResourceLoadingIndicator.vue","sourceRoot":"../../node_modules/@rancher/shell/components/ResourceList","sourcesContent":["<script>\nimport { COUNT } from '@shell/config/types';\n\n/**\n * Loading Indicator for resources - used when we are loading resources incrementally, by page\n */\nexport default {\n\n  name: 'ResourceLoadingIndicator',\n\n  props: {\n    resources: {\n      type:     Array,\n      required: true,\n    },\n    indeterminate: {\n      type:    Boolean,\n      default: false,\n    },\n  },\n\n  data() {\n    const inStore = this.$store.getters['currentStore'](this.resource);\n\n    return { inStore };\n  },\n\n  computed: {\n    // Count of rows - either from the data provided or from the rows for the first resource\n    rowsCount() {\n      if (this.resources.length > 0) {\n        const existingData = this.$store.getters[`${ this.inStore }/all`](this.resources[0]) || [];\n\n        return (existingData || []).length;\n      }\n\n      return 0;\n    },\n\n    // Have we loaded all resources for the types that are needed\n    haveAll() {\n      return this.resources.reduce((acc, r) => {\n        return acc && this.$store.getters[`${ this.inStore }/haveAll`](r);\n      }, true);\n    },\n\n    // Total of all counts of all resources for all of the resources being loaded\n    total() {\n      const clusterCounts = this.$store.getters[`${ this.inStore }/all`](COUNT);\n\n      return this.resources.reduce((acc, r) => {\n        const resourceCounts = clusterCounts?.[0]?.counts?.[r];\n        const resourceCount = resourceCounts?.summary?.count;\n        const count = resourceCount || 0;\n\n        return acc + count;\n      }, 0);\n    },\n\n    // Total count of all of the resources for all of the resources being loaded\n    count() {\n      return this.resources.reduce((acc, r) => {\n        return acc + (this.$store.getters[`${ this.inStore }/all`](r) || []).length;\n      }, 0);\n    },\n\n    // Width style to enable the progress bar style presentation\n    width() {\n      const progress = Math.ceil(100 * (this.count / this.total));\n\n      return `${ progress }%`;\n    }\n  },\n};\n</script>\n\n<template>\n  <div\n    v-if=\"count && !haveAll\"\n    class=\"ml-10 resource-loading-indicator\"\n  >\n    <div class=\"inner\">\n      <div class=\"resource-loader\">\n        <div class=\"rl-bg\">\n          <i class=\"icon icon-spinner icon-spin\" /><span>{{ t( 'resourceLoadingIndicator.loading' ) }} <span v-if=\"!indeterminate\">{{ count }} / {{ total }}</span></span>\n        </div>\n      </div>\n      <div\n        class=\"resource-loader\"\n        :style=\"{width}\"\n      >\n        <div class=\"rl-fg\">\n          <i class=\"icon icon-spinner icon-spin\" /><span>{{ t( 'resourceLoadingIndicator.loading' ) }} <span v-if=\"!indeterminate\">{{ count }} / {{ total }}</span></span>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n  .resource-loading-indicator {\n    border: 1px solid var(--link);\n    border-radius: 10px;\n    position: relative;\n    width: min-content;\n    overflow: hidden;\n\n    .resource-loader:last-child {\n      position: absolute;\n      top: 0;\n\n      background-color: var(--link);\n      color: var(--link-text);\n      overflow: hidden;\n      white-space: nowrap;\n    }\n\n    .resource-loader {\n      padding: 1px 10px;\n      width: max-content;\n\n      .rl-fg, .rl-bg {\n        align-content: center;\n        display: flex;\n\n        > i {\n          font-size: 18px;\n          line-height: 18px;\n        }\n\n        > span {\n          margin-left: 5px;\n        }\n      }\n    }\n  }\n</style>\n"]}]}