{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/pages/home.vue?vue&type=style&index=0&id=796cb26e&prod&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/pages/home.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5ob21lLXBhbmVscyB7CiAgZGlzcGxheTogZmxleDsKICBhbGlnbi1pdGVtczogc3RyZXRjaDsKICAuY29sIHsKICAgIG1hcmdpbjogMAogIH0KICAubWFpbi1wYW5lbCB7CiAgICBmbGV4OiBhdXRvOwogIH0KCiAgLnNpZGUtcGFuZWwgewogICAgbWFyZ2luLWxlZnQ6IDEuNzUlOwogIH0KfQoKLnNldC1sb2dpbi1wYWdlLCAud2hhdHMtbmV3IHsKICA+IDo6di1kZWVwIC5iYW5uZXJfX2NvbnRlbnQgewogICAgZGlzcGxheTogZmxleDsKCiAgICA+IGRpdiB7CiAgICAgIGZsZXg6IDE7CiAgICB9CiAgICA+IGEgewogICAgICBhbGlnbi1zZWxmOiBmbGV4LWVuZDsKICAgIH0KICB9Cn0KCi5iYW5uZXIuc2V0LWxvZ2luLXBhZ2UgewogIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJvcmRlcik7Cn0KLnRhYmxlLWhlYWRpbmcgewogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgZGlzcGxheTogZmxleDsKICBoZWlnaHQ6IDM5cHg7CgogICYgPiBhIHsKICAgIG1hcmdpbi1sZWZ0OiAxMHB4OwogIH0KfQoucGFuZWw6bm90KDpmaXJzdC1jaGlsZCkgewogIG1hcmdpbi10b3A6IDIwcHg7Cn0KLmdldHRpbmctc3RhcnRlZCB7CiAgYWxpZ24taXRlbXM6IGZsZXgtZW5kOwogIGRpc3BsYXk6IGZsZXg7CgogID4gc3BhbiB7CiAgICBmbGV4OiAxOwogICAgbWFyZ2luLXJpZ2h0OiAyMHB4OwogIH0KfQouZ2V0dGluZy1zdGFydGVkLWJ0biB7CiAgZGlzcGxheTogY29udGVudHM7CiAgd2hpdGUtc3BhY2U6IG5vd3JhcDsKfQoKLmxpc3QtY2x1c3Rlci1uYW1lIHsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIGRpc3BsYXk6IGZsZXg7CgogIC5jb25kaXRpb25zLWFsZXJ0LWljb24gewogICAgY29sb3I6IHZhcigtLWVycm9yKTsKICAgIG1hcmdpbi1sZWZ0OiA0cHg7CiAgfQp9CgovLyBIaWRlIHRoZSBzaWRlLXBhbmVsIHNob3dpbmcgbGlua3Mgd2hlbiB0aGUgc2NyZWVuIGlzIHNtYWxsCkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDk5NnB4KSB7CiAgLnNpZGUtcGFuZWwgewogICAgZGlzcGxheTogbm9uZTsKICB9Cn0K"},{"version":3,"sources":["home.vue"],"names":[],"mappings":";AAmjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"home.vue","sourceRoot":"../../node_modules/@rancher/shell/pages","sourcesContent":["<script>\nimport { mapPref, AFTER_LOGIN_ROUTE, READ_WHATS_NEW, HIDE_HOME_PAGE_CARDS } from '@shell/store/prefs';\nimport { Banner } from '@components/Banner';\nimport BannerGraphic from '@shell/components/BannerGraphic';\nimport IndentedPanel from '@shell/components/IndentedPanel';\nimport SortableTable from '@shell/components/SortableTable';\nimport { BadgeState } from '@components/BadgeState';\nimport CommunityLinks from '@shell/components/CommunityLinks';\nimport SingleClusterInfo from '@shell/components/SingleClusterInfo';\nimport { mapGetters, mapState } from 'vuex';\nimport { MANAGEMENT, CAPI } from '@shell/config/types';\nimport { NAME as MANAGER } from '@shell/config/product/manager';\nimport { STATE } from '@shell/config/table-headers';\nimport { MODE, _IMPORT } from '@shell/config/query-params';\nimport { createMemoryFormat, formatSi, parseSi, createMemoryValues } from '@shell/utils/units';\nimport { getVersionInfo, readReleaseNotes, markReadReleaseNotes, markSeenReleaseNotes } from '@shell/utils/version';\nimport PageHeaderActions from '@shell/mixins/page-actions';\nimport { getVendor } from '@shell/config/private-label';\nimport { mapFeature, MULTI_CLUSTER } from '@shell/store/features';\nimport { BLANK_CLUSTER } from '@shell/store/store-types.js';\nimport { filterOnlyKubernetesClusters, filterHiddenLocalCluster } from '@shell/utils/cluster';\n\nimport { RESET_CARDS_ACTION, SET_LOGIN_ACTION } from '@shell/config/page-actions';\n\nexport default {\n  name:       'Home',\n  layout:     'home',\n  components: {\n    Banner,\n    BannerGraphic,\n    IndentedPanel,\n    SortableTable,\n    BadgeState,\n    CommunityLinks,\n    SingleClusterInfo,\n  },\n\n  mixins: [PageHeaderActions],\n\n  fetch() {\n    if ( this.$store.getters['management/schemaFor'](CAPI.RANCHER_CLUSTER) ) {\n      this.$store.dispatch('management/findAll', { type: CAPI.RANCHER_CLUSTER });\n    }\n\n    if ( this.$store.getters['management/schemaFor'](MANAGEMENT.CLUSTER) ) {\n      this.$store.dispatch('management/findAll', { type: MANAGEMENT.CLUSTER });\n    }\n\n    if ( this.$store.getters['management/canList'](CAPI.MACHINE) ) {\n      this.$store.dispatch('management/findAll', { type: CAPI.MACHINE });\n    }\n\n    if ( this.$store.getters['management/canList'](MANAGEMENT.NODE) ) {\n      this.$store.dispatch('management/findAll', { type: MANAGEMENT.NODE });\n    }\n\n    // We need to fetch node pools and node templates in order to correctly show the provider for RKE1 clusters\n    if ( this.$store.getters['management/canList'](MANAGEMENT.NODE_POOL) ) {\n      this.$store.dispatch('management/findAll', { type: MANAGEMENT.NODE_POOL });\n    }\n\n    if ( this.$store.getters['management/canList'](MANAGEMENT.NODE_TEMPLATE) ) {\n      this.$store.dispatch('management/findAll', { type: MANAGEMENT.NODE_TEMPLATE });\n    }\n  },\n\n  data() {\n    const fullVersion = getVersionInfo(this.$store).fullVersion;\n    // Page actions don't change on the Home Page\n    const pageActions = [\n      {\n        labelKey: 'nav.header.setLoginPage',\n        action:   SET_LOGIN_ACTION\n      },\n      { separator: true },\n      {\n        labelKey: 'nav.header.restoreCards',\n        action:   RESET_CARDS_ACTION\n      },\n    ];\n\n    return {\n      HIDE_HOME_PAGE_CARDS, fullVersion, pageActions, vendor: getVendor(),\n    };\n  },\n\n  computed: {\n    ...mapState(['managementReady']),\n    ...mapGetters(['currentCluster', 'defaultClusterId', 'releaseNotesUrl']),\n    mcm: mapFeature(MULTI_CLUSTER),\n\n    provClusters() {\n      return this.$store.getters['management/all'](CAPI.RANCHER_CLUSTER);\n    },\n\n    // User can go to Cluster Management if they can see the cluster schema\n    canManageClusters() {\n      const schema = this.$store.getters['management/schemaFor'](CAPI.RANCHER_CLUSTER);\n\n      return !!schema;\n    },\n\n    canCreateCluster() {\n      const schema = this.$store.getters['management/schemaFor'](CAPI.RANCHER_CLUSTER);\n\n      return !!schema?.collectionMethods.find((x) => x.toLowerCase() === 'post');\n    },\n\n    manageLocation() {\n      return {\n        name:   'c-cluster-product-resource',\n        params: {\n          product:  MANAGER,\n          cluster:  BLANK_CLUSTER,\n          resource: CAPI.RANCHER_CLUSTER\n        },\n      };\n    },\n\n    createLocation() {\n      return {\n        name:   'c-cluster-product-resource-create',\n        params: {\n          product:  MANAGER,\n          cluster:  BLANK_CLUSTER,\n          resource: CAPI.RANCHER_CLUSTER\n        },\n      };\n    },\n\n    importLocation() {\n      return {\n        name:   'c-cluster-product-resource-create',\n        params: {\n          product:  MANAGER,\n          cluster:  BLANK_CLUSTER,\n          resource: CAPI.RANCHER_CLUSTER\n        },\n        query: { [MODE]: _IMPORT }\n      };\n    },\n\n    afterLoginRoute: mapPref(AFTER_LOGIN_ROUTE),\n    homePageCards:   mapPref(HIDE_HOME_PAGE_CARDS),\n\n    readWhatsNewAlready() {\n      return readReleaseNotes(this.$store);\n    },\n\n    showSetLoginBanner() {\n      return this.homePageCards?.setLoginPage;\n    },\n\n    clusterHeaders() {\n      return [\n        STATE,\n        {\n          name:          'name',\n          labelKey:      'tableHeaders.name',\n          value:         'nameDisplay',\n          sort:          ['nameSort'],\n          canBeVariable: true,\n          getValue:      (row) => row.mgmt?.nameDisplay\n        },\n        {\n          label:     this.t('landing.clusters.provider'),\n          value:     'mgmt.status.provider',\n          name:      'Provider',\n          sort:      ['mgmt.status.provider'],\n          formatter: 'ClusterProvider'\n        },\n        {\n          label: this.t('landing.clusters.kubernetesVersion'),\n          value: 'kubernetesVersion',\n          name:  'Kubernetes Version'\n        },\n        {\n          label: this.t('tableHeaders.cpu'),\n          value: '',\n          name:  'cpu',\n          sort:  ['status.allocatable.cpu', 'status.available.cpu']\n\n        },\n        {\n          label: this.t('tableHeaders.memory'),\n          value: '',\n          name:  'memory',\n          sort:  ['status.allocatable.memory', 'status.available.memory']\n\n        },\n        {\n          label:        this.t('tableHeaders.pods'),\n          name:         'pods',\n          value:        '',\n          sort:         ['status.allocatable.pods', 'status.requested.pods'],\n          formatter:    'PodsUsage',\n          delayLoading: true\n        },\n        // {\n        //   name:  'explorer',\n        //   label:  this.t('landing.clusters.explorer')\n        // }\n      ];\n    },\n\n    kubeClusters() {\n      return filterHiddenLocalCluster(filterOnlyKubernetesClusters(this.provClusters || [], this.$store), this.$store);\n    }\n  },\n\n  async created() {\n    // Update last visited on load\n    await this.$store.dispatch('prefs/setLastVisited', { name: 'home' });\n    markSeenReleaseNotes(this.$store);\n  },\n\n  // Forget the types when we leave the page\n  beforeDestroy() {\n    this.$store.dispatch('management/forgetType', CAPI.MACHINE);\n    this.$store.dispatch('management/forgetType', MANAGEMENT.NODE);\n    this.$store.dispatch('management/forgetType', MANAGEMENT.NODE_POOL);\n    this.$store.dispatch('management/forgetType', MANAGEMENT.NODE_TEMPLATE);\n  },\n\n  methods: {\n    /**\n     * Define actions for each navigation link\n     * @param {*} action\n     */\n    handlePageAction(action) {\n      switch (action.action) {\n      case RESET_CARDS_ACTION:\n        this.resetCards();\n        break;\n\n      case SET_LOGIN_ACTION:\n        this.afterLoginRoute = 'home';\n        break;\n\n      // no default\n      }\n    },\n\n    cpuUsed(cluster) {\n      return parseSi(cluster.status.requested?.cpu);\n    },\n\n    cpuAllocatable(cluster) {\n      return parseSi(cluster.status.allocatable?.cpu);\n    },\n    memoryAllocatable(cluster) {\n      const parsedAllocatable = (parseSi(cluster.status.allocatable?.memory) || 0).toString();\n      const format = createMemoryFormat(parsedAllocatable);\n\n      return formatSi(parsedAllocatable, format);\n    },\n\n    memoryReserved(cluster) {\n      const memValues = createMemoryValues(cluster?.status?.allocatable?.memory, cluster?.status?.requested?.memory);\n\n      return `${ memValues.useful }/${ memValues.total } ${ memValues.units }`;\n    },\n\n    showWhatsNew() {\n      // Update the value, so that the message goes away\n      markReadReleaseNotes(this.$store);\n    },\n\n    showUserPrefs() {\n      this.$router.push({ name: 'prefs' });\n    },\n\n    async resetCards() {\n      await this.$store.dispatch('prefs/set', { key: HIDE_HOME_PAGE_CARDS, value: {} });\n      await this.$store.dispatch('prefs/set', { key: READ_WHATS_NEW, value: '' });\n    },\n\n    async closeSetLoginBanner(retry = 0) {\n      let value = this.$store.getters['prefs/get'](HIDE_HOME_PAGE_CARDS);\n\n      if (value === true || value === false || value.length > 0) {\n        value = {};\n      }\n      value.setLoginPage = true;\n\n      const res = await this.$store.dispatch('prefs/set', { key: HIDE_HOME_PAGE_CARDS, value });\n\n      if (retry === 0 && res?.type === 'error' && res?.status === 500) {\n        await this.closeSetLoginBanner(retry + 1);\n      }\n    }\n  }\n};\n\n</script>\n<template>\n  <div\n    v-if=\"managementReady\"\n    class=\"home-page\"\n  >\n    <BannerGraphic\n      :small=\"true\"\n      :title=\"t('landing.welcomeToRancher', {vendor})\"\n      :pref=\"HIDE_HOME_PAGE_CARDS\"\n      pref-key=\"welcomeBanner\"\n      data-testid=\"home-banner-graphic\"\n    />\n    <IndentedPanel class=\"mt-20 mb-20\">\n      <div\n        v-if=\"!readWhatsNewAlready\"\n        class=\"row\"\n      >\n        <div class=\"col span-12\">\n          <Banner\n            data-testid=\"changelog-banner\"\n            color=\"info whats-new\"\n          >\n            <div>\n              {{ t('landing.seeWhatsNew') }}\n            </div>\n            <a\n              class=\"hand\"\n              :href=\"releaseNotesUrl\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer nofollow\"\n              @click.stop=\"showWhatsNew\"\n            ><span v-clean-html=\"t('landing.whatsNewLink')\" /></a>\n          </Banner>\n        </div>\n      </div>\n\n      <div class=\"row home-panels\">\n        <div class=\"col main-panel\">\n          <div\n            v-if=\"!showSetLoginBanner\"\n            class=\"mb-10 row\"\n          >\n            <div class=\"col span-12\">\n              <Banner\n                color=\"set-login-page mt-0\"\n                data-testid=\"set-login-page-banner\"\n                :closable=\"true\"\n                @close=\"closeSetLoginBanner()\"\n              >\n                <div>\n                  {{ t('landing.landingPrefs.title') }}\n                </div>\n                <a\n                  class=\"hand mr-20\"\n                  @click.prevent.stop=\"showUserPrefs\"\n                ><span v-clean-html=\"t('landing.landingPrefs.userPrefs')\" /></a>\n              </Banner>\n            </div>\n          </div>\n          <div class=\"row panel\">\n            <div\n              v-if=\"mcm\"\n              class=\"col span-12\"\n            >\n              <SortableTable\n                :table-actions=\"false\"\n                :row-actions=\"false\"\n                key-field=\"id\"\n                :rows=\"kubeClusters\"\n                :headers=\"clusterHeaders\"\n                :loading=\"!kubeClusters\"\n              >\n                <template #header-left>\n                  <div class=\"row table-heading\">\n                    <h2 class=\"mb-0\">\n                      {{ t('landing.clusters.title') }}\n                    </h2>\n                    <BadgeState\n                      v-if=\"kubeClusters\"\n                      :label=\"kubeClusters.length.toString()\"\n                      color=\"role-tertiary ml-20 mr-20\"\n                    />\n                  </div>\n                </template>\n                <template\n                  v-if=\"canCreateCluster || canManageClusters\"\n                  #header-middle\n                >\n                  <div class=\"table-heading\">\n                    <n-link\n                      v-if=\"canManageClusters\"\n                      :to=\"manageLocation\"\n                      class=\"btn btn-sm role-secondary\"\n                      data-testid=\"cluster-management-manage-button\"\n                    >\n                      {{ t('cluster.manageAction') }}\n                    </n-link>\n                    <n-link\n                      v-if=\"canCreateCluster\"\n                      :to=\"importLocation\"\n                      class=\"btn btn-sm role-primary\"\n                      data-testid=\"cluster-create-import-button\"\n                    >\n                      {{ t('cluster.importAction') }}\n                    </n-link>\n                    <n-link\n                      v-if=\"canCreateCluster\"\n                      :to=\"createLocation\"\n                      class=\"btn btn-sm role-primary\"\n                      data-testid=\"cluster-create-button\"\n                    >\n                      {{ t('generic.create') }}\n                    </n-link>\n                  </div>\n                </template>\n                <template #col:name=\"{row}\">\n                  <td>\n                    <div class=\"list-cluster-name\">\n                      <span v-if=\"row.mgmt\">\n                        <n-link\n                          v-if=\"row.mgmt.isReady && !row.hasError\"\n                          :to=\"{ name: 'c-cluster-explorer', params: { cluster: row.mgmt.id }}\"\n                        >\n                          {{ row.nameDisplay }}\n                        </n-link>\n                        <span v-else>{{ row.nameDisplay }}</span>\n                      </span>\n                      <i\n                        v-if=\"row.unavailableMachines\"\n                        v-clean-tooltip=\"row.unavailableMachines\"\n                        class=\"conditions-alert-icon icon-alert icon\"\n                      />\n                    </div>\n                  </td>\n                </template>\n                <template #col:cpu=\"{row}\">\n                  <td v-if=\"row.mgmt && cpuAllocatable(row.mgmt)\">\n                    {{ `${cpuAllocatable(row.mgmt)} ${t('landing.clusters.cores', {count:cpuAllocatable(row.mgmt) })}` }}\n                  </td>\n                  <td v-else>\n                    &mdash;\n                  </td>\n                </template>\n                <template #col:memory=\"{row}\">\n                  <td v-if=\"row.mgmt && memoryAllocatable(row.mgmt) && !memoryAllocatable(row.mgmt).match(/^0 [a-zA-z]/)\">\n                    {{ memoryAllocatable(row.mgmt) }}\n                  </td>\n                  <td v-else>\n                    &mdash;\n                  </td>\n                </template>\n                <!-- <template #cell:explorer=\"{row}\">\n                  <n-link v-if=\"row && row.isReady\" class=\"btn btn-sm role-primary\" :to=\"{name: 'c-cluster', params: {cluster: row.id}}\">\n                    {{ t('landing.clusters.explore') }}\n                  </n-link>\n                  <button v-else :disabled=\"true\" class=\"btn btn-sm role-primary\">\n                    {{ t('landing.clusters.explore') }}\n                  </button>\n                </template> -->\n              </SortableTable>\n            </div>\n            <div\n              v-else\n              class=\"col span-12\"\n            >\n              <SingleClusterInfo />\n            </div>\n          </div>\n        </div>\n        <CommunityLinks class=\"col span-3 side-panel\" />\n      </div>\n    </IndentedPanel>\n  </div>\n</template>\n<style lang='scss' scoped>\n  .home-panels {\n    display: flex;\n    align-items: stretch;\n    .col {\n      margin: 0\n    }\n    .main-panel {\n      flex: auto;\n    }\n\n    .side-panel {\n      margin-left: 1.75%;\n    }\n  }\n\n  .set-login-page, .whats-new {\n    > ::v-deep .banner__content {\n      display: flex;\n\n      > div {\n        flex: 1;\n      }\n      > a {\n        align-self: flex-end;\n      }\n    }\n  }\n\n  .banner.set-login-page {\n    border: 1px solid var(--border);\n  }\n  .table-heading {\n    align-items: center;\n    display: flex;\n    height: 39px;\n\n    & > a {\n      margin-left: 10px;\n    }\n  }\n  .panel:not(:first-child) {\n    margin-top: 20px;\n  }\n  .getting-started {\n    align-items: flex-end;\n    display: flex;\n\n    > span {\n      flex: 1;\n      margin-right: 20px;\n    }\n  }\n  .getting-started-btn {\n    display: contents;\n    white-space: nowrap;\n  }\n\n  .list-cluster-name {\n    align-items: center;\n    display: flex;\n\n    .conditions-alert-icon {\n      color: var(--error);\n      margin-left: 4px;\n    }\n  }\n\n  // Hide the side-panel showing links when the screen is small\n  @media screen and (max-width: 996px) {\n    .side-panel {\n      display: none;\n    }\n  }\n</style>\n<style lang=\"scss\">\n.home-page {\n  .search {\n    align-items: center;\n    display: flex;\n\n    > INPUT {\n      background-color: transparent;\n      height: 30px;\n      padding: 8px;\n    }\n  }\n\n  h2 {\n    font-size: 16px;\n  }\n}\n</style>\n"]}]}