{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/pkg/nowcom/pages/create-natgateway.vue?vue&type=style&index=0&id=c69568f2&prod&scoped=true&lang=css","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/pkg/nowcom/pages/create-natgateway.vue","mtime":1716430386794},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5iYXNlIHsKICAgIG1hcmdpbi1sZWZ0OiAxMHB4Owp9CgouZm9ybS1jb250YWluZXIgewogICAgdGV4dC1hbGlnbjogbGVmdDsKfQoKLmZvcm0tcm93LTMgewogICAgZGlzcGxheTogZ3JpZDsKICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDQsIDFmcik7CiAgICBncmlkLWdhcDogMTBweDsKICAgIHBhZGRpbmc6IDEwcHggMDsKICAgIC8qIEFkZCB0b3AgYW5kIGJvdHRvbSBwYWRkaW5nICovCn0KCi5mb3JtLXJvdy0yIHsKICAgIGRpc3BsYXk6IGdyaWQ7CiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgyLCAxZnIpOwogICAgZ3JpZC1nYXA6IDEwcHg7CiAgICBwYWRkaW5nOiAxMHB4IDA7CiAgICAvKiBBZGQgdG9wIGFuZCBib3R0b20gcGFkZGluZyAqLwp9CgouZm9ybS1jb2x1bW4gewogICAgZmxleDogMTsKfQoKLmlucHV0LWNvbnRhaW5lciB7CiAgICBtYXJnaW46IDEwcHggMDsKICAgIC8qIEFkZCBwYWRkaW5nIGF0IHRoZSB0b3AgYW5kIGJvdHRvbSBmb3IgaW5wdXQvc2VsZWN0ICovCn0KCi5jdXN0b20tYnV0dG9uIHsKICAgIGJhY2tncm91bmQtY29sb3I6ICMzYjc0OTg7CiAgICBjb2xvcjogI2ZmZjsKICAgIGJvcmRlcjogbm9uZTsKICAgIGJvcmRlci1yYWRpdXM6IDVweDsKICAgIGN1cnNvcjogcG9pbnRlcjsKICAgIG1hcmdpbi10b3A6IDEwcHg7CiAgICBtYXJnaW4tbGVmdDogNXB4OwogICAgd2lkdGg6IDEwMHB4OwogICAgLyogZGlzcGxheTogZ3JpZDsgKi8KICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgIC8qIEFkZCB0aGlzIGxpbmUgZm9yIHZlcnRpY2FsIGFsaWdubWVudCBpZiBuZWVkZWQgKi8KfQoKLnJvdy1idXR0b24gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzRjYWY1MDsKICAgIGNvbG9yOiAjZmZmOwogICAgYm9yZGVyOiBub25lOwogICAgYm9yZGVyLXJhZGl1czogNXB4OwogICAgY3Vyc29yOiBwb2ludGVyOwogICAgdGV4dC1hbGlnbjogbGVmdDsKfQoKLmN1c3RvbS1idXR0b246aG92ZXIgewogICAgYmFja2dyb3VuZC1jb2xvcjogIzAwNTZiMzsKfQoKLmN1c3RvbS1idXR0b246ZGlzYWJsZWQgewogICAgYmFja2dyb3VuZC1jb2xvcjogI2NjY2NjYzsKICAgIC8qIEdyZXkgKi8KICAgIGNvbG9yOiAjNjY2NjY2OwogICAgLyogRGFyayBncmV5ICovCiAgICBjdXJzb3I6IG5vdC1hbGxvd2VkOwp9CgouZGlzYWJsZS1ob3Zlcjpob3ZlciB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmOwogICAgLyogQ2hhbmdlIHRoaXMgdG8gdGhlIG5vbi1ob3ZlciBiYWNrZ3JvdW5kIGNvbG9yICovCiAgICBjdXJzb3I6IG5vdC1hbGxvd2VkOwp9CgovKiBub3RpZiAqLwovKiBZb3VyIGV4aXN0aW5nIHN0eWxlIGNvZGUgKi8KCi5ub3RpZmljYXRpb24gewogICAgcG9zaXRpb246IGZpeGVkOwogICAgdG9wOiAxMHB4OwogICAgcmlnaHQ6IDEwcHg7CiAgICBwYWRkaW5nOiAxMHB4OwogICAgYm9yZGVyLXJhZGl1czogNXB4OwogICAgY29sb3I6ICNmZmY7CiAgICBmb250LXdlaWdodDogYm9sZDsKfQoKLnN1Y2Nlc3MgewogICAgYmFja2dyb3VuZC1jb2xvcjogIzRjYWY1MDsKICAgIC8qIEdyZWVuICovCn0KCi5lcnJvciB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjQ0MzM2OwogICAgLyogUmVkICovCn0KCi8qIFlvdXIgQ1NTIHN0eWxlcyBnbyBoZXJlICovCnRhYmxlIHsKICAgIHdpZHRoOiAxMDAlOwogICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTsKICAgIG1hcmdpbi10b3A6IDEwcHg7Cn0KCnRoLAp0ZCB7CiAgICBib3JkZXI6IDFweCBzb2xpZCAjZGRkOwogICAgcGFkZGluZzogOHB4OwogICAgdGV4dC1hbGlnbjogbGVmdDsKfQoKdGggewogICAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjsKfQoKLyogTW9kYWwgc3R5bGVzICovCi5tb2RhbC1vdmVybGF5IHsKICAgIHBvc2l0aW9uOiBmaXhlZDsKICAgIHRvcDogMDsKICAgIGxlZnQ6IDA7CiAgICB3aWR0aDogMTAwJTsKICAgIGhlaWdodDogMTAwJTsKICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41KTsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgICB6LWluZGV4OiAxMDA7CiAgICAvKiBBZGQgYSBoaWdoZXIgei1pbmRleCB2YWx1ZSAqLwp9CgoubW9kYWwgewogICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsKICAgIHBhZGRpbmc6IDIwcHg7CiAgICBib3JkZXItcmFkaXVzOiA1cHg7CiAgICBtYXgtd2lkdGg6IDQwMHB4OwogICAgd2lkdGg6IDEwMCU7CiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICB6LWluZGV4OiAxMDE7CiAgICAvKiBNYWtlIHN1cmUgaXQgaGFzIGEgaGlnaGVyIHotaW5kZXggdGhhbiB0aGUgb3ZlcmxheSAqLwp9CgovKiBBZGQgeW91ciBzdHlsaW5nIGhlcmUgKi8KLnRhYi1idXR0b25zIHsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICAvKm1hcmdpbjogMCAxNnB4OyAvKiBBZGQgbWFyZ2luIHRvIHRoZSBidXR0b25zICovCn0KCi50YWItYnV0dG9ucyBidXR0b24gewogICAgcGFkZGluZzogNXB4IDE2cHg7CiAgICAvKiBBZGp1c3QgcGFkZGluZyBmb3Igc21hbGxlciBidXR0b25zICovCiAgICBib3JkZXI6IG5vbmU7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2I3NDk4OwogICAgY3Vyc29yOiBwb2ludGVyOwogICAgbWFyZ2luLXJpZ2h0OiA4cHg7CiAgICAvKiBBZGQgbWFyZ2luIGJldHdlZW4gYnV0dG9ucyAqLwogICAgYm9yZGVyLXJhZGl1czogNHB4OwogICAgLyogQWRkIHJvdW5kZWQgY29ybmVycyAqLwp9CgoudGFiLWJ1dHRvbnMgYnV0dG9uLmFjdGl2ZSB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2RkN2UyOwogICAgY29sb3I6ICMzYjc0OTg7Cn0KCi8qIFN0eWxlIGZvciB0YWIgY29udGVudCAqLwpoMiB7CiAgICBjb2xvcjogIzAwN2JmZjsKfQoKLyogWW91ciBvdGhlciBzdHlsZXMgKi8KLnNwaW5uZXItbW9kYWwgewogICAgcG9zaXRpb246IGZpeGVkOwogICAgdG9wOiAwOwogICAgbGVmdDogMDsKICAgIHdpZHRoOiAxMDAlOwogICAgaGVpZ2h0OiAxMDAlOwogICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjUpOwogICAgLyogU2VtaS10cmFuc3BhcmVudCBibGFjayBiYWNrZ3JvdW5kIGZvciB0aGUgbW9kYWwgZWZmZWN0ICovCiAgICBkaXNwbGF5OiBmbGV4OwogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgei1pbmRleDogMTAwMDsKICAgIC8qIE1ha2Ugc3VyZSB0aGUgc3Bpbm5lciBpcyBvbiB0b3Agb2Ygb3RoZXIgZWxlbWVudHMgKi8KfQoKLnNwaW5uZXItY29udGVudCB7CiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7Cn0KCi5zcGlubmVyLWltYWdlIHsKICAgIHdpZHRoOiAxMDBweDsKICAgIC8qIEFkanVzdCB0aGUgc2l6ZSBvZiB5b3VyIHNwaW5uZXIgaW1hZ2UgKi8KICAgIGhlaWdodDogMTAwcHg7CiAgICBhbmltYXRpb246IHNwaW4gMnMgbGluZWFyIGluZmluaXRlOwogICAgLyogUm90YXRlIHRoZSBpbWFnZSBpbmRlZmluaXRlbHkgCiAgICAgICAgLyogWW91IGNhbiBhZGQgbW9yZSBzdHlsZXMgdG8gY3VzdG9taXplIHRoZSBhcHBlYXJhbmNlIG9mIHlvdXIgc3Bpbm5lciBpbWFnZSAqLwogICAgYm9yZGVyLXJhZGl1czogNTAlOwogICAgLyogTWFrZSB0aGUgaW1hZ2Ugcm91bmQgKi8KfQoKQGtleWZyYW1lcyBzcGluIHsKICAgIDAlIHsKICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTsKICAgIH0KCiAgICAxMDAlIHsKICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpOwogICAgfQp9CgoudGFnIHsKICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgIG1hcmdpbjogMC41cmVtOwogICAgcGFkZGluZzogMC4yNXJlbSAwLjVyZW07CiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjOwogICAgYm9yZGVyLXJhZGl1czogM3B4Owp9CgoudGFnIGJ1dHRvbiB7CiAgICBtYXJnaW4tbGVmdDogMC41cmVtOwogICAgYmFja2dyb3VuZDogbm9uZTsKICAgIGJvcmRlcjogbm9uZTsKICAgIGN1cnNvcjogcG9pbnRlcjsKICAgIGNvbG9yOiByZWQ7Cn0KCi8qIEFkZCB0aGlzIHN0eWxlIHRvIHBvc2l0aW9uIHRoZSBidXR0b25zIGF0IHRoZSBib3R0b20gKi8KLmZvcm0tcm93LWJvdHRvbSB7CiAgICBwb3NpdGlvbjogZml4ZWQ7CiAgICBib3R0b206IDUwcHg7CiAgICBtYXJnaW4tbGVmdDogMTAlOwogICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpOwp9CgouZm9ybS1jb2x1bW4tYm90dG9tIHsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47Cn0KCi5zdWJuZXQtc3VmZml4IHsKICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgIG1hcmdpbi1sZWZ0OiA1cHg7CiAgICAvKiBBZGp1c3QgbWFyZ2luIGFzIG5lZWRlZCBmb3Igc3BhY2luZyAqLwogICAgbWFyZ2luLXRvcDogMTBweDsKfQoKLmludmFsaWQtaXAgewogICAgY29sb3I6IHJlZDsKfQoKLmludmFsaWQtbWVzc2FnZSB7CiAgICBjb2xvcjogYmx1ZTsKfQo="},{"version":3,"sources":["create-natgateway.vue"],"names":[],"mappings":";AAifile":"create-natgateway.vue","sourceRoot":"pages","sourcesContent":["<template>\n    <div class=\"base\">\n        <h1>Create NAT Gateway</h1>\n        <!-- <p>This is page is for the creation of VNET</p> -->\n        <br />\n        <!-- Tab buttons -->\n        <div class=\"tab-buttons\">\n            <button @click=\"changeTab('tab1')\" :class=\"{ 'active': currentTab === 'tab1' }\">Basics</button>\n            <button @click=\"changeTab('tab2')\" :class=\"{ 'active': currentTab === 'tab2' }\">Outbound IP</button>\n            <button @click=\"changeTab('tab3')\" :class=\"{ 'active': currentTab === 'tab3' }\">Subnet</button>\n            <button @click=\"changeTab('tab4')\" :class=\"{ 'active': currentTab === 'tab4' }\">Review + Create</button>\n        </div>\n        <div class=\"form-container\">\n            <div class=\"form-row-2\">\n                <div class=\"form-column\">\n                    <!-- Tab content -->\n                    <div v-if=\"currentTab === 'tab1'\">\n                        <p>\n                            Nowcom NAT gateway can be used to translate outbound flows from a virtual network to the public\n                            internet.\n                        </p>\n                        <br />\n                        <h5 align=\"left\">NAT Gateway Name</h5>\n                        <input type=\"text\" v-model=\"selectedNatGatewayName\" placeholder=\"NAT Gateway\" required />\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-container\">\n                <div class=\"form-row-2\">\n                    <div v-if=\"currentTab === 'tab2'\">\n                        <!-- <h5 align=\"left\">Subnet</h5>   -->\n                        <p>\n                            Configure which public IP addresses and public IP prefixes to use. Each outbound IP address\n                            provides 64,000 SNAT ports for the NAT gateway resource to use. You can add up to 16 outbound IP\n                            addresses.\n                            <br /> <br />\n                            Note: While you do not have to complete this step to create a NAT gateway, the NAT gateway will\n                            not be functional and any subnet with this NAT gateway will not have outbound connectivity until\n                            you have added at least one public IP address or public IP prefix.\n                            You can also add and reconfigure which IP addresses are included after creating the NAT gateway.\n                        </p>\n                        <br />\n                        <div>\n                            <p>Public IP:</p>\n                            <select id=\"publicIp\" v-model=\"selectedPublicIp\">\n                                <option v-for=\"ip in publicIps\" :key=\"ip\" :value=\"ip\">{{ ip }}</option>\n                            </select>\n                        </div>\n                        <br />\n                        <div>\n                            <p>Corporate IP:</p>\n                            <select id=\"corporateIp\" v-model=\"selectedCorporateIp\">\n                                <option v-for=\"ip in corporateIps\" :key=\"ip\" :value=\"ip\">{{ ip }}</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-container\">\n                <div class=\"form-row-2\">\n                    <div class=\"form-column\">\n                        <div v-if=\"currentTab === 'tab3'\">\n                            <div>\n                                <p>To use the NAT gateway, at least one subnet must be selected. You can add and remove\n                                    subnets after creating the NAT gateway.</p>\n                            </div>\n                            <br />\n                            <div>\n                                <p>VNET:</p>\n                                <select id=\"vnet\" v-model=\"selectedVnet\">\n                                    <option v-for=\"vnet in vnets\" :key=\"vnet\" :value=\"vnet\">{{ vnet }}</option>\n                                </select>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"form-container\">\n                <div class=\"form-row-2\">\n                    <div class=\"form-column\">\n                        <div v-if=\"currentTab === 'tab4'\">\n                            <h2>Basics</h2>\n                            <p :style=\"{ color: selectedNatGatewayName ? '' : 'red' }\">\n                                Name : {{ selectedNatGatewayName || 'empty' }}\n                            </p>\n                            <br /><br /><br />\n                            <h2>Outbound IP</h2>\n                            <p :style=\"{ color: selectedPublicIp ? '' : 'red' }\">\n                                Public IP : {{ selectedPublicIp || 'empty' }}\n                            </p>\n                            <p :style=\"{ color: selectedCorporateIp ? '' : 'red' }\">\n                                Corporate IP : {{ selectedCorporateIp || 'empty' }}\n                            </p>\n                            <br /><br /><br />\n                            <h2>Subnet</h2>\n                            <p :style=\"{ color: selectedVnet ? '' : 'red' }\">\n                                VNET/Subnet : {{ selectedVnet || 'empty' }}\n                            </p>\n                            <br /><br /><br />\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <br />\n            <!-- Loading indicator -->\n            <div v-if=\"isLoading\" class=\"spinner-modal\">\n                <div class=\"spinner-content\">\n                    <!-- You can use an image or any other content for the spinner -->\n                    <img src=\"../assets/img/loading.png\" alt=\"Loading Spinner\" class=\"spinner-image\" />\n                </div>\n            </div>\n            <br /> <br /> <br />\n            <div class=\"form-row\">\n                <div class=\"form-column\">\n                    <!-- Display API response data -->\n                    <div v-if=\"apiResponse\">\n                        <h2 align=\"center\">\n                            {{ apiResponseMessage }}\n                        </h2>\n                        <pre v-if=\"!apiError\" align=\"center\"> Created VNET: {{ apiResponse.vnet_name }}</pre>\n                        <pre v-if=\"apiError\" align=\"center\">{{ apiError.error }} : {{ selectedNatGatewayName }}</pre>\n                    </div>\n                </div>\n            </div>\n            <!-- Dynamic rows for subnets -->\n            <div class=\"form-row-bottom\">\n                <div class=\"form-column-bottom\">\n                    <button class=\"custom-button\" :disabled=\"currentTab === 'tab1'\" @click=\"previousTab\">Previous</button>\n                    <button class=\"custom-button\" :disabled=\"currentTab === 'tab4'\" @click=\"nextTab\">Next</button>\n                    <!-- Conditionally render the button based on the current tab -->\n                    <button v-if=\"currentTab === 'tab4'\" class=\"custom-button\"\n                        :disabled=\"isLoading || !selectedNatGatewayName || !selectedPublicIp || hasInvalidIPAddress\"\n                        @click=\"createNetwork\">\n                        {{ currentTab === 'tab4' ? 'Create' : 'Review + Create' }}\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n<script>\nimport https from \"https\";\nimport axios from \"axios\";\nimport { NETWORK_URL, NETWORKS, NETWORK_URL_V2 } from \"../config/api.ts\";\n\nconst INSTANCE = axios.create({\n    baseURL: NETWORK_URL,\n    httpsAgent: new https.Agent({ rejectUnauthorized: false }), // Bypass certificate validation\n});\n\nconst INSTANCE_V2 = axios.create({\n    baseURL: NETWORK_URL_V2,\n    httpsAgent: new https.Agent({ rejectUnauthorized: false }), // Bypass certificate validation\n});\n\nconst PRODUCT_NAME = \"Network\";\nconst LIST_NETWORK = \"vnet\";\nconst BLANK_CLUSTER = \"_\";\n\nexport default {\n    name: \"CreateNatGateway\",\n    // layout: 'home',\n    data() {\n        return {\n            selectedNatGatewayName: \"\", // Dropdown for network name\n            publicIps: ['192.168.1.1', '192.168.1.2', '192.168.1.3'], // Example public IP addresses\n            corporateIps: ['10.0.0.1', '10.0.0.2', '10.0.0.3'], // Example corporate IP addresses\n            vnets: ['dev1', 'int0', 'prod'], // Example corporate IP addresses\n            isLoading: false,\n            apiResponse: null, // New data property to store the API response\n            apiResponseMessage: null, // New data property to store the API response\n            apiError: null,\n            apiResponseUpdate: \"\", //response for update\n            currentTab: \"tab1\", // Initial tab\n            newTag: \"\",\n            tags: [],\n            hasInvalidIPAddress: false,\n            selectedPublicIp: '',\n            selectedCorporateIp: '',\n            selectedVnet: ''\n        };\n    },\n    computed: {\n\n    },\n    watch: {\n\n    },\n    methods: {\n        addTag() {\n            const trimmedTag = this.newTag.trim();\n            if (trimmedTag) {\n                this.tags.push(trimmedTag);\n                this.newTag = \"\"; // Clear the input field after adding a tag\n            }\n        },\n        removeTag(index) {\n            this.tags.splice(index, 1);\n        },\n        showSpinner() {\n            this.isLoading = true;\n            // Hide the spinner after 5 seconds\n            setTimeout(() => {\n                this.hideSpinner();\n            }, 2000);\n        },\n        hideSpinner() {\n            this.isLoading = false;\n        },\n        routeListNetwork() {\n            this.$router.push(`/${PRODUCT_NAME}/c/${BLANK_CLUSTER}/${LIST_NETWORK}`); // Assuming '/create-network' is the route for the Create Network page\n        },\n        changeTab(tabName) {\n            this.currentTab = tabName;\n        },\n        previousTab() {\n            switch (this.currentTab) {\n                case \"tab2\":\n                    this.currentTab = \"tab1\";\n                    break;\n                case \"tab3\":\n                    this.currentTab = \"tab2\";\n                    break;\n                case \"tab4\":\n                    this.currentTab = \"tab3\";\n                    break;\n                // Add more cases for additional tabs if needed\n            }\n        },\n        nextTab() {\n            switch (this.currentTab) {\n                case \"tab1\":\n                    this.currentTab = \"tab2\";\n                    break;\n                case \"tab2\":\n                    this.currentTab = \"tab3\";\n                    break;\n                case \"tab3\":\n                    this.currentTab = \"tab4\";\n                    break;\n                // Add more cases for additional tabs if needed\n            }\n        },\n        createNetwork() {\n            // loading\n            this.isLoading = true;\n\n            const data = {\n                vnet_name: this.selectedNatGatewayName.toLowerCase(),\n            };\n            // const vnet_data_string = JSON.stringify(vnet_data);\n            console.log(\"send to API\", data);\n\n            INSTANCE_V2.post(`/vnets/`, data)\n                .then((response) => {\n                    // Handle the response here\n                    console.log(\"Network created:\", response.data);\n                    this.isLoading = false;\n                    // Set the API response data in the component\n                    this.apiResponse = response.data;\n                    console.log(\"response from create networks\", this.apiResponse);\n\n                    this.apiResponseMessage = \"VNET Successfully Added\";\n\n                    this.apiError = null; // Reset error state\n                    this.fetchNetworks();\n\n                    setTimeout(() => {\n                        this.routeListNetwork();\n                    }, 2000);\n                })\n                .catch((error) => {\n                    // Handle any errors here\n                    console.error(\"Error creating network:\", error);\n                    this.isLoading = false;\n                    this.apiResponseMessage = \"Error\";\n                    // Set the API error in the component\n                    this.apiError = \"Error creating VRF\";\n                    this.apiResponse = 1; // Reset response state\n                });\n        },\n\n        fetchNetworks() {\n            // Fetch the network list from your API\n            INSTANCE_V2.get(`/vnets/`)\n                .then((response) => {\n                    this.networks = response.data;\n                    console.log(\"from API\", this.networks);\n                })\n                .catch((error) => {\n                    console.error(\"Error fetching Network List:\", error);\n                });\n        },\n    },\n    mounted() {\n        // Fetch the VLAN list and network list when the component is mounted\n        this.fetchNetworks();\n        //this.fetchHarvesterNetworks();\n    },\n\n};\n</script>\n    \n<style scoped>\n.base {\n    margin-left: 10px;\n}\n\n.form-container {\n    text-align: left;\n}\n\n.form-row-3 {\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    grid-gap: 10px;\n    padding: 10px 0;\n    /* Add top and bottom padding */\n}\n\n.form-row-2 {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    grid-gap: 10px;\n    padding: 10px 0;\n    /* Add top and bottom padding */\n}\n\n.form-column {\n    flex: 1;\n}\n\n.input-container {\n    margin: 10px 0;\n    /* Add padding at the top and bottom for input/select */\n}\n\n.custom-button {\n    background-color: #3b7498;\n    color: #fff;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    margin-top: 10px;\n    margin-left: 5px;\n    width: 100px;\n    /* display: grid; */\n    justify-content: center;\n    align-items: center;\n    /* Add this line for vertical alignment if needed */\n}\n\n.row-button {\n    background-color: #4caf50;\n    color: #fff;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    text-align: left;\n}\n\n.custom-button:hover {\n    background-color: #0056b3;\n}\n\n.custom-button:disabled {\n    background-color: #cccccc;\n    /* Grey */\n    color: #666666;\n    /* Dark grey */\n    cursor: not-allowed;\n}\n\n.disable-hover:hover {\n    background-color: #007bff;\n    /* Change this to the non-hover background color */\n    cursor: not-allowed;\n}\n\n/* notif */\n/* Your existing style code */\n\n.notification {\n    position: fixed;\n    top: 10px;\n    right: 10px;\n    padding: 10px;\n    border-radius: 5px;\n    color: #fff;\n    font-weight: bold;\n}\n\n.success {\n    background-color: #4caf50;\n    /* Green */\n}\n\n.error {\n    background-color: #f44336;\n    /* Red */\n}\n\n/* Your CSS styles go here */\ntable {\n    width: 100%;\n    border-collapse: collapse;\n    margin-top: 10px;\n}\n\nth,\ntd {\n    border: 1px solid #ddd;\n    padding: 8px;\n    text-align: left;\n}\n\nth {\n    background-color: #007bff;\n}\n\n/* Modal styles */\n.modal-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 100;\n    /* Add a higher z-index value */\n}\n\n.modal {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 5px;\n    max-width: 400px;\n    width: 100%;\n    text-align: center;\n    z-index: 101;\n    /* Make sure it has a higher z-index than the overlay */\n}\n\n/* Add your styling here */\n.tab-buttons {\n    display: flex;\n    /*margin: 0 16px; /* Add margin to the buttons */\n}\n\n.tab-buttons button {\n    padding: 5px 16px;\n    /* Adjust padding for smaller buttons */\n    border: none;\n    background-color: #3b7498;\n    cursor: pointer;\n    margin-right: 8px;\n    /* Add margin between buttons */\n    border-radius: 4px;\n    /* Add rounded corners */\n}\n\n.tab-buttons button.active {\n    background-color: #cdd7e2;\n    color: #3b7498;\n}\n\n/* Style for tab content */\nh2 {\n    color: #007bff;\n}\n\n/* Your other styles */\n.spinner-modal {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.5);\n    /* Semi-transparent black background for the modal effect */\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 1000;\n    /* Make sure the spinner is on top of other elements */\n}\n\n.spinner-content {\n    text-align: center;\n}\n\n.spinner-image {\n    width: 100px;\n    /* Adjust the size of your spinner image */\n    height: 100px;\n    animation: spin 2s linear infinite;\n    /* Rotate the image indefinitely \n        /* You can add more styles to customize the appearance of your spinner image */\n    border-radius: 50%;\n    /* Make the image round */\n}\n\n@keyframes spin {\n    0% {\n        transform: rotate(0deg);\n    }\n\n    100% {\n        transform: rotate(360deg);\n    }\n}\n\n.tag {\n    display: inline-block;\n    margin: 0.5rem;\n    padding: 0.25rem 0.5rem;\n    border: 1px solid #ccc;\n    border-radius: 3px;\n}\n\n.tag button {\n    margin-left: 0.5rem;\n    background: none;\n    border: none;\n    cursor: pointer;\n    color: red;\n}\n\n/* Add this style to position the buttons at the bottom */\n.form-row-bottom {\n    position: fixed;\n    bottom: 50px;\n    margin-left: 10%;\n    transform: translateX(-50%);\n}\n\n.form-column-bottom {\n    display: flex;\n    justify-content: space-between;\n}\n\n.subnet-suffix {\n    display: inline-block;\n    margin-left: 5px;\n    /* Adjust margin as needed for spacing */\n    margin-top: 10px;\n}\n\n.invalid-ip {\n    color: red;\n}\n\n.invalid-message {\n    color: blue;\n}\n</style>"]}]}