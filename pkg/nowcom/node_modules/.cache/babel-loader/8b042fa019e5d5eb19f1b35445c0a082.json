{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/thread-loader/dist/cjs.js!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js??ref--2-0!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/pkg/nowcom/pages/list-natgateway.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/pkg/nowcom/pages/list-natgateway.vue","mtime":1716430386795},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/pkg/nowcom/babel.config.js","mtime":1716430386791},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/thread-loader/dist/cjs.js","mtime":1716430465967},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["UniversalTable","cButton","SideBar","GroupButtons","Modal","NAT_BUTTONS","VNET_HEADERS","SUB_VNET_HEADERS","natService","PRODUCT_NAME","LIST_NAT_GATEWAY","CREATE_NAT_GATEWAY","BLANK_CLUSTER","name","components","data","selectedName","selectedVnetName","selectedSubnetName","selectedVnetSubnets","networks","loading","isModalOpen","apiResponse","subnetResponse","isModalSubnetOpen","vnet_name","subnet_name","subnet_id","selectedNetwork","sidebarVisible","addSubnetSidebarVisible","apiError","apiResponseMessage","network","users","age","email","address","street","city","state","filters","value","keys","currentPage","totalPages","natGatewayButtons","vnetHeaders","subVnetHeaders","computed","isAddSubnetDisabled","methods","actionHandler","action","routeCreateNetwork","fetchNetworks","addSubnet","subnet_data","toLowerCase","vnet","id","console","log","response","createSubnet","newSubnetFromResponse","subnets","push","subnetResponseMessage","error","alert","detail","addSubnetSidebar","closeSubnetSidebar","openSidebar","item","closeSidebar","$router","openModal","row","vnetId","vnetName","selectedVnetId","closeModal","openModalSubnet","vnet_id","closeModalSubnet","getAllVnets","map","attachments","subnetLength","length","deleteNetwork","message","getlAllSubnets","subnetId","getAllSubnets","deleteSubnet","deleteSubNet","created","mounted"],"sources":["pages/list-natgateway.vue"],"sourcesContent":["<template>\n    <div class=\"base\">\n        <h1>NAT Gateway</h1>\n        <!-- Notification container -->\n        <div class=\"message-row\">\n            <div class=\"message-column\"></div>\n            <div class=\"message-column\">\n                <!-- Display API response data -->\n                <div v-if=\"apiResponse\">\n                    <h2 align=\"center\">{{ apiResponseMessage }}</h2>\n                    <pre align=\"center\" v-if=\"!apiError\">Deleted VNET: {{ apiResponse.vnet_name }}</pre>\n                    <pre align=\"center\" v-if=\"apiError\">{{ apiError.error }} : {{ selectedName }}</pre>\n                </div>\n            </div>\n        </div>\n        <GroupButtons :list=\"natGatewayButtons\" @action=\"actionHandler\"/>\n        <div class=\"form-row mt-10\">\n            <div class=\"form-column\">\n                <UniversalTable :headers=\"vnetHeaders\" :filters=\"filters\" :items=\"networks\" @action-click=\"openModal\" />\n            </div>\n        </div>\n\n        <SideBar type=\"main\" :sidebar-visible=\"sidebarVisible\">\n            <h2>{{ selectedNetwork ? selectedNetwork.vnet_name : 'No Network Selected' }}</h2>\n            <div class=\"form-row\">\n                <div class=\"form-column\" align=\"left\">\n                    <cButton class=\"custom-button\" @click=\"addSubnetSidebar\">\n                        <i class=\"fa fa-plus\"></i> Add Subnet\n                    </cButton>\n                </div>\n            </div>\n            <UniversalTable v-if=\"selectedNetwork\" :headers=\"subVnetHeaders\" :items=\"selectedNetwork.subnets\" @action-click=\"openModalSubnet\" />\n            <UniversalTable v-if=\"selectedNetwork\" :headers=\"subnetworkHeader\" :items=\"selectedNetwork.subnets\" @action-click=\"openModalSubnet\" />\n            </br>\n            <div v-if=\"subnetResponse\">\n                <h2 align=\"center\">{{ subnetResponseMessage }}</h2>\n                <pre align=\"center\" v-if=\"!apiError\">SUBNET: {{ subnet_name }}</pre>\n                <pre align=\"center\" v-if=\"apiError\">{{ apiError.error }} : {{ selectedName }}</pre>\n            </div>\n\n            <cButton class=\"btn-x\" @click=\"closeSidebar\">\n                <i class=\"x-icon fa fa-close fa-lg\"></i>\n            </cButton>\n        </SideBar>\n\n        <SideBar type=\"sub\" :sidebar-visible=\"addSubnetSidebarVisible\">\n            <h2>Add Subnet</h2>\n            <!-- ... your content for adding subnet -->\n            <div class=\"add-form-row\">\n                <input v-model=\"selectedSubnetName\" type=\"text\" placeholder=\"Subnet Name\" title=\"Subnet Name\" />\n            </div>\n            <div class=\"add-form-row\">\n                <input\n                v-model=\"selectedVnetSubnets\"\n                type=\"text\"\n                placeholder=\"Enter subnet (e.g., 10.0.0.0)\"\n                pattern=\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\"\n                title=\"Please enter a valid IP address\"\n                />\n            </div>\n            <div class=\"add-form-row\">\n                <cButton class=\"cbtn btn-light\" :disabled=\"isAddSubnetDisabled\" @click=\"addSubnet\">\n                    <i class=\"fa fa-plus fa-lg mr-5\"></i> Add Subnet\n                </cButton> \n            </div>\n\n            <cButton class=\"btn-x\" @click=\"closeSubnetSidebar\">\n                <i class=\"x-icon fa fa-close fa-lg\"></i>\n            </cButton>\n        </SideBar>\n\n        <Modal v-if=\"isModalOpen\">\n            <template v-slot:content>\n                <h2>Delete?</h2>\n                <p>Are you sure that you want to delete VLAN \"{{ selectedVnetName }}\"?</p>\n            </template>\n\n            <template v-slot:footer>\n                <cButton class=\"delete-button\" @click=\"deleteNetwork\" label=\"Yes\" />\n                <cButton class=\"ok-button\" @click=\"closeModal\" label=\"No\" />\n            </template>\n        </Modal>\n\n        <Modal v-if=\"isModalSubnetOpen\">\n            <template v-slot:content>\n                <h2>Are you sure that you want to delete:</h2>\n                <p>Subnet \"{{ subnet_name }}\" under VNET \"{{ vnet_name }}\"?</p>\n            </template>\n\n            <template v-slot:footer>\n                <cButton class=\"delete-button\" @click=\"deleteSubnet\" label=\"Yes\" />\n                <cButton class=\"ok-button\" @click=\"closeModalSubnet\" label=\"No\" />\n            </template>\n        </Modal>\n    </div>\n</template>\n\n<script>\nimport UniversalTable from '../components/UniversalTable'\nimport cButton from '../components/common/Button'\nimport SideBar from '../components/Sidebar'\nimport GroupButtons from '../components/common/GroupButtons'\nimport Modal from '../components/common/Modal'\nimport { NAT_BUTTONS } from '../config/buttons'\nimport { VNET_HEADERS, SUB_VNET_HEADERS } from '../config/table'\nimport { natService } from '../services/api/nat';\n\nconst PRODUCT_NAME = \"Network\";\nconst LIST_NAT_GATEWAY = \"nat.gateway\";\nconst CREATE_NAT_GATEWAY = \"create.nat.gateway\";\nconst BLANK_CLUSTER = \"_\";\n\nexport default {\n    name: \"ListNatGateway\",\n    components: {\n        UniversalTable,\n        cButton,\n        SideBar,\n        GroupButtons,\n        Modal\n    },\n    // layout: 'home',\n    data() {\n        return {\n            selectedName: \"\", // Dropdown for network name\n            selectedVnetName: \"\",\n            selectedSubnetName: \"\",\n            selectedVnetSubnets: \"10.55.0.0\",\n            networks: [], // This will be populated with data from the API\n            loading: false,\n            isModalOpen: false,\n            apiResponse: null,\n            subnetResponse: null,\n            isModalSubnetOpen: false,\n            vnet_name: \"\",\n            subnet_name: \"\",\n            subnet_id: \"\",\n            selectedNetwork: null,\n            sidebarVisible: false,\n            addSubnetSidebarVisible: false,\n            apiError: null,\n            apiResponseMessage: \"\",\n            network: [],\n            users: [\n                {\n                    name: \"francis\",\n                    age: 17,\n                    email: \"fvictoriano@nowcom.com\",\n                    address: {\n                        street: \"1152 S Ardmore\",\n                        city: \"Los Angeles\",\n                        state: \"California\"\n                    }\n                },\n                {\n                    name: \"Andy\",\n                    age: 17,\n                    email: \"andy@nowcom.com\",\n                    address: {\n                        street: \"1152 S Ardmore\",\n                        city: \"Los Angeles\",\n                        state: \"California\"\n                    }\n                },\n                {\n                    name: \"george\",\n                    age: 17,\n                    email: \"george@nowcom.com\",\n                    address: {\n                        street: \"1152 S Ardmore\",\n                        city: \"Los Angeles\",\n                        state: \"California\"\n                    }\n                },\n                {\n                    name: \"kate\",\n                    age: 17,\n                    email: \"kate@nowcom.com\",\n                    address: {\n                        street: \"1152 S Ardmore\",\n                        city: \"Los Angeles\",\n                        state: \"California\"\n                    }\n                },\n                {\n                    name: \"carlo\",\n                    age: 17,\n                    email: \"carlo@nowcom.com\",\n                    address: {\n                        street: \"1152 S Ardmore\",\n                        city: \"Los Angeles\",\n                        state: \"California\"\n                    }\n                },\n                {\n                    name: \"mohenne\",\n                    age: 17,\n                    email: \"mohenne@nowcom.com\",\n                    address: {\n                        street: \"1152 S Ardmore\",\n                        city: \"Los Angeles\",\n                        state: \"California\"\n                    }\n                }\n\n            ],\n            filters: {\n                name: { value: '', keys: ['vnet_name'] }\n            },\n            currentPage: 1,\n            totalPages: 0,\n            natGatewayButtons: [],\n            vnetHeaders: [],\n            subVnetHeaders: []\n        };\n    },\n    computed: {\n        isAddSubnetDisabled() {\n            // Check conditions to disable the button\n            return !this.selectedSubnetName || !this.selectedVnetSubnets;\n        },\n    },\n    methods: {\n        actionHandler (action) {\n            if (action === 'create') {\n                this.routeCreateNetwork()\n            } else if (action === 'refresh') {\n                this.fetchNetworks()\n            }\n        },\n        async addSubnet() {\n            //v0.2\n            const subnet_data = {\n                subnet_name: this.selectedSubnetName.toLowerCase(),\n                network: this.selectedVnetSubnets,\n            };\n\n            let vnet = this.selectedNetwork.id\n\n            console.log(\"send to API\", subnet_data);\n            console.log(\"log\", this.selectedNetwork);\n\n            try {\n                const response = await natService.createSubnet(vnet, subnet_data);\n                console.log(\"Subnet Network created:\", response.data);\n                this.loading = false;\n\n                //use results from response\n                let newSubnetFromResponse = response.data;\n                this.subnet_name = response.data.subnet_name;\n                this.fetchNetworks();\n                this.selectedNetwork.subnets.push(newSubnetFromResponse);\n\n                // Set the API response data in the component\n                this.subnetResponse = response.data;\n                this.apiError = null; // Reset error state\n                this.subnetResponseMessage = \"Subnet Added Successfully\";\n\n                this.addSubnetSidebarVisible = false;\n            } catch (error) {\n                console.log(error.response)\n                this.loading = false;\n                alert(error.response.data.detail)\n                this.subnetResponseMessage = \"Error\";\n                // Set the API error in the component\n                this.apiError = \"Error creating Subnet\";\n            }\n        },\n        addSubnetSidebar() {\n            this.selectedSubnetName = null;\n            this.addSubnetSidebarVisible = true;\n        },\n        closeSubnetSidebar() {\n            this.addSubnetSidebarVisible = false;\n        },\n        async openSidebar(item) {\n            // Update the item with the fetched data\n            this.subnetResponse = false;\n            this.selectedNetwork = item;\n            this.sidebarVisible = true;\n        },\n        closeSidebar() {\n            this.selectedNetwork = null;\n            this.sidebarVisible = false;\n        },\n        // Method to route to the Create Network page\n        routeCreateNetwork() {\n            this.$router.push(`/${PRODUCT_NAME}/c/${BLANK_CLUSTER}/${CREATE_NAT_GATEWAY}`); // Assuming '/create-network' is the route for the Create Network page\n        },\n        openModal(row) {\n            const { vnetId, vnetName } = row;\n            // Set the selected VLAN name\n            this.selectedVnetId = vnetId;\n            this.selectedVnetName = vnetName;\n            this.subnetResponse = false;\n            // Open the modal\n            this.isModalOpen = true;\n        },\n        closeModal() {\n            this.isModalOpen = false;\n        },\n\n        openModalSubnet(row) {\n            // Set the selected VLAN name\n            const { subnet_name, id } = row\n             \n            this.vnet_id = this.selectedNetwork.id;\n            this.vnet_name = this.selectedNetwork.vnet_name;\n            this.subnet_name = subnet_name;\n            this.subnet_id = id;\n\n            // Open the modal\n            this.isModalSubnetOpen = true;\n        },\n\n        closeModalSubnet() {\n            this.isModalSubnetOpen = false;\n        },\n\n        async fetchNetworks() {\n            try {\n                const networks = await natService.getAllVnets()\n                this.networks = networks.map((network) => {\n                    return {\n                        ...network,\n                        attachments: 'local',\n                        subnetLength: \"Total Subnet: \" + network.subnets.length\n                    }\n                })\n            } catch (error) {\n                console.error(\"Error fetching Network List:\", error);\n            }\n        },\n        async deleteNetwork() {\n            console.log(`Delete Network Endpoint, ${this.selectedVnetName},${this.selectedVnetId} `);\n            try {\n                const response = await natService.deleteNetwork(this.selectedVnetId);\n                this.loading = false;\n                this.apiResponse = response.data;\n                // Set the API response data in the component\n                this.apiResponseMessage = \"VNET Successfully Deleted\";\n                this.apiError = null; // Reset error state\n                //this.fetchHarvesterNetworks();\n                this.fetchNetworks();\n\n                // Close the modal after deletion\n                this.closeModal();\n            } catch (error) {\n                console.error(\"Error deleting network:\", error);\n                this.loading = false;\n                this.apiResponseMessage = \"Error\";\n                // Set the API error in the component\n                this.apiError = error.response ? error.response.data : error.message;\n                this.apiResponse = 1; // Reset response state\n            }\n        },\n\n        async getlAllSubnets (subnetId) {\n            try {\n                const response = await natService.getAllSubnets(subnetId);\n                this.selectedNetwork.subnets = response.data;\n            } catch (error) {\n                this.subnetResponseMessage = \"Error\";\n            }\n        },\n\n        async deleteSubnet() {\n            console.log(\n                `Delete Subnet Endpoint, ${this.vnet_id}, ${this.vnet_name}, ${this.subnet_name}, ${this.subnet_id}`\n            );\n            // Make an Axios DELETE request to delete the network with the selected VLAN name\n\n            try {\n                const response = await natService.deleteSubNet(this.subnet_id);\n                console.log(\"Network deleted:\", response.data);\n                this.loading = false;\n\n                this.subnetResponse = response.data;\n                // Set the API response data in the component\n                this.subnetResponseMessage = \"Subnet Successfully Deleted\";\n                this.apiError = null; // Reset error state\n\n                //call of subnets\n                await this.getlAllSubnets();\n                // Update the selectedNetwork with the selected vnet_name\n                this.selectedNetwork.vnet_name = this.vnet_name;\n                console.log(\"Selected Network:\", this.selectedNetwork);\n                // Close the modal after deletion\n                this.closeModalSubnet();\n            } catch (error) {\n                // Handle any errors here\n                console.error(\"Error deleting network:\", error);\n                this.loading = false;\n                this.subnetResponseMessage = \"Error\";\n                // Set the API error in the component\n                this.apiError = error.response ? error.response.data : error.message;\n                this.subnetResponse = 1; // Reset response state\n            }\n        },\n    },\n    created() {\n        this.natGatewayButtons = NAT_BUTTONS;\n        this.vnetHeaders = VNET_HEADERS;\n        this.subVnetHeaders = SUB_VNET_HEADERS;\n    },\n    mounted() {\n        // Fetch the VLAN list and network list when the component is mounted\n        this.fetchNetworks();\n        //this.fetchHarvesterNetworks();\n    },\n};\n</script>\n  \n<style scoped>\n</style>\n  "],"mappings":"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"}]}