{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/thread-loader/dist/cjs.js!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/mixins/resource-fetch.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/mixins/resource-fetch.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/pkg/nowcom/babel.config.js","mtime":1716430386791},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/thread-loader/dist/cjs.js","mtime":1716430465967},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["mapGetters","COUNT","MANAGEMENT","SETTING","DEFAULT_PERF_SETTING","ResourceFetchNamespaced","PAGES","mixins","data","perfSetting","$store","getters","UI_PERFORMANCE","perfConfig","value","JSON","parse","e","console","warn","init","multipleResources","loadResources","resource","hasManualRefresh","watch","isTooManyItemsToAutoUpdate","force","incremental","fetchedResourceType","beforeDestroy","dispatch","forEach","item","currStore","type","computed","refreshFlag","rows","currResource","find","loading","length","$fetchState","pending","neu","$fetch","methods","$initializeFetchData","storeType","__gatherResourceFetchData","$fetchType","_schema$attributes","push","resourceCount","__getCountForResources","namespaceFilter","Math","ceil","opt","schema","attributes","namespaced","resourceNames","namespace","reduce","res","__getCountForResource","resourceName","_this$$store$getters$","_resourceCounts$names","_resourceCounts$summa","resourceCounts","counts","namespaces","count","summary","_this$perfConfig","_this$perfConfig2","_this$perfConfig3","_this$perfConfig4","manualDataRefreshEnabled","manualRefresh","enabled","manualDataRefreshThreshold","parseInt","threshold","incrementalLoadingEnabled","incrementalLoading","incrementalLoadingThreshold","resourcesForCount"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/mixins/resource-fetch.js"],"sourcesContent":["import { mapGetters } from 'vuex';\nimport { COUNT, MANAGEMENT } from '@shell/config/types';\nimport { SETTING, DEFAULT_PERF_SETTING } from '@shell/config/settings';\nimport ResourceFetchNamespaced from '@shell/mixins/resource-fetch-namespaced';\n\n// Number of pages to fetch when loading incrementally\nconst PAGES = 4;\n\nexport default {\n\n  mixins: [ResourceFetchNamespaced],\n\n  data() {\n    // fetching the settings related to manual refresh from global settings\n    const perfSetting = this.$store.getters['management/byId'](MANAGEMENT.SETTING, SETTING.UI_PERFORMANCE);\n    let perfConfig = {};\n\n    if (perfSetting && perfSetting.value) {\n      try {\n        perfConfig = JSON.parse(perfSetting.value);\n      } catch (e) {\n        console.warn('ui-performance setting contains invalid data'); // eslint-disable-line no-console\n      }\n    } else {\n      perfConfig = DEFAULT_PERF_SETTING;\n    }\n\n    return {\n      perfConfig,\n      init:                       false,\n      multipleResources:          [],\n      loadResources:              [this.resource],\n      // manual refresh vars\n      hasManualRefresh:           false,\n      watch:                      true,\n      isTooManyItemsToAutoUpdate: false,\n      force:                      false,\n      // incremental loading vars\n      incremental:                false,\n      fetchedResourceType:        [],\n    };\n  },\n  beforeDestroy() {\n    // make sure this only runs once, for the initialized instance\n    if (this.init) {\n      // clear up the store to make sure we aren't storing anything that might interfere with the next rendered list view\n      this.$store.dispatch('resource-fetch/clearData');\n\n      this.fetchedResourceType.forEach((item) => {\n        this.$store.dispatch(`${ item.currStore }/incrementLoadCounter`, item.type);\n      });\n    }\n  },\n\n  computed: {\n    ...mapGetters({ refreshFlag: 'resource-fetch/refreshFlag' }),\n    rows() {\n      const currResource = this.fetchedResourceType.find((item) => item.type === this.resource);\n\n      if (currResource) {\n        return this.$store.getters[`${ currResource.currStore }/all`](this.resource);\n      } else {\n        return [];\n      }\n    },\n    loading() {\n      return this.rows.length ? false : this.$fetchState.pending;\n    },\n  },\n  watch: {\n    refreshFlag(neu) {\n      // this is where the data assignment will trigger the update of the list view...\n      if (this.init && neu) {\n        this.$fetch();\n      }\n    }\n  },\n  methods: {\n    // this defines all the flags needed for the mechanism\n    // to work. They should be defined based on the main list view\n    // resource that is to be displayed. The secondary resources\n    // fetched should follow what was defined (if it is manual and/or incremental)\n    $initializeFetchData(type, multipleResources = [], storeType) {\n      if (!this.init) {\n        const currStore = storeType || this.$store.getters['currentStore']();\n\n        this.__gatherResourceFetchData(type, multipleResources, currStore);\n\n        // make sure after init that, if we have a manual refresh, we always set the force = true\n        if (!this.watch) {\n          this.force = true;\n        }\n\n        if (this.isTooManyItemsToAutoUpdate) {\n          this.hasManualRefresh = true;\n        }\n      }\n    },\n    // data fetching for the mechanism\n    $fetchType(type, multipleResources = [], storeType) {\n      const currStore = storeType || this.$store.getters['currentStore']();\n\n      this.$initializeFetchData(type, multipleResources, currStore);\n\n      if (!this.fetchedResourceType.find((item) => item.type === type)) {\n        this.fetchedResourceType.push({\n          type,\n          currStore\n        });\n      }\n\n      let incremental = 0;\n\n      if (this.incremental) {\n        const resourceCount = this.__getCountForResources([type], this.namespaceFilter, currStore);\n\n        incremental = Math.ceil(resourceCount / PAGES);\n      }\n\n      const opt = {\n        incremental,\n        watch:            this.watch,\n        force:            this.force,\n        hasManualRefresh: this.hasManualRefresh\n      };\n\n      const schema = this.$store.getters[`${ currStore }/schemaFor`](type);\n\n      if (schema?.attributes?.namespaced) { // Is this specific resource namespaced (could be primary or secondary resource)?\n        opt.namespaced = this.namespaceFilter; // namespaceFilter will only be populated if applicable for primary resource\n      }\n\n      return this.$store.dispatch(`${ currStore }/findAll`, {\n        type,\n        opt\n      });\n    },\n\n    __getCountForResources(resourceNames, namespace, storeType) {\n      const currStore = storeType || this.$store.getters['currentStore']();\n\n      return resourceNames.reduce((res, type) => res + this.__getCountForResource(type, namespace, currStore), 0);\n    },\n\n    __getCountForResource(resourceName, namespace, storeType) {\n      const resourceCounts = this.$store.getters[`${ storeType }/all`](COUNT)[0]?.counts[`${ resourceName }`]; // NB `rancher` store behaves differently, lacks counts but has resource\n      const resourceCount = namespace && resourceCounts?.namespaces ? resourceCounts?.namespaces[namespace]?.count : resourceCounts?.summary?.count;\n\n      return resourceCount || 0;\n    },\n\n    __gatherResourceFetchData(resourceName, multipleResources, currStore) {\n      // flag to prevent a first data update being triggered from the requestData watcher\n      this.init = true;\n\n      // manual refresh settings config\n      const manualDataRefreshEnabled = this.perfConfig?.manualRefresh?.enabled;\n      const manualDataRefreshThreshold = parseInt(this.perfConfig?.manualRefresh?.threshold || '0', 10);\n\n      // incremental loading settings config\n      const incrementalLoadingEnabled = this.perfConfig?.incrementalLoading?.enabled;\n      const incrementalLoadingThreshold = parseInt(this.perfConfig?.incrementalLoading?.threshold || '0', 10);\n\n      // other vars\n      this.multipleResources = multipleResources;\n      let resourceCount = 0;\n\n      // manual refresh vars\n      let watch = true;\n      let isTooManyItemsToAutoUpdate = false;\n\n      // incremental loading vars\n      let incremental = false;\n\n      // get resource counts\n      const resourcesForCount = this.multipleResources.length ? this.multipleResources : [resourceName];\n\n      resourceCount = this.__getCountForResources(resourcesForCount, this.namespaceFilter, currStore);\n\n      // manual refresh check\n      if (manualDataRefreshEnabled && resourceCount >= manualDataRefreshThreshold) {\n        watch = false;\n        isTooManyItemsToAutoUpdate = true;\n      }\n\n      // incremental loading check\n      incremental = incrementalLoadingEnabled && incrementalLoadingThreshold > 0 && resourceCount >= incrementalLoadingThreshold;\n\n      // pass on the flag that controls the appearance of the manual refresh button on the sortable table\n      this.$store.dispatch('resource-fetch/updateIsTooManyItems', isTooManyItemsToAutoUpdate);\n\n      // set vars on mixin to be used on $fetchType\n      this.watch = watch;\n      this.isTooManyItemsToAutoUpdate = isTooManyItemsToAutoUpdate;\n      this.incremental = incremental;\n    },\n  },\n};\n"],"mappings":"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"}]}