{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/thread-loader/dist/cjs.js!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/plugins/dashboard-store/actions.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/plugins/dashboard-store/actions.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/pkg/nowcom/babel.config.js","mtime":1716430386791},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/thread-loader/dist/cjs.js","mtime":1716430465967},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["merge","SCHEMA","SPOOFED_API_PREFIX","SPOOFED_PREFIX","createYaml","classify","normalizeType","garbageCollect","addSchemaIndexFields","_ALL","_MERGE","_MULTI","_ALL_IF_AUTHED","_NONE","SCHEMA_CHECK_RETRIES","SCHEMA_CHECK_RETRY_LOG","handleSpoofedRequest","rootGetters","schemaStore","opt","product","url","includes","empty","scheme","type","rest","split","id","join","isApi","typemapGetter","schemas","instance","data","loadSchemas","ctx","watch","getters","dispatch","commit","res","load","spoofedTypes","Array","isArray","concat","forEach","revision","all","request","Error","loadDataPage","typeRegistered","loadCount","_res$pagination","newLoadCount","pagination","next","_res$pagination2","hasManualRefresh","root","namespaced","namespace","e","Promise","reject","findAll","force","args","watchNamespace","undefined","header","typeOptions","console","log","state","config","urlFor","stream","depaginate","skipHaveAll","incremental","pageFetchOpts","streamStarted","out","queue","streamCollection","onData","push","length","tmp","finishDeferred","existing","forceWatch","gcUpdateLastAccessed","findMatching","selector","matching","filter","entries","find","error","byId","_res$metadata","watchMsg","metadata","resourceVersion","idx","indexOf","substr","baseType","keyField","keyFieldForType","warn","loadMulti","batchChanges","batch","loadAll","create","createMany","map","d","createPopulated","userData","clone","resource","toJSON","forgetType","started","entry","promptRemove","resources","promptModal","resourceAction","actionName","body","collectionAction","cleanForNew","createNamespace","cleanForDiff","cleanForDetail","cleanForDownload","waitForSchema","tries","schema","resolve","setTimeout","incrementLoadCounter","ignoreTypes","gcResetStore"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/plugins/dashboard-store/actions.js"],"sourcesContent":["import merge from 'lodash/merge';\n\nimport { SCHEMA } from '@shell/config/types';\nimport { SPOOFED_API_PREFIX, SPOOFED_PREFIX } from '@shell/store/type-map';\nimport { createYaml } from '@shell/utils/create-yaml';\nimport { classify } from '@shell/plugins/dashboard-store/classify';\nimport { normalizeType } from './normalize';\nimport garbageCollect from '@shell/utils/gc/gc';\nimport { addSchemaIndexFields } from '@shell/plugins/steve/schema.utils';\n\nexport const _ALL = 'all';\nexport const _MERGE = 'merge';\nexport const _MULTI = 'multi';\nexport const _ALL_IF_AUTHED = 'allIfAuthed';\nexport const _NONE = 'none';\n\nconst SCHEMA_CHECK_RETRIES = 15;\nconst SCHEMA_CHECK_RETRY_LOG = 10;\n\nexport async function handleSpoofedRequest(rootGetters, schemaStore, opt, product) {\n  // Handle spoofed types instead of making an actual request\n  // Spoofing is handled here to ensure it's done for both yaml and form editing.\n  // It became apparent that this was the only place that both intersected\n  if (opt.url.includes(SPOOFED_PREFIX) || opt.url.includes(SPOOFED_API_PREFIX)) {\n    const [empty, scheme, type, ...rest] = opt.url.split('/'); // eslint-disable-line no-unused-vars\n    const id = rest.join('/'); // Cover case where id contains '/'\n    const isApi = scheme === SPOOFED_API_PREFIX;\n    const typemapGetter = id ? 'getSpoofedInstance' : 'getSpoofedInstances';\n\n    const schemas = rootGetters[`${ schemaStore }/all`](SCHEMA);\n    // getters return async getSpoofedInstance/getSpoofedInstances fn\n    const instance = await rootGetters[`type-map/${ typemapGetter }`](type, product, id);\n    const data = isApi ? createYaml(schemas, type, instance) : instance;\n\n    return id && !isApi ? data : { data };\n  }\n}\n\nexport async function loadSchemas(ctx, watch = true) {\n  const {\n    getters, dispatch, commit, rootGetters\n  } = ctx;\n  const res = await dispatch('findAll', { type: SCHEMA, opt: { url: 'schemas', load: false } });\n  const spoofedTypes = rootGetters['type-map/allSpoofedSchemas'] ;\n\n  if (Array.isArray(res.data)) {\n    res.data = res.data.concat(spoofedTypes);\n  } else if (Array.isArray(res)) {\n    res.data = res.concat(spoofedTypes);\n  }\n\n  res.data.forEach(addSchemaIndexFields);\n\n  commit('loadAll', {\n    ctx,\n    type:     SCHEMA,\n    data:     res.data,\n    revision: res.revision\n  });\n\n  if ( watch !== false ) {\n    dispatch('watch', {\n      type:     SCHEMA,\n      revision: res.revision\n    });\n  }\n\n  const all = getters.all(SCHEMA);\n\n  return all;\n}\n\nexport default {\n  request() {\n    throw new Error('Not Implemented');\n  },\n\n  loadSchemas,\n\n  // Load a page of data for a given type\n  // Used for incremental loading when enabled\n  async loadDataPage(ctx, { type, opt }) {\n    const { getters, commit, dispatch } = ctx;\n\n    type = getters.normalizeType(type);\n\n    // if there's no registered type, then register it so\n    // that we don't have issues on 'loadAdd' mutation\n    if ( !getters.typeRegistered(type) ) {\n      commit('registerType', type);\n    }\n\n    const loadCount = getters['loadCounter'](type);\n\n    try {\n      const res = await dispatch('request', { opt, type });\n\n      const newLoadCount = getters['loadCounter'](type);\n\n      // Load count changed, so we changed page or started a new load\n      // after this page load was started, so don't continue with incremental load\n      if (loadCount !== newLoadCount) {\n        return;\n      }\n\n      commit('loadAdd', {\n        ctx,\n        type,\n        data: res.data,\n      });\n\n      if (res.pagination?.next) {\n        dispatch('loadDataPage', {\n          type,\n          opt: {\n            ...opt,\n            url: res.pagination?.next\n          }\n        });\n      } else {\n      // We have everything!\n        if (opt.hasManualRefresh) {\n          dispatch('resource-fetch/updateManualRefreshIsLoading', false, { root: true });\n        }\n        if (opt.namespaced) {\n          commit('setHaveNamespace', { type, namespace: opt.namespaced });\n        } else {\n          commit('setHaveAll', { type });\n        }\n      }\n    } catch (e) {\n      if (opt.hasManualRefresh) {\n        dispatch('resource-fetch/updateManualRefreshIsLoading', false, { root: true });\n      }\n\n      return Promise.reject(e);\n    }\n  },\n\n  async findAll(ctx, { type, opt }) {\n    const {\n      getters, commit, dispatch, rootGetters\n    } = ctx;\n\n    opt = opt || {};\n    type = getters.normalizeType(type);\n\n    if ( !getters.typeRegistered(type) ) {\n      commit('registerType', type);\n    }\n\n    // No need to request the resources if we have them already\n    if ( opt.force !== true && (getters['haveAll'](type) || getters['haveAllNamespace'](type, opt.namespaced))) {\n      const args = {\n        type,\n        revision:  '',\n        // watchNamespace - used sometimes when we haven't fetched the results of a single namespace\n        // namespaced - used when we have fetched the result of a single namespace (see https://github.com/rancher/dashboard/pull/7329/files)\n        namespace: opt.watchNamespace || opt.namespaced\n      };\n\n      if (opt.watch !== false ) {\n        dispatch('watch', args);\n      }\n\n      return getters.all(type);\n    }\n\n    let load = (opt.load === undefined ? _ALL : opt.load);\n\n    if ( opt.load === false || opt.load === _NONE ) {\n      load = _NONE;\n    } else if ( opt.load === _ALL_IF_AUTHED ) {\n      const header = rootGetters['auth/fromHeader'];\n\n      if ( `${ header }` === 'true' || `${ header }` === 'none' ) {\n        load = _ALL;\n      } else {\n        load = _MULTI;\n      }\n    }\n\n    const typeOptions = rootGetters['type-map/optionsFor'](type);\n\n    console.log(`Find All: [${ ctx.state.config.namespace }] ${ type }`); // eslint-disable-line no-console\n    opt = opt || {};\n    opt.url = getters.urlFor(type, null, opt);\n    opt.stream = opt.stream !== false && load !== _NONE;\n    opt.depaginate = typeOptions?.depaginate;\n\n    let skipHaveAll = false;\n\n    // if it's incremental loading, we do two parallel requests\n    // on for a limit of 100, to quickly show data\n    // another one with 1st page of the subset of the resource we are fetching\n    // the default is 4 pages, but it can be changed on mixin/resource-fetch.js\n    if (opt.incremental) {\n      commit('incrementLoadCounter', type);\n\n      if (opt.hasManualRefresh) {\n        dispatch('resource-fetch/updateManualRefreshIsLoading', true, { root: true });\n      }\n\n      const pageFetchOpts = {\n        ...opt,\n        url: `${ opt.url }?limit=${ opt.incremental }`\n      };\n\n      // this is where we \"hijack\" the limit for the dispatch('request') some lines below\n      // and therefore have 2 initial requests in parallel\n      opt.url = `${ opt.url }?limit=100`;\n      skipHaveAll = true;\n\n      // since we are forcing a request, clear the haveAll\n      // needed for the resource-fetch mixin, otherwise the incremental indicator\n      // won't pop-up again when manual refreshing\n      if (opt.force) {\n        commit('forgetType', type);\n      }\n\n      dispatch('loadDataPage', { type, opt: pageFetchOpts });\n    }\n\n    let streamStarted = false;\n    let out;\n\n    let queue = [];\n    let streamCollection;\n\n    opt.onData = function(data) {\n      if ( streamStarted ) {\n        // Batch loads into groups of 10 to reduce vuex overhead\n        queue.push(data);\n\n        if ( queue.length > 10 ) {\n          const tmp = queue;\n\n          queue = [];\n          commit('loadMulti', { ctx, data: tmp });\n        }\n      } else {\n        // The first line is the collection object (sans `data`)\n        commit('forgetAll', { type });\n        streamStarted = true;\n        streamCollection = data;\n      }\n    };\n\n    try {\n      if (!opt.incremental && opt.hasManualRefresh) {\n        dispatch('resource-fetch/updateManualRefreshIsLoading', true, { root: true });\n      }\n\n      const res = await dispatch('request', { opt, type });\n\n      if ( streamStarted ) {\n        // Flush any remaining entries left over that didn't get loaded by onData\n        if ( queue.length ) {\n          commit('loadMulti', { ctx, data: queue });\n          queue = [];\n        }\n        commit('loadedAll', { type });\n        const all = getters.all(type);\n\n        res.finishDeferred(all);\n        out = streamCollection;\n      } else {\n        out = res;\n      }\n    } catch (e) {\n      if (!opt.incremental && opt.hasManualRefresh) {\n        dispatch('resource-fetch/updateManualRefreshIsLoading', false, { root: true });\n      }\n\n      return Promise.reject(e);\n    }\n\n    if ( load === _NONE ) {\n      if (!opt.incremental && opt.hasManualRefresh) {\n        dispatch('resource-fetch/updateManualRefreshIsLoading', false, { root: true });\n      }\n\n      return out;\n    } else if ( out.data ) {\n      if ( load === _MULTI ) {\n        // This has the effect of adding the response to the store,\n        // without replacing all the existing content for that type,\n        // and without marking that type as having 'all 'loaded.\n        //\n        // This is used e.g. to load a partial list of settings before login\n        // while still knowing we need to load the full list later.\n        commit('loadMulti', {\n          ctx,\n          data: out.data\n        });\n      } else if (load === _MERGE) {\n        // This is like loadMulti (updates existing entries) but also removes entries that no longer exist\n        // This allows changes to existing resources to be reflected in place in the UI\n        // (normally not needed as Rancher updates come over socket and are handled individually)\n        commit('loadMerge', {\n          ctx,\n          type,\n          data:     out.data,\n          existing: true\n        });\n      } else {\n        commit('loadAll', {\n          ctx,\n          type,\n          data:      out.data,\n          revision:  out.revision,\n          skipHaveAll,\n          namespace: opt.namespaced\n        });\n      }\n    }\n\n    // ToDo: SM if we start a \"bigger\" watch (such as watch without a namespace vs a watch with a namespace), we should stop the stop the \"smaller\" watch so we don't have duplicate events coming back\n    if ( opt.watch !== false ) {\n      const args = {\n        type,\n        revision:  out.revision,\n        namespace: opt.watchNamespace || opt.namespaced, // it could be either apparently\n        // ToDo: SM namespaced is sometimes a boolean and sometimes a string, I don't see it as especially broken but we should refactor that in the future\n        force:     opt.forceWatch === true,\n      };\n\n      dispatch('watch', args);\n    }\n\n    const all = getters.all(type);\n\n    if (!opt.incremental && opt.hasManualRefresh) {\n      dispatch('resource-fetch/updateManualRefreshIsLoading', false, { root: true });\n    }\n\n    garbageCollect.gcUpdateLastAccessed(ctx, type);\n\n    return all;\n  },\n\n  async findMatching(ctx, {\n    type,\n    selector,\n    opt,\n    namespace\n  }) {\n    const {\n      getters, commit, dispatch, rootGetters\n    } = ctx;\n\n    opt = opt || {};\n    console.log(`Find Matching: [${ ctx.state.config.namespace }] ${ type }`, selector); // eslint-disable-line no-console\n    type = getters.normalizeType(type);\n\n    if ( !getters.typeRegistered(type) ) {\n      commit('registerType', type);\n    }\n    if ( opt.force !== true && getters['haveSelector'](type, selector) ) {\n      return getters.matching( type, selector, namespace );\n    }\n\n    const typeOptions = rootGetters['type-map/optionsFor'](type);\n\n    opt = opt || {};\n\n    opt.filter = opt.filter || {};\n    opt.filter['labelSelector'] = selector;\n\n    opt.url = getters.urlFor(type, null, opt);\n    opt.depaginate = typeOptions?.depaginate;\n\n    const res = await dispatch('request', { opt, type });\n\n    if ( opt.load === false ) {\n      return res.data;\n    }\n\n    commit('loadSelector', {\n      ctx,\n      type,\n      entries:  res.data,\n      selector,\n      revision: res.revision,\n    });\n\n    if ( opt.watch !== false ) {\n      dispatch('watch', {\n        type,\n        selector,\n        revision: res.revision,\n        force:    opt.forceWatch === true,\n      });\n    }\n\n    garbageCollect.gcUpdateLastAccessed(ctx, type);\n\n    return getters.matching( type, selector, namespace );\n  },\n\n  // opt:\n  //  filter: Filter by fields, e.g. {field: value, anotherField: anotherValue} (default: none)\n  //  limit: Number of records to return per page (default: 1000)\n  //  sortBy: Sort by field\n  //  sortOrder: asc or desc\n  //  url: Use this specific URL instead of looking up the URL for the type/id.  This should only be used for bootstrapping schemas on startup.\n  //  @TODO depaginate: If the response is paginated, retrieve all the pages. (default: true)\n  async find(ctx, { type, id, opt }) {\n    if (!id) {\n      console.error('Attempting to find a resource with no id', type, id); // eslint-disable-line no-console\n\n      return;\n    }\n\n    const { getters, dispatch } = ctx;\n\n    opt = opt || {};\n\n    type = normalizeType(type);\n\n    console.log(`Find: [${ ctx.state.config.namespace }] ${ type } ${ id }`); // eslint-disable-line no-console\n    let out;\n\n    if ( opt.force !== true ) {\n      out = getters.byId(type, id);\n\n      if ( out ) {\n        return out;\n      }\n    }\n\n    opt = opt || {};\n    opt.url = getters.urlFor(type, id, opt);\n\n    const res = await dispatch('request', { opt, type });\n\n    await dispatch('load', { data: res });\n\n    if ( opt.watch !== false ) {\n      const watchMsg = {\n        type,\n        id,\n        revision: res?.metadata?.resourceVersion,\n        force:    opt.forceWatch === true,\n      };\n\n      const idx = id.indexOf('/');\n\n      if ( idx > 0 ) {\n        watchMsg.namespace = id.substr(0, idx);\n        watchMsg.id = id.substr(idx + 1);\n      }\n\n      dispatch('watch', watchMsg);\n    }\n\n    out = getters.byId(type, id);\n\n    garbageCollect.gcUpdateLastAccessed(ctx, type);\n\n    return out;\n  },\n\n  load(ctx, { data, existing }) {\n    const { getters, commit } = ctx;\n\n    let type = normalizeType(data.type);\n\n    if ( !getters.typeRegistered(type) ) {\n      commit('registerType', type);\n    }\n\n    if ( data.baseType && data.baseType !== data.type ) {\n      type = normalizeType(data.baseType);\n\n      if ( !getters.typeRegistered(type) ) {\n        commit('registerType', type);\n      }\n    }\n    // Inject special fields for indexing schemas\n    if ( type === SCHEMA ) {\n      addSchemaIndexFields(data);\n    }\n\n    const keyField = getters.keyFieldForType(type);\n    const id = data?.[keyField] || existing?.[keyField];\n\n    if ( !id ) {\n      console.warn('Attempting to load a resource with no id', data, existing); // eslint-disable-line no-console\n\n      return;\n    }\n\n    commit('load', {\n      ctx,\n      data,\n      existing\n    });\n\n    if ( type === SCHEMA ) {\n      commit('type-map/schemaChanged', null, { root: true });\n    }\n\n    return getters['byId'](type, id);\n  },\n\n  loadMulti(ctx, data) {\n    const { commit } = ctx;\n\n    commit('loadMulti', {\n      data,\n      ctx,\n    });\n  },\n\n  batchChanges(ctx, batch) {\n    const { commit } = ctx;\n\n    commit('batchChanges', {\n      ctx,\n      batch\n    });\n  },\n\n  loadAll(ctx, { type, data }) {\n    const { commit } = ctx;\n\n    commit('loadAll', {\n      ctx,\n      type,\n      data\n    });\n  },\n\n  create(ctx, data) {\n    return classify(ctx, data);\n  },\n\n  createMany(ctx, data) {\n    return data.map((d) => classify(ctx, d));\n  },\n\n  createPopulated(ctx, userData) {\n    const data = ctx.getters['defaultFor'](userData.type);\n\n    merge(data, userData);\n\n    return classify(ctx, data);\n  },\n\n  clone(ctx, { resource } = {}) {\n    return classify(ctx, resource.toJSON(), true);\n  },\n\n  // Forget a type in the store\n  // Remove all entries for that type and stop watching it\n  forgetType({ commit, dispatch, state }, type) {\n    state.started\n      .filter((entry) => entry.type === type)\n      .forEach((entry) => dispatch('unwatch', entry));\n\n    commit('forgetType', type);\n  },\n\n  promptRemove({ commit, state }, resources ) {\n    commit('action-menu/togglePromptRemove', resources, { root: true });\n  },\n\n  promptModal({ commit, state }, data ) {\n    commit('action-menu/togglePromptModal', data, { root: true });\n  },\n\n  resourceAction({ getters, dispatch }, {\n    resource, actionName, body, opt,\n  }) {\n    throw new Error('Not Implemented');\n  },\n\n  collectionAction({ getters, dispatch }, {\n    type, actionName, body, opt\n  }) {\n    throw new Error('Not Implemented');\n  },\n\n  cleanForNew(ctx, resource) {\n    throw new Error('Not Implemented');\n  },\n\n  createNamespace(ctx, resource) {\n    throw new Error('Not Implemented');\n  },\n\n  cleanForDiff(ctx, resource) {\n    throw new Error('Not Implemented');\n  },\n\n  // Clean a resource for the ResourceDetail page\n  // This can ensure common, required properties exists that might have been removed\n  cleanForDetail(ctx, resource) {\n    return resource;\n  },\n\n  cleanForDownload(ctx, resource) {\n    return resource;\n  },\n\n  // Wait for a schema that is expected to exist that may not have been loaded yet (for instance when loadCluster is still running).\n  async waitForSchema({ getters, dispatch }, { type }) {\n    let tries = SCHEMA_CHECK_RETRIES;\n    let schema = null;\n\n    while (!schema && tries > 0) {\n      schema = getters['schemaFor'](type);\n\n      if (!schema) {\n        if (tries === SCHEMA_CHECK_RETRY_LOG) {\n          console.warn(`Schema for ${ type } not available... retrying...`); // eslint-disable-line no-console\n        }\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n        tries--;\n      }\n    }\n\n    if (tries === 0) {\n      // Ran out of tries - fetch the schemas again\n      console.warn(`Schema for ${ type } still unavailable... loading schemas again...`); // eslint-disable-line no-console\n      await dispatch('loadSchemas', true);\n    }\n  },\n\n  incrementLoadCounter({ commit }, resource) {\n    commit('incrementLoadCounter', resource);\n  },\n\n  garbageCollect(ctx, ignoreTypes) {\n    return garbageCollect.garbageCollect(ctx, ignoreTypes);\n  },\n\n  gcResetStore({ state }) {\n    garbageCollect.gcResetStore(state);\n  }\n};\n"],"mappings":"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"}]}