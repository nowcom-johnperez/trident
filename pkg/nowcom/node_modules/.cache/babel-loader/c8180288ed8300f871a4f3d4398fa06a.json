{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/thread-loader/dist/cjs.js!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/pages/c/_cluster/explorer/explorer-utils.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/pages/c/_cluster/explorer/explorer-utils.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/pkg/nowcom/babel.config.js","mtime":1716430386791},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/thread-loader/dist/cjs.js","mtime":1716430465967},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoQ2x1c3RlclJlc291cmNlcyhzdG9yZSwgdHlwZSwgb3B0ID0ge30pIHsKICBjb25zdCBzY2hlbWEgPSBzdG9yZS5nZXR0ZXJzWydjbHVzdGVyL3NjaGVtYUZvciddKHR5cGUpOwogIGlmIChzY2hlbWEpIHsKICAgIHRyeSB7CiAgICAgIGNvbnN0IHJlc291cmNlcyA9IGF3YWl0IHN0b3JlLmRpc3BhdGNoKCdjbHVzdGVyL2ZpbmRBbGwnLCB7CiAgICAgICAgdHlwZSwKICAgICAgICBvcHQKICAgICAgfSk7CiAgICAgIHJldHVybiByZXNvdXJjZXM7CiAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIGZldGNoaW5nIGNsdXN0ZXIgcmVzb3VyY2UgJHt0eXBlfSB3aXRoIGVycm9yOmAsIGVycik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZQoKICAgICAgcmV0dXJuIFtdOwogICAgfQogIH0KICByZXR1cm4gW107Cn0="},{"version":3,"names":["fetchClusterResources","store","type","opt","schema","getters","resources","dispatch","err","console","error"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/pages/c/_cluster/explorer/explorer-utils.js"],"sourcesContent":["export async function fetchClusterResources(store, type, opt = {}) {\n  const schema = store.getters['cluster/schemaFor'](type);\n\n  if (schema) {\n    try {\n      const resources = await store.dispatch('cluster/findAll', { type, opt });\n\n      return resources;\n    } catch (err) {\n      console.error(`Failed fetching cluster resource ${ type } with error:`, err); // eslint-disable-line no-console\n\n      return [];\n    }\n  }\n\n  return [];\n}\n"],"mappings":"AAAA,OAAO,eAAeA,qBAAqBA,CAACC,KAAK,EAAEC,IAAI,EAAEC,GAAG,GAAG,CAAC,CAAC,EAAE;EACjE,MAAMC,MAAM,GAAGH,KAAK,CAACI,OAAO,CAAC,mBAAmB,CAAC,CAACH,IAAI,CAAC;EAEvD,IAAIE,MAAM,EAAE;IACV,IAAI;MACF,MAAME,SAAS,GAAG,MAAML,KAAK,CAACM,QAAQ,CAAC,iBAAiB,EAAE;QAAEL,IAAI;QAAEC;MAAI,CAAC,CAAC;MAExE,OAAOG,SAAS;IAClB,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAE,oCAAoCR,IAAM,cAAa,EAAEM,GAAG,CAAC,CAAC,CAAC;;MAE9E,OAAO,EAAE;IACX;EACF;EAEA,OAAO,EAAE;AACX"}]}