{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/thread-loader/dist/cjs.js!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js??ref--15-3!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/gc/gc.ts","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/gc/gc.ts","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/pkg/trident/babel.config.js","mtime":1716430386784},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/thread-loader/dist/cjs.js","mtime":1716430465967},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js","mtime":1716430466133}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["SETTING","COUNT","MANAGEMENT","GC_DEFAULTS","GarbageCollect","constructor","cachedGcPrefs","cachedGcPrefsStamp","debugLog","args","ENABLE_DEBUG_LOGGING","console","debug","gcLastRun","getUiPerfGarbageCollection","rootState","uiPerfSetting","_a","management","types","list","find","s","id","UI_PERFORMANCE","value","undefined","stamp","metadata","generation","resourceVersion","uiPerfSettingParsed","JSON","parse","garbageCollection","lastAccessedCache","lastRouteChange","gcEnabledAll","pseudoCtx","type","gcEnabledForStore","state","gcEnabledSetting","gcEnabledForType","uiPerfGarbageCollection","enabled","config","supportsGc","getters","gcIgnoreTypes","gcEnabledInterval","enabledInterval","interval","gcEnabledRoute","enabledOnNavigate","garbageCollect","ctx","ignoreTypes","now","Date","getTime","GC_RE_RUN_GAP","gcd","dispatch","clusterReady","maxAge","ageThreshold","maxCount","countThreshold","store","namespace","Object","entries","forEach","lastAccessed","countFromResource","all","counts","summary","count","currentCount","e","keys","length","info","gcUpdateLastAccessed","gcUpdateRouteChanged","gcResetStore","gcResetType","gc"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/gc/gc.ts"],"sourcesContent":["import { SETTING } from '@shell/config/settings';\nimport { COUNT, MANAGEMENT } from '@shell/config/types';\nimport { GC_DEFAULTS, GC_PREFERENCES } from './gc-types';\n\nclass GarbageCollect {\n  private static ENABLE_DEBUG_LOGGING = false;\n\n  /**\n   * Don't run GC if it's been run within 5 seconds\n   */\n  private static GC_RE_RUN_GAP = 1000 * 5;\n\n  private cachedGcPrefs: GC_PREFERENCES = GC_DEFAULTS;\n\n  private cachedGcPrefsStamp = '';\n\n  private debugLog = (...args: any) => {\n    if (GarbageCollect.ENABLE_DEBUG_LOGGING) {\n      console.debug('GC', ...args); // eslint-disable-line no-console\n    }\n  };\n\n  /**\n   * Time the GC last ran\n   */\n  private gcLastRun: number | null = 0;\n\n  /**\n   * To avoid JSON.parse on the `ui-performance` setting keep a local cache\n   */\n  private getUiPerfGarbageCollection = (rootState: any) => {\n    const uiPerfSetting = rootState.management.types[MANAGEMENT.SETTING]?.list.find((s: any) => s.id === SETTING.UI_PERFORMANCE);\n\n    if (!uiPerfSetting || !uiPerfSetting.value) {\n      // Could be in the process of logging out\n      return undefined;\n    }\n    const stamp = `${ uiPerfSetting.metadata.generation }-${ uiPerfSetting.metadata.resourceVersion }`;\n\n    if (this.cachedGcPrefsStamp !== stamp) {\n      this.debugLog(`Updating ${ SETTING.UI_PERFORMANCE } cache`);\n      this.cachedGcPrefsStamp = stamp;\n      const uiPerfSettingParsed = JSON.parse(uiPerfSetting.value);\n\n      this.cachedGcPrefs = uiPerfSettingParsed.garbageCollection;\n    }\n\n    return this.cachedGcPrefs;\n  };\n\n  /**\n   * The last time a resource was accessed by either find or getters style functions\n   */\n  private lastAccessedCache: {\n    [store: string]: {\n      [type: string]: number;\n    }\n  } = {}\n\n  /**\n   * Track when a logged in route changes.\n   */\n  private lastRouteChange = 0;\n\n  // ------------- GC Enabled ---------------------\n\n  gcEnabledAll(pseudoCtx: any, type: string) {\n    return this.gcEnabledForStore(pseudoCtx.state) && this.gcEnabledSetting(pseudoCtx) && this.gcEnabledForType(pseudoCtx, type);\n  }\n\n  gcEnabledSetting(pseudoCtx: any) {\n    const { rootState } = pseudoCtx;\n\n    // Don't use a getter... as we'll end up triggering ourselves again\n    const uiPerfGarbageCollection = this.getUiPerfGarbageCollection(rootState);\n\n    return uiPerfGarbageCollection?.enabled;\n  }\n\n  gcEnabledForStore(state: any) {\n    return state?.config?.supportsGc;\n  }\n\n  /**\n   * Store can require certain types are not GC'd (for example `cluster` and `schema`s, `counts`, etc)\n   */\n  gcEnabledForType(pseudoCtx: any, type: string) {\n    const { getters } = pseudoCtx;\n\n    if (!type || getters.gcIgnoreTypes[type]) {\n      return false;\n    }\n\n    return true;\n  }\n\n  gcEnabledInterval(pseudoCtx: any) {\n    const { rootState } = pseudoCtx;\n\n    // Don't use a getter... as we'll end up triggering ourselves again\n    const uiPerfGarbageCollection = this.getUiPerfGarbageCollection(rootState);\n\n    return {\n      enabled:  uiPerfGarbageCollection?.enabledInterval,\n      interval: uiPerfGarbageCollection?.interval || 0\n    };\n  }\n\n  gcEnabledRoute(pseudoCtx: any) {\n    const { rootState } = pseudoCtx;\n\n    // Don't use a getter... as we'll end up triggering ourselves again\n    const uiPerfGarbageCollection = this.getUiPerfGarbageCollection(rootState);\n\n    return uiPerfGarbageCollection?.enabledOnNavigate;\n  }\n\n  // ------------- GC (actual) ---------------------\n\n  /**\n   * Remove stale resource types from the store and stop watching them for changes\n   */\n  garbageCollect(ctx: any, ignoreTypes: {[type: string]: boolean} = {}) {\n    const now = new Date().getTime();\n\n    // Is gc currently running OR has run in the past GC_RE_RUN_GAP return early\n    if (this.gcLastRun === null || now - this.gcLastRun < GarbageCollect.GC_RE_RUN_GAP) {\n      this.debugLog('Skipping (running or recently run)', this.gcLastRun ? new Date(this.gcLastRun) : 'running');\n\n      return;\n    }\n\n    this.gcLastRun = null;\n    const gcd: {[type: string]: number} = {};\n\n    try {\n      const { getters, rootState, dispatch } = ctx;\n\n      if (!rootState.clusterReady) {\n        this.debugLog('Skipping (cluster not ready)');\n        this.gcLastRun = new Date().getTime();\n\n        return ;\n      }\n      this.debugLog(`------ Started ------`);\n\n      const uiPerfGarbageCollection = this.getUiPerfGarbageCollection(rootState);\n\n      if (!uiPerfGarbageCollection) {\n        return ;\n      }\n      const maxAge = uiPerfGarbageCollection.ageThreshold * 1000;\n      const maxCount = uiPerfGarbageCollection.countThreshold;\n\n      this.debugLog(`Max Age: ${ maxAge }. Max Count: ${ maxCount }`);// , 'Cache', this.lastAccessedCache\n\n      const store = ctx.state.config.namespace;\n\n      // this.debugLog('Cache', this.lastAccessedCache);\n\n      Object.entries((this.lastAccessedCache[store] || {})).forEach(([type, lastAccessed]) => {\n        if (!lastAccessed) {\n          // There's no last accessed time... gc is probably disabled in another way\n          this.debugLog(`${ type }: Skipping (no accessed time)`);\n\n          return;\n        }\n\n        if (!this.gcEnabledForType(ctx, type)) {\n          // This specific store is telling us to ignore the type (for example `cluster` store will not GC schema's, counts, etc)\n          this.debugLog(`${ type }: Skipping (type ignored by store)`);\n\n          return;\n        }\n\n        if (ignoreTypes[type]) {\n          // We're going to a place that needs the resource\n          this.debugLog(`${ type }: Skipping (navigating to type)`);\n\n          return;\n        }\n\n        if (now - lastAccessed <= maxAge) {\n          // The resource was recently accessed\n\n          this.debugLog(`${ type }: Skipping (recently accessed)`);\n\n          return;\n        }\n\n        if (this.lastRouteChange !== undefined && this.lastRouteChange < lastAccessed ) {\n          // The resource is being used in the current route/page\n          this.debugLog(`${ type }: Skipping (used in current route/page)`);\n\n          return;\n        }\n\n        const countFromResource = getters.all(COUNT)[0].counts[type]?.summary.count;\n        const currentCount = countFromResource ?? 0;\n\n        if (currentCount === undefined || currentCount < maxCount) {\n          // There's too few resources, we might as well keep them to avoid a network request when we need them again\n          this.debugLog(`${ type }: Skipping (too few of resource)`);\n\n          return;\n        }\n\n        this.debugLog(`${ type }: Removing from store`);\n        dispatch('forgetType', type);\n        gcd[type] = currentCount;\n      });\n\n      this.gcLastRun = new Date().getTime();\n    } catch (e) {\n      this.debugLog(`: Error`, e);\n      this.gcLastRun = new Date().getTime();\n    }\n\n    if (Object.keys(gcd).length > 0) {\n      console.info('Garbage Collected Resources', gcd); // eslint-disable-line no-console\n    }\n\n    this.debugLog(`------ Finished ------`);\n  }\n\n  // ------------- GC Update local cache ---------------------\n\n  /**\n   * Update the time that the resource type was accessed\n   * This needs to run after any type initialisation (aka registerType)\n   */\n  gcUpdateLastAccessed(pseudoCtx: any, type: string) {\n    if (!this.gcEnabledAll(pseudoCtx, type)) {\n      return;\n    }\n    const store = pseudoCtx.state.config.namespace;\n\n    if (!this.lastAccessedCache[store]) {\n      this.lastAccessedCache[store] = {};\n    }\n\n    this.lastAccessedCache[store][type] = new Date().getTime();\n  }\n\n  /**\n   * Update the time the user last changed routes\n   */\n  gcUpdateRouteChanged() {\n    this.lastRouteChange = new Date().getTime();\n  }\n\n  // ------------- GC reset ---------------------\n\n  /**\n   * Remove all cached access times for the given store\n   */\n  gcResetStore(state: any) {\n    const store = state.config.namespace;\n\n    delete this.lastAccessedCache[store];\n\n    this.debugLog('Forgetting Store:', store);\n  }\n\n  /**\n   * Remove cached access time for the given resource type\n   */\n  gcResetType(state: any, type: string) {\n    const store = state.config.namespace;\n\n    if (!this.lastAccessedCache[store]) {\n      return;\n    }\n    delete this.lastAccessedCache[store][type];\n\n    this.debugLog('Forgetting Type:', store, type);\n  }\n}\n\nconst gc = new GarbageCollect();\n\nexport default gc;\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,KAAK,EAAEC,UAAU,QAAQ,qBAAqB;AACvD,SAASC,WAAW,QAAwB,YAAY;AAExD,MAAMC,cAAc;EAApBC,YAAA;IAQU,KAAAC,aAAa,GAAmBH,WAAW;IAE3C,KAAAI,kBAAkB,GAAG,EAAE;IAEvB,KAAAC,QAAQ,GAAG,CAAC,GAAGC,IAAS,KAAI;MAClC,IAAIL,cAAc,CAACM,oBAAoB,EAAE;QACvCC,OAAO,CAACC,KAAK,CAAC,IAAI,EAAE,GAAGH,IAAI,CAAC,CAAC,CAAC;;IAElC,CAAC;IAED;;;IAGQ,KAAAI,SAAS,GAAkB,CAAC;IAEpC;;;IAGQ,KAAAC,0BAA0B,GAAIC,SAAc,IAAI;;MACtD,MAAMC,aAAa,IAAAC,EAAA,GAAGF,SAAS,CAACG,UAAU,CAACC,KAAK,CAACjB,UAAU,CAACF,OAAO,CAAC,cAAAiB,EAAA,uBAAAA,EAAA,CAAEG,IAAI,CAACC,IAAI,CAAEC,CAAM,IAAKA,CAAC,CAACC,EAAE,KAAKvB,OAAO,CAACwB,cAAc,CAAC;MAE5H,IAAI,CAACR,aAAa,IAAI,CAACA,aAAa,CAACS,KAAK,EAAE;QAC1C;QACA,OAAOC,SAAS;;MAElB,MAAMC,KAAK,GAAG,GAAIX,aAAa,CAACY,QAAQ,CAACC,UAAW,IAAKb,aAAa,CAACY,QAAQ,CAACE,eAAgB,EAAE;MAElG,IAAI,IAAI,CAACvB,kBAAkB,KAAKoB,KAAK,EAAE;QACrC,IAAI,CAACnB,QAAQ,CAAC,YAAaR,OAAO,CAACwB,cAAe,QAAQ,CAAC;QAC3D,IAAI,CAACjB,kBAAkB,GAAGoB,KAAK;QAC/B,MAAMI,mBAAmB,GAAGC,IAAI,CAACC,KAAK,CAACjB,aAAa,CAACS,KAAK,CAAC;QAE3D,IAAI,CAACnB,aAAa,GAAGyB,mBAAmB,CAACG,iBAAiB;;MAG5D,OAAO,IAAI,CAAC5B,aAAa;IAC3B,CAAC;IAED;;;IAGQ,KAAA6B,iBAAiB,GAIrB,EAAE;IAEN;;;IAGQ,KAAAC,eAAe,GAAG,CAAC;EAuN7B;EArNE;EAEAC,YAAYA,CAACC,SAAc,EAAEC,IAAY;IACvC,OAAO,IAAI,CAACC,iBAAiB,CAACF,SAAS,CAACG,KAAK,CAAC,IAAI,IAAI,CAACC,gBAAgB,CAACJ,SAAS,CAAC,IAAI,IAAI,CAACK,gBAAgB,CAACL,SAAS,EAAEC,IAAI,CAAC;EAC9H;EAEAG,gBAAgBA,CAACJ,SAAc;IAC7B,MAAM;MAAEvB;IAAS,CAAE,GAAGuB,SAAS;IAE/B;IACA,MAAMM,uBAAuB,GAAG,IAAI,CAAC9B,0BAA0B,CAACC,SAAS,CAAC;IAE1E,OAAO6B,uBAAuB,aAAvBA,uBAAuB,uBAAvBA,uBAAuB,CAAEC,OAAO;EACzC;EAEAL,iBAAiBA,CAACC,KAAU;;IAC1B,QAAAxB,EAAA,GAAOwB,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEK,MAAM,cAAA7B,EAAA,uBAAAA,EAAA,CAAE8B,UAAU;EAClC;EAEA;;;EAGAJ,gBAAgBA,CAACL,SAAc,EAAEC,IAAY;IAC3C,MAAM;MAAES;IAAO,CAAE,GAAGV,SAAS;IAE7B,IAAI,CAACC,IAAI,IAAIS,OAAO,CAACC,aAAa,CAACV,IAAI,CAAC,EAAE;MACxC,OAAO,KAAK;;IAGd,OAAO,IAAI;EACb;EAEAW,iBAAiBA,CAACZ,SAAc;IAC9B,MAAM;MAAEvB;IAAS,CAAE,GAAGuB,SAAS;IAE/B;IACA,MAAMM,uBAAuB,GAAG,IAAI,CAAC9B,0BAA0B,CAACC,SAAS,CAAC;IAE1E,OAAO;MACL8B,OAAO,EAAGD,uBAAuB,aAAvBA,uBAAuB,uBAAvBA,uBAAuB,CAAEO,eAAe;MAClDC,QAAQ,EAAE,CAAAR,uBAAuB,aAAvBA,uBAAuB,uBAAvBA,uBAAuB,CAAEQ,QAAQ,KAAI;KAChD;EACH;EAEAC,cAAcA,CAACf,SAAc;IAC3B,MAAM;MAAEvB;IAAS,CAAE,GAAGuB,SAAS;IAE/B;IACA,MAAMM,uBAAuB,GAAG,IAAI,CAAC9B,0BAA0B,CAACC,SAAS,CAAC;IAE1E,OAAO6B,uBAAuB,aAAvBA,uBAAuB,uBAAvBA,uBAAuB,CAAEU,iBAAiB;EACnD;EAEA;EAEA;;;EAGAC,cAAcA,CAACC,GAAQ,EAAEC,WAAA,GAAyC,EAAE;IAClE,MAAMC,GAAG,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;IAEhC;IACA,IAAI,IAAI,CAAC/C,SAAS,KAAK,IAAI,IAAI6C,GAAG,GAAG,IAAI,CAAC7C,SAAS,GAAGT,cAAc,CAACyD,aAAa,EAAE;MAClF,IAAI,CAACrD,QAAQ,CAAC,oCAAoC,EAAE,IAAI,CAACK,SAAS,GAAG,IAAI8C,IAAI,CAAC,IAAI,CAAC9C,SAAS,CAAC,GAAG,SAAS,CAAC;MAE1G;;IAGF,IAAI,CAACA,SAAS,GAAG,IAAI;IACrB,MAAMiD,GAAG,GAA6B,EAAE;IAExC,IAAI;MACF,MAAM;QAAEd,OAAO;QAAEjC,SAAS;QAAEgD;MAAQ,CAAE,GAAGP,GAAG;MAE5C,IAAI,CAACzC,SAAS,CAACiD,YAAY,EAAE;QAC3B,IAAI,CAACxD,QAAQ,CAAC,8BAA8B,CAAC;QAC7C,IAAI,CAACK,SAAS,GAAG,IAAI8C,IAAI,EAAE,CAACC,OAAO,EAAE;QAErC;;MAEF,IAAI,CAACpD,QAAQ,CAAC,uBAAuB,CAAC;MAEtC,MAAMoC,uBAAuB,GAAG,IAAI,CAAC9B,0BAA0B,CAACC,SAAS,CAAC;MAE1E,IAAI,CAAC6B,uBAAuB,EAAE;QAC5B;;MAEF,MAAMqB,MAAM,GAAGrB,uBAAuB,CAACsB,YAAY,GAAG,IAAI;MAC1D,MAAMC,QAAQ,GAAGvB,uBAAuB,CAACwB,cAAc;MAEvD,IAAI,CAAC5D,QAAQ,CAAC,YAAayD,MAAO,gBAAiBE,QAAS,EAAE,CAAC,CAAC;MAEhE,MAAME,KAAK,GAAGb,GAAG,CAACf,KAAK,CAACK,MAAM,CAACwB,SAAS;MAExC;MAEAC,MAAM,CAACC,OAAO,CAAE,IAAI,CAACrC,iBAAiB,CAACkC,KAAK,CAAC,IAAI,EAAG,CAAC,CAACI,OAAO,CAAC,CAAC,CAAClC,IAAI,EAAEmC,YAAY,CAAC,KAAI;;QACrF,IAAI,CAACA,YAAY,EAAE;UACjB;UACA,IAAI,CAAClE,QAAQ,CAAC,GAAI+B,IAAK,+BAA+B,CAAC;UAEvD;;QAGF,IAAI,CAAC,IAAI,CAACI,gBAAgB,CAACa,GAAG,EAAEjB,IAAI,CAAC,EAAE;UACrC;UACA,IAAI,CAAC/B,QAAQ,CAAC,GAAI+B,IAAK,oCAAoC,CAAC;UAE5D;;QAGF,IAAIkB,WAAW,CAAClB,IAAI,CAAC,EAAE;UACrB;UACA,IAAI,CAAC/B,QAAQ,CAAC,GAAI+B,IAAK,iCAAiC,CAAC;UAEzD;;QAGF,IAAImB,GAAG,GAAGgB,YAAY,IAAIT,MAAM,EAAE;UAChC;UAEA,IAAI,CAACzD,QAAQ,CAAC,GAAI+B,IAAK,gCAAgC,CAAC;UAExD;;QAGF,IAAI,IAAI,CAACH,eAAe,KAAKV,SAAS,IAAI,IAAI,CAACU,eAAe,GAAGsC,YAAY,EAAG;UAC9E;UACA,IAAI,CAAClE,QAAQ,CAAC,GAAI+B,IAAK,yCAAyC,CAAC;UAEjE;;QAGF,MAAMoC,iBAAiB,IAAA1D,EAAA,GAAG+B,OAAO,CAAC4B,GAAG,CAAC3E,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC4E,MAAM,CAACtC,IAAI,CAAC,cAAAtB,EAAA,uBAAAA,EAAA,CAAE6D,OAAO,CAACC,KAAK;QAC3E,MAAMC,YAAY,GAAGL,iBAAiB,aAAjBA,iBAAiB,cAAjBA,iBAAiB,GAAI,CAAC;QAE3C,IAAIK,YAAY,KAAKtD,SAAS,IAAIsD,YAAY,GAAGb,QAAQ,EAAE;UACzD;UACA,IAAI,CAAC3D,QAAQ,CAAC,GAAI+B,IAAK,kCAAkC,CAAC;UAE1D;;QAGF,IAAI,CAAC/B,QAAQ,CAAC,GAAI+B,IAAK,uBAAuB,CAAC;QAC/CwB,QAAQ,CAAC,YAAY,EAAExB,IAAI,CAAC;QAC5BuB,GAAG,CAACvB,IAAI,CAAC,GAAGyC,YAAY;MAC1B,CAAC,CAAC;MAEF,IAAI,CAACnE,SAAS,GAAG,IAAI8C,IAAI,EAAE,CAACC,OAAO,EAAE;KACtC,CAAC,OAAOqB,CAAC,EAAE;MACV,IAAI,CAACzE,QAAQ,CAAC,SAAS,EAAEyE,CAAC,CAAC;MAC3B,IAAI,CAACpE,SAAS,GAAG,IAAI8C,IAAI,EAAE,CAACC,OAAO,EAAE;;IAGvC,IAAIW,MAAM,CAACW,IAAI,CAACpB,GAAG,CAAC,CAACqB,MAAM,GAAG,CAAC,EAAE;MAC/BxE,OAAO,CAACyE,IAAI,CAAC,6BAA6B,EAAEtB,GAAG,CAAC,CAAC,CAAC;;IAGpD,IAAI,CAACtD,QAAQ,CAAC,wBAAwB,CAAC;EACzC;EAEA;EAEA;;;;EAIA6E,oBAAoBA,CAAC/C,SAAc,EAAEC,IAAY;IAC/C,IAAI,CAAC,IAAI,CAACF,YAAY,CAACC,SAAS,EAAEC,IAAI,CAAC,EAAE;MACvC;;IAEF,MAAM8B,KAAK,GAAG/B,SAAS,CAACG,KAAK,CAACK,MAAM,CAACwB,SAAS;IAE9C,IAAI,CAAC,IAAI,CAACnC,iBAAiB,CAACkC,KAAK,CAAC,EAAE;MAClC,IAAI,CAAClC,iBAAiB,CAACkC,KAAK,CAAC,GAAG,EAAE;;IAGpC,IAAI,CAAClC,iBAAiB,CAACkC,KAAK,CAAC,CAAC9B,IAAI,CAAC,GAAG,IAAIoB,IAAI,EAAE,CAACC,OAAO,EAAE;EAC5D;EAEA;;;EAGA0B,oBAAoBA,CAAA;IAClB,IAAI,CAAClD,eAAe,GAAG,IAAIuB,IAAI,EAAE,CAACC,OAAO,EAAE;EAC7C;EAEA;EAEA;;;EAGA2B,YAAYA,CAAC9C,KAAU;IACrB,MAAM4B,KAAK,GAAG5B,KAAK,CAACK,MAAM,CAACwB,SAAS;IAEpC,OAAO,IAAI,CAACnC,iBAAiB,CAACkC,KAAK,CAAC;IAEpC,IAAI,CAAC7D,QAAQ,CAAC,mBAAmB,EAAE6D,KAAK,CAAC;EAC3C;EAEA;;;EAGAmB,WAAWA,CAAC/C,KAAU,EAAEF,IAAY;IAClC,MAAM8B,KAAK,GAAG5B,KAAK,CAACK,MAAM,CAACwB,SAAS;IAEpC,IAAI,CAAC,IAAI,CAACnC,iBAAiB,CAACkC,KAAK,CAAC,EAAE;MAClC;;IAEF,OAAO,IAAI,CAAClC,iBAAiB,CAACkC,KAAK,CAAC,CAAC9B,IAAI,CAAC;IAE1C,IAAI,CAAC/B,QAAQ,CAAC,kBAAkB,EAAE6D,KAAK,EAAE9B,IAAI,CAAC;EAChD;;AA/QenC,cAAA,CAAAM,oBAAoB,GAAG,KAAK;AAE3C;;;AAGeN,cAAA,CAAAyD,aAAa,GAAG,IAAI,GAAG,CAAC;AA6QzC,MAAM4B,EAAE,GAAG,IAAIrF,cAAc,EAAE;AAE/B,eAAeqF,EAAE"}]}