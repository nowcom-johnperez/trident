{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/thread-loader/dist/cjs.js!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/create-yaml.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/create-yaml.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/pkg/trident/babel.config.js","mtime":1716430386784},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/thread-loader/dist/cjs.js","mtime":1716430465967},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["indent","_indent","addObject","findBy","removeObject","removeObjects","jsyaml","cleanUp","isEmpty","SIMPLE_TYPES","ALWAYS_ADD","NEVER_ADD","ACTIVELY_REMOVE","INDENT","createYamlWithOptions","schemas","type","data","options","createYaml","processAlwaysAdd","depth","path","rootType","dataOptions","schema","attr","attributes","apiVersion","group","version","kind","regularFields","always","slice","i","length","entry","split","join","parts","key","prefix","resourceFields","commentFields","Object","keys","forEach","regular","map","k","stringifyField","comments","_rootSchema$attribute","rootSchema","namespaced","comment","out","filter","x","trim","_schema$resourceField","field","cleaned","parsedData","dump","Array","isArray","e","console","error","typeMunge","mapOf","typeRef","arrayOf","referenceTo","dumpBlock","includes","chunk","indented","replace","serializeSimpleValue","subDef","parsed","lines","getBlockDescriptor","value","header","getBlockHeader","indentation","getBlockIndentation","blockKey","card","re","RegExp","found","match","blockHeader","blockScalars","substr","indexOf","str","saferDump","obj","blockFields","_options$key$scalarSt","_options$key","_options$key$chomping","_options$key2","scalarStyle","chomping"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/create-yaml.js"],"sourcesContent":["import { indent as _indent } from '@shell/utils/string';\nimport { addObject, findBy, removeObject, removeObjects } from '@shell/utils/array';\nimport jsyaml from 'js-yaml';\nimport { cleanUp, isEmpty } from '@shell/utils/object';\n\nexport const SIMPLE_TYPES = [\n  'string',\n  'multiline',\n  'masked',\n  'password',\n  'float',\n  'int',\n  'date',\n  'blob',\n  'boolean',\n  'version'\n];\n\nconst ALWAYS_ADD = [\n  'apiVersion',\n  'kind',\n  'metadata',\n  'metadata.name',\n  'spec',\n  'spec.selector',\n  'spec.selector.matchLabels',\n  'spec.template',\n  'spec.template.metadata',\n  'spec.template.metadata.labels',\n  'spec.template.spec.containers.name',\n  'spec.template.spec.containers.image',\n];\n\nexport const NEVER_ADD = [\n  'metadata.clusterName',\n  'metadata.clusterName',\n  'metadata.creationTimestamp',\n  'metadata.deletionGracePeriodSeconds',\n  'metadata.deletionTimestamp',\n  'metadata.finalizers',\n  'metadata.generateName',\n  'metadata.generation',\n  'metadata.initializers',\n  'metadata.managedFields',\n  'metadata.ownerReferences',\n  'metadata.resourceVersion',\n  'metadata.relationships',\n  'metadata.selfLink',\n  'metadata.uid',\n  // CRD -> Schema describes the schema used for validation, pruning, and defaulting of this version of the custom resource. If we allow processing we fall into inf loop on openAPIV3Schema.allOf which contains a cyclical ref of allOf props.\n  'spec.versions.schema',\n  'status',\n  'stringData',\n];\n\nexport const ACTIVELY_REMOVE = [\n  'metadata.managedFields',\n  'metadata.relationships',\n  'metadata.state',\n  'status',\n  'links',\n  'type',\n  'id'\n];\n\nconst INDENT = 2;\n\nexport function createYamlWithOptions(schemas, type, data, options) {\n  return createYaml(\n    schemas,\n    type,\n    data,\n    true, 0, '', null,\n    options\n  );\n}\n\nexport function createYaml(\n  schemas,\n  type,\n  data,\n  processAlwaysAdd = true,\n  depth = 0,\n  path = '',\n  rootType = null,\n  dataOptions = {}\n) {\n  const schema = findBy(schemas, 'id', type);\n\n  if ( !rootType ) {\n    rootType = type;\n  }\n\n  if ( !schema ) {\n    return `Error loading schema for ${ type }`;\n  }\n\n  data = data || {};\n\n  if ( depth === 0 ) {\n    const attr = schema.attributes || {};\n\n    // Default to data.apiVersion/kind to accommodate spoofed types that aggregate multiple types\n    data.apiVersion = (attr.group ? `${ attr.group }/${ attr.version }` : attr.version) || data.apiVersion;\n    data.kind = attr.kind || data.kind;\n  }\n\n  const regularFields = [];\n\n  if (processAlwaysAdd) {\n    // Add all the parents of each key so that spec.template.foo.blah\n    // causes 'spec', 'template' and 'foo' keys to be created\n    const always = ALWAYS_ADD.slice();\n\n    for ( let i = always.length - 1 ; i >= 0 ; i-- ) {\n      let entry = always[i].split(/\\./);\n\n      while ( entry.length ) {\n        addObject(always, entry.join('.'));\n        entry = entry.slice(0, -1);\n      }\n    }\n\n    // Mark always fields as regular so they're not commented out\n    for ( const entry of always ) {\n      const parts = entry.split(/\\./);\n      const key = parts[parts.length - 1];\n      const prefix = parts.slice(0, -1).join('.');\n\n      if ( prefix === path && schema.resourceFields && schema.resourceFields[key] ) {\n        addObject(regularFields, key);\n      }\n    }\n  }\n\n  // Include all fields in schema's resourceFields as comments\n  const commentFields = Object.keys(schema.resourceFields || {});\n\n  commentFields.forEach((key) => {\n    if ( typeof data[key] !== 'undefined' || (depth === 0 && key === '_type') ) {\n      addObject(regularFields, key);\n    }\n  });\n\n  // add any fields defined in data as uncommented fields in yaml\n  for ( const key in data ) {\n    if ( typeof data[key] !== 'undefined' ) {\n      addObject(regularFields, key);\n    }\n  }\n\n  // ACTIVELY_REMOVE are fields that should be removed even if they are defined in data\n  for ( const entry of ACTIVELY_REMOVE ) {\n    const parts = entry.split(/\\./);\n    const key = parts[parts.length - 1];\n    const prefix = parts.slice(0, -1).join('.');\n\n    if ( prefix === path) {\n      removeObject(regularFields, key);\n    }\n  }\n\n  // NEVER_ADD are fields that should not be added as comments, but may added as regular fields if already defined in data\n  for ( const entry of NEVER_ADD ) {\n    const parts = entry.split(/\\./);\n    const key = parts[parts.length - 1];\n    const prefix = parts.slice(0, -1).join('.');\n\n    if ( prefix === path && schema.resourceFields && schema.resourceFields[key] ) {\n      removeObject(commentFields, key);\n    }\n  }\n\n  // do not include commented fields if already defined in data\n  removeObjects(commentFields, regularFields);\n\n  const regular = regularFields.map((k) => stringifyField(k));\n  const comments = commentFields.map((k) => {\n    // Don't add a namespace comment for types that aren't namespaced.\n    if ( path === 'metadata' && k === 'namespace' ) {\n      const rootSchema = findBy(schemas, 'id', rootType);\n\n      if ( rootSchema && !rootSchema.attributes?.namespaced ) {\n        return null;\n      }\n    }\n\n    return comment(stringifyField(k));\n  });\n\n  const out = [...regular, ...comments]\n    .filter((x) => x !== null)\n    .join('\\n')\n    .trim();\n\n  return out;\n\n  // ---------------\n\n  function stringifyField(key) {\n    const field = schema.resourceFields?.[key];\n    let out = `${ key }:`;\n\n    // '_type' in steve maps to kubernetes 'type' field; show 'type' field in yaml\n    if (key === '_type') {\n      out = 'type:';\n    }\n\n    // if a key on data is not listed in the schema's resourceFields, just convert it to yaml, add indents where needed, and return\n    if ( !field ) {\n      if (data[key]) {\n        try {\n          const cleaned = cleanUp(data);\n          const parsedData = jsyaml.dump(cleaned[key]);\n\n          if ( typeof data[key] === 'object' || Array.isArray(data[key]) ) {\n            out += `\\n${ indent(parsedData.trim()) }`;\n          } else {\n            out += ` ${ parsedData.trim() }`;\n          }\n\n          return out;\n        } catch (e) {\n          console.error(`Error: Unable to parse map data for yaml key: ${ key }`, e); // eslint-disable-line no-console\n        }\n      }\n\n      return null;\n    }\n\n    const type = typeMunge(field.type);\n    const mapOf = typeRef('map', type);\n    const arrayOf = typeRef('array', type);\n    const referenceTo = typeRef('reference', type);\n\n    // type == map[mapOf]\n    if ( mapOf ) {\n      // if key is defined in data, convert the value to yaml, add newline+indent and add to output yaml string\n      if (data[key]) {\n        try {\n          const cleaned = cleanUp(data);\n          const parsedData = dumpBlock(cleaned[key], dataOptions[key]);\n\n          out += `\\n${ indent(parsedData) }`;\n        } catch (e) {\n          console.error(`Error: Unable to parse map data for yaml of type: ${ type }`, e); // eslint-disable-line no-console\n        }\n      }\n\n      if ( SIMPLE_TYPES.includes(mapOf) ) {\n        out += `#  key: ${ mapOf }`;\n      } else {\n        // If not a simple type ie some sort of object/array, recusively build out commented fields (note data = null here) per the type's (mapOf's) schema\n        const chunk = createYaml(schemas, mapOf, null, processAlwaysAdd, depth + 1, (path ? `${ path }.${ key }` : key), rootType, dataOptions);\n        let indented = indent(chunk);\n\n        // convert \"#    foo\" to \"#foo\"\n        indented = indented.replace(/^(#)?\\s\\s\\s\\s/, '$1');\n\n        out += `${ indented }`;\n      }\n\n      return out;\n    }\n\n    // type == array[arrayOf]\n    if ( arrayOf ) {\n      if (data[key]) {\n        try {\n          const cleaned = cleanUp(data);\n\n          if ( cleaned?.[key] ) {\n            const parsedData = jsyaml.dump(cleaned[key]);\n\n            out += `\\n${ indent(parsedData.trim()) }`;\n          }\n        } catch (e) {\n          console.error(`Error: Unale to parse array data for yaml of type: ${ type }`, e); // eslint-disable-line no-console\n        }\n      }\n\n      if ( SIMPLE_TYPES.includes(arrayOf) ) {\n        out += `\\n#  - ${ arrayOf }`;\n      } else {\n        const chunk = createYaml(schemas, arrayOf, null, false, depth + 1, (path ? `${ path }.${ key }` : key), rootType, dataOptions);\n        let indented = indent(chunk, 2);\n\n        // turn \"#        foo\" into \"#  - foo\"\n        indented = indented.replace(/^(#)?\\s*\\s\\s([^\\s])/, '$1  - $2');\n\n        out += `\\n${ indented }`;\n      }\n\n      return out;\n    }\n\n    if ( referenceTo ) {\n      out += ` #${ referenceTo }`;\n\n      return out;\n    }\n\n    if ( SIMPLE_TYPES.includes(type) ) {\n      if (key === '_type' && typeof data[key] === 'undefined' && typeof data['type'] !== 'undefined') {\n        out += ` ${ serializeSimpleValue(data['type']) }`;\n      } else if ( typeof data[key] === 'undefined' ) {\n        out += ` #${ serializeSimpleValue(type) }`;\n      } else {\n        out += ` ${ serializeSimpleValue(data[key]) }`;\n      }\n\n      return out;\n    }\n\n    /**\n     * .spec is the type used for the Logging chart Output and ClusterOutput resource spec.\n     * Without this Output and ClusterOutput specs are empty.\n     */\n    if ( type === 'json' || type === '.spec') {\n      try {\n        const parsedData = jsyaml.dump(data[key]);\n\n        if (parsedData) {\n          out += `\\n${ indent(parsedData.trim()) }`;\n        } else {\n          out += ` #${ type }`;\n        }\n\n        return out;\n      } catch (e) {\n      }\n    }\n\n    const subDef = findBy(schemas, 'id', type);\n\n    if ( subDef) {\n      let chunk;\n\n      if (subDef?.resourceFields && !isEmpty(subDef?.resourceFields)) {\n        chunk = createYaml(schemas, type, data[key], processAlwaysAdd, depth + 1, (path ? `${ path }.${ key }` : key), rootType, dataOptions);\n      } else if (data[key]) {\n        // if there are no fields defined on the schema but there are in the data, just format data as yaml and add to output yaml\n        try {\n          const parsed = jsyaml.dump(data[key]);\n\n          chunk = parsed.trim();\n        } catch (e) {\n          console.error(`Error: Unale to parse data for yaml of type: ${ type }`, e); // eslint-disable-line no-console\n        }\n      }\n\n      out += `\\n${ indent(chunk) }`;\n    } else {\n      out += ` #${ type }`;\n    }\n\n    return out;\n  }\n}\n\nfunction comment(lines) {\n  return (lines || '').split('\\n').map((x) => `#${ x.replace(/#/g, '') }`).join('\\n');\n}\n\nfunction indent(lines, depth = 1) {\n  return _indent(lines, depth * INDENT, ' ', /^#/);\n}\n\nfunction serializeSimpleValue(data) {\n  return jsyaml.dump(data).trim();\n}\n\nexport function getBlockDescriptor(value, key) {\n  const header = getBlockHeader(value, key);\n\n  return {\n    header,\n    indentation: getBlockIndentation(header),\n  };\n}\n\n/**\n *\n * @param {string} value the block of text to be parsed\n * @param {*} blockKey the key of the block\n * @returns the key + the block scalar indicators, see https://yaml-multiline.info - Block Scalars\n */\nfunction getBlockHeader(value, blockKey) {\n  const card = `(${ blockKey })[\\\\:][\\\\s|\\\\t]+[\\\\|\\\\>][\\\\d]*[\\\\-\\\\+]?`;\n  const re = new RegExp(card, 'gi');\n\n  const found = value.match(re);\n\n  return found?.[0] || '';\n}\n\n/**\n *\n * @param {string} blockHeader the key + the block scalar indicators\n * @returns the indentation indicator from the block header, see https://yaml-multiline.info - Indentation\n */\nfunction getBlockIndentation(blockHeader) {\n  const blockScalars = blockHeader.substr(blockHeader.indexOf(':') + 1);\n\n  const indentation = blockScalars.match(/\\d+/);\n\n  return indentation?.[0] || '';\n}\n\nexport function typeRef(type, str) {\n  const re = new RegExp(`^${ type }\\\\[(.*)\\\\]$`);\n  const match = str.match(re);\n\n  if ( match ) {\n    return typeMunge(match[1]);\n  }\n}\n\nexport function typeMunge(type) {\n  if ( type === 'integer' ) {\n    return 'int';\n  }\n\n  if ( type === 'io.k8s.apimachinery.pkg.api.resource.Quantity' ) {\n    return 'string';\n  }\n\n  return type;\n}\n\nexport function saferDump(obj) {\n  const out = jsyaml.dump(obj || {});\n\n  if ( out === '{}\\n' ) {\n    return '';\n  }\n\n  return out;\n}\n\n/**\n * Handles newlines indicators in the multiline blocks.\n *\n * this is required since jsyaml.dump doesn't support chomping and scalar style at the moment.\n * see: https://github.com/nodeca/js-yaml/issues/171\n *\n * @param {*} data the multiline block\n * @param {*} options blocks indicators, see: https://yaml-multiline.info\n *\n * - scalarStyle:\n *     one of '|', '>'\n *     default '|'\n * - chomping:\n *     one of: null, '', '-', '+'\n *     default: null\n * @returns the result of jsyaml.dump with the addition of multiline indicators\n */\nexport function dumpBlock(data, options = {}) {\n  const parsed = jsyaml.dump(data);\n\n  let out = parsed;\n\n  const blockFields = Object.keys(data).filter((k) => data[k].includes('\\n'));\n\n  if (blockFields.length) {\n    for (const key of blockFields) {\n      const { header, indentation } = getBlockDescriptor(out, key);\n\n      const scalarStyle = options[key]?.scalarStyle ?? '|';\n      const chomping = options[key]?.chomping ?? '';\n\n      /**\n       * Replace the original block indicators with the ones provided in the options param\n       */\n      out = out.replace(header, `${ key }: ${ scalarStyle }${ chomping }${ indentation }`);\n    }\n  }\n\n  return out;\n}\n"],"mappings":"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"}]}