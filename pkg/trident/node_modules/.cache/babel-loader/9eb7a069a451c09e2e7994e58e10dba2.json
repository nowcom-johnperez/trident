{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/thread-loader/dist/cjs.js!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/store/type-map.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/store/type-map.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/pkg/trident/babel.config.js","mtime":1716430386784},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/thread-loader/dist/cjs.js","mtime":1716430465967},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8gVGhpcyBmaWxlIGhhcyAyIHNlY3Rpb25zIHRoYXQgY29udHJvbCBnZXR0aW5nIGFuZCB1c2luZyBzcGVjaWFsaXphdGlvbnMgb2YgcGFydGljdWxhciB0eXBlcwovLyBvdmVyIHRoZSBnZW5lcmljIGluZm8gdGhhdCBpcyBzcGVjaWZpZWQgb3IgZ2VuZXJhdGVkIGZyb20gc2NoZW1hcy4KLy8KLy8gMSkgR2V0dGluZyBpbmZvIGFib3V0IHR5cGVzCi8vCi8vIGxhYmVsRm9yKHNjaGVtYSwgY291bnQpICAgIEdldCB0aGUgZGlzcGxheSBsYWJlbCBmb3IgYSBzY2hlbWEuICBDb3VudCBpcyAoaW4gRW5nbGlzaCkgMSBvciBub3QtMSBmb3IgcGx1cmFsaXppbmcKLy8gZ3JvdXBMYWJlbEZvcihzY2hlbWEpICAgICAgR2V0IHRoZSBsYWJlbCBmb3IgdGhlIEFQSSBncm91cCBvZiB0aGlzIHNjaGVtYSdzIHR5cGUKLy8gaXNJZ25vcmVkKHNjaGVtYSkgICAgICAgICAgUmV0dXJucyB0cnVlIGlmIHRoaXMgdHlwZSBzaG91bGQgYmUgaGlkZGVuIGZyb20gdGhlIHRyZWUKLy8gZ3JvdXBGb3JCYXNpY1R5cGUoc2NoZW1hKSAgUmV0dXJucyB0aGUgZ3JvdXAgYSB0eXBlIHNob3VsZCBiZSBzaG93biBpbiBiYXNpYyB2aWV3LCBvciBmYWxzZS15IGlmIGl0IHNob3VsZG4ndCBiZSBzaG93bi4KLy8gdHlwZVdlaWdodEZvcih0eXBlLCBmb3JCYXNpYykgICBHZXQgdGhlIHdlaWdodCB2YWx1ZSBmb3IgYSBwYXJ0aWN1bGFyIHR5cGUgbGFiZWwKLy8gZ3JvdXBXZWlnaHRGb3IoZ3JvdXAsIGZvckJhc2ljKSBHZXQgdGhlIHdlaWdodCB2YWx1ZSBmb3IgYSBwYXJ0aWN1bGFyIGdyb3VwCi8vIGhlYWRlcnNGb3Ioc2NoZW1hKSAgICAgICAgIFJldHVybnMgdGhlIGNvbHVtbiBkZWZpbml0aW9ucyBmb3IgYSB0eXBlIHRvIGdpdmUgdG8gU29ydGFibGVUYWJsZQovLyBhY3RpdmVQcm9kdWN0cygpICAgICAgICAgICBSZXR1cm5zIHRoZSBsaXN0IG9mIHByb2R1Y3RzIHRoYXQgYXJlIGluc3RhbGxlZCBhbmQgc2hvdWxkIGJlIHNob3duCi8vCi8vIDIpIERldGVjdGluZyBhbmQgdXNpbmcgY3VzdG9tIGxpc3QvZGV0YWlsL2VkaXQvaGVhZGVyIGNvbXBvbmVudHMKLy8KLy8gaGFzQ3VzdG9tTGlzdCh0eXBlKSAgICAgICAgICAgICAgRG9lcyB0eXBlIGhhdmUgYSBjdXN0b20gbGlzdCBpbXBsZW1lbnRhdGlvbj8KLy8gaGFzQ3VzdG9tRGV0YWlsKHR5cGVbLHN1YlR5cGVdKSAgRG9lcyB0eXBlIGhhdmUgYSBjdXN0b20gZGV0YWlsIGltcGxlbWVudGF0aW9uPwovLyBoYXNDdXN0b21FZGl0KHR5cGVbLHN1YlR5cGVdKSAgICBEb2VzIHR5cGUgaGF2ZSBhIGN1c3RvbSBlZGl0IGltcGxlbWVudGF0aW9uPwovLyBpbXBvcnRMaXN0KHR5cGUpICAgICAgICAgICAgICAgICBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSBsaXN0IGNvbXBvbmVudCBmb3IgdHlwZQovLyBpbXBvcnREZXRhaWwodHlwZVssc3ViVHlwZV0pICAgICBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSBkZXRhaWwgY29tcG9uZW50IGZvciB0eXBlCi8vIGltcG9ydEVkaXQodHlwZVssc3ViVHlwZV0pICAgICAgIFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIGVkaXQgY29tcG9uZW50IGZvciB0eXBlCi8vIG9wdGlvbnNGb3Ioc2NoZW1hT3JUeXBlKSAgICAgICAgIFJldHVybiB0aGUgY29uZmlndXJlZCBvcHRpb25zIGZvciBhIHR5cGUgKGZyb20gY29uZmlndXJlVHlwZSkKLy8KLy8gMykgQ2hhbmdpbmcgc3BlY2lhbGl6YXRpb24gaW5mbyBhYm91dCBhIHR5cGUKLy8gRm9yIGFsbDoKLy8gICBsZXQgeyB0aGluZ1lvdVdhbnQgfSA9IERTTChpbnN0YW5jZU9mVGhlU3RvcmUsICdwcm9kdWN0Jyk7Ci8vCi8vIHByb2R1Y3QoICAgICAgICAgICAgICAgICAgIEFkZCBhIHByb2R1Y3QgaW50byB0aGUgbmF2Ci8vICAgcmVtb3ZhYmxlLCAgICAgICAgICAgICAgIC0tIElzIHRoZSBwcm9kdWN0IHJlbW92YWJsZSAodHJ1ZSkgb3IgYnVpbHQtaW4gKGZhbHNlKS4KLy8gICB3ZWlnaHQsICAgICAgICAgICAgICAgICAgLS0gU29ydCBvcmRlciBhbmQgZGl2aWRlciBzZWN0aW9ucyBpbiB0aGUgcHJvZHVjdCBtZW51LiAgMz1nbG9iYWwgKGZsZWV0LCBlY20pLCAyPWFsd2F5cyBvbiAoYXBwcywgZXhwbG9yZXIpIDE9b3RoZXIKLy8gICBzaG93Q2x1c3RlclN3aXRjaGVyLCAgICAgLS0gU2hvdyB0aGUgY2x1c3RlciBzd2l0Y2hlciBpbiB0aGUgaGVhZGVyIChkZWZhdWx0IHRydWUpCi8vICAgc2hvd05hbWVzcGFjZUZpbHRlciwgICAgIC0tIFNob3cgdGhlIG5hbWVzcGFjZSBmaWx0ZXIgaW4gdGhlIGhlYWRlciAoZGVmYXVsdCBmYWxzZSkKLy8gICBzaG93V29ya3NwYWNlU3dpdGNoZXIsICAgLS0gU2hvdyB0aGUgd29ya3NwYWNlIHN3aXRjaGVyIGluIHRoZSBoZWFkZXIgKGNvbmZsaWN0cyB3aXRoIG5hbWVzcGFjZSkgKGRlZmF1bHQgZmFsc2UpCi8vICAgaWZIYXZlLCAgICAgICAgICAgICAgICAgIC0tIFNob3cgdGhpcyBwcm9kdWN0IG9ubHkgaWYgdGhlIGdpdmVuIGNhcGFiaWxpdHkgaXMgYXZhaWxhYmxlCi8vICAgaWZIYXZlR3JvdXAsICAgICAgICAgICAgIC0tIFNob3cgdGhpcyBwcm9kdWN0IG9ubHkgaWYgdGhlIGdpdmVuIGdyb3VwIGV4aXN0cyBpbiB0aGUgc3RvcmUgW2luU3RvcmVdCi8vICAgaWZIYXZlVHlwZSwgICAgICAgICAgICAgIC0tIFNob3cgdGhpcyBwcm9kdWN0IG9ubHkgaWYgdGhlIGdpdmVuIHR5cGUgZXhpc3RzIGluIHRoZSBzdG9yZSBbaW5TdG9yZV0sIFRoaXMgY2FuIGFsc28gYmUgc3BlY2lmaWVkIGFzIGFuIG9iamVjdCB7IHR5cGU6IFRZUEUsIHN0b3JlOiAnbWFuYWdlbWVudCcgfSBpZiB0aGUgdHlwZSBpc24ndCBpbiB0aGUgY3VycmVudCBbaW5TdG9yZV0KLy8gICBpZkhhdmVWZXJiLCAgICAgICAgICAgICAgLS0gSW4gY29tYmluYXRpb24gd2l0aCBpZkhhdmVUWXBlLCBzaG93IGl0IG9ubHkgaWYgdGhlIHR5cGUgYWxzbyBoYXMgdGhpcyBjb2xsZWN0aW9uTWV0aG9kCi8vICAgaW5TdG9yZSwgICAgICAgICAgICAgICAgIC0tIFdoaWNoIHN0b3JlIHRvIGxvb2sgYXQgZm9yIGlmKiBhYm92ZSBhbmQgdGhlIGxlZnQtbmF2LCBkZWZhdWx0cyB0byAiY2x1c3RlciIKLy8gICBpbkV4cGxvcmVyLCAgICAgICAgICAgICAgLS0gRGV0ZXJtaW5lcyBpZiB0aGUgcHJvZHVjdCBpcyB0byBiZSBzY29wZWQgdG8gdGhlIGV4cGxvcmVyCi8vICAgcHVibGljLCAgICAgICAgICAgICAgICAgIC0tIElmIHRydWUsIHNob3cgdG8gYWxsIHVzZXJzLiAgSWYgZmFsc2UsIG9ubHkgc2hvdyB3aGVuIHRoZSBEZXZlbG9wZXIgVG9vbHMgcHJlZiBpcyBvbiAoZGVmYXVsdCB0cnVlKQovLyAgIGNhdGVnb3J5LCAgICAgICAgICAgICAgICAtLSBHcm91cCB0byBzaG93IHRoZSBwcm9kdWN0IGluIGZvciB0aGUgbmF2IGhhbWJ1cmdlciBtZW51Ci8vICAgdHlwZVN0b3JlTWFwLCAgICAgICAgICAgIC0tIEFuIG9iamVjdCBtYXBwaW5nIHR5cGVzIHRvIHRoZSBzdG9yZSB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIHJldHJpZXZlIGluZm9ybWF0aW9uIGFib3V0IHRoZSB0eXBlCi8vICAgaGlkZVN5c3RlbVJlc291cmNlcyAgICAgIC0tIEhpZGUgcmVzb3VyY2VzIGluIG5hbWVzcGFjZXMgd2hlcmUgbmFtZXNwYWNlLmlzU3lzdGVtID09PSB0cnVlLCBvciBhIG5hbWVzcGFjZSBtYW5hZ2VkIGJ5IGZsZWV0IChwZXIgaXRzIGFubm90YXRpb24pIGFuZCBoaWRlIHRob3NlIG5hbWVzcGFjZXMgZnJvbSBucy9wcm9qZWN0IGxpc3QgYW5kIG5zZmlsdGVyIChkZWZhdWx0IGZhbHNlKQovLyAgIGhpZGVOYW1lc3BhY2VMb2NhdGlvbiAgICAtLSBIaWRlIHRoZSBuYW1lc3BhY2UgbGluayBpbiB0aGUgUmVzb3VyY2VEZXRhaWwgbWFzdGhlYWQgb2YgbmFtZXNwYWNlZCByZXNvdXJjZXMgYW5kIGhpZGUgdGhlIEV4cGxvcmVyUHJvamVjdHNOYW1lc3BhY2VzIG5hbWVzcGFjZSBsaW5rIChkZWZhdWx0IGZhbHNlKQovLyB9KQovLwovLyBleHRlcm5hbExpbmsoc3RyaW5nT3JGbikgIFRoZSBwcm9kdWN0IGhhcyBhbiBleHRlcm5hbCBwYWdlIChmdW5jdGlvbiBnZXRzIGNvbnRleHQgb2JqZWN0Ci8vCi8vIHZpcnR1YWxUeXBlKG9iaikgICAgICAgICAgIEFkZCBhbiBpdGVtIHRvIHRoZSB0cmVlIHRoYXQgZ29lcyB0byBhIHJvdXRlIGluc3RlYWQgb2YgYW4gYWN0dWFsIHR5cGUuCi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tICBvYmogY2FuIGNvbnRhaW4gYW55dGhpbmcgaW4gdGhlIG9iamVjdHMgZ2V0VHJlZSByZXR1cm5zLgovLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSAgb2JqIG11c3QgaGF2ZSBhIGBuYW1lYCB0aGF0IGlzIHVuaXF1ZSBhbW9uZyBhbGwgdmlydHVhbCB0eXBlcy4KLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0gYGNsdXN0ZXJgIGlzIGF1dG9tYXRpY2FsbHkgYWRkZWQgdG8gcm91dGUucGFyYW1zIGlmIGl0IGV4aXN0cy4KLy8KLy8gc3Bvb2ZlZFR5cGUob2JqKSAgICAgICAgICAgQ3JlYXRlIGEgZmFrZSB0eXBlIHRoYXQgY2FuIGJlIHRyZWF0ZWQgbGlrZSBhIG5vcm1hbCB0eXBlCi8vCi8vIGJhc2ljVHlwZSggICAgICAgICAgICAgICAgIE1hcmsgdHlwZShzKSBhcyBhbHdheXMgc2hvd24gaW4gdGhlIHRvcCBvZiB0aGUgbmF2Ci8vICAgdHlwZShzKSwgICAgICAgICAgICAgICAgIC0tIFR5cGUgbmFtZSBvciBhcnJheSBvZiB0eXBlIG5hbWVzCi8vICAgZ3JvdXAgICAgICAgICAgICAgICAgICAgIC0tIEdyb3VwIHRvIHNob3cgdGhlIHR5cGUocykgdW5kZXI7IGZhbHNlLXkgZm9yIHRvcC1sZXZlbC4KLy8gKQovLyBiYXNpY1R5cGUoICAgICAgICAgICAgICAgICBNYXJrIGFsbCB0eXBlcyBpbiBncm91cCBhcyBhbHdheXMgc2hvd24gaW4gdGhlIHRvcCBvZiB0aGUgbmF2Ci8vICAgZ3JvdXAsICAgICAgICAgICAgICAgICAgIC0tIEdyb3VwIHRvIHNob3cKLy8gICBhc0xhYmVsICAgICAgICAgICAgICAgICAgLS0gTGFiZWwgdG8gZGlzcGxheSB0aGUgZ3JvdXAgYXM7IGZhbHNlLXkgZm9yIHRvcC1sZXZlbC4KLy8gKQovLyBpZ25vcmVUeXBlKHR5cGUpICAgICAgICAgICBOZXZlciBzaG93IHR5cGUKLy8gd2VpZ2h0VHlwZSggICAgICAgICAgICAgICAgU2V0IHRoZSB3ZWlnaHQgKHNvcnRpbmcpIG9yZGVyIG9mIG9uZSBvciBtb3JlIHR5cGVzCi8vICAgdHlwZU9yQXJyYXlPZlR5cGVzLAovLyAgIHdlaWdodCwgICAgICAgICAgICAgICAgICAtLSBIaWdoZXIgbnVtYmVycyBhcmUgc2hvd24gZmlyc3QvaGlnaGVyIHVwIG9uIHRoZSBuYXYgdHJlZQovLyAgIGZvckJhc2ljICAgICAgICAgICAgICAgICAtLSBBcHBseSB0byBiYXNpYyB0eXBlIGluc3RlYWQgb2YgcmVndWxhciB0eXBlIHRyZWUKLy8gKQovLyBtYXBUeXBlKCAgICAgICAgICAgICAgICAgICBSZW1hcCBhIHR5cGUgaWQgdG8gYSBkaXNwbGF5IG5hbWUKLy8gICBtYXRjaFJlZ2V4T3JTdHJpbmcsICAgICAgLS0gVHlwZSB0byBtYXRjaCwgb3IgcmVnZXggdGhhdCBtYXRjaGVzIHR5cGVzCi8vICAgcmVwbGFjZW1lbnRTdHJpbmdPckZuLCAgIC0tIFN0cmluZyB0byByZXBsYWNlIHRoZSB0eXBlIHdpdGgsIG9yCi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tIHN5bmMgZnVuY3Rpb246ICh0eXBlLCBjYXB0dXJlZFN0cmluZywgc2NoZW1hT2JqID0+IHsgcmV0dXJuICduZXctdHlwZSc7IH0KLy8gICBtYXBXZWlnaHQsICAgICAgICAgICAgICAgLS0gUHJpb3JpdHkgZm9yIGFwcGx5IHRoaXMgbWFwcGluZyAoaGlnaGVyIG51bWJlcnMgYXBwbGllZCBmaXJzdCkKLy8gICBjb250aW51ZU9uTWF0Y2ggICAgICAgICAgLS0gSWYgdHJ1ZSwgY29udGludWUgYXBwbHlpbmcgdG8gaGl0IG90aGVyIHJ1bGVzIHRoYXQgbWlnaHQgbWF0Y2ggdGhlIG5ldyB0eXBlLgovLyApCi8vIG1vdmVUeXBlKCAgICAgICAgICAgICAgICAgIENoYW5nZSB0aGUgZ3JvdXAgYSB0eXBlIGlzIGluCi8vICAgbWF0Y2hSZWdleE9yU3RyaW5nLCAgICAgIC0tIFR5cGUgdG8gbWF0Y2gsIG9yIHJlZ2V4IHRoYXQgbWF0Y2hlcyB0eXBlcwovLyAgIG5ld0dyb3VwLCAgICAgICAgICAgICAgICAtLSBHcm91cCB0byBtb3ZlIHRoZSB0eXBlIGludG8KLy8gICBtYXBXZWlnaHQsICAgICAgICAgICAgICAgLS0gUHJpb3JpdHkgZm9yIGFwcGx5IHRoaXMgbWFwcGluZyAoaGlnaGVyIG51bWJlcnMgYXBwbGllZCBmaXJzdCkKLy8gKQovLyBjb21wb25lbnRGb3JUeXBlKCAgICAgICAgICBNYXAgbWF0Y2hpbmcgdHlwZXMgdG8gYSBzaW5nbGUgY29tcG9uZW50IG5hbWUKLy8gKCAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgaXMgaGVscGZ1bCBpZiBtdWx0aXBsZSB0eXBlcyBzaG91bGQgYmUgcmVuZGVyZWQgYnkgYSBzaW5nbGUgY29tcG9uZW50KQovLyAgIG1hdGNoUmVnZXhPclN0cmluZywgICAgICAtLSBUeXBlIHRvIG1hdGNoLCBvciByZWdleCB0aGF0IG1hdGNoZXMgdHlwZXMKLy8gICByZXBsYWNlbWVudFN0cmluZyAgICAgICAgLS0gU3RyaW5nIHRvIHJlcGxhY2UgdGhlIHR5cGUgd2l0aAovLyApCi8vIGNvbmZpZ3VyZVR5cGUoICAgICAgICAgICAgRGlzcGxheSBvcHRpb25zIGZvciBhIHBhcnRpY3VsYXIgdHlwZQovLyAgIHR5cGUsICAgICAgICAgICAgICAgICAgICAtLSBUeXBlIHRvIGFwcGx5IHRvCi8vICBvcHRpb25zICAgICAgICAgICAgICAgICAgIC0tIE9iamVjdCBvZiBvcHRpb25zLiAgRGVmYXVsdHMvU3VwcG9ydGVkOiB7Ci8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQ3JlYXRhYmxlOiB0cnVlLCAtLSBJZiBmYWxzZSwgZGlzYWJsZSBjcmVhdGUgZXZlbiBpZiBzY2hlbWEgc2F5cyBpdCdzIGFsbG93ZWQKLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNFZGl0YWJsZTogdHJ1ZSwgIC0tIERpdHRvLCBmb3IgZWRpdAovLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1JlbW92YWJsZTogdHJ1ZSwgIC0tIERpdHRvLCBmb3IgcmVtb3ZlL2RlbGV0ZQovLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93U3RhdGU6IHRydWUsICAtLSBJZiBmYWxzZSwgaGlkZSBzdGF0ZSBpbiBjb2x1bW5zIGFuZCBtYXN0aGVhZAovLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93QWdlOiB0cnVlLCAgICAtLSBJZiBmYWxzZSwgaGlkZSBhZ2UgaW4gY29sdW1ucyBhbmQgbWFzdGhlYWQKLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0NvbmZpZ1ZpZXc6IHRydWUgLS0gSWYgZmFsc2UsIGhpZGUgbWFzdGhlYWQgY29uZmlnIGJ1dHRvbiBpbiB2aWV3IG1vZGUKLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0xpc3RNYXN0aGVhZDogdHJ1ZSwgLS0gSWYgZmFsc2UsIGhpZGUgbWFzdGhlYWQgaW4gbGlzdCB2aWV3Ci8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbllhbWw6IHRydWUsCi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlOiB1bmRlZmluZWQgICAgICAgLS0gVXNlIHRoaXMgcmVzb3VyY2UgaW4gUmVzb3VyY2VEZXRhaWxzIGluc3RlYWQKLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VEZXRhaWw6IHVuZGVmaW5lZCAtLSBVc2UgdGhpcyByZXNvdXJjZSBzcGVjaWZpY2FsbHkgZm9yIFJlc291cmNlRGV0YWlsJ3MgZGV0YWlsIGNvbXBvbmVudAovLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZUVkaXQ6IHVuZGVmaW5lZCAgIC0tIFVzZSB0aGlzIHJlc291cmNlIHNwZWNpZmljYWxseSBmb3IgUmVzb3VyY2VEZXRhaWwncyBlZGl0IGNvbXBvbmVudAovLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXBhZ2luYXRlOiB1bmRlZmluZWQgLS0gVXNlIHRoaXMgdG8gZGVwYWdpbmF0ZSByZXF1ZXN0cyBmb3IgdGhpcyB0eXBlCi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlRWRpdE1hc3RoZWFkOiB0cnVlICAgLS0gU2hvdyB0aGUgTWFzdGhlYWQgaW4gdGhlIGVkaXQgcmVzb3VyY2UgY29tcG9uZW50Ci8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbVJvdXRlOiB1bmRlZmluZWQsCi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0dyYXBoOiB1bmRlZmluZWQgICAtLSBJZiB0cnVlLCByZW5kZXIgRm9yY2VEaXJlY3RlZFRyZWVDaGFydCBncmFwaCAoQVRURU5USU9OOiBvcHRpb24gZ3JhcGhDb25maWcgaXMgbmVlZGVkIGFsc28hISEpCi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyYXBoQ29uZmlnOiB1bmRlZmluZWQgICAtLSBVc2UgdGhpcyB0byBwYXNzIGFsb25nIHRoZSBncmFwaCBjb25maWd1cmF0aW9uCi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdEZpbHRlck5hbWVzcGFjZTogIHVuZGVmaW5lZCAtLSBEZWZpbmUgbmFtZXNwYWNlcyB0aGF0IGRvIG5vdCBuZWVkIHRvIGJlIGZpbHRlcmVkCi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsT25seTogRmFsc2UgLS0gSGlkZSB0aGlzIHR5cGUgZnJvbSB0aGUgbmF2L3NlYXJjaCBiYXIgb24gZG93bnN0cmVhbSBjbHVzdGVycwovLyAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KLy8gKQovLyBpZ25vcmVHcm91cChncm91cCk6ICAgICAgICBOZXZlciBzaG93IGdyb3VwIG9yIGFueSB0eXBlcyBpbiBpdAovLyB3ZWlnaHRHcm91cCggICAgICAgICAgICAgICBTZXQgdGhlIHdlaWdodCAoc29ydGluZykgb2Ygb25lIG9yIG1vcmUgZ3JvdXBzCi8vICAgZ3JvdXBPckFycmF5T2ZHcm91cHMsICAgIC0tIHNlZSB3ZWlnaHRUeXBlLi4uCi8vICAgd2VpZ2h0Ci8vICkKLy8gc2V0R3JvdXBEZWZhdWx0VHlwZSggICAgICAgU2V0IHRoZSBkZWZhdWx0IGNoaWxkIHR5cGUgdG8gc2hvdyB3aGVuIHRoZSBncm91cCBpcyBleHBhbmRlZAovLyAgIGdyb3VwT3JBcnJheU9mR3JvdXBzLCAgICAtLSBzZWUgc2V0R3JvdXBEZWZhdWx0VHlwZS4uLgovLyAgIGRlZmF1bHRUeXBlCi8vICkKLy8gbWFwR3JvdXAoICAgICAgICAgICAgICAgICAgUmVtYXAgYSBncm91cCBuYW1lIHRvIGEgZGlzcGxheSBuYW1lCi8vICAgbWF0Y2hSZWdleE9yU3RyaW5nLCAgICAgIC0tIHNlZSBtYXBUeXBlLi4uCi8vICAgcmVwbGFjZW1lbnRTdHJpbmcsCi8vICAgbWFwV2VpZ2h0LAovLyAgIGNvbnRpbnVlT25NYXRjaAovLyApCmltcG9ydCB7IEFHRSwgTkFNRSwgTkFNRVNQQUNFIGFzIE5BTUVTUEFDRV9DT0wsIFNUQVRFIH0gZnJvbSAnQHNoZWxsL2NvbmZpZy90YWJsZS1oZWFkZXJzJzsKaW1wb3J0IHsgQ0FUQUxPRywgQ09VTlQsIFNDSEVNQSwgTUFOQUdFTUVOVCwgTkFNRVNQQUNFIH0gZnJvbSAnQHNoZWxsL2NvbmZpZy90eXBlcyc7CmltcG9ydCB7IFZJRVdfSU5fQVBJLCBFWFBBTkRFRF9HUk9VUFMsIEZBVk9SSVRFX1RZUEVTIH0gZnJvbSAnQHNoZWxsL3N0b3JlL3ByZWZzJzsKaW1wb3J0IHsgYWRkT2JqZWN0LCBmaW5kQnksIGluc2VydEF0LCBpc0FycmF5LCByZW1vdmVPYmplY3QsIGZpbHRlckJ5IH0gZnJvbSAnQHNoZWxsL3V0aWxzL2FycmF5JzsKaW1wb3J0IHsgY2xvbmUsIGdldCB9IGZyb20gJ0BzaGVsbC91dGlscy9vYmplY3QnOwppbXBvcnQgeyBlbnN1cmVSZWdleCwgZXNjYXBlSHRtbCwgZXNjYXBlUmVnZXgsIHVjRmlyc3QsIHBsdXJhbGl6ZSB9IGZyb20gJ0BzaGVsbC91dGlscy9zdHJpbmcnOwppbXBvcnQgeyBpbXBvcnRDaGFydCwgaW1wb3J0TGlzdCwgaW1wb3J0RGV0YWlsLCBpbXBvcnRFZGl0LCBsaXN0UHJvZHVjdHMsIGxvYWRQcm9kdWN0LCBpbXBvcnRDdXN0b21Qcm9tcHRSZW1vdmUsIHJlc29sdmVMaXN0LCByZXNvbHZlRWRpdCwgcmVzb2x2ZVdpbmRvd0NvbXBvbmVudCwgaW1wb3J0V2luZG93Q29tcG9uZW50LCBpbXBvcnRMb2dpbiwgcmVzb2x2ZUNoYXJ0LCByZXNvbHZlRGV0YWlsLCBpbXBvcnREaWFsb2csIGltcG9ydE1hY2hpbmVDb25maWcsIHJlc29sdmVNYWNoaW5lQ29uZmlnQ29tcG9uZW50LCByZXNvbHZlQ2xvdWRDcmVkZW50aWFsQ29tcG9uZW50LCBpbXBvcnRDbG91ZENyZWRlbnRpYWwgfSBmcm9tICdAc2hlbGwvdXRpbHMvZHluYW1pYy1pbXBvcnRlcic7CmltcG9ydCB7IE5BTUUgYXMgRVhQTE9SRVIgfSBmcm9tICdAc2hlbGwvY29uZmlnL3Byb2R1Y3QvZXhwbG9yZXInOwppbXBvcnQgaXNPYmplY3QgZnJvbSAnbG9kYXNoL2lzT2JqZWN0JzsKaW1wb3J0IHsgbm9ybWFsaXplVHlwZSB9IGZyb20gJ0BzaGVsbC9wbHVnaW5zL2Rhc2hib2FyZC1zdG9yZS9ub3JtYWxpemUnOwppbXBvcnQgeyBzb3J0QnkgfSBmcm9tICdAc2hlbGwvdXRpbHMvc29ydCc7CmltcG9ydCB7IGhhdmVWMU1vbml0b3JpbmcsIGhhdmVWMk1vbml0b3JpbmcgfSBmcm9tICdAc2hlbGwvdXRpbHMvbW9uaXRvcmluZyc7CmltcG9ydCB7IE5FVV9WRUNUT1JfTkFNRVNQQUNFIH0gZnJvbSAnQHNoZWxsL2NvbmZpZy9wcm9kdWN0L25ldXZlY3Rvcic7CmV4cG9ydCBjb25zdCBOQU1FU1BBQ0VEID0gJ25hbWVzcGFjZWQnOwpleHBvcnQgY29uc3QgQ0xVU1RFUl9MRVZFTCA9ICdjbHVzdGVyJzsKZXhwb3J0IGNvbnN0IEJPVEggPSAnYm90aCc7CmV4cG9ydCBjb25zdCBBTEwgPSAnYWxsJzsKZXhwb3J0IGNvbnN0IEJBU0lDID0gJ2Jhc2ljJzsKZXhwb3J0IGNvbnN0IEZBVk9SSVRFID0gJ2Zhdm9yaXRlJzsKZXhwb3J0IGNvbnN0IFVTRUQgPSAndXNlZCc7CmV4cG9ydCBjb25zdCBST09UID0gJ3Jvb3QnOwpleHBvcnQgY29uc3QgU1BPT0ZFRF9QUkVGSVggPSAnX19bW3Nwb29mZWRdXV9fJzsKZXhwb3J0IGNvbnN0IFNQT09GRURfQVBJX1BSRUZJWCA9ICdfX1tbc3Bvb2ZlZGFwaV1dX18nOwpjb25zdCBpbnN0YW5jZU1ldGhvZHMgPSB7fTsKY29uc3QgZ3JhcGhDb25maWdNYXAgPSB7fTsKY29uc3QgRklFTERfUkVHRVggPSAvXlwkXC5tZXRhZGF0YVwuZmllbGRzXFsoWzAtOV0qKVxdLzsKZXhwb3J0IGNvbnN0IElGX0hBVkUgPSB7CiAgVjFfTU9OSVRPUklORzogJ3YxLW1vbml0b3JpbmcnLAogIFYyX01PTklUT1JJTkc6ICd2Mi1tb25pdG9yaW5nJywKICBQUk9KRUNUOiAncHJvamVjdCcsCiAgTk9fUFJPSkVDVDogJ25vLXByb2plY3QnLAogIE5PVF9WMV9JU1RJTzogJ25vdC12MS1pc3RpbycsCiAgTVVMVElfQ0xVU1RFUjogJ211bHRpLWNsdXN0ZXInLAogIE5FVVZFQ1RPUl9OQU1FU1BBQ0U6ICduZXV2ZWN0b3ItbmFtZXNwYWNlJywKICBBRE1JTjogJ2FkbWluLXVzZXInLAogIE1DTV9ESVNBQkxFRDogJ21jbS1kaXNhYmxlZCcsCiAgTk9UX1NUQU5EQUxPTkVfSEFSVkVTVEVSOiAnbm90LXN0YW5kYWxvbmUtaGFydmVzdGVyJwp9OwpleHBvcnQgZnVuY3Rpb24gRFNMKHN0b3JlLCBwcm9kdWN0LCBtb2R1bGUgPSAndHlwZS1tYXAnKSB7CiAgLy8gc3RvcmUuY29tbWl0KGAkeyBtb2R1bGUgfS9wcm9kdWN0YCwgeyBuYW1lOiBwcm9kdWN0IH0pOwoKICByZXR1cm4gewogICAgcHJvZHVjdChpbk9wdCkgewogICAgICBjb25zdCBvcHQgPSB7CiAgICAgICAgbmFtZTogcHJvZHVjdCwKICAgICAgICB3ZWlnaHQ6IDEsCiAgICAgICAgaW5TdG9yZTogJ2NsdXN0ZXInLAogICAgICAgIGluRXhwbG9yZXI6IGZhbHNlLAogICAgICAgIHJlbW92YWJsZTogdHJ1ZSwKICAgICAgICBzaG93Q2x1c3RlclN3aXRjaGVyOiB0cnVlLAogICAgICAgIHNob3dOYW1lc3BhY2VGaWx0ZXI6IGZhbHNlLAogICAgICAgIHB1YmxpYzogdHJ1ZSwKICAgICAgICBmaWx0ZXJNb2RlOiAnbmFtZXNwYWNlcycsCiAgICAgICAgLi4uaW5PcHQKICAgICAgfTsKICAgICAgZm9yIChjb25zdCBrIG9mIFsnaWZIYXZlR3JvdXAnLCAnaWZIYXZlVHlwZSddKSB7CiAgICAgICAgaWYgKG9wdFtrXSkgewogICAgICAgICAgb3B0W2tdID0gcmVnZXhUb1N0cmluZyhlbnN1cmVSZWdleChvcHRba10pKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgc3RvcmUuY29tbWl0KGAke21vZHVsZX0vcHJvZHVjdGAsIG9wdCk7CiAgICB9LAogICAgYmFzaWNUeXBlKHR5cGVzLCBncm91cCkgewogICAgICAvLyBTdXBwb3J0IHBhc3NpbmcgaW4gYSBtYXAgb2YgdHlwZXMgYW5kIHVzaW5nIGp1c3QgdGhlIHZhbHVlcwogICAgICBpZiAoIWlzQXJyYXkodHlwZXMpICYmIHR5cGVzICYmIGlzT2JqZWN0KHR5cGVzKSkgewogICAgICAgIHR5cGVzID0gT2JqZWN0LnZhbHVlcyh0eXBlcyk7CiAgICAgIH0KICAgICAgc3RvcmUuY29tbWl0KGAke21vZHVsZX0vYmFzaWNUeXBlYCwgewogICAgICAgIHByb2R1Y3QsCiAgICAgICAgdHlwZXMsCiAgICAgICAgZ3JvdXAKICAgICAgfSk7CiAgICB9LAogICAgLy8gVHlwZS0gYW5kIEdyb3VwLWRlcGVuZGVudAogICAgZ3JvdXBCeSh0eXBlLCBmaWVsZCkgewogICAgICBzdG9yZS5jb21taXQoYCR7bW9kdWxlfS9ncm91cEJ5YCwgewogICAgICAgIHR5cGUsCiAgICAgICAgZmllbGQKICAgICAgfSk7CiAgICB9LAogICAgaGVhZGVycyh0eXBlLCBoZWFkZXJzKSB7CiAgICAgIGhlYWRlcnMuZm9yRWFjaChoZWFkZXIgPT4gewogICAgICAgIC8vIElmIG9uIHRoZSBjbGllbnQsIHRoZW4gdXNlIHRoZSB2YWx1ZSBnZXR0ZXIgaWYgdGhlcmUgaXMgb25lCiAgICAgICAgaWYgKGhlYWRlci5nZXRWYWx1ZSkgewogICAgICAgICAgLy8gd2UgbmVlZCB0byBzdG9yZSB0aGUgLnZhbHVlIHByb3AgZm9yIHRoZSBhZHZhbmNlZCBmaWx0ZXJpbmcKICAgICAgICAgIGhlYWRlci52YWx1ZVByb3AgPSBoZWFkZXIudmFsdWU7CiAgICAgICAgICBoZWFkZXIudmFsdWUgPSBoZWFkZXIuZ2V0VmFsdWU7CiAgICAgICAgfQogICAgICAgIGRlbGV0ZSBoZWFkZXIuZ2V0VmFsdWU7CiAgICAgIH0pOwogICAgICBzdG9yZS5jb21taXQoYCR7bW9kdWxlfS9oZWFkZXJzYCwgewogICAgICAgIHR5cGUsCiAgICAgICAgaGVhZGVycwogICAgICB9KTsKICAgIH0sCiAgICBoaWRlQnVsa0FjdGlvbnModHlwZSwgZmllbGQpIHsKICAgICAgc3RvcmUuY29tbWl0KGAke21vZHVsZX0vaGlkZUJ1bGtBY3Rpb25zYCwgewogICAgICAgIHR5cGUsCiAgICAgICAgZmllbGQKICAgICAgfSk7CiAgICB9LAogICAgY29uZmlndXJlVHlwZShtYXRjaCwgb3B0aW9ucykgewogICAgICBpZiAob3B0aW9ucy5ncmFwaENvbmZpZykgewogICAgICAgIGdyYXBoQ29uZmlnTWFwW21hdGNoXSA9IG9wdGlvbnMuZ3JhcGhDb25maWc7CiAgICAgICAgZGVsZXRlIG9wdGlvbnMuZ3JhcGhDb25maWc7CiAgICAgIH0KICAgICAgc3RvcmUuY29tbWl0KGAke21vZHVsZX0vY29uZmlndXJlVHlwZWAsIHsKICAgICAgICAuLi5vcHRpb25zLAogICAgICAgIG1hdGNoCiAgICAgIH0pOwogICAgfSwKICAgIGNvbXBvbmVudEZvclR5cGUobWF0Y2gsIHJlcGxhY2UpIHsKICAgICAgc3RvcmUuY29tbWl0KGAke21vZHVsZX0vY29tcG9uZW50Rm9yVHlwZWAsIHsKICAgICAgICBtYXRjaCwKICAgICAgICByZXBsYWNlCiAgICAgIH0pOwogICAgfSwKICAgIGlnbm9yZVR5cGUocmVnZXhPclN0cmluZykgewogICAgICBzdG9yZS5jb21taXQoYCR7bW9kdWxlfS9pZ25vcmVUeXBlYCwgcmVnZXhPclN0cmluZyk7CiAgICB9LAogICAgaWdub3JlR3JvdXAocmVnZXhPclN0cmluZywgY2IpIHsKICAgICAgc3RvcmUuY29tbWl0KGAke21vZHVsZX0vaWdub3JlR3JvdXBgLCB7CiAgICAgICAgcmVnZXhPclN0cmluZywKICAgICAgICBjYgogICAgICB9KTsKICAgIH0sCiAgICB3ZWlnaHRHcm91cChpbnB1dCwgd2VpZ2h0LCBmb3JCYXNpYykgewogICAgICBpZiAoaXNBcnJheShpbnB1dCkpIHsKICAgICAgICBzdG9yZS5jb21taXQoYCR7bW9kdWxlfS93ZWlnaHRHcm91cGAsIHsKICAgICAgICAgIGdyb3VwczogaW5wdXQsCiAgICAgICAgICB3ZWlnaHQsCiAgICAgICAgICBmb3JCYXNpYwogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHN0b3JlLmNvbW1pdChgJHttb2R1bGV9L3dlaWdodEdyb3VwYCwgewogICAgICAgICAgZ3JvdXA6IGlucHV0LAogICAgICAgICAgd2VpZ2h0LAogICAgICAgICAgZm9yQmFzaWMKICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIHNldEdyb3VwRGVmYXVsdFR5cGUoaW5wdXQsIGRlZmF1bHRUeXBlKSB7CiAgICAgIGlmIChpc0FycmF5KGlucHV0KSkgewogICAgICAgIHN0b3JlLmNvbW1pdChgJHttb2R1bGV9L3NldEdyb3VwRGVmYXVsdFR5cGVgLCB7CiAgICAgICAgICBncm91cHM6IGlucHV0LAogICAgICAgICAgZGVmYXVsdFR5cGUKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBzdG9yZS5jb21taXQoYCR7bW9kdWxlfS9zZXRHcm91cERlZmF1bHRUeXBlYCwgewogICAgICAgICAgZ3JvdXA6IGlucHV0LAogICAgICAgICAgZGVmYXVsdFR5cGUKICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIHdlaWdodFR5cGUoaW5wdXQsIHdlaWdodCwgZm9yQmFzaWMpIHsKICAgICAgaWYgKGlzQXJyYXkoaW5wdXQpKSB7CiAgICAgICAgc3RvcmUuY29tbWl0KGAke21vZHVsZX0vd2VpZ2h0VHlwZWAsIHsKICAgICAgICAgIHR5cGVzOiBpbnB1dCwKICAgICAgICAgIHdlaWdodCwKICAgICAgICAgIGZvckJhc2ljCiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc3RvcmUuY29tbWl0KGAke21vZHVsZX0vd2VpZ2h0VHlwZWAsIHsKICAgICAgICAgIHR5cGU6IGlucHV0LAogICAgICAgICAgd2VpZ2h0LAogICAgICAgICAgZm9yQmFzaWMKICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIG1hcEdyb3VwKG1hdGNoLCByZXBsYWNlLCB3ZWlnaHQgPSA1LCBjb250aW51ZU9uTWF0Y2ggPSBmYWxzZSkgewogICAgICBzdG9yZS5jb21taXQoYCR7bW9kdWxlfS9tYXBHcm91cGAsIHsKICAgICAgICBtYXRjaCwKICAgICAgICByZXBsYWNlLAogICAgICAgIHdlaWdodCwKICAgICAgICBjb250aW51ZU9uTWF0Y2gKICAgICAgfSk7CiAgICB9LAogICAgbWFwVHlwZShtYXRjaCwgcmVwbGFjZSwgd2VpZ2h0ID0gNSwgY29udGludWVPbk1hdGNoID0gZmFsc2UpIHsKICAgICAgc3RvcmUuY29tbWl0KGAke21vZHVsZX0vbWFwVHlwZWAsIHsKICAgICAgICBtYXRjaCwKICAgICAgICByZXBsYWNlLAogICAgICAgIHdlaWdodCwKICAgICAgICBjb250aW51ZU9uTWF0Y2gKICAgICAgfSk7CiAgICB9LAogICAgbW92ZVR5cGUobWF0Y2gsIGdyb3VwLCB3ZWlnaHQgPSA1LCBjb250aW51ZU9uTWF0Y2ggPSBmYWxzZSkgewogICAgICBzdG9yZS5jb21taXQoYCR7bW9kdWxlfS9tb3ZlVHlwZWAsIHsKICAgICAgICBtYXRjaCwKICAgICAgICBncm91cCwKICAgICAgICB3ZWlnaHQKICAgICAgfSk7CiAgICB9LAogICAgdmlydHVhbFR5cGUob2JqKSB7CiAgICAgIHN0b3JlLmNvbW1pdChgJHttb2R1bGV9L3ZpcnR1YWxUeXBlYCwgewogICAgICAgIHByb2R1Y3QsCiAgICAgICAgb2JqCiAgICAgIH0pOwogICAgfSwKICAgIHNwb29mZWRUeXBlKG9iaikgewogICAgICBzdG9yZS5jb21taXQoYCR7bW9kdWxlfS9zcG9vZmVkVHlwZWAsIHsKICAgICAgICBwcm9kdWN0LAogICAgICAgIG9iagogICAgICB9KTsKICAgIH0KICB9Owp9CmxldCBjYWxsZWQgPSBmYWxzZTsKZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFwcGx5UHJvZHVjdHMoc3RvcmUsICRwbHVnaW4pIHsKICBpZiAoY2FsbGVkKSB7CiAgICByZXR1cm47CiAgfQogIGNhbGxlZCA9IHRydWU7CiAgZm9yIChjb25zdCBwcm9kdWN0IG9mIGxpc3RQcm9kdWN0cygpKSB7CiAgICBjb25zdCBpbXBsID0gYXdhaXQgbG9hZFByb2R1Y3QocHJvZHVjdCk7CiAgICBpZiAoaW1wbCAhPT0gbnVsbCAmJiBpbXBsICE9PSB2b2lkIDAgJiYgaW1wbC5pbml0KSB7CiAgICAgIGltcGwuaW5pdChzdG9yZSk7CiAgICB9CiAgfQogIC8vIExvYWQgdGhlIHByb2R1Y3RzIGZyb20gYWxsIHBsdWdpbnMKICAkcGx1Z2luLmxvYWRQcm9kdWN0cygpOwp9CmV4cG9ydCBmdW5jdGlvbiBwcm9kdWN0c0xvYWRlZCgpIHsKICByZXR1cm4gY2FsbGVkOwp9CmV4cG9ydCBjb25zdCBzdGF0ZSA9IGZ1bmN0aW9uICgpIHsKICByZXR1cm4gewogICAgcHJvZHVjdHM6IFtdLAogICAgdmlydHVhbFR5cGVzOiB7fSwKICAgIHNwb29mZWRUeXBlczoge30sCiAgICBiYXNpY1R5cGVzOiB7fSwKICAgIGdyb3VwSWdub3JlOiBbXSwKICAgIGdyb3VwV2VpZ2h0czoge30sCiAgICBncm91cERlZmF1bHRUeXBlczoge30sCiAgICBiYXNpY0dyb3VwV2VpZ2h0czogewogICAgICBbUk9PVF06IDEwMDAKICAgIH0sCiAgICBncm91cE1hcHBpbmdzOiBbXSwKICAgIHR5cGVJZ25vcmU6IFtdLAogICAgYmFzaWNUeXBlV2VpZ2h0czoge30sCiAgICB0eXBlV2VpZ2h0czoge30sCiAgICB0eXBlTWFwcGluZ3M6IFtdLAogICAgdHlwZU1vdmVNYXBwaW5nczogW10sCiAgICB0eXBlVG9Db21wb25lbnRNYXBwaW5nczogW10sCiAgICB0eXBlT3B0aW9uczogW10sCiAgICBncm91cEJ5OiB7fSwKICAgIGhlYWRlcnM6IHt9LAogICAgaGlkZUJ1bGtBY3Rpb25zOiB7fSwKICAgIHNjaGVtYUdlbmVyYXRpb246IDEsCiAgICBjYWNoZTogewogICAgICB0eXBlTW92ZToge30sCiAgICAgIGdyb3VwTGFiZWw6IHt9LAogICAgICBpZ25vcmU6IHt9LAogICAgICBsaXN0OiB7fSwKICAgICAgY2hhcnQ6IHt9LAogICAgICBkZXRhaWw6IHt9LAogICAgICBlZGl0OiB7fSwKICAgICAgY29tcG9uZW50Rm9yOiB7fSwKICAgICAgcHJvbXB0UmVtb3ZlOiB7fSwKICAgICAgd2luZG93Q29tcG9uZW50czoge30sCiAgICAgICdtYWNoaW5lLWNvbmZpZyc6IHt9LAogICAgICAnY2xvdWQtY3JlZGVudGlhbCc6IHt9CiAgICB9CiAgfTsKfTsKZXhwb3J0IGNvbnN0IGdldHRlcnMgPSB7CiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogIC8vIDEgKSBHZXR0aW5nIGluZm8KICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgLy8gVHVybnMgYSB0eXBlIG5hbWUgaW50byBhIGRpc3BsYXkgbGFiZWwgKGUuZy4gbWFuYWdlbWVudC5jYXR0bGUuaW8uY2x1c3RlciAtPiBDbHVzdGVyKQogIGxhYmVsRm9yKHN0YXRlLCBnZXR0ZXJzLCByb290U3RhdGUsIHJvb3RHZXR0ZXJzKSB7CiAgICByZXR1cm4gKHNjaGVtYSwgY291bnQgPSAxLCBsYW5ndWFnZSA9IG51bGwpID0+IHsKICAgICAgcmV0dXJuIF9hcHBseU1hcHBpbmcoc2NoZW1hLCBzdGF0ZS50eXBlTWFwcGluZ3MsICdpZCcsIGZhbHNlLCAoKSA9PiB7CiAgICAgICAgdmFyIF9zY2hlbWEkYXR0cmlidXRlczsKICAgICAgICBjb25zdCBrZXkgPSBgdHlwZUxhYmVsLiIke3NjaGVtYS5pZC50b0xvd2VyQ2FzZSgpfSJgOwogICAgICAgIGlmIChyb290R2V0dGVyc1snaTE4bi9leGlzdHMnXShrZXksIGxhbmd1YWdlKSkgewogICAgICAgICAgcmV0dXJuIHJvb3RHZXR0ZXJzWydpMThuL3QnXShrZXksIHsKICAgICAgICAgICAgY291bnQKICAgICAgICAgIH0sIGxhbmd1YWdlKS50cmltKCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IG91dCA9IChzY2hlbWEgPT09IG51bGwgfHwgc2NoZW1hID09PSB2b2lkIDAgfHwgKF9zY2hlbWEkYXR0cmlidXRlcyA9IHNjaGVtYS5hdHRyaWJ1dGVzKSA9PT0gbnVsbCB8fCBfc2NoZW1hJGF0dHJpYnV0ZXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zY2hlbWEkYXR0cmlidXRlcy5raW5kKSB8fCBzY2hlbWEuaWQgfHwgJz8nOwoKICAgICAgICAvLyBBZGQgc3BhY2VzLCBidXQgYnJlYWtzIHR5cGluZyBuYW1lcyBpbnRvIGp1bXAgbWVudSBuYXR1cmFsbHkKICAgICAgICAvLyBvdXQgPSB1Y0ZpcnN0KG91dC5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCckMSAkMicpKTsKCiAgICAgICAgaWYgKGNvdW50ID09PSAxKSB7CiAgICAgICAgICByZXR1cm4gb3V0OwogICAgICAgIH0KCiAgICAgICAgLy8gVGhpcyB3b3JrcyBmb3IgbW9zdCB0aGluZ3MuLi4gaWYgeW91IGRvbid0IGxpa2UgaXQsIHB1dCBpbiBhIHR5cGVMYWJlbCB0cmFuc2xhdGlvbiBmb3IgYWJvdmUuCiAgICAgICAgcmV0dXJuIHBsdXJhbGl6ZShvdXQpOwogICAgICB9KTsKICAgIH07CiAgfSwKICAvLyBUdXJucyBhIGdyb3VwIG5hbWUgaW50byBhIGRpc3BsYXkgbGFiZWwgKGUuZy4gbWFuYWdlbWVudC5jYXR0bGUuaW8udjMuY2x1c3RlciAtPiBDbHVzdGVyKQogIGdyb3VwTGFiZWxGb3Ioc3RhdGUpIHsKICAgIHJldHVybiBzY2hlbWFPck5hbWUgPT4gewogICAgICBsZXQgZ3JvdXAgPSBzY2hlbWFPck5hbWU7CiAgICAgIGlmICh0eXBlb2Ygc2NoZW1hT3JOYW1lID09PSAnb2JqZWN0JykgewogICAgICAgIGxldCBtb3ZlZCA9IGZhbHNlOwogICAgICAgIGZvciAoY29uc3QgcnVsZSBvZiBzdGF0ZS50eXBlTW92ZU1hcHBpbmdzKSB7CiAgICAgICAgICBjb25zdCByZSA9IHN0cmluZ1RvUmVnZXgocnVsZS5tYXRjaCk7CiAgICAgICAgICBpZiAoc2NoZW1hT3JOYW1lLmlkLm1hdGNoKHJlKSkgewogICAgICAgICAgICBtb3ZlZCA9IHRydWU7CiAgICAgICAgICAgIGdyb3VwID0gcnVsZS5yZXBsYWNlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoIW1vdmVkKSB7CiAgICAgICAgICBncm91cCA9IGdyb3VwLmF0dHJpYnV0ZXMuZ3JvdXA7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmICh0eXBlb2YgZ3JvdXAgIT09ICdzdHJpbmcnKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgY29uc3Qgb3V0ID0gX2FwcGx5TWFwcGluZyhncm91cCwgc3RhdGUuZ3JvdXBNYXBwaW5ncywgbnVsbCwgc3RhdGUuY2FjaGUuZ3JvdXBMYWJlbCwgZ3JvdXAgPT4gewogICAgICAgIGNvbnN0IG1hdGNoID0gZ3JvdXAubWF0Y2goL14oLiopXC5rOHNcLmlvJC8pOwogICAgICAgIGlmIChtYXRjaCkgewogICAgICAgICAgcmV0dXJuIG1hdGNoWzFdLnNwbGl0KC9cLi8pLm1hcCh4ID0+IHVjRmlyc3QoeCkpLmpvaW4oJy4nKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGdyb3VwOwogICAgICB9KTsKICAgICAgcmV0dXJuIG91dDsKICAgIH07CiAgfSwKICBncm91cEZvckJhc2ljVHlwZShzdGF0ZSkgewogICAgcmV0dXJuIChwcm9kdWN0LCBzY2hlbWFJZCkgPT4gewogICAgICB2YXIgX3N0YXRlJGJhc2ljVHlwZXM7CiAgICAgIHJldHVybiAoX3N0YXRlJGJhc2ljVHlwZXMgPSBzdGF0ZS5iYXNpY1R5cGVzKSA9PT0gbnVsbCB8fCBfc3RhdGUkYmFzaWNUeXBlcyA9PT0gdm9pZCAwIHx8IChfc3RhdGUkYmFzaWNUeXBlcyA9IF9zdGF0ZSRiYXNpY1R5cGVzW3Byb2R1Y3RdKSA9PT0gbnVsbCB8fCBfc3RhdGUkYmFzaWNUeXBlcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0YXRlJGJhc2ljVHlwZXNbc2NoZW1hSWRdOwogICAgfTsKICB9LAogIG9wdGlvbnNGb3Ioc3RhdGUpIHsKICAgIGNvbnN0IGRlZiA9IHsKICAgICAgaXNDcmVhdGFibGU6IHRydWUsCiAgICAgIGlzRWRpdGFibGU6IHRydWUsCiAgICAgIGlzUmVtb3ZhYmxlOiB0cnVlLAogICAgICBzaG93U3RhdGU6IHRydWUsCiAgICAgIHNob3dBZ2U6IHRydWUsCiAgICAgIGNhbllhbWw6IHRydWUsCiAgICAgIG5hbWVzcGFjZWQ6IG51bGwsCiAgICAgIGxpc3RHcm91cHM6IFtdLAogICAgICBkZXBhZ2luYXRlOiBmYWxzZSwKICAgICAgY3VzdG9tUm91dGU6IHVuZGVmaW5lZCwKICAgICAgcmVzb3VyY2VFZGl0TWFzdGhlYWQ6IHRydWUKICAgIH07CiAgICByZXR1cm4gc2NoZW1hT3JUeXBlID0+IHsKICAgICAgaWYgKCFzY2hlbWFPclR5cGUpIHsKICAgICAgICByZXR1cm4ge307CiAgICAgIH0KICAgICAgY29uc3QgdHlwZSA9IHR5cGVvZiBzY2hlbWFPclR5cGUgPT09ICdvYmplY3QnID8gc2NoZW1hT3JUeXBlLmlkIDogc2NoZW1hT3JUeXBlOwogICAgICBjb25zdCBmb3VuZCA9IHN0YXRlLnR5cGVPcHRpb25zLmZpbmQoZW50cnkgPT4gewogICAgICAgIGNvbnN0IHJlID0gc3RyaW5nVG9SZWdleChlbnRyeS5tYXRjaCk7CiAgICAgICAgcmV0dXJuIHJlLnRlc3QodHlwZSk7CiAgICAgIH0pOwogICAgICBjb25zdCBvcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmLCBmb3VuZCB8fCB7fSk7CiAgICAgIHJldHVybiBvcHRzOwogICAgfTsKICB9LAogIGlzRmF2b3JpdGUoc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSwgcm9vdEdldHRlcnMpIHsKICAgIHJldHVybiBzY2hlbWFJZCA9PiB7CiAgICAgIHJldHVybiByb290R2V0dGVyc1sncHJlZnMvZ2V0J10oRkFWT1JJVEVfVFlQRVMpLmluY2x1ZGVzKHNjaGVtYUlkKSB8fCBmYWxzZTsKICAgIH07CiAgfSwKICB0eXBlV2VpZ2h0Rm9yKHN0YXRlKSB7CiAgICByZXR1cm4gKHR5cGUsIGZvckJhc2ljKSA9PiB7CiAgICAgIHZhciBfdHlwZTsKICAgICAgdHlwZSA9IChfdHlwZSA9IHR5cGUpID09PSBudWxsIHx8IF90eXBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdHlwZS50b0xvd2VyQ2FzZSgpOwogICAgICBpZiAoZm9yQmFzaWMpIHsKICAgICAgICByZXR1cm4gc3RhdGUuYmFzaWNUeXBlV2VpZ2h0c1t0eXBlXSB8fCAwOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBzdGF0ZS50eXBlV2VpZ2h0c1t0eXBlXSB8fCAwOwogICAgICB9CiAgICB9OwogIH0sCiAgZ3JvdXBXZWlnaHRGb3Ioc3RhdGUpIHsKICAgIHJldHVybiAoZ3JvdXAsIGZvckJhc2ljKSA9PiB7CiAgICAgIGdyb3VwID0gZ3JvdXAudG9Mb3dlckNhc2UoKTsKICAgICAgaWYgKGZvckJhc2ljKSB7CiAgICAgICAgcmV0dXJuIHN0YXRlLmJhc2ljR3JvdXBXZWlnaHRzW2dyb3VwXSB8fCAwOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBzdGF0ZS5ncm91cFdlaWdodHNbZ3JvdXBdIHx8IDA7CiAgICAgIH0KICAgIH07CiAgfSwKICBncm91cERlZmF1bHRUeXBlRm9yKHN0YXRlKSB7CiAgICByZXR1cm4gZ3JvdXAgPT4gewogICAgICBncm91cCA9IGdyb3VwLnRvTG93ZXJDYXNlKCk7CiAgICAgIHJldHVybiBzdGF0ZS5ncm91cERlZmF1bHRUeXBlc1tncm91cF07CiAgICB9OwogIH0sCiAgZ2V0VHJlZShzdGF0ZSwgZ2V0dGVycywgcm9vdFN0YXRlLCByb290R2V0dGVycykgewogICAgcmV0dXJuIChwcm9kdWN0SWQsIG1vZGUsIGFsbFR5cGVzLCBjbHVzdGVySWQsIG5hbWVzcGFjZU1vZGUsIG5hbWVzcGFjZXMsIGN1cnJlbnRUeXBlLCBzZWFyY2gpID0+IHsKICAgICAgLy8gZ2V0VHJlZSBoYXMgZm91ciBtb2RlczoKICAgICAgLy8gLSBgYmFzaWNgIG1hdGNoZXMgZGF0YSB0eXBlcyB0aGF0IHNob3VsZCBhbHdheXMgYmUgc2hvd24gZXZlbiBpZiB0aGVyZQogICAgICAvLyAgICBhcmUgMCBvZiB0aGVtLgogICAgICAvLyAtIGB1c2VkYCBtYXRjaGVzIHRoZSBkYXRhIHR5cGVzIHdoZXJlIHRoZXJlIGFyZSBtb3JlIHRoYW4gMCBvZiB0aGVtCiAgICAgIC8vICAgIGluIHRoZSBjdXJyZW50IHNldCBvZiBuYW1lc3BhY2VzLgogICAgICAvLyAtIGBhbGxgIG1hdGNoZXMgYWxsIHR5cGVzLgogICAgICAvLyAtIGBmYXZvcml0ZWAgbWF0Y2hlcyBzdGFycmVkIHR5cGVzLgogICAgICAvLyBuYW1lc3BhY2VNb2RlOiAnbmFtZXNwYWNlZCcsICdjbHVzdGVyJywgb3IgJ2JvdGgnCiAgICAgIC8vIG5hbWVzcGFjZXM6IG51bGwgbWVhbnMgYWxsLCBvdGhlcndpc2UgaXQgd2lsbCBiZSBhbiBhcnJheSBvZiBzcGVjaWZpYyBuYW1lc3BhY2VzIHRvIGluY2x1ZGUKICAgICAgY29uc3QgaXNCYXNpYyA9IG1vZGUgPT09IEJBU0lDOwogICAgICBsZXQgc2VhcmNoUmVnZXg7CiAgICAgIGlmIChzZWFyY2gpIHsKICAgICAgICBzZWFyY2hSZWdleCA9IG5ldyBSZWdFeHAoYF4oLiopKCR7ZXNjYXBlUmVnZXgoc2VhcmNoKX0pKC4qKSRgLCAnaScpOwogICAgICB9CiAgICAgIGNvbnN0IHJvb3QgPSB7CiAgICAgICAgY2hpbGRyZW46IFtdCiAgICAgIH07CgogICAgICAvLyBBZGQgdHlwZXMgZnJvbSBzaG9ydGVzdCB0byBsb25nZXN0IHNvIHRoYXQgcGFyZW50cwogICAgICAvLyBnZXQgYWRkZWQgYmVmb3JlIGNoaWxkcmVuCiAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhhbGxUeXBlcykuc29ydCgoYSwgYikgPT4gYS5sZW5ndGggLSBiLmxlbmd0aCk7CgogICAgICAvLyBTZXQgdGhlc2UgZm9yIGxhdGVyCiAgICAgIGNvbnN0IGN1cnJlbnRMb2NhbCA9IHJvb3RHZXR0ZXJzWydpMThuL2N1cnJlbnQnXSgpOwogICAgICBjb25zdCBkZWZhdWx0TG9jYWwgPSByb290R2V0dGVyc1snaTE4bi9kZWZhdWx0J10oKTsKICAgICAgZm9yIChjb25zdCB0eXBlIG9mIGtleXMpIHsKICAgICAgICB2YXIgX3R5cGVPYmokc2NoZW1hOwogICAgICAgIGNvbnN0IHR5cGVPYmogPSBhbGxUeXBlc1t0eXBlXTsKICAgICAgICBpZiAodHlwZU9iai5zY2hlbWEgJiYgZ2V0dGVycy5pc0lnbm9yZWQodHlwZU9iai5zY2hlbWEpKSB7CiAgICAgICAgICAvLyBTa2lwIGlnbm9yZWQgZ3JvdXBzICYgdHlwZXMKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBjb25zdCBuYW1lc3BhY2VkID0gdHlwZU9iai5uYW1lc3BhY2VkOwogICAgICAgIGlmIChuYW1lc3BhY2VNb2RlID09PSBOQU1FU1BBQ0VEICYmICFuYW1lc3BhY2VkIHx8IG5hbWVzcGFjZU1vZGUgPT09IENMVVNURVJfTEVWRUwgJiYgbmFtZXNwYWNlZCkgewogICAgICAgICAgLy8gU2tpcCB0eXBlcyB0aGF0IGFyZSBub3QgdGhlIHJpZ2h0IG5hbWVzcGFjZSBtb2RlCiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgY29uc3QgY291bnQgPSBfbWF0Y2hpbmdDb3VudHModHlwZU9iaiwgbmFtZXNwYWNlcyk7CiAgICAgICAgY29uc3QgZ3JvdXBGb3JCYXNpY1R5cGUgPSBnZXR0ZXJzLmdyb3VwRm9yQmFzaWNUeXBlKHByb2R1Y3RJZCwgdHlwZU9iai5uYW1lKTsKICAgICAgICBpZiAodHlwZU9iai5pZCA9PT0gY3VycmVudFR5cGUpIHsKICAgICAgICAgIC8vIElmIHRoaXMgaXMgdGhlIHR5cGUgY3VycmVudGx5IGJlaW5nIHNob3duLCBhbHdheXMgc2hvdyBpdAogICAgICAgIH0gZWxzZSBpZiAoaXNCYXNpYyAmJiAhZ3JvdXBGb3JCYXNpY1R5cGUpIHsKICAgICAgICAgIC8vIElmIHdlIHdhbnQgdGhlIGJhc2ljIHRyZWUgb25seSByZXR1cm4gYmFzaWMgdHlwZXM7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9IGVsc2UgaWYgKG1vZGUgPT09IFVTRUQgJiYgY291bnQgPD0gMCkgewogICAgICAgICAgLy8gSWYgdGhlcmUncyBub25lIG9mIHRoaXMgdHlwZSwgaWdub3JlIHRoaXMgZW50cnkgd2hlbiB2aWV3aW5nIG9ubHkgaW4tdXNlIHR5cGVzCiAgICAgICAgICAvLyBOb3RlOiBjb3VudCBpcyBzb21ldGltZXMgbnVsbCwgd2hpY2ggaXMgPD0gMC4KICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBjb25zdCBsYWJlbCA9IHR5cGVPYmoubGFiZWxLZXkgPyByb290R2V0dGVyc1snaTE4bi90J10odHlwZU9iai5sYWJlbEtleSkgfHwgdHlwZU9iai5sYWJlbCA6IHR5cGVPYmoubGFiZWw7CiAgICAgICAgY29uc3QgbGFiZWxEaXNwbGF5ID0gaGlnaGxpZ2h0TGFiZWwobGFiZWwsIHR5cGVPYmouY291bnQsIHR5cGVPYmouc2NoZW1hKTsKICAgICAgICBpZiAoIWxhYmVsRGlzcGxheSkgewogICAgICAgICAgLy8gU2VhcmNoIGhhcHBlbnMgaW4gaGlnaGxpZ2h0IGFuZCByZXR1cm5zIG51bGwgaWYgbm90IGZvdW5kCiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgbGV0IGdyb3VwOwogICAgICAgIGlmIChpc0Jhc2ljKSB7CiAgICAgICAgICBncm91cCA9IF9lbnN1cmVHcm91cChyb290LCBncm91cEZvckJhc2ljVHlwZSwgdHJ1ZSk7CiAgICAgICAgfSBlbHNlIGlmIChtb2RlID09PSBGQVZPUklURSkgewogICAgICAgICAgZ3JvdXAgPSBfZW5zdXJlR3JvdXAocm9vdCwgJ3N0YXJyZWQnKTsKICAgICAgICAgIGdyb3VwLndlaWdodCA9IDEwMDA7CiAgICAgICAgfSBlbHNlIGlmIChtb2RlID09PSBVU0VEKSB7CiAgICAgICAgICBncm91cCA9IF9lbnN1cmVHcm91cChyb290LCBgaW5Vc2U6OiR7Z2V0dGVycy5ncm91cExhYmVsRm9yKHR5cGVPYmouc2NoZW1hKX1gKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZ3JvdXAgPSBfZW5zdXJlR3JvdXAocm9vdCwgdHlwZU9iai5zY2hlbWEgfHwgdHlwZU9iai5ncm91cCB8fCBST09UKTsKICAgICAgICB9CiAgICAgICAgbGV0IHJvdXRlID0gdHlwZU9iai5yb3V0ZTsKCiAgICAgICAgLy8gTWFrZSB0aGUgZGVmYXVsdCByb3V0ZSBpZiBvbmUgaXNuJ3Qgc2V0CiAgICAgICAgaWYgKCFyb3V0ZSkgewogICAgICAgICAgcm91dGUgPSB7CiAgICAgICAgICAgIG5hbWU6ICdjLWNsdXN0ZXItcHJvZHVjdC1yZXNvdXJjZScsCiAgICAgICAgICAgIHBhcmFtczogewogICAgICAgICAgICAgIHByb2R1Y3Q6IHByb2R1Y3RJZCwKICAgICAgICAgICAgICBjbHVzdGVyOiBjbHVzdGVySWQsCiAgICAgICAgICAgICAgcmVzb3VyY2U6IHR5cGVPYmoubmFtZQogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgICAgdHlwZU9iai5yb3V0ZSA9IHJvdXRlOwogICAgICAgIH0KCiAgICAgICAgLy8gQ2x1c3RlciBJRCBhbmQgUHJvZHVjdCBzaG91bGQgYWx3YXlzIGJlIHNldAogICAgICAgIGlmIChyb3V0ZSAmJiB0eXBlb2Ygcm91dGUgPT09ICdvYmplY3QnKSB7CiAgICAgICAgICByb3V0ZS5wYXJhbXMgPSByb3V0ZS5wYXJhbXMgfHwge307CiAgICAgICAgICByb3V0ZS5wYXJhbXMuY2x1c3RlciA9IGNsdXN0ZXJJZDsKICAgICAgICAgIHJvdXRlLnBhcmFtcy5wcm9kdWN0ID0gcHJvZHVjdElkOwogICAgICAgIH0KICAgICAgICBncm91cC5jaGlsZHJlbi5wdXNoKHsKICAgICAgICAgIGxhYmVsLAogICAgICAgICAgbGFiZWxEaXNwbGF5LAogICAgICAgICAgbW9kZTogdHlwZU9iai5tb2RlLAogICAgICAgICAgY291bnQsCiAgICAgICAgICBleGFjdDogdHlwZU9iai5leGFjdCB8fCBmYWxzZSwKICAgICAgICAgIG5hbWVzcGFjZWQsCiAgICAgICAgICByb3V0ZSwKICAgICAgICAgIG5hbWU6IHR5cGVPYmoubmFtZSwKICAgICAgICAgIHdlaWdodDogdHlwZU9iai53ZWlnaHQgfHwgZ2V0dGVycy50eXBlV2VpZ2h0Rm9yKCgoX3R5cGVPYmokc2NoZW1hID0gdHlwZU9iai5zY2hlbWEpID09PSBudWxsIHx8IF90eXBlT2JqJHNjaGVtYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3R5cGVPYmokc2NoZW1hLmlkKSB8fCBsYWJlbCwgaXNCYXNpYyksCiAgICAgICAgICBvdmVydmlldzogISF0eXBlT2JqLm92ZXJ2aWV3CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIC8vIFJlY3Vyc2l2ZWx5IHNvcnQgdGhlIGdyb3VwcwogICAgICBfc29ydEdyb3VwKHJvb3QsIG1vZGUpOwogICAgICByZXR1cm4gcm9vdC5jaGlsZHJlbjsKCiAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiAgICAgIGZ1bmN0aW9uIF9lbnN1cmVHcm91cCh0cmVlLCBzY2hlbWFPck5hbWUsIGZvckJhc2ljID0gZmFsc2UpIHsKICAgICAgICBsZXQgbmFtZSA9IGdldHRlcnMuZ3JvdXBMYWJlbEZvcihzY2hlbWFPck5hbWUpOwogICAgICAgIGNvbnN0IGlzUm9vdCA9IG5hbWUgPT09IFJPT1QgfHwgbmFtZS5zdGFydHNXaXRoKGAke1JPT1R9OjpgKTsKICAgICAgICBpZiAobmFtZSAmJiBuYW1lLmluY2x1ZGVzKCc6OicpKSB7CiAgICAgICAgICBsZXQgcGFyZW50OwogICAgICAgICAgW3BhcmVudCwgbmFtZV0gPSBuYW1lLnNwbGl0KCc6OicsIDIpOwogICAgICAgICAgdHJlZSA9IF9lbnN1cmVHcm91cCh0cmVlLCBwYXJlbnQpOwogICAgICAgIH0KCiAgICAgICAgLy8gVHJhbnNsYXRlIGlmIGFuIGVudHJ5IGV4aXN0cwogICAgICAgIGxldCBsYWJlbCA9IG5hbWU7CiAgICAgICAgY29uc3Qga2V5ID0gYG5hdi5ncm91cC4iJHtuYW1lfSJgOwogICAgICAgIGlmIChyb290R2V0dGVyc1snaTE4bi9leGlzdHMnXShrZXkpKSB7CiAgICAgICAgICBsYWJlbCA9IHJvb3RHZXR0ZXJzWydpMThuL3QnXShrZXkpOwogICAgICAgIH0KICAgICAgICBsZXQgZ3JvdXAgPSBmaW5kQnkodHJlZS5jaGlsZHJlbiwgJ25hbWUnLCBuYW1lKTsKICAgICAgICBpZiAoIWdyb3VwKSB7CiAgICAgICAgICBncm91cCA9IHsKICAgICAgICAgICAgbmFtZSwKICAgICAgICAgICAgbGFiZWwsCiAgICAgICAgICAgIHdlaWdodDogZ2V0dGVycy5ncm91cFdlaWdodEZvcihuYW1lLCBmb3JCYXNpYyksCiAgICAgICAgICAgIGRlZmF1bHRUeXBlOiBnZXR0ZXJzLmdyb3VwRGVmYXVsdFR5cGVGb3IobmFtZSkKICAgICAgICAgIH07CiAgICAgICAgICB0cmVlLmNoaWxkcmVuLnB1c2goZ3JvdXApOwogICAgICAgIH0KICAgICAgICBpZiAoaXNSb290KSB7CiAgICAgICAgICBncm91cC5pc1Jvb3QgPSB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiAoIWdyb3VwLmNoaWxkcmVuKSB7CiAgICAgICAgICBncm91cC5jaGlsZHJlbiA9IFtdOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZ3JvdXA7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gaGlnaGxpZ2h0TGFiZWwob3JpZ2luYWwsIGNvdW50LCBzY2hlbWEpIHsKICAgICAgICBsZXQgbGFiZWwgPSBlc2NhcGVIdG1sKG9yaWdpbmFsKTsKICAgICAgICBpZiAoc2VhcmNoUmVnZXgpIHsKICAgICAgICAgIGxldCBtYXRjaCA9IGxhYmVsLm1hdGNoKHNlYXJjaFJlZ2V4KTsKICAgICAgICAgIGlmICghbWF0Y2gpIHsKICAgICAgICAgICAgaWYgKGN1cnJlbnRMb2NhbCAhPT0gZGVmYXVsdExvY2FsICYmIHNjaGVtYSkgewogICAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRMYWJlbCA9IGdldHRlcnMubGFiZWxGb3Ioc2NoZW1hLCBjb3VudCwgZGVmYXVsdExvY2FsKTsKICAgICAgICAgICAgICBpZiAoZGVmYXVsdExhYmVsICYmIGRlZmF1bHRMYWJlbCAhPT0gbGFiZWwpIHsKICAgICAgICAgICAgICAgIGxhYmVsICs9IGAgKCR7ZGVmYXVsdExhYmVsfSlgOwogICAgICAgICAgICAgICAgbWF0Y2ggPSBsYWJlbC5tYXRjaChzZWFyY2hSZWdleCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAobWF0Y2gpIHsKICAgICAgICAgICAgbGFiZWwgPSBgJHtlc2NhcGVIdG1sKG1hdGNoWzFdKX08c3BhbiBjbGFzcz0iaGlnaGxpZ2h0Ij4ke2VzY2FwZUh0bWwobWF0Y2hbMl0pfTwvc3Bhbj4ke2VzY2FwZUh0bWwobWF0Y2hbM10pfWA7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGxhYmVsOwogICAgICB9CiAgICB9OwogIH0sCiAgaXNTcG9vZmVkKHN0YXRlLCBnZXR0ZXJzLCByb290U3RhdGUsIHJvb3RHZXR0ZXJzKSB7CiAgICByZXR1cm4gKHR5cGUsIHByb2R1Y3QpID0+IHsKICAgICAgcHJvZHVjdCA9IHByb2R1Y3QgfHwgcm9vdEdldHRlcnNbJ3Byb2R1Y3RJZCddOwogICAgICBjb25zdCBwcm9kdWN0U3Bvb2ZlZFR5cGVzID0gc3RhdGUuc3Bvb2ZlZFR5cGVzW3Byb2R1Y3RdIHx8IFtdOwogICAgICByZXR1cm4gcHJvZHVjdFNwb29mZWRUeXBlcy5zb21lKHN0ID0+IHN0LnR5cGUgPT09IHR5cGUpOwogICAgfTsKICB9LAogIGlzVmlydHVhbChzdGF0ZSwgZ2V0dGVycywgcm9vdFN0YXRlLCByb290R2V0dGVycykgewogICAgcmV0dXJuIChuYW1lLCBwcm9kdWN0KSA9PiB7CiAgICAgIHByb2R1Y3QgPSBwcm9kdWN0IHx8IHJvb3RHZXR0ZXJzWydwcm9kdWN0SWQnXTsKICAgICAgY29uc3QgcHJvZHVjdFZpcnR1YWxUeXBlcyA9IHN0YXRlLnZpcnR1YWxUeXBlc1twcm9kdWN0XSB8fCBbXTsKICAgICAgcmV0dXJuIHByb2R1Y3RWaXJ0dWFsVHlwZXMuc29tZShzdCA9PiBzdC5uYW1lID09PSBuYW1lKTsKICAgIH07CiAgfSwKICBnZXRTcG9vZmVkSW5zdGFuY2VzKHN0YXRlLCBnZXR0ZXJzLCByb290U3RhdGUsIHJvb3RHZXR0ZXJzKSB7CiAgICByZXR1cm4gYXN5bmMgKHR5cGUsIHByb2R1Y3QpID0+IHsKICAgICAgdmFyIF9pbnN0YW5jZU1ldGhvZHMkcHJvZDsKICAgICAgcHJvZHVjdCA9IHByb2R1Y3QgfHwgcm9vdEdldHRlcnNbJ3Byb2R1Y3RJZCddOwogICAgICBjb25zdCBnZXRJbnN0YW5jZXMgPSAoKF9pbnN0YW5jZU1ldGhvZHMkcHJvZCA9IGluc3RhbmNlTWV0aG9kc1twcm9kdWN0XSkgPT09IG51bGwgfHwgX2luc3RhbmNlTWV0aG9kcyRwcm9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaW5zdGFuY2VNZXRob2RzJHByb2RbdHlwZV0pIHx8ICgoKSA9PiBbXSk7CiAgICAgIGNvbnN0IGluc3RhbmNlcyA9IGF3YWl0IGdldEluc3RhbmNlcygpOwogICAgICBpbnN0YW5jZXMuZm9yRWFjaChpbnN0YW5jZSA9PiB7CiAgICAgICAgdmFyIF9pbnN0YW5jZSRsaW5rcywgX2luc3RhbmNlJGxpbmtzMiwgX2luc3RhbmNlJGxpbmtzMywgX2luc3RhbmNlJGxpbmtzNDsKICAgICAgICBjb25zdCB0eXBlID0gaW5zdGFuY2UudHlwZTsKICAgICAgICBjb25zdCBpZCA9IGluc3RhbmNlLmlkOwogICAgICAgIGNvbnN0IGxpbmsgPSBgLyR7U1BPT0ZFRF9QUkVGSVh9LyR7dHlwZX0vJHtpZH1gOwogICAgICAgIGNvbnN0IGFwaUxpbmsgPSBgLyR7U1BPT0ZFRF9BUElfUFJFRklYfS8ke3R5cGV9LyR7aWR9YDsKICAgICAgICBpbnN0YW5jZS5saW5rcyA9IHsKICAgICAgICAgIHJlbW92ZTogKChfaW5zdGFuY2UkbGlua3MgPSBpbnN0YW5jZS5saW5rcykgPT09IG51bGwgfHwgX2luc3RhbmNlJGxpbmtzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaW5zdGFuY2UkbGlua3MucmVtb3ZlKSB8fCBsaW5rLAogICAgICAgICAgc2VsZjogKChfaW5zdGFuY2UkbGlua3MyID0gaW5zdGFuY2UubGlua3MpID09PSBudWxsIHx8IF9pbnN0YW5jZSRsaW5rczIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9pbnN0YW5jZSRsaW5rczIuc2VsZikgfHwgbGluaywKICAgICAgICAgIHVwZGF0ZTogKChfaW5zdGFuY2UkbGlua3MzID0gaW5zdGFuY2UubGlua3MpID09PSBudWxsIHx8IF9pbnN0YW5jZSRsaW5rczMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9pbnN0YW5jZSRsaW5rczMudXBkYXRlKSB8fCBsaW5rLAogICAgICAgICAgdmlldzogKChfaW5zdGFuY2UkbGlua3M0ID0gaW5zdGFuY2UubGlua3MpID09PSBudWxsIHx8IF9pbnN0YW5jZSRsaW5rczQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9pbnN0YW5jZSRsaW5rczQudmlldykgfHwgYXBpTGluawogICAgICAgIH07CiAgICAgICAgaW5zdGFuY2UuaXNTcG9vZmVkID0gdHJ1ZTsKICAgICAgfSk7CiAgICAgIHJldHVybiBpbnN0YW5jZXM7CiAgICB9OwogIH0sCiAgZ2V0U3Bvb2ZlZEluc3RhbmNlKHN0YXRlLCBnZXR0ZXJzLCByb290U3RhdGUsIHJvb3RHZXR0ZXJzKSB7CiAgICByZXR1cm4gYXN5bmMgKHR5cGUsIHByb2R1Y3QsIGlkKSA9PiB7CiAgICAgIGNvbnN0IHByb2R1Y3RJbnN0YW5jZXMgPSBhd2FpdCBnZXR0ZXJzLmdldFNwb29mZWRJbnN0YW5jZXModHlwZSwgcHJvZHVjdCk7CiAgICAgIHJldHVybiBwcm9kdWN0SW5zdGFuY2VzLmZpbmQoaW5zdGFuY2UgPT4gaW5zdGFuY2UuaWQgPT09IGlkKTsKICAgIH07CiAgfSwKICBhbGxTcG9vZmVkVHlwZXMoc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSwgcm9vdEdldHRlcnMpIHsKICAgIHJldHVybiBPYmplY3QudmFsdWVzKHN0YXRlLnNwb29mZWRUeXBlcykuZmxhdCgpOwogIH0sCiAgc3Bvb2ZlZFNjaGVtYXMoc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSwgcm9vdEdldHRlcnMpIHsKICAgIHJldHVybiBwcm9kdWN0ID0+IHsKICAgICAgY29uc3QgdHlwZXMgPSBzdGF0ZS5zcG9vZmVkVHlwZXNbcHJvZHVjdF0gfHwgW107CiAgICAgIHJldHVybiB0eXBlcy5mbGF0TWFwKHR5cGUgPT4gewogICAgICAgIGNvbnN0IHNjaGVtYXMgPSB0eXBlLnNjaGVtYXMgfHwgW107CiAgICAgICAgcmV0dXJuIHNjaGVtYXMubWFwKHNjaGVtYSA9PiAoewogICAgICAgICAgLi4uc2NoZW1hLAogICAgICAgICAgaXNTcG9vZmVkOiB0cnVlCiAgICAgICAgfSkpOwogICAgICB9KTsKICAgIH07CiAgfSwKICBhbGxTcG9vZmVkU2NoZW1hcyhzdGF0ZSwgZ2V0dGVycywgcm9vdFN0YXRlLCByb290R2V0dGVycykgewogICAgcmV0dXJuIGdldHRlcnMuYWxsU3Bvb2ZlZFR5cGVzLmZsYXRNYXAodHlwZSA9PiB7CiAgICAgIGNvbnN0IHNjaGVtYXMgPSB0eXBlLnNjaGVtYXMgfHwgW107CiAgICAgIHJldHVybiBzY2hlbWFzLm1hcChzY2hlbWEgPT4gKHsKICAgICAgICAuLi5zY2hlbWEsCiAgICAgICAgaXNTcG9vZmVkOiB0cnVlCiAgICAgIH0pKTsKICAgIH0pOwogIH0sCiAgYWxsVHlwZXMoc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSwgcm9vdEdldHRlcnMpIHsKICAgIHJldHVybiAocHJvZHVjdCwgbW9kZSA9IEFMTCkgPT4gewogICAgICB2YXIgX2ZpbmRCeSwgX3Jvb3RHZXR0ZXJzOwogICAgICBjb25zdCBtb2R1bGUgPSAoX2ZpbmRCeSA9IGZpbmRCeShzdGF0ZS5wcm9kdWN0cywgJ25hbWUnLCBwcm9kdWN0KSkgPT09IG51bGwgfHwgX2ZpbmRCeSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2ZpbmRCeS5pblN0b3JlOwogICAgICBjb25zdCBzY2hlbWFzID0gcm9vdEdldHRlcnNbYCR7bW9kdWxlfS9hbGxgXShTQ0hFTUEpOwogICAgICBjb25zdCBjb3VudHMgPSAoKF9yb290R2V0dGVycyA9IHJvb3RHZXR0ZXJzW2Ake21vZHVsZX0vYWxsYF0oQ09VTlQpKSA9PT0gbnVsbCB8fCBfcm9vdEdldHRlcnMgPT09IHZvaWQgMCB8fCAoX3Jvb3RHZXR0ZXJzID0gX3Jvb3RHZXR0ZXJzWzBdKSA9PT0gbnVsbCB8fCBfcm9vdEdldHRlcnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9yb290R2V0dGVycy5jb3VudHMpIHx8IHt9OwogICAgICBjb25zdCBpc0RldiA9IHJvb3RHZXR0ZXJzWydwcmVmcy9nZXQnXShWSUVXX0lOX0FQSSk7CiAgICAgIGNvbnN0IGlzQmFzaWMgPSBtb2RlID09PSBCQVNJQzsKICAgICAgY29uc3Qgb3V0ID0ge307CiAgICAgIGZvciAoY29uc3Qgc2NoZW1hIG9mIHNjaGVtYXMpIHsKICAgICAgICB2YXIgX3Jvb3RHZXR0ZXJzJGN1cnJlbnRDOwogICAgICAgIGNvbnN0IGF0dHJzID0gc2NoZW1hLmF0dHJpYnV0ZXMgfHwge307CiAgICAgICAgY29uc3QgY291bnQgPSBjb3VudHNbc2NoZW1hLmlkXTsKICAgICAgICBjb25zdCBsYWJlbCA9IGdldHRlcnMubGFiZWxGb3Ioc2NoZW1hLCBjb3VudCk7CiAgICAgICAgY29uc3Qgd2VpZ2h0ID0gZ2V0dGVycy50eXBlV2VpZ2h0Rm9yKChzY2hlbWEgPT09IG51bGwgfHwgc2NoZW1hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzY2hlbWEuaWQpIHx8IGxhYmVsLCBpc0Jhc2ljKTsKICAgICAgICBjb25zdCB0eXBlT3B0aW9ucyA9IGdldHRlcnNbJ29wdGlvbnNGb3InXShzY2hlbWEpOwogICAgICAgIGlmIChpc0Jhc2ljKSB7CiAgICAgICAgICAvLyBUaGVzZSBhcmUgc2VwYXJhdGUgaWZzIHNvIHRoYXQgdGhpbmdzIHdpdGggbm8ga2luZCBjYW4gc3RpbGwgYmUgYmFzaWMKICAgICAgICAgIGlmICghZ2V0dGVycy5ncm91cEZvckJhc2ljVHlwZShwcm9kdWN0LCBzY2hlbWEuaWQpKSB7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gRkFWT1JJVEUgJiYgIWdldHRlcnMuaXNGYXZvcml0ZShzY2hlbWEuaWQpKSB7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9IGVsc2UgaWYgKCFhdHRycy5raW5kKSB7CiAgICAgICAgICAvLyBTa2lwIHRoZSBzY2hlbWFzIHRoYXQgYXJlbid0IHRvcC1sZXZlbCB0eXBlcwogICAgICAgICAgY29udGludWU7CiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdHlwZU9wdGlvbnMuaWZSYW5jaGVyQ2x1c3RlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZU9wdGlvbnMuaWZSYW5jaGVyQ2x1c3RlciAhPT0gcm9vdEdldHRlcnMuaXNSYW5jaGVyKSB7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9IGVsc2UgaWYgKHR5cGVPcHRpb25zLmxvY2FsT25seSAmJiAhKChfcm9vdEdldHRlcnMkY3VycmVudEMgPSByb290R2V0dGVycy5jdXJyZW50Q2x1c3RlcikgIT09IG51bGwgJiYgX3Jvb3RHZXR0ZXJzJGN1cnJlbnRDICE9PSB2b2lkIDAgJiYgX3Jvb3RHZXR0ZXJzJGN1cnJlbnRDLmlzTG9jYWwpKSB7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgb3V0W3NjaGVtYS5pZF0gPSB7CiAgICAgICAgICBsYWJlbCwKICAgICAgICAgIG1vZGUsCiAgICAgICAgICB3ZWlnaHQsCiAgICAgICAgICBzY2hlbWEsCiAgICAgICAgICBuYW1lOiBzY2hlbWEuaWQsCiAgICAgICAgICBuYW1lc3BhY2VkOiB0eXBlT3B0aW9ucy5uYW1lc3BhY2VkID09PSBudWxsID8gYXR0cnMubmFtZXNwYWNlZCA6IHR5cGVPcHRpb25zLm5hbWVzcGFjZWQsCiAgICAgICAgICBjb3VudDogY291bnQgPyBjb3VudC5zdW1tYXJ5LmNvdW50IHx8IDAgOiBudWxsLAogICAgICAgICAgYnlOYW1lc3BhY2U6IGNvdW50ID8gY291bnQubmFtZXNwYWNlcyA6IHt9LAogICAgICAgICAgcmV2aXNpb246IGNvdW50ID8gY291bnQucmV2aXNpb24gOiBudWxsLAogICAgICAgICAgcm91dGU6IHR5cGVPcHRpb25zLmN1c3RvbVJvdXRlCiAgICAgICAgfTsKICAgICAgfQoKICAgICAgLy8gQWRkIHZpcnR1YWwgYW5kIHNwb29mZWQgdHlwZXMKICAgICAgaWYgKG1vZGUgIT09IFVTRUQpIHsKICAgICAgICBjb25zdCB2aXJ0dWFsVHlwZXMgPSBzdGF0ZS52aXJ0dWFsVHlwZXNbcHJvZHVjdF0gfHwgW107CiAgICAgICAgY29uc3Qgc3Bvb2ZlZFR5cGVzID0gc3RhdGUuc3Bvb2ZlZFR5cGVzW3Byb2R1Y3RdIHx8IFtdOwogICAgICAgIGNvbnN0IGFsbFR5cGVzID0gWy4uLnZpcnR1YWxUeXBlcywgLi4uc3Bvb2ZlZFR5cGVzXTsKICAgICAgICBmb3IgKGNvbnN0IHR5cGUgb2YgYWxsVHlwZXMpIHsKICAgICAgICAgIGNvbnN0IGl0ZW0gPSBjbG9uZSh0eXBlKTsKICAgICAgICAgIGNvbnN0IGlkID0gaXRlbS5uYW1lOwogICAgICAgICAgY29uc3Qgd2VpZ2h0ID0gdHlwZS53ZWlnaHQgfHwgZ2V0dGVycy50eXBlV2VpZ2h0Rm9yKGl0ZW0ubGFiZWwsIGlzQmFzaWMpOwoKICAgICAgICAgIC8vIElzIHRoZXJlIGEgdmlydHVhbC9zcG9vZmVkIHR5cGUgb3ZlcnJpZGUgZm9yIHNjaGVtYSB0eXBlPwogICAgICAgICAgLy8gQ3VycmVudGx5IHVzZWQgYnkgaGFydmVzdGVyLCB0aGlzIHNob3VsZCBiZSBpbnZlc3RpZ2F0ZWQgYW5kIHJlbW92ZWQgaWYgcG9zc2libGUKICAgICAgICAgIGlmIChvdXRbaWRdKSB7CiAgICAgICAgICAgIGRlbGV0ZSBvdXRbaWRdOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGl0ZW1bJ3B1YmxpYyddID09PSBmYWxzZSAmJiAhaXNEZXYpIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoaXRlbS5pZkhhdmUgJiYgIWlmSGF2ZShyb290R2V0dGVycywgaXRlbS5pZkhhdmUpKSB7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGl0ZW0uaWZIYXZlVHlwZSkgewogICAgICAgICAgICB2YXIgX2l0ZW0kaWZIYXZlVHlwZTsKICAgICAgICAgICAgY29uc3QgdGFyZ2V0ZWRTY2hlbWFzID0gdHlwZW9mIGl0ZW0uaWZIYXZlVHlwZSA9PT0gJ3N0cmluZycgPyBzY2hlbWFzIDogcm9vdEdldHRlcnNbYCR7aXRlbS5pZkhhdmVUeXBlLnN0b3JlfS9hbGxgXShTQ0hFTUEpOwogICAgICAgICAgICBjb25zdCB0eXBlID0gdHlwZW9mIGl0ZW0uaWZIYXZlVHlwZSA9PT0gJ3N0cmluZycgPyBpdGVtLmlmSGF2ZVR5cGUgOiAoX2l0ZW0kaWZIYXZlVHlwZSA9IGl0ZW0uaWZIYXZlVHlwZSkgPT09IG51bGwgfHwgX2l0ZW0kaWZIYXZlVHlwZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2l0ZW0kaWZIYXZlVHlwZS50eXBlOwogICAgICAgICAgICBjb25zdCBoYXZlSWRzID0gZmlsdGVyQnkodGFyZ2V0ZWRTY2hlbWFzLCAnaWQnLCBub3JtYWxpemVUeXBlKHR5cGUpKS5tYXAocyA9PiBzLmlkKTsKICAgICAgICAgICAgaWYgKCFoYXZlSWRzLmxlbmd0aCkgewogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChpdGVtLmlmSGF2ZVZlcmIgJiYgIWlmSGF2ZVZlcmIocm9vdEdldHRlcnMsIG1vZHVsZSwgaXRlbS5pZkhhdmVWZXJiLCBoYXZlSWRzKSkgewogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoaXRlbS5pZkhhdmVTdWJUeXBlcykgewogICAgICAgICAgICBjb25zdCBoYXNTb21lID0gKGl0ZW0uaWZIYXZlU3ViVHlwZXMgfHwgW10pLnNvbWUodHlwZSA9PiB7CiAgICAgICAgICAgICAgcmV0dXJuICEhZmluZEJ5KHNjaGVtYXMsICdpZCcsIG5vcm1hbGl6ZVR5cGUodHlwZSkpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgaWYgKCFoYXNTb21lKSB7CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmICh0eXBlb2YgaXRlbS5pZlJhbmNoZXJDbHVzdGVyICE9PSAndW5kZWZpbmVkJyAmJiBpdGVtLmlmUmFuY2hlckNsdXN0ZXIgIT09IHJvb3RHZXR0ZXJzLmlzUmFuY2hlcikgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChpc0Jhc2ljICYmICFnZXR0ZXJzLmdyb3VwRm9yQmFzaWNUeXBlKHByb2R1Y3QsIGlkKSkgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gRkFWT1JJVEUgJiYgIWdldHRlcnMuaXNGYXZvcml0ZShpZCkpIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBpdGVtLm1vZGUgPSBtb2RlOwogICAgICAgICAgaXRlbS53ZWlnaHQgPSB3ZWlnaHQ7CgogICAgICAgICAgLy8gRW5zdXJlIGxhYmVsS2V5IGlzIHRha2VuIGludG8gYWNjb3VudC4uLiB3aXRoIGEgbW9jayBjb3VudAogICAgICAgICAgLy8gVGhpcyBpcyBoYXJtbGVzcyBpZiB0aGUgdHJhbnNsYXRpb24gZG9lc24ndCByZXF1aXJlIGNvdW50CiAgICAgICAgICBpZiAoaXRlbS5sYWJlbEtleSAmJiByb290R2V0dGVyc1snaTE4bi9leGlzdHMnXShpdGVtLmxhYmVsS2V5KSkgewogICAgICAgICAgICBpdGVtLmxhYmVsID0gcm9vdEdldHRlcnNbJ2kxOG4vdCddKGl0ZW0ubGFiZWxLZXksIHsKICAgICAgICAgICAgICBjb3VudDogMgogICAgICAgICAgICB9KS50cmltKCk7CiAgICAgICAgICAgIGRlbGV0ZSBpdGVtLmxhYmVsS2V5OyAvLyBMYWJlbCBzaG91bGQgcmVhbGx5IHRha2UgcHJlY2VkZW5jZSBvdmVyIGxhYmVsS2V5LCBidXQgaXQgZG9lc24ndCwgc28gcmVtb3ZlIGl0CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpdGVtLmxhYmVsID0gaXRlbS5sYWJlbCB8fCBpdGVtLm5hbWU7CiAgICAgICAgICB9CiAgICAgICAgICBvdXRbaWRdID0gaXRlbTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIG91dDsKICAgIH07CiAgfSwKICBncm91cEJ5Rm9yKHN0YXRlKSB7CiAgICByZXR1cm4gc2NoZW1hID0+IHsKICAgICAgcmV0dXJuIHN0YXRlLmdyb3VwQnlbc2NoZW1hID09PSBudWxsIHx8IHNjaGVtYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2NoZW1hLmlkXTsKICAgIH07CiAgfSwKICBoaWRlQnVsa0FjdGlvbnNGb3Ioc3RhdGUpIHsKICAgIHJldHVybiBzY2hlbWEgPT4gewogICAgICByZXR1cm4gc3RhdGUuaGlkZUJ1bGtBY3Rpb25zW3NjaGVtYS5pZF07CiAgICB9OwogIH0sCiAgaGVhZGVyc0ZvcihzdGF0ZSwgZ2V0dGVycywgcm9vdFN0YXRlLCByb290R2V0dGVycykgewogICAgcmV0dXJuIHNjaGVtYSA9PiB7CiAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBzY2hlbWEuYXR0cmlidXRlcyB8fCB7fTsKICAgICAgY29uc3QgY29sdW1ucyA9IGF0dHJpYnV0ZXMuY29sdW1ucyB8fCBbXTsKICAgICAgY29uc3QgdHlwZU9wdGlvbnMgPSBnZXR0ZXJzWydvcHRpb25zRm9yJ10oc2NoZW1hKTsKCiAgICAgIC8vIEEgc3BlY2lmaWMgbGlzdCBoYXMgYmVlbiBwcm92aWRlZAogICAgICBpZiAoc3RhdGUuaGVhZGVyc1tzY2hlbWEuaWRdKSB7CiAgICAgICAgcmV0dXJuIHN0YXRlLmhlYWRlcnNbc2NoZW1hLmlkXS5tYXAoZW50cnkgPT4gewogICAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgY29uc3QgY29sID0gZmluZEJ5KGNvbHVtbnMsICduYW1lJywgZW50cnkpOwogICAgICAgICAgICBpZiAoY29sKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZyb21TY2hlbWEoY29sLCByb290R2V0dGVycyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBlbnRyeTsKICAgICAgICAgIH0KICAgICAgICB9KS5maWx0ZXIoY29sID0+ICEhY29sKTsKICAgICAgfQoKICAgICAgLy8gT3RoZXJ3aXNlIG1ha2Ugb25lIHVwIGZyb20gc2NoZW1hCiAgICAgIGNvbnN0IG91dCA9IHR5cGVPcHRpb25zLnNob3dTdGF0ZSA/IFtTVEFURV0gOiBbXTsKICAgICAgY29uc3QgbmFtZXNwYWNlZCA9IGF0dHJpYnV0ZXMubmFtZXNwYWNlZCB8fCBmYWxzZTsKICAgICAgbGV0IGhhc05hbWUgPSBmYWxzZTsKICAgICAgZm9yIChjb25zdCBjb2wgb2YgY29sdW1ucykgewogICAgICAgIGlmIChjb2wuZm9ybWF0ID09PSAnbmFtZScpIHsKICAgICAgICAgIGhhc05hbWUgPSB0cnVlOwogICAgICAgICAgb3V0LnB1c2goTkFNRSk7CiAgICAgICAgICBpZiAobmFtZXNwYWNlZCkgewogICAgICAgICAgICBvdXQucHVzaChOQU1FU1BBQ0VfQ09MKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgb3V0LnB1c2goZnJvbVNjaGVtYShjb2wsIHJvb3RHZXR0ZXJzKSk7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmICghaGFzTmFtZSkgewogICAgICAgIGluc2VydEF0KG91dCwgMSwgTkFNRSk7CiAgICAgICAgaWYgKG5hbWVzcGFjZWQpIHsKICAgICAgICAgIGluc2VydEF0KG91dCwgMiwgTkFNRVNQQUNFX0NPTCk7CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyBBZ2UgYWx3YXlzIGdvZXMgbGFzdAogICAgICBpZiAob3V0LmluY2x1ZGVzKEFHRSkpIHsKICAgICAgICByZW1vdmVPYmplY3Qob3V0LCBBR0UpOwogICAgICAgIGlmICh0eXBlT3B0aW9ucy5zaG93QWdlKSB7CiAgICAgICAgICBvdXQucHVzaChBR0UpOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gb3V0OwogICAgICBmdW5jdGlvbiBmcm9tU2NoZW1hKGNvbCwgcm9vdEdldHRlcnMpIHsKICAgICAgICBsZXQgZm9ybWF0dGVyLCB3aWR0aCwgZm9ybWF0dGVyT3B0czsKICAgICAgICBpZiAoKGNvbC5mb3JtYXQgPT09ICcnIHx8IGNvbC5mb3JtYXQgPT09ICdkYXRlJykgJiYgY29sLm5hbWUgPT09ICdBZ2UnKSB7CiAgICAgICAgICByZXR1cm4gQUdFOwogICAgICAgIH0KICAgICAgICBpZiAoY29sLmZvcm1hdCA9PT0gJ2RhdGUnIHx8IGNvbC50eXBlID09PSAnZGF0ZScpIHsKICAgICAgICAgIGZvcm1hdHRlciA9ICdEYXRlJzsKICAgICAgICAgIHdpZHRoID0gMTIwOwogICAgICAgICAgZm9ybWF0dGVyT3B0cyA9IHsKICAgICAgICAgICAgbXVsdGlsaW5lOiB0cnVlCiAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgICBpZiAoY29sLnR5cGUgPT09ICdudW1iZXInIHx8IGNvbC50eXBlID09PSAnaW50JykgewogICAgICAgICAgZm9ybWF0dGVyID0gJ051bWJlcic7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGNvbE5hbWUgPSBjb2wubmFtZS5pbmNsdWRlcygnICcpID8gY29sLm5hbWUuc3BsaXQoJyAnKS5tYXAod29yZCA9PiB3b3JkLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgd29yZC5zdWJzdHJpbmcoMSkpLmpvaW4oJycpIDogY29sLm5hbWU7CiAgICAgICAgY29uc3QgZXhpc3RzID0gcm9vdEdldHRlcnNbJ2kxOG4vZXhpc3RzJ107CiAgICAgICAgY29uc3QgdCA9IHJvb3RHZXR0ZXJzWydpMThuL3QnXTsKICAgICAgICBjb25zdCBsYWJlbEtleSA9IGB0YWJsZUhlYWRlcnMuJHtjb2xOYW1lLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgY29sTmFtZS5zbGljZSgxKX1gOwogICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gY29sLmRlc2NyaXB0aW9uIHx8ICcnOwogICAgICAgIGNvbnN0IHRvb2x0aXAgPSBkZXNjcmlwdGlvbiAmJiBkZXNjcmlwdGlvbltkZXNjcmlwdGlvbi5sZW5ndGggLSAxXSA9PT0gJy4nID8gZGVzY3JpcHRpb24uc2xpY2UoMCwgLTEpIDogZGVzY3JpcHRpb247CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIG5hbWU6IGNvbC5uYW1lLnRvTG93ZXJDYXNlKCksCiAgICAgICAgICBsYWJlbDogZXhpc3RzKGxhYmVsS2V5KSA/IHQobGFiZWxLZXkpIDogY29sLm5hbWUsCiAgICAgICAgICB2YWx1ZTogX3Jvd1ZhbHVlR2V0dGVyKGNvbCksCiAgICAgICAgICBzb3J0OiBbY29sLmZpZWxkXSwKICAgICAgICAgIGZvcm1hdHRlciwKICAgICAgICAgIGZvcm1hdHRlck9wdHMsCiAgICAgICAgICB3aWR0aCwKICAgICAgICAgIHRvb2x0aXAKICAgICAgICB9OwogICAgICB9CiAgICB9OwogIH0sCiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgLy8gQ3VzdG9tIGxpc3QvZGV0YWlsL2VkaXQvaGVhZGVyIGNvbXBvbmVudCBkZXRlY3Rpb24KICAvLwogIC8vIE5vdGU6IHlvdSBjYW4ndCByZWZhY3RvciB0aGVzZSBpbnRvIG9uZSBmdW5jdGlvbiB0aGF0IGRvZXMgYEAvJHtraW5kfS8ke3R5cGV9YCwKICAvLyBiZWNhdXNlIGJhYmVsIG5lZWRzIHNvbWUgaGFyZGNvZGVkIGlkZWEgd2hlcmUgdG8gbG9vayBmb3IgdGhlIGRlcGVuZGVuY3kuCiAgLy8KICAvLyBOb3RlIDI6IFllcyB0aGVzZSBhcmUgZWRpdGluZyBzdGF0ZSBpbiBhIGdldHRlciBmb3IgY2FjaGluZy4uLiBpdCdzIG9rLCBwcm9iYWJseS4KICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICBoYXNDdXN0b21MaXN0KHN0YXRlLCBnZXR0ZXJzLCByb290U3RhdGUpIHsKICAgIHJldHVybiByYXdUeXBlID0+IHsKICAgICAgY29uc3Qga2V5ID0gZ2V0dGVycy5jb21wb25lbnRGb3IocmF3VHlwZSk7CiAgICAgIHJldHVybiBoYXNDdXN0b20oc3RhdGUsIHJvb3RTdGF0ZSwgJ2xpc3QnLCBrZXksIGtleSA9PiByZXNvbHZlTGlzdChrZXkpKTsKICAgIH07CiAgfSwKICBoYXNDdXN0b21DaGFydChzdGF0ZSwgZ2V0dGVycywgcm9vdFN0YXRlKSB7CiAgICByZXR1cm4gcmF3VHlwZSA9PiB7CiAgICAgIGNvbnN0IGtleSA9IGdldHRlcnMuY29tcG9uZW50Rm9yKHJhd1R5cGUpOwogICAgICByZXR1cm4gaGFzQ3VzdG9tKHN0YXRlLCByb290U3RhdGUsICdjaGFydCcsIGtleSwga2V5ID0+IHJlc29sdmVDaGFydChrZXkpKTsKICAgIH07CiAgfSwKICBoYXNDdXN0b21EZXRhaWwoc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSkgewogICAgcmV0dXJuIChyYXdUeXBlLCBzdWJUeXBlKSA9PiB7CiAgICAgIGNvbnN0IGtleSA9IGdldHRlcnMuY29tcG9uZW50Rm9yKHJhd1R5cGUsIHN1YlR5cGUpOwogICAgICByZXR1cm4gaGFzQ3VzdG9tKHN0YXRlLCByb290U3RhdGUsICdkZXRhaWwnLCBrZXksIGtleSA9PiByZXNvbHZlRGV0YWlsKGtleSkpOwogICAgfTsKICB9LAogIGhhc0dyYXBoKHN0YXRlLCBnZXR0ZXJzKSB7CiAgICByZXR1cm4gcmVzb3VyY2UgPT4gewogICAgICBjb25zdCB0eXBlT3B0aW9ucyA9IGdldHRlcnNbJ29wdGlvbnNGb3InXShyZXNvdXJjZSk7CiAgICAgIGlmICh0eXBlT3B0aW9ucyAmJiB0eXBlT3B0aW9ucy5oYXNHcmFwaCkgewogICAgICAgIHJldHVybiBncmFwaENvbmZpZ01hcFtyZXNvdXJjZV07CiAgICAgIH0KICAgICAgcmV0dXJuIG51bGw7CiAgICB9OwogIH0sCiAgaGFzQ3VzdG9tRWRpdChzdGF0ZSwgZ2V0dGVycywgcm9vdFN0YXRlKSB7CiAgICByZXR1cm4gKHJhd1R5cGUsIHN1YlR5cGUpID0+IHsKICAgICAgY29uc3Qga2V5ID0gZ2V0dGVycy5jb21wb25lbnRGb3IocmF3VHlwZSwgc3ViVHlwZSk7CiAgICAgIHJldHVybiBoYXNDdXN0b20oc3RhdGUsIHJvb3RTdGF0ZSwgJ2VkaXQnLCBrZXksIGtleSA9PiByZXNvbHZlRWRpdChrZXkpKTsKICAgIH07CiAgfSwKICBoYXNDb21wb25lbnQoc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSkgewogICAgcmV0dXJuIHBhdGggPT4gewogICAgICByZXR1cm4gaGFzQ3VzdG9tKHN0YXRlLCByb290U3RhdGUsICdlZGl0JywgcGF0aCwgcGF0aCA9PiByZXNvbHZlRWRpdChwYXRoKSk7CiAgICB9OwogIH0sCiAgaGFzQ3VzdG9tUHJvbXB0UmVtb3ZlKHN0YXRlLCBnZXR0ZXJzLCByb290U3RhdGUpIHsKICAgIHJldHVybiAocmF3VHlwZSwgc3ViVHlwZSkgPT4gewogICAgICBjb25zdCBrZXkgPSBnZXR0ZXJzLmNvbXBvbmVudEZvcihyYXdUeXBlLCBzdWJUeXBlKTsKICAgICAgcmV0dXJuIGhhc0N1c3RvbShzdGF0ZSwgcm9vdFN0YXRlLCAncHJvbXB0UmVtb3ZlJywga2V5LCAoKSA9PiByZXF1aXJlLnJlc29sdmUoYEBzaGVsbC9wcm9tcHRSZW1vdmUvJHtrZXl9YCkpOwogICAgfTsKICB9LAogIGhhc0N1c3RvbVdpbmRvd0NvbXBvbmVudChzdGF0ZSwgZ2V0dGVycywgcm9vdFN0YXRlKSB7CiAgICByZXR1cm4gKHJhd1R5cGUsIHN1YlR5cGUpID0+IHsKICAgICAgY29uc3Qga2V5ID0gZ2V0dGVycy5jb21wb25lbnRGb3IocmF3VHlwZSwgc3ViVHlwZSk7CiAgICAgIHJldHVybiBoYXNDdXN0b20oc3RhdGUsIHJvb3RTdGF0ZSwgJ3dpbmRvd0NvbXBvbmVudHMnLCBrZXksIGtleSA9PiByZXNvbHZlV2luZG93Q29tcG9uZW50KGtleSkpOwogICAgfTsKICB9LAogIGhhc0N1c3RvbU1hY2hpbmVDb25maWdDb21wb25lbnQoc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSkgewogICAgcmV0dXJuIChyYXdUeXBlLCBzdWJUeXBlKSA9PiB7CiAgICAgIGNvbnN0IGtleSA9IGdldHRlcnMuY29tcG9uZW50Rm9yKHJhd1R5cGUsIHN1YlR5cGUpOwogICAgICByZXR1cm4gaGFzQ3VzdG9tKHN0YXRlLCByb290U3RhdGUsICdtYWNoaW5lLWNvbmZpZycsIGtleSwga2V5ID0+IHJlc29sdmVNYWNoaW5lQ29uZmlnQ29tcG9uZW50KGtleSkpOwogICAgfTsKICB9LAogIGhhc0N1c3RvbUNsb3VkQ3JlZGVudGlhbENvbXBvbmVudChzdGF0ZSwgZ2V0dGVycywgcm9vdFN0YXRlKSB7CiAgICByZXR1cm4gKHJhd1R5cGUsIHN1YlR5cGUpID0+IHsKICAgICAgY29uc3Qga2V5ID0gZ2V0dGVycy5jb21wb25lbnRGb3IocmF3VHlwZSwgc3ViVHlwZSk7CiAgICAgIHJldHVybiBoYXNDdXN0b20oc3RhdGUsIHJvb3RTdGF0ZSwgJ2Nsb3VkLWNyZWRlbnRpYWwnLCBrZXksIGtleSA9PiByZXNvbHZlQ2xvdWRDcmVkZW50aWFsQ29tcG9uZW50KGtleSkpOwogICAgfTsKICB9LAogIGltcG9ydENvbXBvbmVudChzdGF0ZSwgZ2V0dGVycykgewogICAgcmV0dXJuIHBhdGggPT4gewogICAgICByZXR1cm4gaW1wb3J0RWRpdChwYXRoKTsKICAgIH07CiAgfSwKICBpbXBvcnREaWFsb2coc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSkgewogICAgcmV0dXJuIChyYXdUeXBlLCBzdWJUeXBlKSA9PiB7CiAgICAgIHJldHVybiBsb2FkRXh0ZW5zaW9uKHJvb3RTdGF0ZSwgJ2RpYWxvZycsIGdldHRlcnMuY29tcG9uZW50Rm9yKHJhd1R5cGUsIHN1YlR5cGUpLCBpbXBvcnREaWFsb2cpOwogICAgfTsKICB9LAogIGltcG9ydExpc3Qoc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSkgewogICAgcmV0dXJuIHJhd1R5cGUgPT4gewogICAgICByZXR1cm4gbG9hZEV4dGVuc2lvbihyb290U3RhdGUsICdsaXN0JywgZ2V0dGVycy5jb21wb25lbnRGb3IocmF3VHlwZSksIGltcG9ydExpc3QpOwogICAgfTsKICB9LAogIGltcG9ydENoYXJ0KHN0YXRlLCBnZXR0ZXJzLCByb290U3RhdGUpIHsKICAgIHJldHVybiByYXdUeXBlID0+IHsKICAgICAgcmV0dXJuIGxvYWRFeHRlbnNpb24ocm9vdFN0YXRlLCAnY2hhcnQnLCBnZXR0ZXJzLmNvbXBvbmVudEZvcihyYXdUeXBlKSwgaW1wb3J0Q2hhcnQpOwogICAgfTsKICB9LAogIGltcG9ydERldGFpbChzdGF0ZSwgZ2V0dGVycywgcm9vdFN0YXRlKSB7CiAgICByZXR1cm4gKHJhd1R5cGUsIHN1YlR5cGUpID0+IHsKICAgICAgcmV0dXJuIGxvYWRFeHRlbnNpb24ocm9vdFN0YXRlLCAnZGV0YWlsJywgZ2V0dGVycy5jb21wb25lbnRGb3IocmF3VHlwZSwgc3ViVHlwZSksIGltcG9ydERldGFpbCk7CiAgICB9OwogIH0sCiAgaW1wb3J0RWRpdChzdGF0ZSwgZ2V0dGVycywgcm9vdFN0YXRlKSB7CiAgICByZXR1cm4gKHJhd1R5cGUsIHN1YlR5cGUpID0+IHsKICAgICAgcmV0dXJuIGxvYWRFeHRlbnNpb24ocm9vdFN0YXRlLCAnZWRpdCcsIGdldHRlcnMuY29tcG9uZW50Rm9yKHJhd1R5cGUsIHN1YlR5cGUpLCBpbXBvcnRFZGl0KTsKICAgIH07CiAgfSwKICBpbXBvcnRDdXN0b21Qcm9tcHRSZW1vdmUoc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSkgewogICAgcmV0dXJuIChyYXdUeXBlLCBzdWJUeXBlKSA9PiB7CiAgICAgIHJldHVybiBsb2FkRXh0ZW5zaW9uKHJvb3RTdGF0ZSwgJ3Byb21wdFJlbW92ZScsIGdldHRlcnMuY29tcG9uZW50Rm9yKHJhd1R5cGUsIHN1YlR5cGUpLCBpbXBvcnRDdXN0b21Qcm9tcHRSZW1vdmUpOwogICAgfTsKICB9LAogIGltcG9ydFdpbmRvd0NvbXBvbmVudChzdGF0ZSwgZ2V0dGVycywgcm9vdFN0YXRlKSB7CiAgICByZXR1cm4gKHJhd1R5cGUsIHN1YlR5cGUpID0+IHsKICAgICAgcmV0dXJuIGxvYWRFeHRlbnNpb24ocm9vdFN0YXRlLCAnd2luZG93Q29tcG9uZW50cycsIGdldHRlcnMuY29tcG9uZW50Rm9yKHJhd1R5cGUsIHN1YlR5cGUpLCBpbXBvcnRXaW5kb3dDb21wb25lbnQpOwogICAgfTsKICB9LAogIGltcG9ydExvZ2luKHN0YXRlLCBnZXR0ZXJzLCByb290U3RhdGUpIHsKICAgIHJldHVybiBhdXRoVHlwZSA9PiB7CiAgICAgIHJldHVybiBsb2FkRXh0ZW5zaW9uKHJvb3RTdGF0ZSwgJ2xvZ2luJywgYXV0aFR5cGUsIGltcG9ydExvZ2luKTsKICAgIH07CiAgfSwKICBpbXBvcnRNYWNoaW5lQ29uZmlnKHN0YXRlLCBnZXR0ZXJzLCByb290U3RhdGUpIHsKICAgIHJldHVybiAocmF3VHlwZSwgc3ViVHlwZSkgPT4gewogICAgICByZXR1cm4gbG9hZEV4dGVuc2lvbihyb290U3RhdGUsICdtYWNoaW5lLWNvbmZpZycsIGdldHRlcnMuY29tcG9uZW50Rm9yKHJhd1R5cGUsIHN1YlR5cGUpLCBpbXBvcnRNYWNoaW5lQ29uZmlnKTsKICAgIH07CiAgfSwKICBpbXBvcnRDbG91ZENyZWRlbnRpYWwoc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSkgewogICAgcmV0dXJuIChyYXdUeXBlLCBzdWJUeXBlKSA9PiB7CiAgICAgIHJldHVybiBsb2FkRXh0ZW5zaW9uKHJvb3RTdGF0ZSwgJ2Nsb3VkLWNyZWRlbnRpYWwnLCBnZXR0ZXJzLmNvbXBvbmVudEZvcihyYXdUeXBlLCBzdWJUeXBlKSwgaW1wb3J0Q2xvdWRDcmVkZW50aWFsKTsKICAgIH07CiAgfSwKICBjb21wb25lbnRGb3Ioc3RhdGUsIGdldHRlcnMpIHsKICAgIHJldHVybiAodHlwZSwgc3ViVHlwZSkgPT4gewogICAgICBsZXQga2V5ID0gdHlwZTsKICAgICAgaWYgKHN1YlR5cGUpIHsKICAgICAgICBrZXkgPSBgJHt0eXBlfS8ke3N1YlR5cGV9YDsKICAgICAgfQogICAgICBpZiAoc3RhdGUuY2FjaGUuY29tcG9uZW50Rm9yW2tleV0gIT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybiBzdGF0ZS5jYWNoZS5jb21wb25lbnRGb3Jba2V5XTsKICAgICAgfQogICAgICBsZXQgb3V0ID0gdHlwZTsKICAgICAgY29uc3QgbWFwcGluZyA9IHN0YXRlLnR5cGVUb0NvbXBvbmVudE1hcHBpbmdzLmZpbmQobWFwcGluZyA9PiB7CiAgICAgICAgY29uc3QgcmUgPSBzdHJpbmdUb1JlZ2V4KG1hcHBpbmcubWF0Y2gpOwogICAgICAgIHJldHVybiByZS50ZXN0KGtleSk7CiAgICAgIH0pOwogICAgICBpZiAobWFwcGluZykgewogICAgICAgIG91dCA9IG1hcHBpbmcucmVwbGFjZTsKICAgICAgfSBlbHNlIGlmIChzdWJUeXBlKSB7CiAgICAgICAgLy8gVHJ5IGFnYWluIHdpdGhvdXQgdGhlIHN1YlR5cGUKICAgICAgICBvdXQgPSBnZXR0ZXJzLmNvbXBvbmVudEZvcih0eXBlKTsKICAgICAgfQogICAgICBzdGF0ZS5jYWNoZS5jb21wb25lbnRGb3Jba2V5XSA9IG91dDsKICAgICAgcmV0dXJuIG91dDsKICAgIH07CiAgfSwKICBpc0lnbm9yZWQoc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSwgcm9vdEdldHRlcnMpIHsKICAgIHJldHVybiBzY2hlbWEgPT4gewogICAgICBsZXQgb3V0ID0gZmFsc2U7CiAgICAgIGZvciAoY29uc3QgcnVsZSBvZiBzdGF0ZS5ncm91cElnbm9yZSkgewogICAgICAgIHZhciBfc2NoZW1hJGF0dHJpYnV0ZXMyOwogICAgICAgIGNvbnN0IGdyb3VwID0gc2NoZW1hID09PSBudWxsIHx8IHNjaGVtYSA9PT0gdm9pZCAwIHx8IChfc2NoZW1hJGF0dHJpYnV0ZXMyID0gc2NoZW1hLmF0dHJpYnV0ZXMpID09PSBudWxsIHx8IF9zY2hlbWEkYXR0cmlidXRlczIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zY2hlbWEkYXR0cmlidXRlczIuZ3JvdXA7CiAgICAgICAgaWYgKGdyb3VwICYmIGdyb3VwLm1hdGNoKHN0cmluZ1RvUmVnZXgocnVsZS50eXBlKSAmJiBpc09iamVjdChydWxlKSAmJiBydWxlLnR5cGUpKSB7CiAgICAgICAgICBvdXQgPSBydWxlLmNiKHJvb3RHZXR0ZXJzKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBpZiAoZ3JvdXAgJiYgdHlwZW9mIHJ1bGUgPT09ICdzdHJpbmcnICYmIGdyb3VwLm1hdGNoKHN0cmluZ1RvUmVnZXgocnVsZSkpKSB7CiAgICAgICAgICBvdXQgPSB0cnVlOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmICghb3V0KSB7CiAgICAgICAgZm9yIChjb25zdCBydWxlIG9mIHN0YXRlLnR5cGVJZ25vcmUpIHsKICAgICAgICAgIGlmIChzY2hlbWEuaWQubWF0Y2goc3RyaW5nVG9SZWdleChydWxlKSkpIHsKICAgICAgICAgICAgb3V0ID0gdHJ1ZTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHN0YXRlLmNhY2hlLmlnbm9yZVtzY2hlbWEuaWRdID0gb3V0OwogICAgICByZXR1cm4gb3V0OwogICAgfTsKICB9LAogIGFjdGl2ZVByb2R1Y3RzKHN0YXRlLCBnZXR0ZXJzLCByb290U3RhdGUsIHJvb3RHZXR0ZXJzKSB7CiAgICBjb25zdCBrbm93blR5cGVzID0ge307CiAgICBjb25zdCBrbm93bkdyb3VwcyA9IHt9OwogICAgY29uc3QgaXNEZXYgPSByb290R2V0dGVyc1sncHJlZnMvZ2V0J10oVklFV19JTl9BUEkpOwogICAgaWYgKHN0YXRlLnNjaGVtYUdlbmVyYXRpb24gPCAwKSB7CiAgICAgIC8vIFRoaXMgZG9lcyBub3RoaW5nLCBidXQgbWFrZXMgYWN0aXZlUHJvZHVjdHMgZGVwZW5kIG9uIHNjaGVtYUdlbmVyYXRpb24KICAgICAgLy8gc28gdGhhdCBpdCBjYW4gYmUgdXNlZCB0byB1cGRhdGUgdGhlIHByb2R1Y3QgbGlzdCBvbiBzY2hlbWEgY2hhbmdlLgogICAgICByZXR1cm47CiAgICB9CiAgICByZXR1cm4gc3RhdGUucHJvZHVjdHMuZmlsdGVyKHAgPT4gewogICAgICBjb25zdCBtb2R1bGUgPSBwLmluU3RvcmU7CiAgICAgIGlmIChwWydwdWJsaWMnXSA9PT0gZmFsc2UgJiYgIWlzRGV2KSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIGlmIChwLmlmR2V0dGVyICYmICFyb290R2V0dGVyc1twLmlmR2V0dGVyXSkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICBpZiAoIWtub3duVHlwZXNbbW9kdWxlXSkgewogICAgICAgIGNvbnN0IHNjaGVtYXMgPSByb290R2V0dGVyc1tgJHttb2R1bGV9L2FsbGBdKFNDSEVNQSk7CiAgICAgICAga25vd25UeXBlc1ttb2R1bGVdID0gW107CiAgICAgICAga25vd25Hcm91cHNbbW9kdWxlXSA9IFtdOwogICAgICAgIGZvciAoY29uc3QgcyBvZiBzY2hlbWFzKSB7CiAgICAgICAgICBrbm93blR5cGVzW21vZHVsZV0ucHVzaChzLl9pZCk7CiAgICAgICAgICBpZiAocy5fZ3JvdXApIHsKICAgICAgICAgICAgYWRkT2JqZWN0KGtub3duR3JvdXBzW21vZHVsZV0sIHMuX2dyb3VwKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKHAuaWZGZWF0dXJlKSB7CiAgICAgICAgY29uc3QgZmVhdHVyZXMgPSBBcnJheS5pc0FycmF5KHAuaWZGZWF0dXJlKSA/IHAuaWZGZWF0dXJlIDogW3AuaWZGZWF0dXJlXTsKICAgICAgICBmb3IgKGNvbnN0IGYgb2YgZmVhdHVyZXMpIHsKICAgICAgICAgIGlmICghcm9vdEdldHRlcnNbJ2ZlYXR1cmVzL2dldCddKGYpKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKHAuaWZIYXZlICYmICFpZkhhdmUocm9vdEdldHRlcnMsIHAuaWZIYXZlKSkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICBpZiAocC5pZkhhdmVUeXBlKSB7CiAgICAgICAgY29uc3QgaGF2ZUlkcyA9IGtub3duVHlwZXNbbW9kdWxlXS5maWx0ZXIodCA9PiB0Lm1hdGNoKHN0cmluZ1RvUmVnZXgocC5pZkhhdmVUeXBlKSkpOwogICAgICAgIGlmICghaGF2ZUlkcy5sZW5ndGgpIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgaWYgKHAuaWZIYXZlVmVyYiAmJiAhaWZIYXZlVmVyYihyb290R2V0dGVycywgbW9kdWxlLCBwLmlmSGF2ZVZlcmIsIGhhdmVJZHMpKSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChwLmlmSGF2ZUdyb3VwICYmICFrbm93bkdyb3Vwc1ttb2R1bGVdLmZpbmQodCA9PiB0Lm1hdGNoKHN0cmluZ1RvUmVnZXgocC5pZkhhdmVHcm91cCkpKSkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0pOwogIH0sCiAgaXNQcm9kdWN0QWN0aXZlKHN0YXRlLCBnZXR0ZXJzKSB7CiAgICByZXR1cm4gbmFtZSA9PiB7CiAgICAgIGlmIChmaW5kQnkoZ2V0dGVyc1snYWN0aXZlUHJvZHVjdHMnXSwgJ25hbWUnLCBuYW1lKSkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH07CiAgfSwKICByb3dWYWx1ZUdldHRlcihzdGF0ZSkgewogICAgcmV0dXJuIChzY2hlbWEsIGNvbE5hbWUpID0+IHsKICAgICAgY29uc3QgY29sID0gX2ZpbmRDb2x1bW5CeU5hbWUoc2NoZW1hLCBjb2xOYW1lKTsKICAgICAgcmV0dXJuIF9yb3dWYWx1ZUdldHRlcihjb2wpOwogICAgfTsKICB9LAogIGlzUHJvZHVjdFJlZ2lzdGVyZWQoc3RhdGUpIHsKICAgIHJldHVybiBwcm9kdWN0TmFtZSA9PiB7CiAgICAgIGNvbnN0IHByb2QgPSBzdGF0ZS5wcm9kdWN0cy5maW5kKHAgPT4gcC5uYW1lID09PSBwcm9kdWN0TmFtZSk7CiAgICAgIHJldHVybiAhIXByb2Q7CiAgICB9OwogIH0KfTsKZXhwb3J0IGNvbnN0IG11dGF0aW9ucyA9IHsKICBzY2hlbWFDaGFuZ2VkKHN0YXRlKSB7CiAgICBzdGF0ZS5zY2hlbWFHZW5lcmF0aW9uID0gc3RhdGUuc2NoZW1hR2VuZXJhdGlvbiArIDE7CiAgfSwKICAvLyBSZW1vdmUgdGhlIHNwZWNpZmllZCBwcm9kdWN0CiAgcmVtb3ZlKHN0YXRlLCB7CiAgICBwcm9kdWN0LAogICAgcGx1Z2luCiAgfSkgewogICAgY29uc3QgZXhpc3RpbmcgPSBzdGF0ZS5wcm9kdWN0cy5maW5kSW5kZXgocCA9PiBwLm5hbWUgPT09IHByb2R1Y3QpOwoKICAgIC8vIFJlbW92ZSB0aGUgcHJvZHVjdAogICAgaWYgKGV4aXN0aW5nICE9PSAtMSkgewogICAgICBzdGF0ZS5wcm9kdWN0cy5zcGxpY2UoZXhpc3RpbmcsIDEpOwogICAgfQoKICAgIC8vIEdvIHRocm91Z2ggdGhlIGJhc2ljIHR5cGVzIGFuZCByZW1vdmUgdGhlIGhlYWRlcnMKICAgIGlmIChzdGF0ZS52aXJ0dWFsVHlwZXNbcHJvZHVjdF0pIHsKICAgICAgZGVsZXRlIHN0YXRlLnZpcnR1YWxUeXBlc1twcm9kdWN0XTsKICAgIH0KICAgIGlmIChzdGF0ZS5iYXNpY1R5cGVzW3Byb2R1Y3RdKSB7CiAgICAgIC8vIFJlbW92ZSB0YWJsZSBoZWFkZXIgY29uZmlndXJhdGlvbgogICAgICBPYmplY3Qua2V5cyhzdGF0ZS5iYXNpY1R5cGVzW3Byb2R1Y3RdKS5mb3JFYWNoKHR5cGUgPT4gewogICAgICAgIGRlbGV0ZSBzdGF0ZS5oZWFkZXJzW3R5cGVdOwogICAgICAgIGRlbGV0ZSBzdGF0ZS5iYXNpY1R5cGVXZWlnaHRzW3R5cGVdOwogICAgICAgIGRlbGV0ZSBzdGF0ZS5jYWNoZS5pZ25vcmVbdHlwZV07CiAgICAgICAgLy8gVGhlc2UgdHJhY2sgd2hldGhlciB0aGUgdHlwZSBoYXMgYSBjdXN0b20gY29tcG9uZW50CiAgICAgICAgZGVsZXRlIHN0YXRlLmNhY2hlLmRldGFpbFt0eXBlXTsKICAgICAgICBkZWxldGUgc3RhdGUuY2FjaGUuZWRpdFt0eXBlXTsKICAgICAgICBkZWxldGUgc3RhdGUuY2FjaGUubGlzdFt0eXBlXTsKCiAgICAgICAgLy8gRGVsZXRlIGFsbCBvZiB0aGUgZW50cmllcyBmcm9tIHRoZSBjb21wb25lbnRGb3IgY2FjaGUgd2hlcmUgdGhlIHZhbHllIGlzIHRoZSB0eXBlCiAgICAgICAgLy8gQ2FuIGRvIHRoaXMgbW9yZSBlZmZpY2llbnRseQogICAgICAgIE9iamVjdC5rZXlzKHN0YXRlLmNhY2hlLmNvbXBvbmVudEZvcikuZm9yRWFjaChrID0+IHsKICAgICAgICAgIGNvbnN0IHYgPSBzdGF0ZS5jYWNoZS5jb21wb25lbnRGb3Jba107CiAgICAgICAgICBpZiAodiA9PT0gdHlwZSkgewogICAgICAgICAgICBkZWxldGUgc3RhdGUuY2FjaGUuY29tcG9uZW50Rm9yW2tdOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgICAgZGVsZXRlIHN0YXRlLmJhc2ljVHlwZXNbcHJvZHVjdF07CiAgICB9CiAgICBpZiAocGx1Z2luKSB7CiAgICAgIC8vIGtpbmQgaXMgbGlzdCwgZWRpdCwgZGV0YWlsIGV0YwogICAgICBPYmplY3Qua2V5cyhwbHVnaW4udHlwZXMpLmZvckVhY2goa2luZCA9PiB7CiAgICAgICAgaWYgKHN0YXRlLmNhY2hlW2tpbmRdKSB7CiAgICAgICAgICBPYmplY3Qua2V5cyhwbHVnaW4udHlwZXNba2luZF0pLmZvckVhY2godHlwZSA9PiB7CiAgICAgICAgICAgIGRlbGV0ZSBzdGF0ZS5jYWNoZVtraW5kXVt0eXBlXTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwKICBwcm9kdWN0KHN0YXRlLCBvYmopIHsKICAgIGNvbnN0IGV4aXN0aW5nID0gZmluZEJ5KHN0YXRlLnByb2R1Y3RzLCAnbmFtZScsIG9iai5uYW1lKTsKICAgIGlmIChleGlzdGluZykgewogICAgICBPYmplY3QuYXNzaWduKGV4aXN0aW5nLCBvYmopOwogICAgfSBlbHNlIHsKICAgICAgYWRkT2JqZWN0KHN0YXRlLnByb2R1Y3RzLCBvYmopOwogICAgfQogIH0sCiAgdmlydHVhbFR5cGUoc3RhdGUsIHsKICAgIHByb2R1Y3QsCiAgICBvYmoKICB9KSB7CiAgICBpZiAoIXN0YXRlLnZpcnR1YWxUeXBlc1twcm9kdWN0XSkgewogICAgICBzdGF0ZS52aXJ0dWFsVHlwZXNbcHJvZHVjdF0gPSBbXTsKICAgIH0KICAgIGNvbnN0IGNvcHkgPSBjbG9uZShvYmopOwogICAgY29weS52aXJ0dWFsID0gdHJ1ZTsKICAgIGNvbnN0IGV4aXN0aW5nID0gZmluZEJ5KHN0YXRlLnZpcnR1YWxUeXBlc1twcm9kdWN0XSwgJ25hbWUnLCBjb3B5Lm5hbWUpOwogICAgaWYgKGV4aXN0aW5nKSB7CiAgICAgIE9iamVjdC5hc3NpZ24oZXhpc3RpbmcsIGNvcHkpOwogICAgfSBlbHNlIHsKICAgICAgYWRkT2JqZWN0KHN0YXRlLnZpcnR1YWxUeXBlc1twcm9kdWN0XSwgY29weSk7CiAgICB9CiAgfSwKICBzcG9vZmVkVHlwZShzdGF0ZSwgewogICAgcHJvZHVjdCwKICAgIG9iagogIH0pIHsKICAgIGlmICghc3RhdGUuc3Bvb2ZlZFR5cGVzW3Byb2R1Y3RdKSB7CiAgICAgIHN0YXRlLnNwb29mZWRUeXBlc1twcm9kdWN0XSA9IFtdOwogICAgfQogICAgY29uc3QgY29weSA9IGNsb25lKG9iaik7CiAgICBpbnN0YW5jZU1ldGhvZHNbcHJvZHVjdF0gPSBpbnN0YW5jZU1ldGhvZHNbcHJvZHVjdF0gfHwge307CiAgICBpbnN0YW5jZU1ldGhvZHNbcHJvZHVjdF1bY29weS50eXBlXSA9IGNvcHkuZ2V0SW5zdGFuY2VzOwogICAgZGVsZXRlIGNvcHkuZ2V0SW5zdGFuY2VzOwogICAgY29weS5uYW1lID0gY29weS50eXBlOwogICAgY29weS5pc1Nwb29mZWQgPSB0cnVlOwogICAgY29weS52aXJ0dWFsID0gdHJ1ZTsKICAgIGNvcHkuc2NoZW1hcy5mb3JFYWNoKHNjaGVtYSA9PiB7CiAgICAgIHNjaGVtYS5saW5rcyA9IHsKICAgICAgICBjb2xsZWN0aW9uOiBgLyR7U1BPT0ZFRF9QUkVGSVh9LyR7c2NoZW1hLmlkfWAsCiAgICAgICAgLi4uKHNjaGVtYS5saW5rcyB8fCB7fSkKICAgICAgfTsKICAgIH0pOwogICAgY29uc3QgZXhpc3RpbmcgPSBmaW5kQnkoc3RhdGUuc3Bvb2ZlZFR5cGVzW3Byb2R1Y3RdLCAndHlwZScsIGNvcHkudHlwZSk7CiAgICBpZiAoZXhpc3RpbmcpIHsKICAgICAgT2JqZWN0LmFzc2lnbihleGlzdGluZywgY29weSk7CiAgICB9IGVsc2UgewogICAgICBhZGRPYmplY3Qoc3RhdGUuc3Bvb2ZlZFR5cGVzW3Byb2R1Y3RdLCBjb3B5KTsKICAgIH0KICB9LAogIGJhc2ljVHlwZShzdGF0ZSwgewogICAgcHJvZHVjdCwKICAgIGdyb3VwLAogICAgdHlwZXMKICB9KSB7CiAgICBpZiAoIXByb2R1Y3QpIHsKICAgICAgcHJvZHVjdCA9IEVYUExPUkVSOwogICAgfQogICAgaWYgKCFncm91cCkgewogICAgICBncm91cCA9IFJPT1Q7CiAgICB9CiAgICBpZiAoIWlzQXJyYXkodHlwZXMpKSB7CiAgICAgIHR5cGVzID0gW3R5cGVzXTsKICAgIH0KICAgIGlmICghc3RhdGUuYmFzaWNUeXBlc1twcm9kdWN0XSkgewogICAgICBzdGF0ZS5iYXNpY1R5cGVzW3Byb2R1Y3RdID0ge307CiAgICB9CiAgICBmb3IgKGNvbnN0IHQgb2YgdHlwZXMpIHsKICAgICAgc3RhdGUuYmFzaWNUeXBlc1twcm9kdWN0XVt0XSA9IGdyb3VwOwogICAgfQogIH0sCiAgaWdub3JlR3JvdXAoc3RhdGUsIHsKICAgIHJlZ2V4T3JTdHJpbmc6IG1hdGNoLAogICAgY2IKICB9KSB7CiAgICBtYXRjaCA9IGVuc3VyZVJlZ2V4KG1hdGNoKTsKICAgIC8vIFN0YXRlIHNob3VsZG4ndCBjb250YWluIGFjdHVhbCBSZWdFeHAgb2JqZWN0cywgYmVjYXVzZSB0aGV5IGRvbid0IHNlcmlhbGl6ZQogICAgY2IgPyBzdGF0ZS5ncm91cElnbm9yZS5wdXNoKHsKICAgICAgdHlwZTogcmVnZXhUb1N0cmluZyhtYXRjaCksCiAgICAgIGNiCiAgICB9KSA6IHN0YXRlLmdyb3VwSWdub3JlLnB1c2gocmVnZXhUb1N0cmluZyhtYXRjaCkpOwogIH0sCiAgaWdub3JlVHlwZShzdGF0ZSwgbWF0Y2gpIHsKICAgIG1hdGNoID0gZW5zdXJlUmVnZXgobWF0Y2gpOwogICAgc3RhdGUudHlwZUlnbm9yZS5wdXNoKHJlZ2V4VG9TdHJpbmcobWF0Y2gpKTsKICB9LAogIGdyb3VwQnkoc3RhdGUsIHsKICAgIHR5cGUsCiAgICBmaWVsZAogIH0pIHsKICAgIHN0YXRlLmdyb3VwQnlbdHlwZV0gPSBmaWVsZDsKICB9LAogIGhlYWRlcnMoc3RhdGUsIHsKICAgIHR5cGUsCiAgICBoZWFkZXJzCiAgfSkgewogICAgc3RhdGUuaGVhZGVyc1t0eXBlXSA9IGhlYWRlcnM7CiAgfSwKICBoaWRlQnVsa0FjdGlvbnMoc3RhdGUsIHsKICAgIHR5cGUsCiAgICBmaWVsZAogIH0pIHsKICAgIHN0YXRlLmhpZGVCdWxrQWN0aW9uc1t0eXBlXSA9IGZpZWxkOwogIH0sCiAgLy8gd2VpZ2h0R3JvdXAoe2dyb3VwOiAnY29yZScsIHdlaWdodDogOTl9KTsgLS0gaGlnaGVyIGdyb3VwcyBhcmUgc2hvd24gZmlyc3QKICAvLyBUaGVzZSBvcGVyYXRlIG9uIGdyb3VwIG5hbWVzICphZnRlciogbWFwcGluZyBidXQgKmJlZm9yZSogdHJhbnNsYXRpb24KICB3ZWlnaHRHcm91cChzdGF0ZSwgewogICAgZ3JvdXAsCiAgICBncm91cHMsCiAgICB3ZWlnaHQsCiAgICBmb3JCYXNpYwogIH0pIHsKICAgIGlmICghZ3JvdXBzKSB7CiAgICAgIGdyb3VwcyA9IFtdOwogICAgfQogICAgaWYgKGdyb3VwKSB7CiAgICAgIGdyb3Vwcy5wdXNoKGdyb3VwKTsKICAgIH0KICAgIGNvbnN0IG1hcCA9IGZvckJhc2ljID8gc3RhdGUuYmFzaWNHcm91cFdlaWdodHMgOiBzdGF0ZS5ncm91cFdlaWdodHM7CiAgICBmb3IgKGNvbnN0IGcgb2YgZ3JvdXBzKSB7CiAgICAgIG1hcFtnLnRvTG93ZXJDYXNlKCldID0gd2VpZ2h0OwogICAgfQogIH0sCiAgLy8gc2V0R3JvdXBEZWZhdWx0VHlwZSh7Z3JvdXA6ICdjb3JlJywgZGVmYXVsdFR5cGU6ICduYW1lJ30pOwogIC8vIEJ5IGRlZmF1bHQgd2hlbiBhIGdyb3VwIGlzIGNsaWNrZWQsIHRoZSBmaXJzdCBpdGVtIGlzIHNlbGVjdGVkIC0gdGhpcyBhbGxvd3MKICAvLyB0aGlzIGJlaGF2aW91ciB0byBiZSBjaGFuZ2VkIGFuZCBhIG5hbWVkIGNoaWxkIHR5cGUgY2FuIGJlIGNob3NlbgogIC8vIFRoZXNlIG9wZXJhdGUgb24gZ3JvdXAgbmFtZXMgKmFmdGVyKiBtYXBwaW5nIGJ1dCAqYmVmb3JlKiB0cmFuc2xhdGlvbgogIHNldEdyb3VwRGVmYXVsdFR5cGUoc3RhdGUsIHsKICAgIGdyb3VwLAogICAgZ3JvdXBzLAogICAgZGVmYXVsdFR5cGUKICB9KSB7CiAgICBpZiAoIWdyb3VwcykgewogICAgICBncm91cHMgPSBbXTsKICAgIH0KICAgIGlmIChncm91cCkgewogICAgICBncm91cHMucHVzaChncm91cCk7CiAgICB9CiAgICBmb3IgKGNvbnN0IGcgb2YgZ3JvdXBzKSB7CiAgICAgIHN0YXRlLmdyb3VwRGVmYXVsdFR5cGVzW2cudG9Mb3dlckNhc2UoKV0gPSBkZWZhdWx0VHlwZTsKICAgIH0KICB9LAogIC8vIHdlaWdodFR5cGUoJ0NsdXN0ZXInIDk5KTsgLS0gaGlnaGVyIGdyb3VwcyBhcmUgc2hvd24gZmlyc3QKICAvLyBUaGVzZSBvcGVyYXRlIG9uICpzY2hlbWEqIHR5cGUgbmFtZXMsIGJlZm9yZSBtYXBwaW5nCiAgd2VpZ2h0VHlwZShzdGF0ZSwgewogICAgdHlwZSwKICAgIHR5cGVzLAogICAgd2VpZ2h0LAogICAgZm9yQmFzaWMKICB9KSB7CiAgICBpZiAoIXR5cGVzKSB7CiAgICAgIHR5cGVzID0gW107CiAgICB9CiAgICBpZiAodHlwZSkgewogICAgICB0eXBlcy5wdXNoKHR5cGUpOwogICAgfQogICAgY29uc3QgbWFwID0gZm9yQmFzaWMgPyBzdGF0ZS5iYXNpY1R5cGVXZWlnaHRzIDogc3RhdGUudHlwZVdlaWdodHM7CiAgICBmb3IgKGNvbnN0IHQgb2YgdHlwZXMpIHsKICAgICAgbWFwW3QudG9Mb3dlckNhc2UoKV0gPSB3ZWlnaHQ7CiAgICB9CiAgfSwKICAvLyBtYXBHcm91cCgndWdseS50aGluZycsICdOaWNlIFRoaW5nJywgMSk7CiAgLy8gbWFwR3JvdXAoL3VnbHkudGhpbmcuKHN0dWZmKScsICckMScsIDIpOwogIC8vIG1hcEdyb3VwKC91Z2x5LnRoaW5nLihzdHVmZiknLCBmdW5jdGlvbihncm91cFN0ciwgcnVsZU9iaiwgcmVnZXhNYXRjaCwgdHlwZU9iaikgeyByZXR1cm4gdWNGaXJzdChncm91cC5pZCkgfSAsIDIpOwogIG1hcEdyb3VwKHN0YXRlLCB7CiAgICBtYXRjaCwKICAgIHJlcGxhY2UsCiAgICB3ZWlnaHQgPSA1LAogICAgY29udGludWVPbk1hdGNoID0gZmFsc2UKICB9KSB7CiAgICBfYWRkTWFwcGluZyhzdGF0ZS5ncm91cE1hcHBpbmdzLCBtYXRjaCwgcmVwbGFjZSwgd2VpZ2h0LCBjb250aW51ZU9uTWF0Y2gpOwogIH0sCiAgbWFwVHlwZShzdGF0ZSwgewogICAgbWF0Y2gsCiAgICByZXBsYWNlLAogICAgd2VpZ2h0ID0gNSwKICAgIGNvbnRpbnVlT25NYXRjaCA9IGZhbHNlCiAgfSkgewogICAgX2FkZE1hcHBpbmcoc3RhdGUudHlwZU1hcHBpbmdzLCBtYXRjaCwgcmVwbGFjZSwgd2VpZ2h0LCBjb250aW51ZU9uTWF0Y2gpOwogIH0sCiAgLy8gbW92ZVR5cGUoJ2FwcHMuZGVwbG95bWVudCcsICdDb3JlJyk7CiAgbW92ZVR5cGUoc3RhdGUsIHsKICAgIG1hdGNoLAogICAgZ3JvdXAsCiAgICB3ZWlnaHQgPSA1CiAgfSkgewogICAgX2FkZE1hcHBpbmcoc3RhdGUudHlwZU1vdmVNYXBwaW5ncywgbWF0Y2gsIGdyb3VwLCB3ZWlnaHQpOwogIH0sCiAgY29tcG9uZW50Rm9yVHlwZShzdGF0ZSwgewogICAgbWF0Y2gsCiAgICByZXBsYWNlCiAgfSkgewogICAgbWF0Y2ggPSBlbnN1cmVSZWdleChtYXRjaCk7CiAgICBtYXRjaCA9IHJlZ2V4VG9TdHJpbmcobWF0Y2gpOwogICAgc3RhdGUudHlwZVRvQ29tcG9uZW50TWFwcGluZ3MucHVzaCh7CiAgICAgIG1hdGNoLAogICAgICByZXBsYWNlCiAgICB9KTsKICB9LAogIGNvbmZpZ3VyZVR5cGUoc3RhdGUsIG9wdGlvbnMpIHsKICAgIGNvbnN0IG1hdGNoID0gcmVnZXhUb1N0cmluZyhlbnN1cmVSZWdleChvcHRpb25zLm1hdGNoKSk7CiAgICBjb25zdCBpZHggPSBzdGF0ZS50eXBlT3B0aW9ucy5maW5kSW5kZXgob2JqID0+IG9iai5tYXRjaCA9PT0gbWF0Y2gpOwogICAgbGV0IG9iaiA9IHsKICAgICAgLi4ub3B0aW9ucywKICAgICAgbWF0Y2gKICAgIH07CiAgICBpZiAoaWR4ID49IDApIHsKICAgICAgb2JqID0gT2JqZWN0LmFzc2lnbihzdGF0ZS50eXBlT3B0aW9uc1tpZHhdLCBvYmopOwogICAgICBzdGF0ZS50eXBlT3B0aW9ucy5zcGxpY2UoaWR4LCAxLCBvYmopOwogICAgfSBlbHNlIHsKICAgICAgY29uc3Qgb2JqID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywgewogICAgICAgIG1hdGNoCiAgICAgIH0pOwogICAgICBzdGF0ZS50eXBlT3B0aW9ucy5wdXNoKG9iaik7CiAgICB9CiAgfQp9OwpleHBvcnQgY29uc3QgYWN0aW9ucyA9IHsKICByZW1vdmVQcm9kdWN0KHsKICAgIGNvbW1pdAogIH0sIG1ldGFkYXRhKSB7CiAgICBjb21taXQoJ3JlbW92ZScsIG1ldGFkYXRhKTsKICB9LAogIGFkZEZhdm9yaXRlKHsKICAgIGRpc3BhdGNoLAogICAgcm9vdEdldHRlcnMKICB9LCB0eXBlKSB7CiAgICBjb25zdCB0eXBlcyA9IHJvb3RHZXR0ZXJzWydwcmVmcy9nZXQnXShGQVZPUklURV9UWVBFUykgfHwgW107CiAgICBhZGRPYmplY3QodHlwZXMsIHR5cGUpOwogICAgZGlzcGF0Y2goJ3ByZWZzL3NldCcsIHsKICAgICAga2V5OiBGQVZPUklURV9UWVBFUywKICAgICAgdmFsdWU6IHR5cGVzCiAgICB9LCB7CiAgICAgIHJvb3Q6IHRydWUKICAgIH0pOwogIH0sCiAgcmVtb3ZlRmF2b3JpdGUoewogICAgZGlzcGF0Y2gsCiAgICByb290R2V0dGVycwogIH0sIHR5cGUpIHsKICAgIGNvbnN0IHR5cGVzID0gcm9vdEdldHRlcnNbJ3ByZWZzL2dldCddKEZBVk9SSVRFX1RZUEVTKSB8fCBbXTsKICAgIHJlbW92ZU9iamVjdCh0eXBlcywgdHlwZSk7CiAgICBkaXNwYXRjaCgncHJlZnMvc2V0JywgewogICAgICBrZXk6IEZBVk9SSVRFX1RZUEVTLAogICAgICB2YWx1ZTogdHlwZXMKICAgIH0sIHsKICAgICAgcm9vdDogdHJ1ZQogICAgfSk7CiAgfSwKICB0b2dnbGVHcm91cCh7CiAgICBkaXNwYXRjaCwKICAgIHJvb3RHZXR0ZXJzCiAgfSwgewogICAgZ3JvdXAsCiAgICBleHBhbmRlZAogIH0pIHsKICAgIGNvbnN0IGdyb3VwcyA9IHJvb3RHZXR0ZXJzWydwcmVmcy9nZXQnXShFWFBBTkRFRF9HUk9VUFMpOwogICAgaWYgKGV4cGFuZGVkKSB7CiAgICAgIGFkZE9iamVjdChncm91cHMsIGdyb3VwKTsKICAgIH0gZWxzZSB7CiAgICAgIHJlbW92ZU9iamVjdChncm91cHMsIGdyb3VwKTsKICAgIH0KICAgIGRpc3BhdGNoKCdwcmVmcy9zZXQnLCB7CiAgICAgIGtleTogRVhQQU5ERURfR1JPVVBTLAogICAgICB2YWx1ZTogZ3JvdXBzCiAgICB9LCB7CiAgICAgIHJvb3Q6IHRydWUKICAgIH0pOwogIH0sCiAgY29uZmlndXJlVHlwZSh7CiAgICBjb21taXQKICB9LCBvcHRpb25zKSB7CiAgICBjb21taXQoJ2NvbmZpZ3VyZVR5cGUnLCBvcHRpb25zKTsKICB9Cn07CmZ1bmN0aW9uIF9zb3J0R3JvdXAodHJlZSwgbW9kZSkgewogIGNvbnN0IGJ5ID0gWyd3ZWlnaHQ6ZGVzYycsICduYW1lc3BhY2VkJywgJ2xhYmVsJ107CiAgdHJlZS5jaGlsZHJlbiA9IHNvcnRCeSh0cmVlLmNoaWxkcmVuLCBieSk7CiAgZm9yIChjb25zdCBlbnRyeSBvZiB0cmVlLmNoaWxkcmVuKSB7CiAgICBpZiAoZW50cnkuY2hpbGRyZW4pIHsKICAgICAgX3NvcnRHcm91cChlbnRyeSwgbW9kZSk7CiAgICB9CiAgfQp9CmZ1bmN0aW9uIF9tYXRjaGluZ0NvdW50cyh0eXBlT2JqLCBuYW1lc3BhY2VzKSB7CiAgLy8gVGhhdCB3YXMgZWFzeQogIGlmICghdHlwZU9iai5uYW1lc3BhY2VkIHx8ICF0eXBlT2JqLmJ5TmFtZXNwYWNlIHx8IG5hbWVzcGFjZXMgPT09IG51bGwgfHwgdHlwZU9iai5jb3VudCA9PT0gbnVsbCkgewogICAgcmV0dXJuIHR5cGVPYmouY291bnQ7CiAgfQogIGxldCBvdXQgPSAwOwoKICAvLyBPdGhlcndpc2Ugc3RhcnQgd2l0aCAwIGFuZCBjb3VudCB1cAogIGZvciAoY29uc3QgbmFtZXNwYWNlIG9mIG5hbWVzcGFjZXMpIHsKICAgIHZhciBfdHlwZU9iaiRieU5hbWVzcGFjZSQ7CiAgICBvdXQgKz0gKChfdHlwZU9iaiRieU5hbWVzcGFjZSQgPSB0eXBlT2JqLmJ5TmFtZXNwYWNlW25hbWVzcGFjZV0pID09PSBudWxsIHx8IF90eXBlT2JqJGJ5TmFtZXNwYWNlJCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3R5cGVPYmokYnlOYW1lc3BhY2UkLmNvdW50KSB8fCAwOwogIH0KICByZXR1cm4gb3V0Owp9CmZ1bmN0aW9uIF9hcHBseU1hcHBpbmcob2JqT3JWYWx1ZSwgbWFwcGluZ3MsIGtleUZpZWxkLCBjYWNoZSwgZGVmYXVsdEZuKSB7CiAgbGV0IGtleSA9IG9iak9yVmFsdWU7CiAgbGV0IGZvdW5kID0gZmFsc2U7CiAgaWYgKGtleUZpZWxkKSB7CiAgICBpZiAodHlwZW9mIG9iak9yVmFsdWUgIT09ICdvYmplY3QnKSB7CiAgICAgIHJldHVybiBvYmpPclZhbHVlOwogICAgfQogICAga2V5ID0gZ2V0KG9iak9yVmFsdWUsIGtleUZpZWxkKTsKICAgIGlmICh0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJykgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICB9CiAgaWYgKGtleSAmJiBjYWNoZSAmJiBjYWNoZVtrZXldKSB7CiAgICByZXR1cm4gY2FjaGVba2V5XTsKICB9CiAgbGV0IG91dCA9IGAke2tleX1gOwogIGZvciAoY29uc3QgcnVsZSBvZiBtYXBwaW5ncykgewogICAgY29uc3QgcmUgPSBzdHJpbmdUb1JlZ2V4KHJ1bGUubWF0Y2gpOwogICAgY29uc3QgY2FwdHVyZWQgPSBvdXQubWF0Y2gocmUpOwogICAgaWYgKGNhcHR1cmVkICYmIHJ1bGUucmVwbGFjZSkgewogICAgICBvdXQgPSBvdXQucmVwbGFjZShyZSwgcnVsZS5yZXBsYWNlKTsKICAgICAgZm91bmQgPSB0cnVlOwogICAgICBpZiAoIXJ1bGUuY29udGludWVPbk1hdGNoKSB7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KICB9CiAgaWYgKCFmb3VuZCAmJiBkZWZhdWx0Rm4pIHsKICAgIG91dCA9IGRlZmF1bHRGbihvdXQsIG9iak9yVmFsdWUpOwogIH0KICBpZiAoY2FjaGUpIHsKICAgIGNhY2hlW2tleV0gPSBvdXQ7CiAgfQogIHJldHVybiBvdXQ7Cn0KZnVuY3Rpb24gX2FkZE1hcHBpbmcobWFwcGluZ3MsIG1hdGNoLCByZXBsYWNlLCB3ZWlnaHQsIGNvbnRpbnVlT25NYXRjaCkgewogIG1hdGNoID0gcmVnZXhUb1N0cmluZyhlbnN1cmVSZWdleChtYXRjaCkpOwogIG1hcHBpbmdzLnB1c2goewogICAgbWF0Y2gsCiAgICByZXBsYWNlLAogICAgd2VpZ2h0LAogICAgY29udGludWVPbk1hdGNoLAogICAgaW5zZXJ0SW5kZXg6IG1hcHBpbmdzLmxlbmd0aAogIH0pOwoKICAvLyBSZS1zb3J0IHRoZSBsaXN0IGJ5IHdlaWdodCAoaGlnaGVzdCBmaXJzdCkgYW5kIGluc2VydCB0aW1lIChvbGRlc3QgZmlyc3QpCiAgbWFwcGluZ3Muc29ydCgoYSwgYikgPT4gewogICAgY29uc3QgcHJpID0gYi53ZWlnaHQgLSBhLndlaWdodDsKICAgIGlmIChwcmkpIHsKICAgICAgcmV0dXJuIHByaTsKICAgIH0KICAgIHJldHVybiBhLmluc2VydEluZGV4IC0gYi5pbnNlcnRJbmRleDsKICB9KTsKfQoKLy8gUmVnZXhlcyBjYW4ndCBiZSByZXByZXNlbnRlZCBpbiBzdGF0ZSBiZWNhdXNlIHRoZXkgZG9uJ3Qgc2VyaWFsaXplIHRvIEpTT04uLgpjb25zdCByZWdleENhY2hlID0ge307CmZ1bmN0aW9uIHJlZ2V4VG9TdHJpbmcocmVnZXgpIHsKICByZXR1cm4gcmVnZXguc291cmNlOwp9CmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXgoc3RyKSB7CiAgbGV0IG91dCA9IHJlZ2V4Q2FjaGVbc3RyXTsKICBpZiAoIW91dCkgewogICAgb3V0ID0gbmV3IFJlZ0V4cChzdHIpOwogICAgcmVnZXhDYWNoZVtzdHJdID0gb3V0OwogIH0KICByZXR1cm4gb3V0Owp9CmZ1bmN0aW9uIGlmSGF2ZShnZXR0ZXJzLCBvcHRpb24pIHsKICBzd2l0Y2ggKG9wdGlvbikgewogICAgY2FzZSBJRl9IQVZFLlYyX01PTklUT1JJTkc6CiAgICAgIHsKICAgICAgICByZXR1cm4gaGF2ZVYyTW9uaXRvcmluZyhnZXR0ZXJzKTsKICAgICAgfQogICAgY2FzZSBJRl9IQVZFLlYxX01PTklUT1JJTkc6CiAgICAgIHsKICAgICAgICByZXR1cm4gaGF2ZVYxTW9uaXRvcmluZyhnZXR0ZXJzKTsKICAgICAgfQogICAgY2FzZSBJRl9IQVZFLlBST0pFQ1Q6CiAgICAgIHsKICAgICAgICByZXR1cm4gISFwcm9qZWN0KGdldHRlcnMpOwogICAgICB9CiAgICBjYXNlIElGX0hBVkUuTk9fUFJPSkVDVDoKICAgICAgewogICAgICAgIHJldHVybiAhcHJvamVjdChnZXR0ZXJzKTsKICAgICAgfQogICAgY2FzZSBJRl9IQVZFLk5PVF9WMV9JU1RJTzoKICAgICAgewogICAgICAgIHJldHVybiAhaXNWMUlzdGlvKGdldHRlcnMpOwogICAgICB9CiAgICBjYXNlIElGX0hBVkUuTVVMVElfQ0xVU1RFUjoKICAgICAgewogICAgICAgIHJldHVybiBnZXR0ZXJzLmlzTXVsdGlDbHVzdGVyOwogICAgICB9CiAgICBjYXNlIElGX0hBVkUuTkVVVkVDVE9SX05BTUVTUEFDRToKICAgICAgewogICAgICAgIHJldHVybiBnZXR0ZXJzW2BjbHVzdGVyL2FsbGBdKE5BTUVTUEFDRSkuZmluZChuID0+IG4ubWV0YWRhdGEubmFtZSA9PT0gTkVVX1ZFQ1RPUl9OQU1FU1BBQ0UpOwogICAgICB9CiAgICBjYXNlIElGX0hBVkUuQURNSU46CiAgICAgIHsKICAgICAgICByZXR1cm4gaXNBZG1pblVzZXIoZ2V0dGVycyk7CiAgICAgIH0KICAgIGNhc2UgSUZfSEFWRS5NQ01fRElTQUJMRUQ6CiAgICAgIHsKICAgICAgICByZXR1cm4gIWdldHRlcnNbJ2lzUmFuY2hlckluSGFydmVzdGVyJ107CiAgICAgIH0KICAgIGNhc2UgSUZfSEFWRS5OT1RfU1RBTkRBTE9ORV9IQVJWRVNURVI6CiAgICAgIHsKICAgICAgICByZXR1cm4gIWdldHRlcnNbJ2lzU3RhbmRhbG9uZUhhcnZlc3RlciddOwogICAgICB9CiAgICBkZWZhdWx0OgogICAgICByZXR1cm4gZmFsc2U7CiAgfQp9CgovLyBDb3VsZCBsaXN0IGEgbGFyZ2VyIHNldCBvZiByZXNvdXJjZXMgdGhhdCB0eXBpY2FsbHkgb25seSBhbiBhZG1pbiB1c2VyIHdvdWxkIGhhdmUKZXhwb3J0IGZ1bmN0aW9uIGlzQWRtaW5Vc2VyKGdldHRlcnMpIHsKICB2YXIgX2dldHRlcnMkbWFuYWdlbWVudFMsIF9nZXR0ZXJzJG1hbmFnZW1lbnRTMiwgX2dldHRlcnMkbWFuYWdlbWVudFMzLCBfZ2V0dGVycyRtYW5hZ2VtZW50UzQsIF9nZXR0ZXJzJG1hbmFnZW1lbnRTNTsKICBjb25zdCBjYW5FZGl0U2V0dGluZ3MgPSAoKChfZ2V0dGVycyRtYW5hZ2VtZW50UyA9IGdldHRlcnNbJ21hbmFnZW1lbnQvc2NoZW1hRm9yJ10oTUFOQUdFTUVOVC5TRVRUSU5HKSkgPT09IG51bGwgfHwgX2dldHRlcnMkbWFuYWdlbWVudFMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9nZXR0ZXJzJG1hbmFnZW1lbnRTLnJlc291cmNlTWV0aG9kcykgfHwgW10pLmluY2x1ZGVzKCdQVVQnKTsKICBjb25zdCBjYW5FZGl0RmVhdHVyZUZsYWdzID0gKCgoX2dldHRlcnMkbWFuYWdlbWVudFMyID0gZ2V0dGVyc1snbWFuYWdlbWVudC9zY2hlbWFGb3InXShNQU5BR0VNRU5ULkZFQVRVUkUpKSA9PT0gbnVsbCB8fCBfZ2V0dGVycyRtYW5hZ2VtZW50UzIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9nZXR0ZXJzJG1hbmFnZW1lbnRTMi5yZXNvdXJjZU1ldGhvZHMpIHx8IFtdKS5pbmNsdWRlcygnUFVUJyk7CiAgY29uc3QgY2FuSW5zdGFsbEFwcHMgPSAoKChfZ2V0dGVycyRtYW5hZ2VtZW50UzMgPSBnZXR0ZXJzWydtYW5hZ2VtZW50L3NjaGVtYUZvciddKENBVEFMT0cuQVBQKSkgPT09IG51bGwgfHwgX2dldHRlcnMkbWFuYWdlbWVudFMzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZ2V0dGVycyRtYW5hZ2VtZW50UzMucmVzb3VyY2VNZXRob2RzKSB8fCBbXSkuaW5jbHVkZXMoJ1BVVCcpOwogIGNvbnN0IGNhbkFkZFJlcG9zID0gKCgoX2dldHRlcnMkbWFuYWdlbWVudFM0ID0gZ2V0dGVyc1snbWFuYWdlbWVudC9zY2hlbWFGb3InXShDQVRBTE9HLkNMVVNURVJfUkVQTykpID09PSBudWxsIHx8IF9nZXR0ZXJzJG1hbmFnZW1lbnRTNCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2dldHRlcnMkbWFuYWdlbWVudFM0LnJlc291cmNlTWV0aG9kcykgfHwgW10pLmluY2x1ZGVzKCdQVVQnKTsKICBjb25zdCBjYW5QdXRIZWxtT3BlcmF0aW9ucyA9ICgoKF9nZXR0ZXJzJG1hbmFnZW1lbnRTNSA9IGdldHRlcnNbJ21hbmFnZW1lbnQvc2NoZW1hRm9yJ10oQ0FUQUxPRy5PUEVSQVRJT04pKSA9PT0gbnVsbCB8fCBfZ2V0dGVycyRtYW5hZ2VtZW50UzUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9nZXR0ZXJzJG1hbmFnZW1lbnRTNS5yZXNvdXJjZU1ldGhvZHMpIHx8IFtdKS5pbmNsdWRlcygnUFVUJyk7CiAgcmV0dXJuIGNhbkVkaXRTZXR0aW5ncyAmJiBjYW5FZGl0RmVhdHVyZUZsYWdzICYmIGNhbkluc3RhbGxBcHBzICYmIGNhbkFkZFJlcG9zICYmIGNhblB1dEhlbG1PcGVyYXRpb25zOwp9CmZ1bmN0aW9uIF9maW5kQ29sdW1uQnlOYW1lKHNjaGVtYSwgY29sTmFtZSkgewogIGNvbnN0IGF0dHJpYnV0ZXMgPSBzY2hlbWEuYXR0cmlidXRlcyB8fCB7fTsKICBjb25zdCBjb2x1bW5zID0gYXR0cmlidXRlcy5jb2x1bW5zIHx8IFtdOwogIHJldHVybiBmaW5kQnkoY29sdW1ucywgJ25hbWUnLCBjb2xOYW1lKTsKfQpmdW5jdGlvbiBfcm93VmFsdWVHZXR0ZXIoY29sKSB7CiAgLy8gJ2ZpZWxkJyBjb21lcyBmcm9tIHRoZSBzY2hlbWEgLSB0eXBpY2FsbHkgaXQgaXMgb2YgdGhlIGZvcm0gJC5tZXRhZGF0YS5maWVsZFtOXQogIC8vIFdlIHdpbGwgdXNlIEpzb25QYXRoIHRvIGxvb2sgdXAgdGhpcyB2YWx1ZSwgd2hpY2ggaXMgY29zdGx5IC0gc28gaWYgd2UgY2FuIGRldGVjdCB0aGlzIGZvcm1hdAogIC8vIFVzZSBhIG1vcmUgZWZmaWNpZW50IGZ1bmN0aW9uIHRvIGdldCB0aGUgdmFsdWUKICBjb25zdCB2YWx1ZSA9IGNvbC5maWVsZC5zdGFydHNXaXRoKCcuJykgPyBgJCR7Y29sLmZpZWxkfWAgOiBjb2wuZmllbGQ7CiAgaWYgKHByb2Nlc3MuY2xpZW50KSB7CiAgICBjb25zdCBmb3VuZCA9IHZhbHVlLm1hdGNoKEZJRUxEX1JFR0VYKTsKICAgIGlmIChmb3VuZCAmJiBmb3VuZC5sZW5ndGggPT09IDIpIHsKICAgICAgY29uc3QgZmllbGRJbmRleCA9IHBhcnNlSW50KGZvdW5kWzFdLCAxMCk7CiAgICAgIHJldHVybiByb3cgPT4gewogICAgICAgIHZhciBfcm93JG1ldGFkYXRhOwogICAgICAgIHJldHVybiAoX3JvdyRtZXRhZGF0YSA9IHJvdy5tZXRhZGF0YSkgPT09IG51bGwgfHwgX3JvdyRtZXRhZGF0YSA9PT0gdm9pZCAwIHx8IChfcm93JG1ldGFkYXRhID0gX3JvdyRtZXRhZGF0YS5maWVsZHMpID09PSBudWxsIHx8IF9yb3ckbWV0YWRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9yb3ckbWV0YWRhdGFbZmllbGRJbmRleF07CiAgICAgIH07CiAgICB9CiAgfQogIHJldHVybiB2YWx1ZTsKfQoKLy8gSXMgVjEgSXN0aW8gaW5zdGFsbGVkPwpmdW5jdGlvbiBpc1YxSXN0aW8oZ2V0dGVycykgewogIHZhciBfY2x1c3RlciRzdGF0dXM7CiAgY29uc3QgY2x1c3RlciA9IGdldHRlcnNbJ2N1cnJlbnRDbHVzdGVyJ107CiAgcmV0dXJuICEhKGNsdXN0ZXIgIT09IG51bGwgJiYgY2x1c3RlciAhPT0gdm9pZCAwICYmIChfY2x1c3RlciRzdGF0dXMgPSBjbHVzdGVyLnN0YXR1cykgIT09IG51bGwgJiYgX2NsdXN0ZXIkc3RhdHVzICE9PSB2b2lkIDAgJiYgX2NsdXN0ZXIkc3RhdHVzLmlzdGlvRW5hYmxlZCk7Cn0KZnVuY3Rpb24gaWZIYXZlVmVyYihyb290R2V0dGVycywgbW9kdWxlLCB2ZXJiLCBoYXZlSWRzKSB7CiAgZm9yIChjb25zdCBoYXZlSWQgb2YgaGF2ZUlkcykgewogICAgY29uc3Qgc2NoZW1hID0gcm9vdEdldHRlcnNbYCR7bW9kdWxlfS9zY2hlbWFGb3JgXShoYXZlSWQpOwogICAgY29uc3Qgd2FudCA9IHZlcmIudG9Mb3dlckNhc2UoKTsKICAgIGNvbnN0IGNvbGxlY3Rpb25NZXRob2RzID0gc2NoZW1hLmNvbGxlY3Rpb25NZXRob2RzIHx8IFtdOwogICAgY29uc3QgcmVzb3VyY2VNZXRob2RzID0gc2NoZW1hLnJlc291cmNlTWV0aG9kcyB8fCBbXTsKICAgIGNvbnN0IGhhdmUgPSBbLi4uY29sbGVjdGlvbk1ldGhvZHMsIC4uLnJlc291cmNlTWV0aG9kc10ubWFwKHggPT4geC50b0xvd2VyQ2FzZSgpKTsKICAgIGlmICghaGF2ZS5pbmNsdWRlcyh3YW50KSAmJiAhaGF2ZS5pbmNsdWRlcyhgYmxvY2tlZC0ke3dhbnR9YCkpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0KICByZXR1cm4gdHJ1ZTsKfQoKLy8gTG9vayBhdCB0aGUgbmFtZXNwYWNlIGZpbHRlcnMgdG8gZGV0ZXJtaW5lIGlmIGEgcHJvamVjdCBpcyBzZWxlY3RlZApleHBvcnQgZnVuY3Rpb24gcHJvamVjdChnZXR0ZXJzKSB7CiAgdmFyIF9nZXR0ZXJzJGN1cnJlbnRDbHVzdDsKICBjb25zdCBjbHVzdGVySWQgPSAoX2dldHRlcnMkY3VycmVudENsdXN0ID0gZ2V0dGVyc1snY3VycmVudENsdXN0ZXInXSkgPT09IG51bGwgfHwgX2dldHRlcnMkY3VycmVudENsdXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZ2V0dGVycyRjdXJyZW50Q2x1c3QuaWQ7CiAgaWYgKCFjbHVzdGVySWQpIHsKICAgIHJldHVybiBudWxsOwogIH0KICBjb25zdCBmaWx0ZXJzID0gZ2V0dGVyc1snbmFtZXNwYWNlRmlsdGVycyddOwogIGNvbnN0IG5hbWVzcGFjZXMgPSBbXTsKICBsZXQgcHJvamVjdE5hbWUgPSBudWxsOwogIGZvciAoY29uc3QgZmlsdGVyIG9mIGZpbHRlcnMpIHsKICAgIGNvbnN0IFt0eXBlLCBpZF0gPSBmaWx0ZXIuc3BsaXQoJzovLycsIDIpOwogICAgaWYgKHR5cGUgPT09ICdwcm9qZWN0JykgewogICAgICBpZiAocHJvamVjdE5hbWUgIT09IG51bGwpIHsKICAgICAgICAvLyBNb3JlIHRoYW4gb25lIHByb2plY3Qgc2VsZWN0ZWQKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgICBwcm9qZWN0TmFtZSA9IGlkOwogICAgfSBlbHNlIGlmICh0eXBlID09PSAnbnMnKSB7CiAgICAgIG5hbWVzcGFjZXMucHVzaChpZCk7CiAgICB9IGVsc2UgewogICAgICAvLyBTb21ldGhpbmcgb3RoZXIgdGhhbiBwcm9qZWN0IG9yIG5hbWVzcGFjZQogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICB9CgogIC8vIE5vIHByb2plY3QgZm91bmQ/CiAgaWYgKCFwcm9qZWN0TmFtZSkgewogICAgcmV0dXJuIG51bGw7CiAgfQoKICAvLyBXZSBoYXZlIG9uZSBwcm9qZWN0IGFuZCBhIHNldCBvZiBuYW1lc3BhY2VzCiAgLy8gQ2hlY2sgdGhhdCBhbGwgb2YgdGhlIG5hbWVzcGFjZXMgYmVsb25nIHRvIHRoZSBwcm9qZWN0CiAgY29uc3QgcHJvamVjdCA9IGdldHRlcnNbJ21hbmFnZW1lbnQvYnlJZCddKE1BTkFHRU1FTlQuUFJPSkVDVCwgYCR7Y2x1c3RlcklkfS8ke3Byb2plY3ROYW1lfWApOwoKICAvLyBObyBhZGRpdGlvbmFsIG5hbWVzcGFjZXMgbWVhbnMganVzdCB0aGUgcHJvamVjdCBpcyBzZWxlY3RlZAogIGlmIChuYW1lc3BhY2VzLmxlbmd0aCA9PT0gMCkgewogICAgcmV0dXJuIHByb2plY3Q7CiAgfQoKICAvLyBDb252ZXJ0IHRoZSBwcm9qZWN0IG5hbWVzcGFjZXMgaW50byBhIG1hcCBzbyB3ZSBjYW4gY2hlY2sgZXhpc3RlbmNlIGVhc2lseQogIGNvbnN0IHByak5hbWVzcGFjZU1hcCA9IHByb2plY3QubmFtZXNwYWNlcy5yZWR1Y2UoKG0sIG5zKSA9PiB7CiAgICBtW25zLm1ldGFkYXRhLm5hbWVdID0gdHJ1ZTsKICAgIHJldHVybiBtOwogIH0sIHt9KTsKCiAgLy8gQWxsIG9mIHRoZSBuYW1lc3BhY2UgZmlsdGVycyBtdXN0IGJlbG9uZyB0byB0aGUgcHJvamVjdAogIGNvbnN0IGZvdW5kID0gbmFtZXNwYWNlcy5yZWR1Y2UoKHRvdGFsLCBucykgPT4gewogICAgcmV0dXJuIHByak5hbWVzcGFjZU1hcFtuc10gPyB0b3RhbCArIDEgOiAwOwogIH0sIDApOwogIGlmIChmb3VuZCAhPT0gbmFtZXNwYWNlcy5sZW5ndGgpIHsKICAgIHJldHVybiBudWxsOwogIH0KICByZXR1cm4gcHJvamVjdDsKfQpmdW5jdGlvbiBoYXNDdXN0b20oc3RhdGUsIHJvb3RTdGF0ZSwga2luZCwga2V5LCBmYWxsYmFjaykgewogIGNvbnN0IGNhY2hlID0gc3RhdGUuY2FjaGVba2luZF07CiAgaWYgKGNhY2hlW2tleV0gIT09IHVuZGVmaW5lZCkgewogICAgcmV0dXJuIGNhY2hlW2tleV07CiAgfQoKICAvLyBDaGVjayB0byBzZWUgaWYgdGhlIGN1c3RvbSBraW5kIGlzIHByb3ZpZGVkIGJ5IGEgcGx1Z2luCiAgaWYgKCEhcm9vdFN0YXRlLiRwbHVnaW4uZ2V0RHluYW1pYyhraW5kLCBrZXkpKSB7CiAgICBjYWNoZVtrZXldID0gdHJ1ZTsKICAgIHJldHVybiBjYWNoZVtrZXldOwogIH0KCiAgLy8gRmFsbGJhY2sKICB0cnkgewogICAgZmFsbGJhY2soa2V5KTsKICAgIGNhY2hlW2tleV0gPSB0cnVlOwogIH0gY2F0Y2ggKGUpIHsKICAgIGNhY2hlW2tleV0gPSBmYWxzZTsKICB9CiAgcmV0dXJuIGNhY2hlW2tleV07Cn0KZnVuY3Rpb24gbG9hZEV4dGVuc2lvbihyb290U3RhdGUsIGtpbmQsIGtleSwgZmFsbGJhY2spIHsKICBjb25zdCBleHQgPSByb290U3RhdGUuJHBsdWdpbi5nZXREeW5hbWljKGtpbmQsIGtleSk7CiAgaWYgKGV4dCkgewogICAgaWYgKHR5cGVvZiBleHQgPT09ICdmdW5jdGlvbicpIHsKICAgICAgcmV0dXJuIGV4dDsKICAgIH0KICAgIHJldHVybiAoKSA9PiBleHQ7CiAgfQogIHJldHVybiBmYWxsYmFjayhrZXkpOwp9"},{"version":3,"names":["AGE","NAME","NAMESPACE","NAMESPACE_COL","STATE","CATALOG","COUNT","SCHEMA","MANAGEMENT","VIEW_IN_API","EXPANDED_GROUPS","FAVORITE_TYPES","addObject","findBy","insertAt","isArray","removeObject","filterBy","clone","get","ensureRegex","escapeHtml","escapeRegex","ucFirst","pluralize","importChart","importList","importDetail","importEdit","listProducts","loadProduct","importCustomPromptRemove","resolveList","resolveEdit","resolveWindowComponent","importWindowComponent","importLogin","resolveChart","resolveDetail","importDialog","importMachineConfig","resolveMachineConfigComponent","resolveCloudCredentialComponent","importCloudCredential","EXPLORER","isObject","normalizeType","sortBy","haveV1Monitoring","haveV2Monitoring","NEU_VECTOR_NAMESPACE","NAMESPACED","CLUSTER_LEVEL","BOTH","ALL","BASIC","FAVORITE","USED","ROOT","SPOOFED_PREFIX","SPOOFED_API_PREFIX","instanceMethods","graphConfigMap","FIELD_REGEX","IF_HAVE","V1_MONITORING","V2_MONITORING","PROJECT","NO_PROJECT","NOT_V1_ISTIO","MULTI_CLUSTER","NEUVECTOR_NAMESPACE","ADMIN","MCM_DISABLED","NOT_STANDALONE_HARVESTER","DSL","store","product","module","inOpt","opt","name","weight","inStore","inExplorer","removable","showClusterSwitcher","showNamespaceFilter","public","filterMode","k","regexToString","commit","basicType","types","group","Object","values","groupBy","type","field","headers","forEach","header","getValue","valueProp","value","hideBulkActions","configureType","match","options","graphConfig","componentForType","replace","ignoreType","regexOrString","ignoreGroup","cb","weightGroup","input","forBasic","groups","setGroupDefaultType","defaultType","weightType","mapGroup","continueOnMatch","mapType","moveType","virtualType","obj","spoofedType","called","applyProducts","$plugin","impl","init","loadProducts","productsLoaded","state","products","virtualTypes","spoofedTypes","basicTypes","groupIgnore","groupWeights","groupDefaultTypes","basicGroupWeights","groupMappings","typeIgnore","basicTypeWeights","typeWeights","typeMappings","typeMoveMappings","typeToComponentMappings","typeOptions","schemaGeneration","cache","typeMove","groupLabel","ignore","list","chart","detail","edit","componentFor","promptRemove","windowComponents","getters","labelFor","rootState","rootGetters","schema","count","language","_applyMapping","_schema$attributes","key","id","toLowerCase","trim","out","attributes","kind","groupLabelFor","schemaOrName","moved","rule","re","stringToRegex","split","map","x","join","groupForBasicType","schemaId","_state$basicTypes","optionsFor","def","isCreatable","isEditable","isRemovable","showState","showAge","canYaml","namespaced","listGroups","depaginate","customRoute","undefined","resourceEditMasthead","schemaOrType","found","find","entry","test","opts","assign","isFavorite","includes","typeWeightFor","_type","groupWeightFor","groupDefaultTypeFor","getTree","productId","mode","allTypes","clusterId","namespaceMode","namespaces","currentType","search","isBasic","searchRegex","RegExp","root","children","keys","sort","a","b","length","currentLocal","defaultLocal","_typeObj$schema","typeObj","isIgnored","_matchingCounts","label","labelKey","labelDisplay","highlightLabel","_ensureGroup","route","params","cluster","resource","push","exact","overview","_sortGroup","tree","isRoot","startsWith","parent","original","defaultLabel","isSpoofed","productSpoofedTypes","some","st","isVirtual","productVirtualTypes","getSpoofedInstances","_instanceMethods$prod","getInstances","instances","instance","_instance$links","_instance$links2","_instance$links3","_instance$links4","link","apiLink","links","remove","self","update","view","getSpoofedInstance","productInstances","allSpoofedTypes","flat","spoofedSchemas","flatMap","schemas","allSpoofedSchemas","_findBy","_rootGetters","counts","isDev","_rootGetters$currentC","attrs","ifRancherCluster","isRancher","localOnly","currentCluster","isLocal","summary","byNamespace","revision","item","ifHave","ifHaveType","_item$ifHaveType","targetedSchemas","haveIds","s","ifHaveVerb","ifHaveSubTypes","hasSome","groupByFor","hideBulkActionsFor","headersFor","columns","col","fromSchema","filter","hasName","format","formatter","width","formatterOpts","multiline","colName","word","charAt","toUpperCase","substring","exists","t","slice","description","tooltip","_rowValueGetter","hasCustomList","rawType","hasCustom","hasCustomChart","hasCustomDetail","subType","hasGraph","hasCustomEdit","hasComponent","path","hasCustomPromptRemove","require","resolve","hasCustomWindowComponent","hasCustomMachineConfigComponent","hasCustomCloudCredentialComponent","importComponent","loadExtension","authType","mapping","_schema$attributes2","activeProducts","knownTypes","knownGroups","p","ifGetter","_id","_group","ifFeature","features","Array","f","ifHaveGroup","isProductActive","rowValueGetter","_findColumnByName","isProductRegistered","productName","prod","mutations","schemaChanged","plugin","existing","findIndex","splice","v","copy","virtual","collection","g","_addMapping","idx","actions","removeProduct","metadata","addFavorite","dispatch","removeFavorite","toggleGroup","expanded","by","namespace","_typeObj$byNamespace$","objOrValue","mappings","keyField","defaultFn","captured","insertIndex","pri","regexCache","regex","source","str","option","project","isV1Istio","isMultiCluster","n","isAdminUser","_getters$managementS","_getters$managementS2","_getters$managementS3","_getters$managementS4","_getters$managementS5","canEditSettings","SETTING","resourceMethods","canEditFeatureFlags","FEATURE","canInstallApps","APP","canAddRepos","CLUSTER_REPO","canPutHelmOperations","OPERATION","process","client","fieldIndex","parseInt","row","_row$metadata","fields","_cluster$status","status","istioEnabled","verb","haveId","want","collectionMethods","have","_getters$currentClust","filters","projectName","prjNamespaceMap","reduce","m","ns","total","fallback","getDynamic","e","ext"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/store/type-map.js"],"sourcesContent":["// This file has 2 sections that control getting and using specializations of particular types\n// over the generic info that is specified or generated from schemas.\n//\n// 1) Getting info about types\n//\n// labelFor(schema, count)    Get the display label for a schema.  Count is (in English) 1 or not-1 for pluralizing\n// groupLabelFor(schema)      Get the label for the API group of this schema's type\n// isIgnored(schema)          Returns true if this type should be hidden from the tree\n// groupForBasicType(schema)  Returns the group a type should be shown in basic view, or false-y if it shouldn't be shown.\n// typeWeightFor(type, forBasic)   Get the weight value for a particular type label\n// groupWeightFor(group, forBasic) Get the weight value for a particular group\n// headersFor(schema)         Returns the column definitions for a type to give to SortableTable\n// activeProducts()           Returns the list of products that are installed and should be shown\n//\n// 2) Detecting and using custom list/detail/edit/header components\n//\n// hasCustomList(type)              Does type have a custom list implementation?\n// hasCustomDetail(type[,subType])  Does type have a custom detail implementation?\n// hasCustomEdit(type[,subType])    Does type have a custom edit implementation?\n// importList(type)                 Returns a promise that resolves to the list component for type\n// importDetail(type[,subType])     Returns a promise that resolves to the detail component for type\n// importEdit(type[,subType])       Returns a promise that resolves to the edit component for type\n// optionsFor(schemaOrType)         Return the configured options for a type (from configureType)\n//\n// 3) Changing specialization info about a type\n// For all:\n//   let { thingYouWant } = DSL(instanceOfTheStore, 'product');\n//\n// product(                   Add a product into the nav\n//   removable,               -- Is the product removable (true) or built-in (false).\n//   weight,                  -- Sort order and divider sections in the product menu.  3=global (fleet, ecm), 2=always on (apps, explorer) 1=other\n//   showClusterSwitcher,     -- Show the cluster switcher in the header (default true)\n//   showNamespaceFilter,     -- Show the namespace filter in the header (default false)\n//   showWorkspaceSwitcher,   -- Show the workspace switcher in the header (conflicts with namespace) (default false)\n//   ifHave,                  -- Show this product only if the given capability is available\n//   ifHaveGroup,             -- Show this product only if the given group exists in the store [inStore]\n//   ifHaveType,              -- Show this product only if the given type exists in the store [inStore], This can also be specified as an object { type: TYPE, store: 'management' } if the type isn't in the current [inStore]\n//   ifHaveVerb,              -- In combination with ifHaveTYpe, show it only if the type also has this collectionMethod\n//   inStore,                 -- Which store to look at for if* above and the left-nav, defaults to \"cluster\"\n//   inExplorer,              -- Determines if the product is to be scoped to the explorer\n//   public,                  -- If true, show to all users.  If false, only show when the Developer Tools pref is on (default true)\n//   category,                -- Group to show the product in for the nav hamburger menu\n//   typeStoreMap,            -- An object mapping types to the store that should be used to retrieve information about the type\n//   hideSystemResources      -- Hide resources in namespaces where namespace.isSystem === true, or a namespace managed by fleet (per its annotation) and hide those namespaces from ns/project list and nsfilter (default false)\n//   hideNamespaceLocation    -- Hide the namespace link in the ResourceDetail masthead of namespaced resources and hide the ExplorerProjectsNamespaces namespace link (default false)\n// })\n//\n// externalLink(stringOrFn)  The product has an external page (function gets context object\n//\n// virtualType(obj)           Add an item to the tree that goes to a route instead of an actual type.\n//                            --  obj can contain anything in the objects getTree returns.\n//                            --  obj must have a `name` that is unique among all virtual types.\n//                            -- `cluster` is automatically added to route.params if it exists.\n//\n// spoofedType(obj)           Create a fake type that can be treated like a normal type\n//\n// basicType(                 Mark type(s) as always shown in the top of the nav\n//   type(s),                 -- Type name or array of type names\n//   group                    -- Group to show the type(s) under; false-y for top-level.\n// )\n// basicType(                 Mark all types in group as always shown in the top of the nav\n//   group,                   -- Group to show\n//   asLabel                  -- Label to display the group as; false-y for top-level.\n// )\n// ignoreType(type)           Never show type\n// weightType(                Set the weight (sorting) order of one or more types\n//   typeOrArrayOfTypes,\n//   weight,                  -- Higher numbers are shown first/higher up on the nav tree\n//   forBasic                 -- Apply to basic type instead of regular type tree\n// )\n// mapType(                   Remap a type id to a display name\n//   matchRegexOrString,      -- Type to match, or regex that matches types\n//   replacementStringOrFn,   -- String to replace the type with, or\n//                            -- sync function: (type, capturedString, schemaObj => { return 'new-type'; }\n//   mapWeight,               -- Priority for apply this mapping (higher numbers applied first)\n//   continueOnMatch          -- If true, continue applying to hit other rules that might match the new type.\n// )\n// moveType(                  Change the group a type is in\n//   matchRegexOrString,      -- Type to match, or regex that matches types\n//   newGroup,                -- Group to move the type into\n//   mapWeight,               -- Priority for apply this mapping (higher numbers applied first)\n// )\n// componentForType(          Map matching types to a single component name\n// (                          (this is helpful if multiple types should be rendered by a single component)\n//   matchRegexOrString,      -- Type to match, or regex that matches types\n//   replacementString        -- String to replace the type with\n// )\n// configureType(            Display options for a particular type\n//   type,                    -- Type to apply to\n//  options                   -- Object of options.  Defaults/Supported: {\n//                               isCreatable: true, -- If false, disable create even if schema says it's allowed\n//                               isEditable: true,  -- Ditto, for edit\n//                               isRemovable: true,  -- Ditto, for remove/delete\n//                               showState: true,  -- If false, hide state in columns and masthead\n//                               showAge: true,    -- If false, hide age in columns and masthead\n//                               showConfigView: true -- If false, hide masthead config button in view mode\n//                               showListMasthead: true, -- If false, hide masthead in list view\n//                               canYaml: true,\n//                               resource: undefined       -- Use this resource in ResourceDetails instead\n//                               resourceDetail: undefined -- Use this resource specifically for ResourceDetail's detail component\n//                               resourceEdit: undefined   -- Use this resource specifically for ResourceDetail's edit component\n//                               depaginate: undefined -- Use this to depaginate requests for this type\n//                               resourceEditMasthead: true   -- Show the Masthead in the edit resource component\n//                               customRoute: undefined,\n//                               hasGraph: undefined   -- If true, render ForceDirectedTreeChart graph (ATTENTION: option graphConfig is needed also!!!)\n//                               graphConfig: undefined   -- Use this to pass along the graph configuration\n//                               notFilterNamespace:  undefined -- Define namespaces that do not need to be filtered\n//                               localOnly: False -- Hide this type from the nav/search bar on downstream clusters\n//                           }\n// )\n// ignoreGroup(group):        Never show group or any types in it\n// weightGroup(               Set the weight (sorting) of one or more groups\n//   groupOrArrayOfGroups,    -- see weightType...\n//   weight\n// )\n// setGroupDefaultType(       Set the default child type to show when the group is expanded\n//   groupOrArrayOfGroups,    -- see setGroupDefaultType...\n//   defaultType\n// )\n// mapGroup(                  Remap a group name to a display name\n//   matchRegexOrString,      -- see mapType...\n//   replacementString,\n//   mapWeight,\n//   continueOnMatch\n// )\nimport { AGE, NAME, NAMESPACE as NAMESPACE_COL, STATE } from '@shell/config/table-headers';\nimport {\n  CATALOG,\n  COUNT,\n  SCHEMA,\n  MANAGEMENT,\n  NAMESPACE\n} from '@shell/config/types';\nimport { VIEW_IN_API, EXPANDED_GROUPS, FAVORITE_TYPES } from '@shell/store/prefs';\nimport {\n  addObject, findBy, insertAt, isArray, removeObject, filterBy\n} from '@shell/utils/array';\nimport { clone, get } from '@shell/utils/object';\nimport {\n  ensureRegex, escapeHtml, escapeRegex, ucFirst, pluralize\n} from '@shell/utils/string';\nimport {\n  importChart, importList, importDetail, importEdit, listProducts, loadProduct, importCustomPromptRemove, resolveList, resolveEdit, resolveWindowComponent, importWindowComponent, importLogin, resolveChart, resolveDetail, importDialog, importMachineConfig, resolveMachineConfigComponent, resolveCloudCredentialComponent, importCloudCredential\n} from '@shell/utils/dynamic-importer';\n\nimport { NAME as EXPLORER } from '@shell/config/product/explorer';\nimport isObject from 'lodash/isObject';\nimport { normalizeType } from '@shell/plugins/dashboard-store/normalize';\nimport { sortBy } from '@shell/utils/sort';\n\nimport { haveV1Monitoring, haveV2Monitoring } from '@shell/utils/monitoring';\nimport { NEU_VECTOR_NAMESPACE } from '@shell/config/product/neuvector';\n\nexport const NAMESPACED = 'namespaced';\nexport const CLUSTER_LEVEL = 'cluster';\nexport const BOTH = 'both';\n\nexport const ALL = 'all';\nexport const BASIC = 'basic';\nexport const FAVORITE = 'favorite';\nexport const USED = 'used';\n\nexport const ROOT = 'root';\n\nexport const SPOOFED_PREFIX = '__[[spoofed]]__';\nexport const SPOOFED_API_PREFIX = '__[[spoofedapi]]__';\n\nconst instanceMethods = {};\nconst graphConfigMap = {};\n\nconst FIELD_REGEX = /^\\$\\.metadata\\.fields\\[([0-9]*)\\]/;\n\nexport const IF_HAVE = {\n  V1_MONITORING:            'v1-monitoring',\n  V2_MONITORING:            'v2-monitoring',\n  PROJECT:                  'project',\n  NO_PROJECT:               'no-project',\n  NOT_V1_ISTIO:             'not-v1-istio',\n  MULTI_CLUSTER:            'multi-cluster',\n  NEUVECTOR_NAMESPACE:      'neuvector-namespace',\n  ADMIN:                    'admin-user',\n  MCM_DISABLED:             'mcm-disabled',\n  NOT_STANDALONE_HARVESTER: 'not-standalone-harvester',\n};\n\nexport function DSL(store, product, module = 'type-map') {\n  // store.commit(`${ module }/product`, { name: product });\n\n  return {\n    product(inOpt) {\n      const opt = {\n        name:                product,\n        weight:              1,\n        inStore:             'cluster',\n        inExplorer:          false,\n        removable:           true,\n        showClusterSwitcher: true,\n        showNamespaceFilter: false,\n        public:              true,\n        filterMode:          'namespaces',\n        ...inOpt\n      };\n\n      for ( const k of ['ifHaveGroup', 'ifHaveType'] ) {\n        if ( opt[k] ) {\n          opt[k] = regexToString(ensureRegex(opt[k]));\n        }\n      }\n\n      store.commit(`${ module }/product`, opt);\n    },\n\n    basicType(types, group) {\n      // Support passing in a map of types and using just the values\n      if ( !isArray(types) && types && isObject(types) ) {\n        types = Object.values(types);\n      }\n\n      store.commit(`${ module }/basicType`, {\n        product, types, group\n      });\n    },\n\n    // Type- and Group-dependent\n    groupBy(type, field) {\n      store.commit(`${ module }/groupBy`, { type, field });\n    },\n\n    headers(type, headers) {\n      headers.forEach((header) => {\n        // If on the client, then use the value getter if there is one\n        if (header.getValue) {\n          // we need to store the .value prop for the advanced filtering\n          header.valueProp = header.value;\n          header.value = header.getValue;\n        }\n\n        delete header.getValue;\n      });\n\n      store.commit(`${ module }/headers`, { type, headers });\n    },\n\n    hideBulkActions(type, field) {\n      store.commit(`${ module }/hideBulkActions`, { type, field });\n    },\n\n    configureType(match, options) {\n      if (options.graphConfig) {\n        graphConfigMap[match] = options.graphConfig;\n        delete options.graphConfig;\n      }\n      store.commit(`${ module }/configureType`, { ...options, match });\n    },\n\n    componentForType(match, replace) {\n      store.commit(`${ module }/componentForType`, { match, replace });\n    },\n\n    ignoreType(regexOrString) {\n      store.commit(`${ module }/ignoreType`, regexOrString);\n    },\n\n    ignoreGroup(regexOrString, cb) {\n      store.commit(`${ module }/ignoreGroup`, { regexOrString, cb });\n    },\n\n    weightGroup(input, weight, forBasic) {\n      if ( isArray(input) ) {\n        store.commit(`${ module }/weightGroup`, {\n          groups: input, weight, forBasic\n        });\n      } else {\n        store.commit(`${ module }/weightGroup`, {\n          group: input, weight, forBasic\n        });\n      }\n    },\n\n    setGroupDefaultType(input, defaultType) {\n      if ( isArray(input) ) {\n        store.commit(`${ module }/setGroupDefaultType`, { groups: input, defaultType });\n      } else {\n        store.commit(`${ module }/setGroupDefaultType`, { group: input, defaultType });\n      }\n    },\n\n    weightType(input, weight, forBasic) {\n      if ( isArray(input) ) {\n        store.commit(`${ module }/weightType`, {\n          types: input, weight, forBasic\n        });\n      } else {\n        store.commit(`${ module }/weightType`, {\n          type: input, weight, forBasic\n        });\n      }\n    },\n\n    mapGroup(match, replace, weight = 5, continueOnMatch = false) {\n      store.commit(`${ module }/mapGroup`, {\n        match, replace, weight, continueOnMatch\n      });\n    },\n\n    mapType(match, replace, weight = 5, continueOnMatch = false) {\n      store.commit(`${ module }/mapType`, {\n        match, replace, weight, continueOnMatch\n      });\n    },\n\n    moveType(match, group, weight = 5, continueOnMatch = false) {\n      store.commit(`${ module }/moveType`, {\n        match, group, weight,\n      });\n    },\n\n    virtualType(obj) {\n      store.commit(`${ module }/virtualType`, { product, obj });\n    },\n\n    spoofedType(obj) {\n      store.commit(`${ module }/spoofedType`, { product, obj });\n    }\n  };\n}\n\nlet called = false;\n\nexport async function applyProducts(store, $plugin) {\n  if (called) {\n    return;\n  }\n\n  called = true;\n  for ( const product of listProducts() ) {\n    const impl = await loadProduct(product);\n\n    if ( impl?.init ) {\n      impl.init(store);\n    }\n  }\n  // Load the products from all plugins\n  $plugin.loadProducts();\n}\n\nexport function productsLoaded() {\n  return called;\n}\n\nexport const state = function() {\n  return {\n    products:                [],\n    virtualTypes:            {},\n    spoofedTypes:            {},\n    basicTypes:              {},\n    groupIgnore:             [],\n    groupWeights:            {},\n    groupDefaultTypes:       {},\n    basicGroupWeights:       { [ROOT]: 1000 },\n    groupMappings:           [],\n    typeIgnore:              [],\n    basicTypeWeights:        {},\n    typeWeights:             {},\n    typeMappings:            [],\n    typeMoveMappings:        [],\n    typeToComponentMappings: [],\n    typeOptions:             [],\n    groupBy:                 {},\n    headers:                 {},\n    hideBulkActions:         {},\n    schemaGeneration:        1,\n    cache:                   {\n      typeMove:           {},\n      groupLabel:         {},\n      ignore:             {},\n      list:               {},\n      chart:              {},\n      detail:             {},\n      edit:               {},\n      componentFor:       {},\n      promptRemove:       {},\n      windowComponents:   {},\n      'machine-config':   {},\n      'cloud-credential': {}\n\n    },\n  };\n};\n\nexport const getters = {\n  // ----------------------------------------------------------------------------\n  // 1 ) Getting info\n  // ----------------------------------------------------------------------------\n  // Turns a type name into a display label (e.g. management.cattle.io.cluster -> Cluster)\n  labelFor(state, getters, rootState, rootGetters) {\n    return (schema, count = 1, language = null) => {\n      return _applyMapping(schema, state.typeMappings, 'id', false, () => {\n        const key = `typeLabel.\"${ schema.id.toLowerCase() }\"`;\n\n        if ( rootGetters['i18n/exists'](key, language) ) {\n          return rootGetters['i18n/t'](key, { count }, language).trim();\n        }\n\n        const out = schema?.attributes?.kind || schema.id || '?';\n\n        // Add spaces, but breaks typing names into jump menu naturally\n        // out = ucFirst(out.replace(/([a-z])([A-Z])/g,'$1 $2'));\n\n        if ( count === 1 ) {\n          return out;\n        }\n\n        // This works for most things... if you don't like it, put in a typeLabel translation for above.\n        return pluralize(out);\n      });\n    };\n  },\n\n  // Turns a group name into a display label (e.g. management.cattle.io.v3.cluster -> Cluster)\n  groupLabelFor(state) {\n    return (schemaOrName) => {\n      let group = schemaOrName;\n\n      if ( typeof schemaOrName === 'object' ) {\n        let moved = false;\n\n        for ( const rule of state.typeMoveMappings ) {\n          const re = stringToRegex(rule.match);\n\n          if ( schemaOrName.id.match(re) ) {\n            moved = true;\n            group = rule.replace;\n          }\n        }\n\n        if ( !moved ) {\n          group = group.attributes.group;\n        }\n      }\n\n      if ( typeof group !== 'string' ) {\n        return null;\n      }\n\n      const out = _applyMapping(group, state.groupMappings, null, state.cache.groupLabel, (group) => {\n        const match = group.match(/^(.*)\\.k8s\\.io$/);\n\n        if ( match ) {\n          return match[1].split(/\\./).map((x) => ucFirst(x)).join('.');\n        }\n\n        return group;\n      });\n\n      return out;\n    };\n  },\n\n  groupForBasicType(state) {\n    return (product, schemaId) => {\n      return state.basicTypes?.[product]?.[schemaId];\n    };\n  },\n\n  optionsFor(state) {\n    const def = {\n      isCreatable:          true,\n      isEditable:           true,\n      isRemovable:          true,\n      showState:            true,\n      showAge:              true,\n      canYaml:              true,\n      namespaced:           null,\n      listGroups:           [],\n      depaginate:           false,\n      customRoute:          undefined,\n      resourceEditMasthead: true,\n    };\n\n    return (schemaOrType) => {\n      if (!schemaOrType) {\n        return {};\n      }\n\n      const type = (typeof schemaOrType === 'object' ? schemaOrType.id : schemaOrType);\n      const found = state.typeOptions.find((entry) => {\n        const re = stringToRegex(entry.match);\n\n        return re.test(type);\n      });\n\n      const opts = Object.assign({}, def, found || {});\n\n      return opts;\n    };\n  },\n\n  isFavorite(state, getters, rootState, rootGetters) {\n    return (schemaId) => {\n      return rootGetters['prefs/get'](FAVORITE_TYPES).includes(schemaId) || false;\n    };\n  },\n\n  typeWeightFor(state) {\n    return (type, forBasic) => {\n      type = type?.toLowerCase();\n\n      if ( forBasic ) {\n        return state.basicTypeWeights[type] || 0;\n      } else {\n        return state.typeWeights[type] || 0;\n      }\n    };\n  },\n\n  groupWeightFor(state) {\n    return (group, forBasic) => {\n      group = group.toLowerCase();\n\n      if ( forBasic ) {\n        return state.basicGroupWeights[group] || 0;\n      } else {\n        return state.groupWeights[group] || 0;\n      }\n    };\n  },\n\n  groupDefaultTypeFor(state) {\n    return (group) => {\n      group = group.toLowerCase();\n\n      return state.groupDefaultTypes[group];\n    };\n  },\n\n  getTree(state, getters, rootState, rootGetters) {\n    return (productId, mode, allTypes, clusterId, namespaceMode, namespaces, currentType, search) => {\n      // getTree has four modes:\n      // - `basic` matches data types that should always be shown even if there\n      //    are 0 of them.\n      // - `used` matches the data types where there are more than 0 of them\n      //    in the current set of namespaces.\n      // - `all` matches all types.\n      // - `favorite` matches starred types.\n      // namespaceMode: 'namespaced', 'cluster', or 'both'\n      // namespaces: null means all, otherwise it will be an array of specific namespaces to include\n      const isBasic = mode === BASIC;\n\n      let searchRegex;\n\n      if ( search ) {\n        searchRegex = new RegExp(`^(.*)(${ escapeRegex(search) })(.*)$`, 'i');\n      }\n\n      const root = { children: [] };\n\n      // Add types from shortest to longest so that parents\n      // get added before children\n      const keys = Object.keys(allTypes).sort((a, b) => a.length - b.length);\n\n      // Set these for later\n      const currentLocal = rootGetters['i18n/current']();\n      const defaultLocal = rootGetters['i18n/default']();\n\n      for ( const type of keys ) {\n        const typeObj = allTypes[type];\n\n        if ( typeObj.schema && getters.isIgnored(typeObj.schema) ) {\n          // Skip ignored groups & types\n          continue;\n        }\n\n        const namespaced = typeObj.namespaced;\n\n        if ( (namespaceMode === NAMESPACED && !namespaced ) || (namespaceMode === CLUSTER_LEVEL && namespaced) ) {\n          // Skip types that are not the right namespace mode\n          continue;\n        }\n\n        const count = _matchingCounts(typeObj, namespaces);\n        const groupForBasicType = getters.groupForBasicType(productId, typeObj.name);\n\n        if ( typeObj.id === currentType ) {\n          // If this is the type currently being shown, always show it\n        } else if ( isBasic && !groupForBasicType ) {\n          // If we want the basic tree only return basic types;\n          continue;\n        } else if ( mode === USED && count <= 0 ) {\n          // If there's none of this type, ignore this entry when viewing only in-use types\n          // Note: count is sometimes null, which is <= 0.\n          continue;\n        }\n\n        const label = typeObj.labelKey ? rootGetters['i18n/t'](typeObj.labelKey) || typeObj.label : typeObj.label;\n\n        const labelDisplay = highlightLabel(label, typeObj.count, typeObj.schema);\n\n        if ( !labelDisplay ) {\n          // Search happens in highlight and returns null if not found\n          continue;\n        }\n\n        let group;\n\n        if ( isBasic ) {\n          group = _ensureGroup(root, groupForBasicType, true);\n        } else if ( mode === FAVORITE ) {\n          group = _ensureGroup(root, 'starred');\n          group.weight = 1000;\n        } else if ( mode === USED ) {\n          group = _ensureGroup(root, `inUse::${ getters.groupLabelFor(typeObj.schema) }`);\n        } else {\n          group = _ensureGroup(root, typeObj.schema || typeObj.group || ROOT);\n        }\n\n        let route = typeObj.route;\n\n        // Make the default route if one isn't set\n        if (!route ) {\n          route = {\n            name:   'c-cluster-product-resource',\n            params: {\n              product:  productId,\n              cluster:  clusterId,\n              resource: typeObj.name,\n            }\n          };\n\n          typeObj.route = route;\n        }\n\n        // Cluster ID and Product should always be set\n        if ( route && typeof route === 'object' ) {\n          route.params = route.params || {};\n          route.params.cluster = clusterId;\n          route.params.product = productId;\n        }\n\n        group.children.push({\n          label,\n          labelDisplay,\n          mode:     typeObj.mode,\n          count,\n          exact:    typeObj.exact || false,\n          namespaced,\n          route,\n          name:     typeObj.name,\n          weight:   typeObj.weight || getters.typeWeightFor(typeObj.schema?.id || label, isBasic),\n          overview: !!typeObj.overview,\n        });\n      }\n\n      // Recursively sort the groups\n      _sortGroup(root, mode);\n\n      return root.children;\n\n      // ----------------------\n\n      function _ensureGroup(tree, schemaOrName, forBasic = false) {\n        let name = getters.groupLabelFor(schemaOrName);\n        const isRoot = ( name === ROOT || name.startsWith(`${ ROOT }::`) );\n\n        if ( name && name.includes('::') ) {\n          let parent;\n\n          [parent, name] = name.split('::', 2);\n          tree = _ensureGroup(tree, parent);\n        }\n\n        // Translate if an entry exists\n        let label = name;\n        const key = `nav.group.\"${ name }\"`;\n\n        if ( rootGetters['i18n/exists'](key) ) {\n          label = rootGetters['i18n/t'](key);\n        }\n\n        let group = findBy(tree.children, 'name', name);\n\n        if ( !group ) {\n          group = {\n            name,\n            label,\n            weight:      getters.groupWeightFor(name, forBasic),\n            defaultType: getters.groupDefaultTypeFor(name),\n          };\n\n          tree.children.push(group);\n        }\n\n        if ( isRoot ) {\n          group.isRoot = true;\n        }\n\n        if ( !group.children ) {\n          group.children = [];\n        }\n\n        return group;\n      }\n\n      function highlightLabel(original, count, schema) {\n        let label = escapeHtml(original);\n\n        if ( searchRegex ) {\n          let match = label.match(searchRegex);\n\n          if (!match) {\n            if ( currentLocal !== defaultLocal && schema ) {\n              const defaultLabel = getters.labelFor(schema, count, defaultLocal);\n\n              if (defaultLabel && defaultLabel !== label ) {\n                label += ` (${ defaultLabel })`;\n                match = label.match(searchRegex);\n              }\n            }\n          }\n\n          if ( match ) {\n            label = `${ escapeHtml(match[1]) }<span class=\"highlight\">${ escapeHtml(match[2]) }</span>${ escapeHtml(match[3]) }`;\n          } else {\n            return null;\n          }\n        }\n\n        return label;\n      }\n    };\n  },\n\n  isSpoofed(state, getters, rootState, rootGetters) {\n    return (type, product) => {\n      product = product || rootGetters['productId'];\n      const productSpoofedTypes = state.spoofedTypes[product] || [];\n\n      return productSpoofedTypes.some((st) => st.type === type);\n    };\n  },\n\n  isVirtual(state, getters, rootState, rootGetters) {\n    return (name, product) => {\n      product = product || rootGetters['productId'];\n      const productVirtualTypes = state.virtualTypes[product] || [];\n\n      return productVirtualTypes.some((st) => st.name === name);\n    };\n  },\n\n  getSpoofedInstances(state, getters, rootState, rootGetters) {\n    return async(type, product) => {\n      product = product || rootGetters['productId'];\n      const getInstances = instanceMethods[product]?.[type] || (() => []);\n      const instances = await getInstances();\n\n      instances.forEach((instance) => {\n        const type = instance.type;\n        const id = instance.id;\n        const link = `/${ SPOOFED_PREFIX }/${ type }/${ id }`;\n        const apiLink = `/${ SPOOFED_API_PREFIX }/${ type }/${ id }`;\n\n        instance.links = {\n          remove: instance.links?.remove || link,\n          self:   instance.links?.self || link,\n          update: instance.links?.update || link,\n          view:   instance.links?.view || apiLink,\n        };\n        instance.isSpoofed = true;\n      });\n\n      return instances;\n    };\n  },\n\n  getSpoofedInstance(state, getters, rootState, rootGetters) {\n    return async(type, product, id) => {\n      const productInstances = await getters.getSpoofedInstances(type, product);\n\n      return productInstances.find( (instance) => instance.id === id);\n    };\n  },\n\n  allSpoofedTypes(state, getters, rootState, rootGetters) {\n    return Object.values(state.spoofedTypes).flat();\n  },\n\n  spoofedSchemas(state, getters, rootState, rootGetters) {\n    return (product) => {\n      const types = state.spoofedTypes[product] || [];\n\n      return types.flatMap((type) => {\n        const schemas = type.schemas || [];\n\n        return schemas.map((schema) => ({\n          ...schema,\n          isSpoofed: true\n        }));\n      });\n    };\n  },\n\n  allSpoofedSchemas(state, getters, rootState, rootGetters) {\n    return getters.allSpoofedTypes.flatMap((type) => {\n      const schemas = type.schemas || [];\n\n      return schemas.map((schema) => ({\n        ...schema,\n        isSpoofed: true\n      }));\n    });\n  },\n\n  allTypes(state, getters, rootState, rootGetters) {\n    return (product, mode = ALL) => {\n      const module = findBy(state.products, 'name', product)?.inStore;\n      const schemas = rootGetters[`${ module }/all`](SCHEMA);\n      const counts = rootGetters[`${ module }/all`](COUNT)?.[0]?.counts || {};\n      const isDev = rootGetters['prefs/get'](VIEW_IN_API);\n      const isBasic = mode === BASIC;\n\n      const out = {};\n\n      for ( const schema of schemas ) {\n        const attrs = schema.attributes || {};\n        const count = counts[schema.id];\n        const label = getters.labelFor(schema, count);\n        const weight = getters.typeWeightFor(schema?.id || label, isBasic);\n        const typeOptions = getters['optionsFor'](schema);\n\n        if ( isBasic ) {\n          // These are separate ifs so that things with no kind can still be basic\n          if ( !getters.groupForBasicType(product, schema.id) ) {\n            continue;\n          }\n        } else if ( mode === FAVORITE && !getters.isFavorite(schema.id) ) {\n          continue;\n        } else if ( !attrs.kind ) {\n          // Skip the schemas that aren't top-level types\n          continue;\n        } else if ( typeof typeOptions.ifRancherCluster !== 'undefined' && typeOptions.ifRancherCluster !== rootGetters.isRancher ) {\n          continue;\n        } else if (typeOptions.localOnly && !rootGetters.currentCluster?.isLocal) {\n          continue;\n        }\n\n        out[schema.id] = {\n          label,\n          mode,\n          weight,\n          schema,\n          name:        schema.id,\n          namespaced:  typeOptions.namespaced === null ? attrs.namespaced : typeOptions.namespaced,\n          count:       count ? count.summary.count || 0 : null,\n          byNamespace: count ? count.namespaces : {},\n          revision:    count ? count.revision : null,\n          route:       typeOptions.customRoute\n        };\n      }\n\n      // Add virtual and spoofed types\n      if ( mode !== USED ) {\n        const virtualTypes = state.virtualTypes[product] || [];\n        const spoofedTypes = state.spoofedTypes[product] || [];\n        const allTypes = [...virtualTypes, ...spoofedTypes];\n\n        for ( const type of allTypes ) {\n          const item = clone(type);\n          const id = item.name;\n          const weight = type.weight || getters.typeWeightFor(item.label, isBasic);\n\n          // Is there a virtual/spoofed type override for schema type?\n          // Currently used by harvester, this should be investigated and removed if possible\n          if (out[id]) {\n            delete out[id];\n          }\n\n          if ( item['public'] === false && !isDev ) {\n            continue;\n          }\n\n          if (item.ifHave && !ifHave(rootGetters, item.ifHave)) {\n            continue;\n          }\n\n          if ( item.ifHaveType ) {\n            const targetedSchemas = typeof item.ifHaveType === 'string' ? schemas : rootGetters[`${ item.ifHaveType.store }/all`](SCHEMA);\n            const type = typeof item.ifHaveType === 'string' ? item.ifHaveType : item.ifHaveType?.type;\n\n            const haveIds = filterBy(targetedSchemas, 'id', normalizeType(type)).map((s) => s.id);\n\n            if (!haveIds.length) {\n              continue;\n            }\n\n            if (item.ifHaveVerb && !ifHaveVerb(rootGetters, module, item.ifHaveVerb, haveIds)) {\n              continue;\n            }\n          }\n\n          if ( item.ifHaveSubTypes ) {\n            const hasSome = (item.ifHaveSubTypes || []).some((type) => {\n              return !!findBy(schemas, 'id', normalizeType(type));\n            });\n\n            if (!hasSome) {\n              continue;\n            }\n          }\n\n          if ( typeof item.ifRancherCluster !== 'undefined' && item.ifRancherCluster !== rootGetters.isRancher ) {\n            continue;\n          }\n\n          if ( isBasic && !getters.groupForBasicType(product, id) ) {\n            continue;\n          } else if ( mode === FAVORITE && !getters.isFavorite(id) ) {\n            continue;\n          }\n\n          item.mode = mode;\n          item.weight = weight;\n\n          // Ensure labelKey is taken into account... with a mock count\n          // This is harmless if the translation doesn't require count\n          if (item.labelKey && rootGetters['i18n/exists'](item.labelKey)) {\n            item.label = rootGetters['i18n/t'](item.labelKey, { count: 2 }).trim();\n            delete item.labelKey; // Label should really take precedence over labelKey, but it doesn't, so remove it\n          } else {\n            item.label = item.label || item.name;\n          }\n\n          out[id] = item;\n        }\n      }\n\n      return out;\n    };\n  },\n\n  groupByFor(state) {\n    return (schema) => {\n      return state.groupBy[schema?.id];\n    };\n  },\n\n  hideBulkActionsFor(state) {\n    return (schema) => {\n      return state.hideBulkActions[schema.id];\n    };\n  },\n\n  headersFor(state, getters, rootState, rootGetters) {\n    return (schema) => {\n      const attributes = schema.attributes || {};\n      const columns = attributes.columns || [];\n      const typeOptions = getters['optionsFor'](schema);\n\n      // A specific list has been provided\n      if ( state.headers[schema.id] ) {\n        return state.headers[schema.id].map((entry) => {\n          if ( typeof entry === 'string' ) {\n            const col = findBy(columns, 'name', entry);\n\n            if ( col ) {\n              return fromSchema(col, rootGetters);\n            } else {\n              return null;\n            }\n          } else {\n            return entry;\n          }\n        }).filter((col) => !!col);\n      }\n\n      // Otherwise make one up from schema\n      const out = typeOptions.showState ? [STATE] : [];\n      const namespaced = attributes.namespaced || false;\n      let hasName = false;\n\n      for ( const col of columns ) {\n        if ( col.format === 'name' ) {\n          hasName = true;\n          out.push(NAME);\n          if ( namespaced ) {\n            out.push(NAMESPACE_COL);\n          }\n        } else {\n          out.push(fromSchema(col, rootGetters));\n        }\n      }\n\n      if ( !hasName ) {\n        insertAt(out, 1, NAME);\n        if ( namespaced ) {\n          insertAt(out, 2, NAMESPACE_COL);\n        }\n      }\n\n      // Age always goes last\n      if ( out.includes(AGE) ) {\n        removeObject(out, AGE);\n        if ( typeOptions.showAge ) {\n          out.push(AGE);\n        }\n      }\n\n      return out;\n\n      function fromSchema(col, rootGetters) {\n        let formatter, width, formatterOpts;\n\n        if ( (col.format === '' || col.format === 'date') && col.name === 'Age' ) {\n          return AGE;\n        }\n\n        if ( col.format === 'date' || col.type === 'date' ) {\n          formatter = 'Date';\n          width = 120;\n          formatterOpts = { multiline: true };\n        }\n\n        if ( col.type === 'number' || col.type === 'int' ) {\n          formatter = 'Number';\n        }\n\n        const colName = col.name.includes(' ') ? col.name.split(' ').map((word) => word.charAt(0).toUpperCase() + word.substring(1) ).join('') : col.name;\n\n        const exists = rootGetters['i18n/exists'];\n        const t = rootGetters['i18n/t'];\n        const labelKey = `tableHeaders.${ colName.charAt(0).toLowerCase() + colName.slice(1) }`;\n        const description = col.description || '';\n        const tooltip = description && description[description.length - 1] === '.' ? description.slice(0, -1) : description;\n\n        return {\n          name:  col.name.toLowerCase(),\n          label: exists(labelKey) ? t(labelKey) : col.name,\n          value: _rowValueGetter(col),\n          sort:  [col.field],\n          formatter,\n          formatterOpts,\n          width,\n          tooltip\n        };\n      }\n    };\n  },\n\n  // ------------------------------------\n  // Custom list/detail/edit/header component detection\n  //\n  // Note: you can't refactor these into one function that does `@/${kind}/${type}`,\n  // because babel needs some hardcoded idea where to look for the dependency.\n  //\n  // Note 2: Yes these are editing state in a getter for caching... it's ok, probably.\n  // ------------------------------------\n  hasCustomList(state, getters, rootState) {\n    return (rawType) => {\n      const key = getters.componentFor(rawType);\n\n      return hasCustom(state, rootState, 'list', key, (key) => resolveList(key));\n    };\n  },\n\n  hasCustomChart(state, getters, rootState) {\n    return (rawType) => {\n      const key = getters.componentFor(rawType);\n\n      return hasCustom(state, rootState, 'chart', key, (key) => resolveChart(key));\n    };\n  },\n\n  hasCustomDetail(state, getters, rootState) {\n    return (rawType, subType) => {\n      const key = getters.componentFor(rawType, subType);\n\n      return hasCustom(state, rootState, 'detail', key, (key) => resolveDetail(key));\n    };\n  },\n\n  hasGraph(state, getters) {\n    return (resource) => {\n      const typeOptions = getters['optionsFor'](resource);\n\n      if (typeOptions && typeOptions.hasGraph) {\n        return graphConfigMap[resource];\n      }\n\n      return null;\n    };\n  },\n\n  hasCustomEdit(state, getters, rootState) {\n    return (rawType, subType) => {\n      const key = getters.componentFor(rawType, subType);\n\n      return hasCustom(state, rootState, 'edit', key, (key) => resolveEdit(key));\n    };\n  },\n\n  hasComponent(state, getters, rootState) {\n    return (path) => {\n      return hasCustom(state, rootState, 'edit', path, (path) => resolveEdit(path));\n    };\n  },\n\n  hasCustomPromptRemove(state, getters, rootState) {\n    return (rawType, subType) => {\n      const key = getters.componentFor(rawType, subType);\n\n      return hasCustom(state, rootState, 'promptRemove', key, () => require.resolve(`@shell/promptRemove/${ key }`));\n    };\n  },\n\n  hasCustomWindowComponent(state, getters, rootState) {\n    return (rawType, subType) => {\n      const key = getters.componentFor(rawType, subType);\n\n      return hasCustom(state, rootState, 'windowComponents', key, (key) => resolveWindowComponent(key));\n    };\n  },\n\n  hasCustomMachineConfigComponent(state, getters, rootState) {\n    return (rawType, subType) => {\n      const key = getters.componentFor(rawType, subType);\n\n      return hasCustom(state, rootState, 'machine-config', key, (key) => resolveMachineConfigComponent(key));\n    };\n  },\n\n  hasCustomCloudCredentialComponent(state, getters, rootState) {\n    return (rawType, subType) => {\n      const key = getters.componentFor(rawType, subType);\n\n      return hasCustom(state, rootState, 'cloud-credential', key, (key) => resolveCloudCredentialComponent(key));\n    };\n  },\n\n  importComponent(state, getters) {\n    return (path) => {\n      return importEdit(path);\n    };\n  },\n\n  importDialog(state, getters, rootState) {\n    return (rawType, subType) => {\n      return loadExtension(rootState, 'dialog', getters.componentFor(rawType, subType), importDialog);\n    };\n  },\n\n  importList(state, getters, rootState) {\n    return (rawType) => {\n      return loadExtension(rootState, 'list', getters.componentFor(rawType), importList);\n    };\n  },\n\n  importChart(state, getters, rootState) {\n    return (rawType) => {\n      return loadExtension(rootState, 'chart', getters.componentFor(rawType), importChart);\n    };\n  },\n\n  importDetail(state, getters, rootState) {\n    return (rawType, subType) => {\n      return loadExtension(rootState, 'detail', getters.componentFor(rawType, subType), importDetail);\n    };\n  },\n\n  importEdit(state, getters, rootState) {\n    return (rawType, subType) => {\n      return loadExtension(rootState, 'edit', getters.componentFor(rawType, subType), importEdit);\n    };\n  },\n\n  importCustomPromptRemove(state, getters, rootState) {\n    return (rawType, subType) => {\n      return loadExtension(rootState, 'promptRemove', getters.componentFor(rawType, subType), importCustomPromptRemove);\n    };\n  },\n\n  importWindowComponent(state, getters, rootState) {\n    return (rawType, subType) => {\n      return loadExtension(rootState, 'windowComponents', getters.componentFor(rawType, subType), importWindowComponent);\n    };\n  },\n\n  importLogin(state, getters, rootState) {\n    return (authType) => {\n      return loadExtension(rootState, 'login', authType, importLogin);\n    };\n  },\n\n  importMachineConfig(state, getters, rootState) {\n    return (rawType, subType) => {\n      return loadExtension(rootState, 'machine-config', getters.componentFor(rawType, subType), importMachineConfig);\n    };\n  },\n\n  importCloudCredential(state, getters, rootState) {\n    return (rawType, subType) => {\n      return loadExtension(rootState, 'cloud-credential', getters.componentFor(rawType, subType), importCloudCredential);\n    };\n  },\n\n  componentFor(state, getters) {\n    return (type, subType) => {\n      let key = type;\n\n      if ( subType ) {\n        key = `${ type }/${ subType }`;\n      }\n\n      if ( state.cache.componentFor[key] !== undefined ) {\n        return state.cache.componentFor[key];\n      }\n\n      let out = type;\n\n      const mapping = state.typeToComponentMappings.find((mapping) => {\n        const re = stringToRegex(mapping.match);\n\n        return re.test(key);\n      });\n\n      if ( mapping ) {\n        out = mapping.replace;\n      } else if ( subType ) {\n        // Try again without the subType\n        out = getters.componentFor(type);\n      }\n\n      state.cache.componentFor[key] = out;\n\n      return out;\n    };\n  },\n\n  isIgnored(state, getters, rootState, rootGetters) {\n    return (schema) => {\n      let out = false;\n\n      for ( const rule of state.groupIgnore ) {\n        const group = schema?.attributes?.group;\n\n        if (group && group.match(stringToRegex(rule.type) && isObject(rule) && rule.type)) {\n          out = rule.cb(rootGetters);\n          break;\n        }\n\n        if ( group && typeof rule === 'string' && group.match(stringToRegex(rule)) ) {\n          out = true;\n          break;\n        }\n      }\n\n      if ( !out ) {\n        for ( const rule of state.typeIgnore ) {\n          if ( schema.id.match(stringToRegex(rule)) ) {\n            out = true;\n            break;\n          }\n        }\n      }\n\n      state.cache.ignore[schema.id] = out;\n\n      return out;\n    };\n  },\n\n  activeProducts(state, getters, rootState, rootGetters) {\n    const knownTypes = {};\n    const knownGroups = {};\n    const isDev = rootGetters['prefs/get'](VIEW_IN_API);\n\n    if ( state.schemaGeneration < 0 ) {\n      // This does nothing, but makes activeProducts depend on schemaGeneration\n      // so that it can be used to update the product list on schema change.\n      return;\n    }\n\n    return state.products.filter((p) => {\n      const module = p.inStore;\n\n      if ( p['public'] === false && !isDev ) {\n        return false;\n      }\n\n      if ( p.ifGetter && !rootGetters[p.ifGetter] ) {\n        return false;\n      }\n\n      if ( !knownTypes[module] ) {\n        const schemas = rootGetters[`${ module }/all`](SCHEMA);\n\n        knownTypes[module] = [];\n        knownGroups[module] = [];\n\n        for ( const s of schemas ) {\n          knownTypes[module].push(s._id);\n\n          if ( s._group ) {\n            addObject(knownGroups[module], s._group);\n          }\n        }\n      }\n\n      if ( p.ifFeature) {\n        const features = Array.isArray(p.ifFeature) ? p.ifFeature : [p.ifFeature];\n\n        for (const f of features) {\n          if (!rootGetters['features/get'](f)) {\n            return false;\n          }\n        }\n      }\n\n      if ( p.ifHave && !ifHave(rootGetters, p.ifHave)) {\n        return false;\n      }\n\n      if ( p.ifHaveType ) {\n        const haveIds = knownTypes[module].filter((t) => t.match(stringToRegex(p.ifHaveType)) );\n\n        if ( !haveIds.length ) {\n          return false;\n        }\n\n        if ( p.ifHaveVerb && !ifHaveVerb(rootGetters, module, p.ifHaveVerb, haveIds)) {\n          return false;\n        }\n      }\n\n      if ( p.ifHaveGroup && !knownGroups[module].find((t) => t.match(stringToRegex(p.ifHaveGroup)) ) ) {\n        return false;\n      }\n\n      return true;\n    });\n  },\n\n  isProductActive(state, getters) {\n    return (name) => {\n      if ( findBy(getters['activeProducts'], 'name', name) ) {\n        return true;\n      }\n\n      return false;\n    };\n  },\n\n  rowValueGetter(state) {\n    return (schema, colName) => {\n      const col = _findColumnByName(schema, colName);\n\n      return _rowValueGetter(col);\n    };\n  },\n\n  isProductRegistered(state) {\n    return (productName) => {\n      const prod = state.products.find((p) => p.name === productName);\n\n      return !!prod;\n    };\n  },\n};\n\nexport const mutations = {\n  schemaChanged(state) {\n    state.schemaGeneration = state.schemaGeneration + 1;\n  },\n\n  // Remove the specified product\n  remove(state, { product, plugin }) {\n    const existing = state.products.findIndex((p) => p.name === product);\n\n    // Remove the product\n    if (existing !== -1) {\n      state.products.splice(existing, 1);\n    }\n\n    // Go through the basic types and remove the headers\n    if (state.virtualTypes[product]) {\n      delete state.virtualTypes[product];\n    }\n\n    if (state.basicTypes[product]) {\n      // Remove table header configuration\n      Object.keys(state.basicTypes[product]).forEach((type) => {\n        delete state.headers[type];\n        delete state.basicTypeWeights[type];\n        delete state.cache.ignore[type];\n        // These track whether the type has a custom component\n        delete state.cache.detail[type];\n        delete state.cache.edit[type];\n        delete state.cache.list[type];\n\n        // Delete all of the entries from the componentFor cache where the valye is the type\n        // Can do this more efficiently\n        Object.keys(state.cache.componentFor).forEach((k) => {\n          const v = state.cache.componentFor[k];\n\n          if (v === type) {\n            delete state.cache.componentFor[k];\n          }\n        });\n      });\n\n      delete state.basicTypes[product];\n    }\n\n    if (plugin) {\n      // kind is list, edit, detail etc\n      Object.keys(plugin.types).forEach((kind) => {\n        if (state.cache[kind]) {\n          Object.keys(plugin.types[kind]).forEach((type) => {\n            delete state.cache[kind][type];\n          });\n        }\n      });\n    }\n  },\n\n  product(state, obj) {\n    const existing = findBy(state.products, 'name', obj.name);\n\n    if ( existing ) {\n      Object.assign(existing, obj);\n    } else {\n      addObject(state.products, obj);\n    }\n  },\n\n  virtualType(state, { product, obj }) {\n    if ( !state.virtualTypes[product] ) {\n      state.virtualTypes[product] = [];\n    }\n\n    const copy = clone(obj);\n\n    copy.virtual = true;\n\n    const existing = findBy(state.virtualTypes[product], 'name', copy.name);\n\n    if ( existing ) {\n      Object.assign(existing, copy);\n    } else {\n      addObject(state.virtualTypes[product], copy);\n    }\n  },\n\n  spoofedType(state, { product, obj }) {\n    if ( !state.spoofedTypes[product] ) {\n      state.spoofedTypes[product] = [];\n    }\n\n    const copy = clone(obj);\n\n    instanceMethods[product] = instanceMethods[product] || {};\n    instanceMethods[product][copy.type] = copy.getInstances;\n    delete copy.getInstances;\n\n    copy.name = copy.type;\n    copy.isSpoofed = true;\n    copy.virtual = true;\n    copy.schemas.forEach((schema) => {\n      schema.links = {\n        collection: `/${ SPOOFED_PREFIX }/${ schema.id }`,\n        ...(schema.links || {})\n      };\n    });\n\n    const existing = findBy(state.spoofedTypes[product], 'type', copy.type);\n\n    if ( existing ) {\n      Object.assign(existing, copy);\n    } else {\n      addObject(state.spoofedTypes[product], copy);\n    }\n  },\n\n  basicType(state, { product, group, types }) {\n    if ( !product ) {\n      product = EXPLORER;\n    }\n\n    if ( !group ) {\n      group = ROOT;\n    }\n\n    if ( !isArray(types) ) {\n      types = [types];\n    }\n\n    if ( !state.basicTypes[product] ) {\n      state.basicTypes[product] = {};\n    }\n\n    for ( const t of types ) {\n      state.basicTypes[product][t] = group;\n    }\n  },\n\n  ignoreGroup(state, { regexOrString: match, cb }) {\n    match = ensureRegex(match);\n    // State shouldn't contain actual RegExp objects, because they don't serialize\n    cb ? state.groupIgnore.push({\n      type: regexToString(match),\n      cb\n    }) : state.groupIgnore.push(regexToString(match));\n  },\n\n  ignoreType(state, match) {\n    match = ensureRegex(match);\n    state.typeIgnore.push(regexToString(match));\n  },\n\n  groupBy(state, { type, field }) {\n    state.groupBy[type] = field;\n  },\n\n  headers(state, { type, headers }) {\n    state.headers[type] = headers;\n  },\n\n  hideBulkActions(state, { type, field }) {\n    state.hideBulkActions[type] = field;\n  },\n\n  // weightGroup({group: 'core', weight: 99}); -- higher groups are shown first\n  // These operate on group names *after* mapping but *before* translation\n  weightGroup(state, {\n    group, groups, weight, forBasic\n  }) {\n    if ( !groups ) {\n      groups = [];\n    }\n\n    if ( group ) {\n      groups.push(group);\n    }\n\n    const map = forBasic ? state.basicGroupWeights : state.groupWeights;\n\n    for ( const g of groups ) {\n      map[g.toLowerCase()] = weight;\n    }\n  },\n\n  // setGroupDefaultType({group: 'core', defaultType: 'name'});\n  // By default when a group is clicked, the first item is selected - this allows\n  // this behaviour to be changed and a named child type can be chosen\n  // These operate on group names *after* mapping but *before* translation\n  setGroupDefaultType(state, { group, groups, defaultType }) {\n    if ( !groups ) {\n      groups = [];\n    }\n\n    if ( group ) {\n      groups.push(group);\n    }\n\n    for ( const g of groups ) {\n      state.groupDefaultTypes[g.toLowerCase()] = defaultType;\n    }\n  },\n\n  // weightType('Cluster' 99); -- higher groups are shown first\n  // These operate on *schema* type names, before mapping\n  weightType(state, {\n    type, types, weight, forBasic\n  }) {\n    if ( !types ) {\n      types = [];\n    }\n\n    if ( type ) {\n      types.push(type);\n    }\n\n    const map = forBasic ? state.basicTypeWeights : state.typeWeights;\n\n    for ( const t of types ) {\n      map[t.toLowerCase()] = weight;\n    }\n  },\n\n  // mapGroup('ugly.thing', 'Nice Thing', 1);\n  // mapGroup(/ugly.thing.(stuff)', '$1', 2);\n  // mapGroup(/ugly.thing.(stuff)', function(groupStr, ruleObj, regexMatch, typeObj) { return ucFirst(group.id) } , 2);\n  mapGroup(state, {\n    match, replace, weight = 5, continueOnMatch = false\n  }) {\n    _addMapping(state.groupMappings, match, replace, weight, continueOnMatch);\n  },\n\n  mapType(state, {\n    match, replace, weight = 5, continueOnMatch = false\n  }) {\n    _addMapping(state.typeMappings, match, replace, weight, continueOnMatch);\n  },\n\n  // moveType('apps.deployment', 'Core');\n  moveType(state, { match, group, weight = 5 }) {\n    _addMapping(state.typeMoveMappings, match, group, weight);\n  },\n\n  componentForType(state, { match, replace }) {\n    match = ensureRegex(match);\n    match = regexToString(match);\n    state.typeToComponentMappings.push({ match, replace });\n  },\n\n  configureType(state, options) {\n    const match = regexToString(ensureRegex(options.match));\n\n    const idx = state.typeOptions.findIndex((obj) => obj.match === match);\n    let obj = { ...options, match };\n\n    if ( idx >= 0 ) {\n      obj = Object.assign(state.typeOptions[idx], obj);\n      state.typeOptions.splice(idx, 1, obj);\n    } else {\n      const obj = Object.assign({}, options, { match });\n\n      state.typeOptions.push(obj);\n    }\n  },\n\n};\n\nexport const actions = {\n  removeProduct({ commit }, metadata) {\n    commit('remove', metadata);\n  },\n\n  addFavorite({ dispatch, rootGetters }, type) {\n    const types = rootGetters['prefs/get'](FAVORITE_TYPES) || [];\n\n    addObject(types, type);\n\n    dispatch('prefs/set', { key: FAVORITE_TYPES, value: types }, { root: true });\n  },\n\n  removeFavorite({ dispatch, rootGetters }, type) {\n    const types = rootGetters['prefs/get'](FAVORITE_TYPES) || [];\n\n    removeObject(types, type);\n\n    dispatch('prefs/set', { key: FAVORITE_TYPES, value: types }, { root: true });\n  },\n\n  toggleGroup({ dispatch, rootGetters }, { group, expanded }) {\n    const groups = rootGetters['prefs/get'](EXPANDED_GROUPS);\n\n    if ( expanded ) {\n      addObject(groups, group);\n    } else {\n      removeObject(groups, group);\n    }\n\n    dispatch('prefs/set', { key: EXPANDED_GROUPS, value: groups }, { root: true });\n  },\n\n  configureType({ commit }, options) {\n    commit('configureType', options);\n  }\n};\n\nfunction _sortGroup(tree, mode) {\n  const by = ['weight:desc', 'namespaced', 'label'];\n\n  tree.children = sortBy(tree.children, by);\n\n  for (const entry of tree.children ) {\n    if ( entry.children ) {\n      _sortGroup(entry, mode);\n    }\n  }\n}\n\nfunction _matchingCounts(typeObj, namespaces) {\n  // That was easy\n  if ( !typeObj.namespaced || !typeObj.byNamespace || namespaces === null || typeObj.count === null) {\n    return typeObj.count;\n  }\n\n  let out = 0;\n\n  // Otherwise start with 0 and count up\n  for ( const namespace of namespaces ) {\n    out += typeObj.byNamespace[namespace]?.count || 0;\n  }\n\n  return out;\n}\n\nfunction _applyMapping(objOrValue, mappings, keyField, cache, defaultFn) {\n  let key = objOrValue;\n  let found = false;\n\n  if ( keyField ) {\n    if ( typeof objOrValue !== 'object' ) {\n      return objOrValue;\n    }\n\n    key = get(objOrValue, keyField);\n\n    if ( typeof key !== 'string' ) {\n      return null;\n    }\n  }\n\n  if ( key && cache && cache[key] ) {\n    return cache[key];\n  }\n\n  let out = `${ key }`;\n\n  for ( const rule of mappings ) {\n    const re = stringToRegex(rule.match);\n    const captured = out.match(re);\n\n    if ( captured && rule.replace ) {\n      out = out.replace(re, rule.replace);\n\n      found = true;\n      if ( !rule.continueOnMatch ) {\n        break;\n      }\n    }\n  }\n\n  if ( !found && defaultFn ) {\n    out = defaultFn(out, objOrValue);\n  }\n\n  if ( cache ) {\n    cache[key] = out;\n  }\n\n  return out;\n}\n\nfunction _addMapping(mappings, match, replace, weight, continueOnMatch) {\n  match = regexToString(ensureRegex(match));\n\n  mappings.push({\n    match,\n    replace,\n    weight,\n    continueOnMatch,\n    insertIndex: mappings.length,\n  });\n\n  // Re-sort the list by weight (highest first) and insert time (oldest first)\n  mappings.sort((a, b) => {\n    const pri = b.weight - a.weight;\n\n    if ( pri ) {\n      return pri;\n    }\n\n    return a.insertIndex - b.insertIndex;\n  });\n}\n\n// Regexes can't be represented in state because they don't serialize to JSON..\nconst regexCache = {};\n\nfunction regexToString(regex) {\n  return regex.source;\n}\n\nfunction stringToRegex(str) {\n  let out = regexCache[str];\n\n  if ( !out ) {\n    out = new RegExp(str);\n    regexCache[str] = out;\n  }\n\n  return out;\n}\n\nfunction ifHave(getters, option) {\n  switch (option) {\n  case IF_HAVE.V2_MONITORING: {\n    return haveV2Monitoring(getters);\n  }\n  case IF_HAVE.V1_MONITORING: {\n    return haveV1Monitoring(getters);\n  }\n  case IF_HAVE.PROJECT: {\n    return !!project(getters);\n  }\n  case IF_HAVE.NO_PROJECT: {\n    return !project(getters);\n  }\n  case IF_HAVE.NOT_V1_ISTIO: {\n    return !isV1Istio(getters);\n  }\n  case IF_HAVE.MULTI_CLUSTER: {\n    return getters.isMultiCluster;\n  }\n  case IF_HAVE.NEUVECTOR_NAMESPACE: {\n    return getters[`cluster/all`](NAMESPACE).find((n) => n.metadata.name === NEU_VECTOR_NAMESPACE);\n  }\n  case IF_HAVE.ADMIN: {\n    return isAdminUser(getters);\n  }\n  case IF_HAVE.MCM_DISABLED: {\n    return !getters['isRancherInHarvester'];\n  }\n  case IF_HAVE.NOT_STANDALONE_HARVESTER: {\n    return !getters['isStandaloneHarvester'];\n  }\n  default:\n    return false;\n  }\n}\n\n// Could list a larger set of resources that typically only an admin user would have\nexport function isAdminUser(getters) {\n  const canEditSettings = (getters['management/schemaFor'](MANAGEMENT.SETTING)?.resourceMethods || []).includes('PUT');\n  const canEditFeatureFlags = (getters['management/schemaFor'](MANAGEMENT.FEATURE)?.resourceMethods || []).includes('PUT');\n  const canInstallApps = (getters['management/schemaFor'](CATALOG.APP)?.resourceMethods || []).includes('PUT');\n  const canAddRepos = (getters['management/schemaFor'](CATALOG.CLUSTER_REPO)?.resourceMethods || []).includes('PUT');\n  const canPutHelmOperations = (getters['management/schemaFor'](CATALOG.OPERATION)?.resourceMethods || []).includes('PUT');\n\n  return canEditSettings && canEditFeatureFlags && canInstallApps && canAddRepos && canPutHelmOperations;\n}\n\nfunction _findColumnByName(schema, colName) {\n  const attributes = schema.attributes || {};\n  const columns = attributes.columns || [];\n\n  return findBy(columns, 'name', colName);\n}\n\nfunction _rowValueGetter(col) {\n  // 'field' comes from the schema - typically it is of the form $.metadata.field[N]\n  // We will use JsonPath to look up this value, which is costly - so if we can detect this format\n  // Use a more efficient function to get the value\n  const value = col.field.startsWith('.') ? `$${ col.field }` : col.field;\n\n  if (process.client) {\n    const found = value.match(FIELD_REGEX);\n\n    if (found && found.length === 2) {\n      const fieldIndex = parseInt(found[1], 10);\n\n      return (row) => row.metadata?.fields?.[fieldIndex];\n    }\n  }\n\n  return value;\n}\n\n// Is V1 Istio installed?\nfunction isV1Istio(getters) {\n  const cluster = getters['currentCluster'];\n\n  return !!cluster?.status?.istioEnabled;\n}\n\nfunction ifHaveVerb(rootGetters, module, verb, haveIds) {\n  for ( const haveId of haveIds ) {\n    const schema = rootGetters[`${ module }/schemaFor`](haveId);\n    const want = verb.toLowerCase();\n    const collectionMethods = schema.collectionMethods || [];\n    const resourceMethods = schema.resourceMethods || [];\n    const have = [...collectionMethods, ...resourceMethods].map((x) => x.toLowerCase());\n\n    if ( !have.includes(want) && !have.includes(`blocked-${ want }`) ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n// Look at the namespace filters to determine if a project is selected\nexport function project(getters) {\n  const clusterId = getters['currentCluster']?.id;\n\n  if ( !clusterId ) {\n    return null;\n  }\n\n  const filters = getters['namespaceFilters'];\n  const namespaces = [];\n  let projectName = null;\n\n  for (const filter of filters) {\n    const [type, id] = filter.split('://', 2);\n\n    if (type === 'project') {\n      if (projectName !== null) {\n        // More than one project selected\n        return null;\n      }\n      projectName = id;\n    } else if (type === 'ns') {\n      namespaces.push(id);\n    } else {\n      // Something other than project or namespace\n      return null;\n    }\n  }\n\n  // No project found?\n  if (!projectName) {\n    return null;\n  }\n\n  // We have one project and a set of namespaces\n  // Check that all of the namespaces belong to the project\n  const project = getters['management/byId'](MANAGEMENT.PROJECT, `${ clusterId }/${ projectName }`);\n\n  // No additional namespaces means just the project is selected\n  if (namespaces.length === 0) {\n    return project;\n  }\n\n  // Convert the project namespaces into a map so we can check existence easily\n  const prjNamespaceMap = project.namespaces.reduce((m, ns) => {\n    m[ns.metadata.name] = true;\n\n    return m;\n  }, {});\n\n  // All of the namespace filters must belong to the project\n  const found = namespaces.reduce((total, ns) => {\n    return prjNamespaceMap[ns] ? total + 1 : 0;\n  }, 0);\n\n  if (found !== namespaces.length) {\n    return null;\n  }\n\n  return project;\n}\n\nfunction hasCustom(state, rootState, kind, key, fallback) {\n  const cache = state.cache[kind];\n\n  if ( cache[key] !== undefined ) {\n    return cache[key];\n  }\n\n  // Check to see if the custom kind is provided by a plugin\n  if (!!rootState.$plugin.getDynamic(kind, key)) {\n    cache[key] = true;\n\n    return cache[key];\n  }\n\n  // Fallback\n  try {\n    fallback(key);\n    cache[key] = true;\n  } catch (e) {\n    cache[key] = false;\n  }\n\n  return cache[key];\n}\n\nfunction loadExtension(rootState, kind, key, fallback) {\n  const ext = rootState.$plugin.getDynamic(kind, key);\n\n  if (ext) {\n    if (typeof ext === 'function') {\n      return ext;\n    }\n\n    return () => ext;\n  }\n\n  return fallback(key);\n}\n"],"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"}]}