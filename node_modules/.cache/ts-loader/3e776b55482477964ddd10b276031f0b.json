{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js??ref--17-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/provisioning.cattle.io.cluster/__tests__/CustomCommand.tests.ts","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/provisioning.cattle.io.cluster/__tests__/CustomCommand.tests.ts","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js","mtime":1716430466133}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgbW91bnQgfSBmcm9tICdAdnVlL3Rlc3QtdXRpbHMnOwppbXBvcnQgQ3VzdG9tQ29tbWFuZCBmcm9tICdAc2hlbGwvZWRpdC9wcm92aXNpb25pbmcuY2F0dGxlLmlvLmNsdXN0ZXIvQ3VzdG9tQ29tbWFuZC52dWUnOwpkZXNjcmliZSgnY29tcG9uZW50OiBDdXN0b21Db21tYW5kJywgKCkgPT4gewogICAgY29uc3QgdG9rZW4gPSAnTVlfVE9LRU4nOwogICAgY29uc3QgaXAgPSAnTVlfSVAnOwogICAgY29uc3QgY2hlY2tTdW0gPSAnTVlfQ0hFQ0tTVU0nOwogICAgY29uc3Qgd3JhcHBlciA9IG1vdW50KEN1c3RvbUNvbW1hbmQsIHsKICAgICAgICBtb2NrczogewogICAgICAgICAgICAkc3RvcmU6IHsKICAgICAgICAgICAgICAgIGdldHRlcnM6IHsKICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3RvcmU6ICgpID0+ICdjdXJyZW50X3N0b3JlJywKICAgICAgICAgICAgICAgICAgICAnbWFuYWdlbWVudC9zY2hlbWFGb3InOiBqZXN0LmZuKCksCiAgICAgICAgICAgICAgICAgICAgJ2N1cnJlbnRfc3RvcmUvYWxsJzogamVzdC5mbigpLAogICAgICAgICAgICAgICAgICAgICdpMThuL3QnOiBqZXN0LmZuKCksCiAgICAgICAgICAgICAgICAgICAgJ2kxOG4vd2l0aEZhbGxiYWNrJzogamVzdC5mbigpLAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgIH0sCiAgICAgICAgcHJvcHNEYXRhOiB7CiAgICAgICAgICAgIGNsdXN0ZXI6IHt9LAogICAgICAgICAgICBjbHVzdGVyVG9rZW46IHsKICAgICAgICAgICAgICAgIGluc2VjdXJlTm9kZUNvbW1hbmQ6IGAgY3VybCAtLWluc2VjdXJlIC1mTCAke2lwfS9zeXN0ZW0tYWdlbnQtaW5zdGFsbC5zaCB8IHN1ZG8gIHNoIC1zIC0gLS1zZXJ2ZXIgJHtpcH0gLS1sYWJlbCAnY2F0dGxlLmlvL29zPWxpbnV4JyAtLXRva2VuICR7dG9rZW59IC0tY2EtY2hlY2tzdW0gJHtjaGVja1N1bX1gLAogICAgICAgICAgICAgICAgbm9kZUNvbW1hbmQ6IGAgY3VybCAtZkwgJHtpcH0vc3lzdGVtLWFnZW50LWluc3RhbGwuc2ggfCBzdWRvICBzaCAtcyAtIC0tc2VydmVyICR7aXB9IC0tbGFiZWwgJ2NhdHRsZS5pby9vcz1saW51eCcgLS10b2tlbiAke3Rva2VufSAtLWNhLWNoZWNrc3VtICR7Y2hlY2tTdW19YAogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBkYXRhOiAoKSA9PiAoewogICAgICAgICAgICBhZGRyZXNzOiAnJywKICAgICAgICAgICAgY29udHJvbFBsYW5lOiB0cnVlLAogICAgICAgICAgICBldGNkOiB0cnVlLAogICAgICAgICAgICBpbnNlY3VyZTogZmFsc2UsCiAgICAgICAgICAgIGludGVybmFsQWRkcmVzczogJycsCiAgICAgICAgICAgIGxhYmVsczoge30sCiAgICAgICAgICAgIG5vZGVOYW1lOiAnJywKICAgICAgICAgICAgdGFpbnRzOiBbXSwKICAgICAgICAgICAgd29ya2VyOiB0cnVlLAogICAgICAgIH0pLAogICAgfSk7CiAgICBpdCgnc2hvdWxkIHJldHVybiBsaW51eCBjb21tYW5kcyB3aXRoIHRoZSByaWdodCBmbGFncyBiYXNlZCBvbiBjbHVzdGVyIGluZm9ybWF0aW9uJywgKCkgPT4gewogICAgICAgIGNvbnN0IHZhbHVlID0gYGN1cmwgLWZMICR7aXB9L3N5c3RlbS1hZ2VudC1pbnN0YWxsLnNoIHwgc3VkbyAgc2ggLXMgLSAtLXNlcnZlciAke2lwfSAtLWxhYmVsICdjYXR0bGUuaW8vb3M9bGludXgnIC0tdG9rZW4gJHt0b2tlbn0gLS1jYS1jaGVja3N1bSAke2NoZWNrU3VtfSAtLWV0Y2QgLS1jb250cm9scGxhbmUgLS13b3JrZXJgOwogICAgICAgIGNvbnN0IGVsZW1lbnQgPSB3cmFwcGVyLmZpbmQoJyNjb3BpZWRMaW51eCcpLmVsZW1lbnQ7CiAgICAgICAgZXhwZWN0KGVsZW1lbnQudGV4dENvbnRlbnQpLnRvQ29udGFpbih2YWx1ZSk7CiAgICB9KTsKICAgIGl0KCdzaG91bGQgbm90IGRpc3BsYXkgd2FybmluZyBtZXNzYWdlIGlmIGFsbCBub2RlIHJvbGVzIGFyZSBzZWxlY3RlZCcsIGFzeW5jICgpID0+IHsKICAgICAgICBhd2FpdCB3cmFwcGVyLnNldERhdGEoewogICAgICAgICAgICBjb250cm9sUGxhbmU6IHRydWUsCiAgICAgICAgICAgIGV0Y2Q6IHRydWUsCiAgICAgICAgICAgIHdvcmtlcjogdHJ1ZSwKICAgICAgICB9KTsKICAgICAgICBjb25zdCBlbGVtZW50ID0gd3JhcHBlci5maW5kKCdbZGF0YS10ZXN0aWQ9Im5vZGUtcm9sZS13YXJuaW5nIl0nKS5lbGVtZW50OwogICAgICAgIGV4cGVjdChlbGVtZW50KS50b0JlVW5kZWZpbmVkKCk7CiAgICB9KTsKICAgIGRlc2NyaWJlKCdzaG91bGQgZGlzcGxheSB3YXJuaW5nIG1lc3NhZ2UgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSBub2RlIHJvbGVzIGlzIHVuc2VsZWN0ZWQnLCAoKSA9PiB7CiAgICAgICAgaXQuZWFjaChbCiAgICAgICAgICAgIFt0cnVlLCB0cnVlLCBmYWxzZV0sCiAgICAgICAgICAgIFt0cnVlLCBmYWxzZSwgdHJ1ZV0sCiAgICAgICAgICAgIFt0cnVlLCBmYWxzZSwgZmFsc2VdLAogICAgICAgICAgICBbZmFsc2UsIHRydWUsIHRydWVdLAogICAgICAgICAgICBbZmFsc2UsIHRydWUsIGZhbHNlXSwKICAgICAgICAgICAgW2ZhbHNlLCBmYWxzZSwgdHJ1ZV0sCiAgICAgICAgICAgIFtmYWxzZSwgZmFsc2UsIGZhbHNlXSwKICAgICAgICBdKSgnY29udHJvbFBsYW5lOiAlcCwgZXRjZDogJXAsIHdvcmtlcjogJXAnLCBhc3luYyAoY29udHJvbFBsYW5lLCBldGNkLCB3b3JrZXIpID0+IHsKICAgICAgICAgICAgYXdhaXQgd3JhcHBlci5zZXREYXRhKHsKICAgICAgICAgICAgICAgIGNvbnRyb2xQbGFuZSwKICAgICAgICAgICAgICAgIGV0Y2QsCiAgICAgICAgICAgICAgICB3b3JrZXIKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSB3cmFwcGVyLmZpbmQoJ1tkYXRhLXRlc3RpZD0ibm9kZS1yb2xlLXdhcm5pbmciXScpLmVsZW1lbnQ7CiAgICAgICAgICAgIGV4cGVjdChlbGVtZW50KS50b0JlRGVmaW5lZCgpOwogICAgICAgIH0pOwogICAgfSk7Cn0pOwo="},{"version":3,"file":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/provisioning.cattle.io.cluster/__tests__/CustomCommand.tests.ts","sourceRoot":"","sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/provisioning.cattle.io.cluster/__tests__/CustomCommand.tests.ts"],"names":[],"mappings":"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","sourcesContent":["import { mount } from '@vue/test-utils';\nimport CustomCommand from '@shell/edit/provisioning.cattle.io.cluster/CustomCommand.vue';\n\ndescribe('component: CustomCommand', () => {\n  const token = 'MY_TOKEN';\n  const ip = 'MY_IP';\n  const checkSum = 'MY_CHECKSUM';\n  const wrapper = mount(CustomCommand, {\n    mocks: {\n      $store: {\n        getters: {\n          currentStore:           () => 'current_store',\n          'management/schemaFor': jest.fn(),\n          'current_store/all':    jest.fn(),\n          'i18n/t':               jest.fn(),\n          'i18n/withFallback':    jest.fn(),\n        }\n      },\n    },\n    propsData: {\n      cluster:      {},\n      clusterToken: {\n        insecureNodeCommand: ` curl --insecure -fL ${ ip }/system-agent-install.sh | sudo  sh -s - --server ${ ip } --label 'cattle.io/os=linux' --token ${ token } --ca-checksum ${ checkSum }`,\n        nodeCommand:         ` curl -fL ${ ip }/system-agent-install.sh | sudo  sh -s - --server ${ ip } --label 'cattle.io/os=linux' --token ${ token } --ca-checksum ${ checkSum }`\n      }\n    },\n    data: () => ({\n      address:         '',\n      controlPlane:    true,\n      etcd:            true,\n      insecure:        false,\n      internalAddress: '',\n      labels:          {},\n      nodeName:        '',\n      taints:          [],\n      worker:          true,\n    }),\n  });\n\n  it('should return linux commands with the right flags based on cluster information', () => {\n    const value = `curl -fL ${ ip }/system-agent-install.sh | sudo  sh -s - --server ${ ip } --label 'cattle.io/os=linux' --token ${ token } --ca-checksum ${ checkSum } --etcd --controlplane --worker`;\n    const element = wrapper.find('#copiedLinux').element;\n\n    expect(element.textContent).toContain(value);\n  });\n\n  it('should not display warning message if all node roles are selected', async() => {\n    await wrapper.setData({\n      controlPlane: true,\n      etcd:         true,\n      worker:       true,\n    });\n\n    const element = wrapper.find('[data-testid=\"node-role-warning\"]').element;\n\n    expect(element).toBeUndefined();\n  });\n\n  describe('should display warning message if at least one of the node roles is unselected', () => {\n    it.each([\n      [true, true, false],\n      [true, false, true],\n      [true, false, false],\n      [false, true, true],\n      [false, true, false],\n      [false, false, true],\n      [false, false, false],\n    ])('controlPlane: %p, etcd: %p, worker: %p', async(\n      controlPlane,\n      etcd,\n      worker\n    ) => {\n      await wrapper.setData({\n        controlPlane,\n        etcd,\n        worker\n      });\n\n      const element = wrapper.find('[data-testid=\"node-role-warning\"]').element;\n\n      expect(element).toBeDefined();\n    });\n  });\n});\n"]}]}