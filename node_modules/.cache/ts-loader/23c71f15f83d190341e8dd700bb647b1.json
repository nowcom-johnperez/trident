{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js??ref--17-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/nav/WindowManager/__tests__/ContainerShell.test.ts","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/nav/WindowManager/__tests__/ContainerShell.test.ts","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js","mtime":1716430466133}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/nav/WindowManager/__tests__/ContainerShell.test.ts","sourceRoot":"","sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/nav/WindowManager/__tests__/ContainerShell.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { mount, Wrapper } from '@vue/test-utils';\nimport ContainerShell from '@shell/components/nav/WindowManager/ContainerShell.vue';\nimport Socket, {\n  addEventListener, EVENT_CONNECTED, EVENT_CONNECTING, EVENT_DISCONNECTED, EVENT_MESSAGE, EVENT_CONNECT_ERROR\n} from '@shell/utils/socket';\n\njest.mock('@shell/utils/socket');\njest.mock('@shell/utils/crypto', () => {\n  const originalModule = jest.requireActual('@shell/utils/crypto');\n\n  return {\n    __esModule:   true,\n    ...originalModule,\n    base64Decode: jest.fn().mockImplementation((str:String) => str)\n  };\n});\n\ndescribe('component: ContainerShell', () => {\n  const action = jest.fn();\n  const translate = jest.fn();\n  const schemaFor = jest.fn();\n  const onData = jest.fn();\n  const loadAddon = jest.fn();\n  const open = jest.fn();\n  const focus = jest.fn();\n  const fit = jest.fn();\n  const proposeDimensions = jest.fn().mockImplementation(() => {\n    return { rows: 1 };\n  });\n  const write = jest.fn();\n  const reset = jest.fn();\n\n  jest.mock(/* webpackChunkName: \"xterm\" */ 'xterm', () => {\n    return {\n      Terminal: class {\n        onData = onData;\n        loadAddon = loadAddon;\n        open = open;\n        focus = focus;\n        write = write;\n        reset = reset\n      }\n    };\n  });\n  jest.mock(/* webpackChunkName: \"xterm\" */ 'xterm-addon-fit', () => {\n    return {\n      FitAddon: class {\n        fit = fit\n        proposeDimensions = proposeDimensions\n      }\n    };\n  });\n\n  const defaultContainerShellParams = {\n    propsData: {\n      tab:    {},\n      active: true,\n      height: 1000,\n      pod:    {\n        spec:  { nodeName: 'nodeId' },\n        links: { view: 'url' },\n        os:    'linux'\n      },\n      initialContainer: 'containerId'\n    },\n    stubs: ['resize-observer'],\n    mocks: {\n      $store: {\n        dispatch: action,\n        getters:  {\n          'i18n/t':            translate,\n          'cluster/schemaFor': schemaFor\n        }\n      }\n    }\n  };\n\n  const resetMocks = () => {\n    // Clear all instances and calls to constructor and all methods:\n    jest.clearAllMocks();\n    defaultContainerShellParams.propsData.pod.os = 'linux';\n  };\n\n  const wrapperPostMounted = async(params: Object) => {\n    const wrapper = await mount(ContainerShell, params);\n\n    // these awaits are all associated with the various async dyamic imports on xterm\n    await wrapper.vm.$nextTick();\n    await wrapper.vm.$nextTick();\n    await wrapper.vm.$nextTick();\n    await wrapper.vm.$nextTick();\n\n    return wrapper;\n  };\n\n  it.todo('test that we are calling the xterm terminal and fitAddon class method mocks correctly');\n\n  it('creates a window on the page', async() => {\n    resetMocks();\n    const wrapper: Wrapper<InstanceType<typeof ContainerShell> & { [key: string]: any }> = await wrapperPostMounted(defaultContainerShellParams);\n    const windowElement = wrapper.find('div.window');\n\n    expect(windowElement.exists()).toBe(true);\n  });\n\n  it('the find action for the node is called if schemaFor finds a schema for NODE', async() => {\n    resetMocks();\n    const testSchemaFindsSchemaParams = {\n      ...defaultContainerShellParams,\n      mocks: {\n        ...defaultContainerShellParams.mocks,\n        $store: {\n          ...defaultContainerShellParams.mocks.$store,\n          getters: {\n            ...defaultContainerShellParams.mocks.$store.getters,\n            'cluster/schemaFor': jest.fn().mockImplementation(() => true)\n          }\n        }\n      }\n    };\n\n    await wrapperPostMounted(testSchemaFindsSchemaParams);\n\n    const actionParams = action.mock.calls[0];\n\n    expect(action.mock.calls).toHaveLength(1);\n    expect(actionParams[0]).toBe('cluster/find');\n    expect(actionParams[1]).toStrictEqual({\n      id:   'nodeId',\n      type: 'node'\n    });\n  });\n\n  it('the translate getter for the ...', async() => {\n    resetMocks();\n    await wrapperPostMounted(defaultContainerShellParams);\n    const firstTranslate = translate.mock.calls[0];\n    const secondTranslate = translate.mock.calls[1];\n\n    expect(translate.mock.calls).toHaveLength(2);\n    expect(firstTranslate[0]).toBe('wm.containerShell.clear');\n    expect(firstTranslate[1]).toStrictEqual({});\n    expect(secondTranslate[0]).toBe('wm.connection.disconnected');\n    expect(secondTranslate[1]).toStrictEqual({});\n  });\n\n  it('the socket is instantiated', async() => {\n    resetMocks();\n    const wrapper = await wrapperPostMounted(defaultContainerShellParams);\n\n    const socketParams = Socket.mock.calls[0][0]\n      .split('?')[1]\n      .split('&')\n      .reduce((paramMap: Object, param: [String, String]) => {\n        const [key, value] = param.split('=');\n\n        return {\n          ...paramMap,\n          [key]: decodeURIComponent(value)\n        };\n      }, {});\n\n    expect(Socket.mock.calls).toHaveLength(1);\n    expect(socketParams.command).toBe('TERM=xterm-256color; export TERM; [ -x /bin/bash ] && ([ -x /usr/bin/script ] && /usr/bin/script -q -c \"/bin/bash\" /dev/null || exec /bin/bash) || exec /bin/sh');\n    expect(wrapper.vm.os).toBe('linux');\n  });\n\n  it('the sockets events are bound', async() => {\n    resetMocks();\n    await wrapperPostMounted(defaultContainerShellParams);\n\n    const addEventListenerCalls = addEventListener.mock.calls;\n\n    expect(addEventListenerCalls).toHaveLength(5);\n    expect(addEventListenerCalls[0][0]).toBe(EVENT_CONNECTING);\n    expect(addEventListenerCalls[1][0]).toBe(EVENT_CONNECT_ERROR);\n    expect(addEventListenerCalls[2][0]).toBe(EVENT_CONNECTED);\n    expect(addEventListenerCalls[3][0]).toBe(EVENT_DISCONNECTED);\n    expect(addEventListenerCalls[4][0]).toBe(EVENT_MESSAGE);\n  });\n\n  it('the socket connecting event sets data props correctly', async() => {\n    resetMocks();\n    const wrapper = await wrapperPostMounted(defaultContainerShellParams);\n\n    const addEventListenerCalls = addEventListener.mock.calls;\n    const eventConnecting = addEventListenerCalls[0][1];\n\n    eventConnecting();\n\n    expect(wrapper.vm.isOpen).toBe(false);\n    expect(wrapper.vm.isOpening).toBe(true);\n    expect(wrapper.vm.errorMsg).toBe('');\n    expect(wrapper.vm.os).toBe('linux');\n  });\n\n  it('the socket connect error event sets data props correctly and calls the console', async() => {\n    resetMocks();\n    const consoleError = jest.spyOn(console, 'error').mockImplementation(() => {});\n    const wrapper = await wrapperPostMounted(defaultContainerShellParams);\n    const errorMessage = 'eventConnectError';\n\n    const addEventListenerCalls = addEventListener.mock.calls;\n    const eventConnecting = addEventListenerCalls[0][1];\n    const eventConnectError = addEventListenerCalls[1][1];\n\n    eventConnecting();\n    eventConnectError(errorMessage);\n\n    expect(consoleError.mock.calls[0][0]).toBe('Connect Error');\n    expect(consoleError.mock.calls[0][1]).toBe(errorMessage);\n    expect(wrapper.vm.isOpen).toBe(false);\n    expect(wrapper.vm.isOpening).toBe(false);\n    expect(wrapper.vm.errorMsg).toBe('');\n    expect(wrapper.vm.os).toBe('linux');\n  });\n\n  it('the socket connected event sets data props correctly', async() => {\n    resetMocks();\n    const wrapper = await wrapperPostMounted(defaultContainerShellParams);\n\n    const addEventListenerCalls = addEventListener.mock.calls;\n    const eventConnecting = addEventListenerCalls[0][1];\n    const eventConnected = addEventListenerCalls[2][1];\n\n    eventConnecting();\n    eventConnected();\n\n    expect(wrapper.vm.isOpen).toBe(true);\n    expect(wrapper.vm.isOpening).toBe(false);\n    expect(wrapper.vm.errorMsg).toBe('');\n    expect(wrapper.vm.os).toBe('linux');\n  });\n\n  it.todo('test that fit and flush are operating properly');\n  it.todo('test that we are properly feeding the terminal the commandOnFirstConnect prop correctly on connected');\n\n  it('the socket message event sets data props correctly', async() => {\n    resetMocks();\n    const wrapper = await wrapperPostMounted(defaultContainerShellParams);\n\n    const addEventListenerCalls = addEventListener.mock.calls;\n    const eventConnecting = addEventListenerCalls[0][1];\n    const eventConnected = addEventListenerCalls[2][1];\n    const eventMessage = addEventListenerCalls[4][1];\n\n    eventConnecting();\n    eventConnected();\n    eventMessage({ detail: { data: '1noError' } });\n\n    expect(wrapper.vm.isOpen).toBe(true);\n    expect(wrapper.vm.isOpening).toBe(false);\n    expect(wrapper.vm.errorMsg).toBe('');\n    expect(wrapper.vm.os).toBe('linux');\n  });\n\n  it('the socket message event sets data props correctly and call the console on error', async() => {\n    resetMocks();\n    const consoleError = jest.spyOn(console, 'error').mockImplementation(() => {});\n    const wrapper = await wrapperPostMounted(defaultContainerShellParams);\n    const errorMessage = 'eventMessageError';\n\n    const addEventListenerCalls = addEventListener.mock.calls;\n    const eventConnecting = addEventListenerCalls[0][1];\n    const eventConnected = addEventListenerCalls[2][1];\n    const eventMessage = addEventListenerCalls[4][1];\n\n    eventConnecting();\n    eventConnected();\n    eventMessage({ detail: { data: `3${ errorMessage }` } });\n\n    expect(consoleError.mock.calls[0][0]).toBe(errorMessage);\n    expect(wrapper.vm.isOpen).toBe(true);\n    expect(wrapper.vm.isOpening).toBe(false);\n    expect(wrapper.vm.errorMsg).toBe(errorMessage);\n    expect(wrapper.vm.os).toBe('linux');\n  });\n\n  it('the socket disconnect event without an error sets data props correctly', async() => {\n    resetMocks();\n    const wrapper = await wrapperPostMounted(defaultContainerShellParams);\n\n    const addEventListenerCalls = addEventListener.mock.calls;\n    const eventConnecting = addEventListenerCalls[0][1];\n    const eventConnected = addEventListenerCalls[2][1];\n    const eventDisconnected = addEventListenerCalls[3][1];\n\n    eventConnecting();\n    eventConnected();\n    eventDisconnected();\n\n    expect(wrapper.vm.isOpen).toBe(false);\n    expect(wrapper.vm.isOpening).toBe(false);\n    expect(wrapper.vm.errorMsg).toBe('');\n    expect(wrapper.vm.os).toBe('linux');\n  });\n\n  it('the socket disconnect event with an error sets data props correctly and attempts a second connect', async() => {\n    resetMocks();\n    const consoleError = jest.spyOn(console, 'error').mockImplementation(() => {});\n    const connect = jest.spyOn(ContainerShell.methods, 'connect');\n    const wrapper = await wrapperPostMounted(defaultContainerShellParams);\n    const errorMessage = 'eventMessageError';\n\n    const addEventListenerCalls = addEventListener.mock.calls;\n    const eventConnecting = addEventListenerCalls[0][1];\n    const eventConnected = addEventListenerCalls[2][1];\n    const eventMessage = addEventListenerCalls[4][1];\n    const eventDisconnected = addEventListenerCalls[3][1];\n\n    eventConnecting();\n    eventConnected(); // for whatever reason, when this is called the mock on addEventListener doesn't clear it's calls...\n    eventMessage({ detail: { data: `3${ errorMessage }` } });\n\n    // we start with 2 backup shells but remove whichever one we already used\n    expect(wrapper.vm.backupShells).toHaveLength(1);\n\n    eventDisconnected();\n\n    expect(consoleError.mock.calls[0][0]).toBe(errorMessage);\n    expect(wrapper.vm.isOpen).toBe(false);\n    expect(wrapper.vm.isOpening).toBe(false);\n    expect(wrapper.vm.errorMsg).toBe('eventMessageError');\n    // the backup shell that was leftover was windows so it became the new os in dataprops\n    expect(wrapper.vm.os).toBeUndefined();\n    // but we still didn't write it to the pod itself since we don't know if it worked\n    expect(defaultContainerShellParams.propsData.pod.os).toBeUndefined();\n    // we can see here that we removed that last backup shell because we're attempting to use it now\n    expect(wrapper.vm.backupShells).toHaveLength(1);\n    expect(connect.mock.calls).toHaveLength(2);\n  });\n\n  it('the socket disconnect event fires twice, sets data props correctly, and only attempts two connects if the pod os is linux', async() => {\n    resetMocks();\n    const consoleError = jest.spyOn(console, 'error').mockImplementation(() => {});\n    const connect = jest.spyOn(ContainerShell.methods, 'connect');\n    const wrapper = await wrapperPostMounted(defaultContainerShellParams);\n    const linuxErrorMessage = 'eventLinuxMessageError';\n    const windowsErrorMessage = 'eventWindowsMessageError';\n\n    const addEventListenerCalls = addEventListener.mock.calls;\n    const eventConnecting = addEventListenerCalls[0][1];\n    const eventConnected = addEventListenerCalls[2][1];\n    const eventMessage = addEventListenerCalls[4][1];\n    const eventDisconnected = addEventListenerCalls[3][1];\n\n    expect(wrapper.vm.backupShells).toHaveLength(1);\n\n    eventConnecting();\n    eventConnected();\n    eventMessage({ detail: { data: `3${ linuxErrorMessage }` } });\n    eventDisconnected();\n\n    expect(wrapper.vm.backupShells).toHaveLength(1);\n    expect(wrapper.vm.os).toBeUndefined();\n    // the pod os was 'linux' but we cleared it out since that didn't work\n    expect(defaultContainerShellParams.propsData.pod.os).toBeUndefined();\n    expect(connect.mock.calls).toHaveLength(2);\n\n    eventConnecting();\n    eventConnected();\n    eventMessage({ detail: { data: `3${ windowsErrorMessage }` } });\n    eventDisconnected();\n\n    expect(consoleError.mock.calls[0][0]).toBe(linuxErrorMessage);\n    expect(consoleError.mock.calls[1][0]).toBe(windowsErrorMessage);\n    expect(wrapper.vm.isOpen).toBe(false);\n    expect(wrapper.vm.isOpening).toBe(false);\n    expect(wrapper.vm.errorMsg).toBe(windowsErrorMessage);\n    expect(wrapper.vm.os).toBeUndefined();\n    // we never found a shell that worked so we're going to leave the pod os as undefined\n    expect(defaultContainerShellParams.propsData.pod.os).toBeUndefined();\n    // we're out of backupShells now so we're not going to retry after that second disconnect\n    expect(connect.mock.calls).toHaveLength(3);\n\n    resetMocks();\n  });\n\n  it('the socket disconnect event fires twice, sets data props correctly, and only attempts two connects if the pod os is undefined', async() => {\n    resetMocks();\n    const consoleError = jest.spyOn(console, 'error').mockImplementation(() => {});\n    const connect = jest.spyOn(ContainerShell.methods, 'connect');\n    const testUndefinedOsParams = {\n      ...defaultContainerShellParams,\n      propsData: {\n        ...defaultContainerShellParams.propsData,\n        pod: {\n          ...defaultContainerShellParams.propsData.pod,\n          os: undefined\n        }\n      }\n    };\n    const wrapper = await wrapperPostMounted(testUndefinedOsParams);\n    const linuxErrorMessage = 'eventLinuxMessageError';\n    const windowsErrorMessage = 'eventWindowsMessageError';\n\n    const addEventListenerCalls = addEventListener.mock.calls;\n    const eventConnecting = addEventListenerCalls[0][1];\n    const eventConnected = addEventListenerCalls[2][1];\n    const eventMessage = addEventListenerCalls[4][1];\n    const eventDisconnected = addEventListenerCalls[3][1];\n\n    expect(wrapper.vm.backupShells).toHaveLength(1);\n    expect(wrapper.vm.os).toBe('linux');\n    expect(testUndefinedOsParams.propsData.pod.os).toBeUndefined();\n\n    eventConnecting();\n    eventConnected();\n    eventMessage({ detail: { data: `3${ linuxErrorMessage }` } });\n    eventDisconnected();\n\n    expect(wrapper.vm.backupShells).toHaveLength(1);\n    expect(wrapper.vm.os).toBeUndefined();\n    expect(testUndefinedOsParams.propsData.pod.os).toBeUndefined();\n\n    eventConnecting();\n    eventConnected();\n    eventMessage({ detail: { data: `3${ windowsErrorMessage }` } });\n    eventDisconnected();\n\n    expect(consoleError.mock.calls[0][0]).toBe(linuxErrorMessage);\n    expect(consoleError.mock.calls[1][0]).toBe(windowsErrorMessage);\n    expect(wrapper.vm.isOpen).toBe(false);\n    expect(wrapper.vm.isOpening).toBe(false);\n    expect(wrapper.vm.errorMsg).toBe(windowsErrorMessage);\n    expect(wrapper.vm.os).toBeUndefined();\n    expect(testUndefinedOsParams.propsData.pod.os).toBeUndefined();\n    expect(connect.mock.calls).toHaveLength(3);\n\n    resetMocks();\n  });\n\n  it('the socket disconnect event fires twice, sets data props correctly, and only attempts two connects, and sets the pod os if the pod os is initially undefined and connects on the second attempt', async() => {\n    resetMocks();\n    const consoleError = jest.spyOn(console, 'error').mockImplementation(() => {});\n    const connect = jest.spyOn(ContainerShell.methods, 'connect');\n    const testUndefinedOsParams = {\n      ...defaultContainerShellParams,\n      propsData: {\n        ...defaultContainerShellParams.propsData,\n        pod: {\n          ...defaultContainerShellParams.propsData.pod,\n          os: undefined\n        }\n      }\n    };\n    const wrapper = await wrapperPostMounted(testUndefinedOsParams);\n    const linuxErrorMessage = 'eventLinuxMessageError';\n    const windowsShellMessage = 'eventWindowsMessageShell';\n\n    const addEventListenerCalls = addEventListener.mock.calls;\n    const eventConnecting = addEventListenerCalls[0][1];\n    const eventConnected = addEventListenerCalls[2][1];\n    const eventMessage = addEventListenerCalls[4][1];\n    const eventDisconnected = addEventListenerCalls[3][1];\n\n    expect(wrapper.vm.backupShells).toHaveLength(1);\n\n    eventConnecting();\n    eventConnected();\n    eventMessage({ detail: { data: `3${ linuxErrorMessage }` } });\n    eventDisconnected();\n\n    expect(wrapper.vm.backupShells).toHaveLength(1);\n    expect(wrapper.vm.os).toBeUndefined();\n    expect(testUndefinedOsParams.propsData.pod.os).toBeUndefined();\n    expect(wrapper.vm.errorMsg).toBe(linuxErrorMessage);\n\n    eventConnecting();\n    eventConnected();\n    eventMessage({ detail: { data: `1${ windowsShellMessage }` } });\n\n    expect(consoleError.mock.calls[0][0]).toBe(linuxErrorMessage);\n    expect(consoleError.mock.calls[1]).toBeUndefined();\n    expect(wrapper.vm.isOpen).toBe(true);\n    expect(wrapper.vm.isOpening).toBe(false);\n    expect(wrapper.vm.errorMsg).toBe('');\n    expect(wrapper.vm.os).toBeUndefined();\n    // the second shell worked so we're going to set it on the pod itself so if we need to connect again we'll just use the correct shell on the first attempt\n    expect(testUndefinedOsParams.propsData.pod.os).toBeUndefined();\n    expect(connect.mock.calls).toHaveLength(2);\n\n    resetMocks();\n  });\n\n  it('the socket disconnect event fires 3 times, sets data props correctly, and only attempts 3 connects if the pod os is defined at the pods parent node', async() => {\n    resetMocks();\n    const consoleError = jest.spyOn(console, 'error').mockImplementation(() => {});\n    const connect = jest.spyOn(ContainerShell.methods, 'connect');\n    const testNodeDefinedOsParams = {\n      ...defaultContainerShellParams,\n      propsData: {\n        ...defaultContainerShellParams.propsData,\n        pod: {\n          ...defaultContainerShellParams.propsData.pod,\n          _os: 'linux',\n          get os(): string {\n            return 'linux';\n          },\n          set os(os: string) {\n            this._os = os;\n          }\n        }\n      }\n    };\n\n    const wrapper = await wrapperPostMounted(testNodeDefinedOsParams);\n    const linuxErrorMessage = 'eventLinuxMessageError';\n\n    const addEventListenerCalls = addEventListener.mock.calls;\n    const eventConnecting = addEventListenerCalls[0][1];\n    const eventConnected = addEventListenerCalls[2][1];\n    const eventMessage = addEventListenerCalls[4][1];\n    const eventDisconnected = addEventListenerCalls[3][1];\n\n    expect(wrapper.vm.backupShells).toHaveLength(1);\n\n    eventConnecting();\n    eventConnected();\n    eventMessage({ detail: { data: `3${ linuxErrorMessage }` } });\n    eventDisconnected();\n\n    // the parent node's os overrides the _os field in the pod so it didn't change on the previous failure and we know it is correct, thus we're not burning down our backup shells and just retrying the same shell\n    expect(wrapper.vm.backupShells).toHaveLength(1);\n    expect(wrapper.vm.os).toBe('linux');\n    expect(testNodeDefinedOsParams.propsData.pod.os).toBe('linux');\n    expect(wrapper.vm.errorMsg).toBe(linuxErrorMessage);\n\n    eventConnecting();\n    eventConnected();\n    eventMessage({ detail: { data: `3${ linuxErrorMessage }` } });\n    eventDisconnected();\n\n    expect(wrapper.vm.backupShells).toHaveLength(1);\n    expect(wrapper.vm.isOpen).toBe(false);\n    expect(wrapper.vm.isOpening).toBe(false);\n    expect(wrapper.vm.errorMsg).toBe(linuxErrorMessage);\n    expect(wrapper.vm.os).toBe('linux');\n    expect(testNodeDefinedOsParams.propsData.pod.os).toBe('linux');\n    expect(connect.mock.calls).toHaveLength(3);\n\n    eventConnecting();\n    eventConnected();\n    eventMessage({ detail: { data: `3${ linuxErrorMessage }` } });\n    eventDisconnected();\n\n    expect(consoleError.mock.calls[0][0]).toBe(linuxErrorMessage);\n    expect(consoleError.mock.calls[1][0]).toBe(linuxErrorMessage);\n    expect(consoleError.mock.calls[2][0]).toBe(linuxErrorMessage);\n    expect(wrapper.vm.backupShells).toHaveLength(1);\n    expect(wrapper.vm.isOpen).toBe(false);\n    expect(wrapper.vm.isOpening).toBe(false);\n    expect(wrapper.vm.errorMsg).toBe(linuxErrorMessage);\n    expect(wrapper.vm.os).toBe('linux');\n    expect(testNodeDefinedOsParams.propsData.pod.os).toBe('linux');\n    // at some point we have to stop retying and if we're not burning through backup shells, there's a retry limit of 2 for a total of 3 attempts\n    expect(connect.mock.calls).toHaveLength(3);\n\n    resetMocks();\n  });\n});\n"]}]}