{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js??ref--17-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/gc/gc.ts","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/gc/gc.ts","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js","mtime":1716430466133}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/gc/gc.ts","sourceRoot":"","sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/gc/gc.ts"],"names":[],"mappings":"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","sourcesContent":["import { SETTING } from '@shell/config/settings';\nimport { COUNT, MANAGEMENT } from '@shell/config/types';\nimport { GC_DEFAULTS, GC_PREFERENCES } from './gc-types';\n\nclass GarbageCollect {\n  private static ENABLE_DEBUG_LOGGING = false;\n\n  /**\n   * Don't run GC if it's been run within 5 seconds\n   */\n  private static GC_RE_RUN_GAP = 1000 * 5;\n\n  private cachedGcPrefs: GC_PREFERENCES = GC_DEFAULTS;\n\n  private cachedGcPrefsStamp = '';\n\n  private debugLog = (...args: any) => {\n    if (GarbageCollect.ENABLE_DEBUG_LOGGING) {\n      console.debug('GC', ...args); // eslint-disable-line no-console\n    }\n  };\n\n  /**\n   * Time the GC last ran\n   */\n  private gcLastRun: number | null = 0;\n\n  /**\n   * To avoid JSON.parse on the `ui-performance` setting keep a local cache\n   */\n  private getUiPerfGarbageCollection = (rootState: any) => {\n    const uiPerfSetting = rootState.management.types[MANAGEMENT.SETTING]?.list.find((s: any) => s.id === SETTING.UI_PERFORMANCE);\n\n    if (!uiPerfSetting || !uiPerfSetting.value) {\n      // Could be in the process of logging out\n      return undefined;\n    }\n    const stamp = `${ uiPerfSetting.metadata.generation }-${ uiPerfSetting.metadata.resourceVersion }`;\n\n    if (this.cachedGcPrefsStamp !== stamp) {\n      this.debugLog(`Updating ${ SETTING.UI_PERFORMANCE } cache`);\n      this.cachedGcPrefsStamp = stamp;\n      const uiPerfSettingParsed = JSON.parse(uiPerfSetting.value);\n\n      this.cachedGcPrefs = uiPerfSettingParsed.garbageCollection;\n    }\n\n    return this.cachedGcPrefs;\n  };\n\n  /**\n   * The last time a resource was accessed by either find or getters style functions\n   */\n  private lastAccessedCache: {\n    [store: string]: {\n      [type: string]: number;\n    }\n  } = {}\n\n  /**\n   * Track when a logged in route changes.\n   */\n  private lastRouteChange = 0;\n\n  // ------------- GC Enabled ---------------------\n\n  gcEnabledAll(pseudoCtx: any, type: string) {\n    return this.gcEnabledForStore(pseudoCtx.state) && this.gcEnabledSetting(pseudoCtx) && this.gcEnabledForType(pseudoCtx, type);\n  }\n\n  gcEnabledSetting(pseudoCtx: any) {\n    const { rootState } = pseudoCtx;\n\n    // Don't use a getter... as we'll end up triggering ourselves again\n    const uiPerfGarbageCollection = this.getUiPerfGarbageCollection(rootState);\n\n    return uiPerfGarbageCollection?.enabled;\n  }\n\n  gcEnabledForStore(state: any) {\n    return state?.config?.supportsGc;\n  }\n\n  /**\n   * Store can require certain types are not GC'd (for example `cluster` and `schema`s, `counts`, etc)\n   */\n  gcEnabledForType(pseudoCtx: any, type: string) {\n    const { getters } = pseudoCtx;\n\n    if (!type || getters.gcIgnoreTypes[type]) {\n      return false;\n    }\n\n    return true;\n  }\n\n  gcEnabledInterval(pseudoCtx: any) {\n    const { rootState } = pseudoCtx;\n\n    // Don't use a getter... as we'll end up triggering ourselves again\n    const uiPerfGarbageCollection = this.getUiPerfGarbageCollection(rootState);\n\n    return {\n      enabled:  uiPerfGarbageCollection?.enabledInterval,\n      interval: uiPerfGarbageCollection?.interval || 0\n    };\n  }\n\n  gcEnabledRoute(pseudoCtx: any) {\n    const { rootState } = pseudoCtx;\n\n    // Don't use a getter... as we'll end up triggering ourselves again\n    const uiPerfGarbageCollection = this.getUiPerfGarbageCollection(rootState);\n\n    return uiPerfGarbageCollection?.enabledOnNavigate;\n  }\n\n  // ------------- GC (actual) ---------------------\n\n  /**\n   * Remove stale resource types from the store and stop watching them for changes\n   */\n  garbageCollect(ctx: any, ignoreTypes: {[type: string]: boolean} = {}) {\n    const now = new Date().getTime();\n\n    // Is gc currently running OR has run in the past GC_RE_RUN_GAP return early\n    if (this.gcLastRun === null || now - this.gcLastRun < GarbageCollect.GC_RE_RUN_GAP) {\n      this.debugLog('Skipping (running or recently run)', this.gcLastRun ? new Date(this.gcLastRun) : 'running');\n\n      return;\n    }\n\n    this.gcLastRun = null;\n    const gcd: {[type: string]: number} = {};\n\n    try {\n      const { getters, rootState, dispatch } = ctx;\n\n      if (!rootState.clusterReady) {\n        this.debugLog('Skipping (cluster not ready)');\n        this.gcLastRun = new Date().getTime();\n\n        return ;\n      }\n      this.debugLog(`------ Started ------`);\n\n      const uiPerfGarbageCollection = this.getUiPerfGarbageCollection(rootState);\n\n      if (!uiPerfGarbageCollection) {\n        return ;\n      }\n      const maxAge = uiPerfGarbageCollection.ageThreshold * 1000;\n      const maxCount = uiPerfGarbageCollection.countThreshold;\n\n      this.debugLog(`Max Age: ${ maxAge }. Max Count: ${ maxCount }`);// , 'Cache', this.lastAccessedCache\n\n      const store = ctx.state.config.namespace;\n\n      // this.debugLog('Cache', this.lastAccessedCache);\n\n      Object.entries((this.lastAccessedCache[store] || {})).forEach(([type, lastAccessed]) => {\n        if (!lastAccessed) {\n          // There's no last accessed time... gc is probably disabled in another way\n          this.debugLog(`${ type }: Skipping (no accessed time)`);\n\n          return;\n        }\n\n        if (!this.gcEnabledForType(ctx, type)) {\n          // This specific store is telling us to ignore the type (for example `cluster` store will not GC schema's, counts, etc)\n          this.debugLog(`${ type }: Skipping (type ignored by store)`);\n\n          return;\n        }\n\n        if (ignoreTypes[type]) {\n          // We're going to a place that needs the resource\n          this.debugLog(`${ type }: Skipping (navigating to type)`);\n\n          return;\n        }\n\n        if (now - lastAccessed <= maxAge) {\n          // The resource was recently accessed\n\n          this.debugLog(`${ type }: Skipping (recently accessed)`);\n\n          return;\n        }\n\n        if (this.lastRouteChange !== undefined && this.lastRouteChange < lastAccessed ) {\n          // The resource is being used in the current route/page\n          this.debugLog(`${ type }: Skipping (used in current route/page)`);\n\n          return;\n        }\n\n        const countFromResource = getters.all(COUNT)[0].counts[type]?.summary.count;\n        const currentCount = countFromResource ?? 0;\n\n        if (currentCount === undefined || currentCount < maxCount) {\n          // There's too few resources, we might as well keep them to avoid a network request when we need them again\n          this.debugLog(`${ type }: Skipping (too few of resource)`);\n\n          return;\n        }\n\n        this.debugLog(`${ type }: Removing from store`);\n        dispatch('forgetType', type);\n        gcd[type] = currentCount;\n      });\n\n      this.gcLastRun = new Date().getTime();\n    } catch (e) {\n      this.debugLog(`: Error`, e);\n      this.gcLastRun = new Date().getTime();\n    }\n\n    if (Object.keys(gcd).length > 0) {\n      console.info('Garbage Collected Resources', gcd); // eslint-disable-line no-console\n    }\n\n    this.debugLog(`------ Finished ------`);\n  }\n\n  // ------------- GC Update local cache ---------------------\n\n  /**\n   * Update the time that the resource type was accessed\n   * This needs to run after any type initialisation (aka registerType)\n   */\n  gcUpdateLastAccessed(pseudoCtx: any, type: string) {\n    if (!this.gcEnabledAll(pseudoCtx, type)) {\n      return;\n    }\n    const store = pseudoCtx.state.config.namespace;\n\n    if (!this.lastAccessedCache[store]) {\n      this.lastAccessedCache[store] = {};\n    }\n\n    this.lastAccessedCache[store][type] = new Date().getTime();\n  }\n\n  /**\n   * Update the time the user last changed routes\n   */\n  gcUpdateRouteChanged() {\n    this.lastRouteChange = new Date().getTime();\n  }\n\n  // ------------- GC reset ---------------------\n\n  /**\n   * Remove all cached access times for the given store\n   */\n  gcResetStore(state: any) {\n    const store = state.config.namespace;\n\n    delete this.lastAccessedCache[store];\n\n    this.debugLog('Forgetting Store:', store);\n  }\n\n  /**\n   * Remove cached access time for the given resource type\n   */\n  gcResetType(state: any, type: string) {\n    const store = state.config.namespace;\n\n    if (!this.lastAccessedCache[store]) {\n      return;\n    }\n    delete this.lastAccessedCache[store][type];\n\n    this.debugLog('Forgetting Type:', store, type);\n  }\n}\n\nconst gc = new GarbageCollect();\n\nexport default gc;\n"]}]}