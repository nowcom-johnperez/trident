{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js??ref--17-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/pod-security-admission.ts","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/pod-security-admission.ts","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js","mtime":1716430466133}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgcmVkdWNlLCBmaWx0ZXIsIGtleXMgfSBmcm9tICdsb2Rhc2gnOwppbXBvcnQgeyBQU0FMYWJlbFByZWZpeCwgUFNBTGFiZWxzTmFtZXNwYWNlcyB9IGZyb20gJ0BzaGVsbC9jb25maWcvcG9kLXNlY3VyaXR5LWFkbWlzc2lvbic7CmltcG9ydCB7IGNhbWVsVG9UaXRsZSB9IGZyb20gJ0BzaGVsbC91dGlscy9zdHJpbmcnOwovKioKICogUmV0dXJuIFBTQSBsYWJlbHMgcHJlc2VudCBpbiB0aGUgcmVzb3VyY2UKICogQHJldHVybnMgc3RyaW5nW10KICovCmV4cG9ydCBjb25zdCBnZXRQU0FMYWJlbHMgPSAocmVzb3VyY2UpID0+IHsgdmFyIF9hOyByZXR1cm4gZmlsdGVyKGtleXMoKF9hID0gcmVzb3VyY2UgPT09IG51bGwgfHwgcmVzb3VyY2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlc291cmNlLm1ldGFkYXRhKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGFiZWxzKSwgKGtleSkgPT4gUFNBTGFiZWxzTmFtZXNwYWNlcy5pbmNsdWRlcyhrZXkpKTsgfTsKLyoqCiAqIFJldHVybiBib29sZWFuIHZhbHVlIGlmIHRoZSBsYWJlbCBpcyBhIFBTQSBsYWJlbAogKiBAcmV0dXJucyBCb29sZWFuCiAqLwpleHBvcnQgY29uc3QgaGFzUFNBTGFiZWxzID0gKHJlc291cmNlKSA9PiBnZXRQU0FMYWJlbHMocmVzb3VyY2UpLmxlbmd0aCA+IDA7Ci8qKgogKiBHZW5lcmF0ZSB0b29sdGlwcyBkaWN0aW9uYXJ5IGZyb20gYSBnaXZlbiBQU0EgbmFtZXNwYWNlZCBsYWJlbCBwYWlyIG9mIGtleSBhbmQgdmFsdWVzCiAqLwpleHBvcnQgY29uc3QgZ2V0UFNBVG9vbHRpcHNEZXNjcmlwdGlvbiA9IChyZXNvdXJjZSkgPT4gewogICAgdmFyIF9hOwogICAgcmV0dXJuIHJlZHVjZSgoX2EgPSByZXNvdXJjZSA9PT0gbnVsbCB8fCByZXNvdXJjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVzb3VyY2UubWV0YWRhdGEpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sYWJlbHMsIChhY2MsIHZhbHVlLCBrZXkpID0+IHsKICAgICAgICB2YXIgX2E7CiAgICAgICAgY29uc3QgaXNQU0EgPSBQU0FMYWJlbHNOYW1lc3BhY2VzLmluY2x1ZGVzKGtleSk7CiAgICAgICAgLy8gUmV0cmlldmUgdmVyc2lvbiBmcm9tIHBhaXJlZCBsYWJlbCBlbmRpbmcgd2l0aCBgLXZlcnNpb25gCiAgICAgICAgY29uc3Qgc3VmZml4ID0gJy12ZXJzaW9uJzsKICAgICAgICBjb25zdCBpc1ZlcnNpb25MYWJlbCA9IGtleS5pbmNsdWRlcyhzdWZmaXgpOwogICAgICAgIGNvbnN0IHZlcnNpb25MYWJlbCA9IChfYSA9IHJlc291cmNlID09PSBudWxsIHx8IHJlc291cmNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXNvdXJjZS5tZXRhZGF0YSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxhYmVsc1tgJHtrZXl9JHtzdWZmaXh9YF07CiAgICAgICAgY29uc3QgdmVyc2lvbiA9IHZlcnNpb25MYWJlbCB8fCAnbGF0ZXN0JzsKICAgICAgICAvLyBBZGQgU1BBIGxhYmVscyBhbmQgZGlzY2FyZCBwYWlyZWQgdmVyc2lvbiBsYWJlbAogICAgICAgIHJldHVybiBpc1BTQSAmJiAhaXNWZXJzaW9uTGFiZWwgPyB7CiAgICAgICAgICAgIC4uLmFjYywKICAgICAgICAgICAgW2tleV06IGAke2NhbWVsVG9UaXRsZShrZXkucmVwbGFjZShQU0FMYWJlbFByZWZpeCwgJycpKX0gJHtjYW1lbFRvVGl0bGUodmFsdWUpfSAoJHt2ZXJzaW9ufSlgCiAgICAgICAgfSA6IGFjYzsKICAgIH0sIHt9KTsKfTsK"},{"version":3,"file":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/pod-security-admission.ts","sourceRoot":"","sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/pod-security-admission.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAC9C,OAAO,EAAE,cAAc,EAAE,mBAAmB,EAAE,MAAM,sCAAsC,CAAC;AAC3F,OAAO,EAAE,YAAY,EAAE,MAAM,qBAAqB,CAAC;AAGnD;;;GAGG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,QAAa,EAAY,EAAE,WAAC,OAAA,MAAM,CAAC,IAAI,OAAC,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,QAAQ,0CAAE,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAA,EAAA,CAAC;AAE9I;;;GAGG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,QAAa,EAAW,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;AAE1F;;GAEG;AACH,MAAM,CAAC,MAAM,yBAAyB,GAAG,CAAC,QAAa,EAA0B,EAAE;;IAAC,OAAA,MAAM,OACxF,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,QAAQ,0CAAE,MAAM,EAC1B,CAAC,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;;QAClB,MAAM,KAAK,GAAG,mBAAmB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAEhD,4DAA4D;QAC5D,MAAM,MAAM,GAAG,UAAU,CAAC;QAC1B,MAAM,cAAc,GAAG,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC5C,MAAM,YAAY,SAAG,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,QAAQ,0CAAE,MAAM,CAAC,GAAI,GAAI,GAAI,MAAO,EAAE,CAAC,CAAC;QACvE,MAAM,OAAO,GAAG,YAAY,IAAI,QAAQ,CAAC;QAEzC,kDAAkD;QAClD,OAAO,KAAK,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YAChC,GAAG,GAAG;YACN,CAAC,GAAG,CAAC,EAAE,GAAI,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAE,IAAK,YAAY,CAAC,KAAK,CAAE,KAAM,OAAQ,GAAG;SACpG,CAAC,CAAC,CAAC,GAAG,CAAC;IACV,CAAC,EACD,EAAG,CACJ,CAAA;CAAA,CAAC","sourcesContent":["import { reduce, filter, keys } from 'lodash';\nimport { PSALabelPrefix, PSALabelsNamespaces } from '@shell/config/pod-security-admission';\nimport { camelToTitle } from '@shell/utils/string';\nimport { PSA } from '@shell/types/pod-security-admission';\n\n/**\n * Return PSA labels present in the resource\n * @returns string[]\n */\nexport const getPSALabels = (resource: PSA): string[] => filter(keys(resource?.metadata?.labels), (key) => PSALabelsNamespaces.includes(key));\n\n/**\n * Return boolean value if the label is a PSA label\n * @returns Boolean\n */\nexport const hasPSALabels = (resource: PSA): boolean => getPSALabels(resource).length > 0;\n\n/**\n * Generate tooltips dictionary from a given PSA namespaced label pair of key and values\n */\nexport const getPSATooltipsDescription = (resource: PSA): Record<string, string> => reduce(\n  resource?.metadata?.labels,\n  (acc, value, key) => {\n    const isPSA = PSALabelsNamespaces.includes(key);\n\n    // Retrieve version from paired label ending with `-version`\n    const suffix = '-version';\n    const isVersionLabel = key.includes(suffix);\n    const versionLabel = resource?.metadata?.labels[`${ key }${ suffix }`];\n    const version = versionLabel || 'latest';\n\n    // Add SPA labels and discard paired version label\n    return isPSA && !isVersionLabel ? {\n      ...acc,\n      [key]: `${ camelToTitle(key.replace(PSALabelPrefix, '')) } ${ camelToTitle(value) } (${ version })`\n    } : acc;\n  },\n  { }\n);\n"]}]}