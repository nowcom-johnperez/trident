{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js??ref--17-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/networking.k8s.io.networkpolicy/__tests__/utils/selectors.ts","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/networking.k8s.io.networkpolicy/__tests__/utils/selectors.ts","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js","mtime":1716430466133}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZXhwb3J0IGNsYXNzIFBvbGljeVJ1bGVUYXJnZXRTZWxlY3RvcnMgewogICAgY29uc3RydWN0b3Iod3JhcHBlcikgewogICAgICAgIHRoaXMud3JhcHBlciA9IHdyYXBwZXI7CiAgICB9CiAgICBnZXQgaXBCbG9jaygpIHsKICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVyLmZpbmQoJ1tkYXRhLXRlc3RpZD1sYWJlbGVkLWlucHV0LWlwLWJsb2NrLXNlbGVjdG9yXScpOwogICAgfQogICAgLyoqCiAgICAgKiBOYW1lc3BhY2Ugc2VsZWN0b3IgZWxlbWVudDsgbWF0Y2hlcyBwb2xpY2llcyBpbiBPUiBjb25kaXRpb24sIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIG90aGVyIHJ1bGVzCiAgICAgKi8KICAgIGdldCBuYW1lc3BhY2UoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMud3JhcHBlci5maW5kKCdbZGF0YS10ZXN0aWQ9bWF0Y2gtZXhwcmVzc2lvbi1uYW1lc3BhY2Utc2VsZWN0b3JdJyk7CiAgICB9CiAgICAvKioKICAgICAqIFBvZCBzZWxlY3RvciBlbGVtZW50OyBtYXRjaGVzIHBvbGljaWVzIGluIE9SIGNvbmRpdGlvbiwgaW4gY29uanVuY3Rpb24gd2l0aCB0aGUgb3RoZXIgcnVsZXMKICAgICAqLwogICAgZ2V0IHBvZCgpIHsKICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVyLmZpbmQoJ1tkYXRhLXRlc3RpZD1tYXRjaC1leHByZXNzaW9uLXBvZC1zZWxlY3Rvcl0nKTsKICAgIH0KICAgIC8qKgogICAgICogTmFtZXNwYWNlIGFuZCBwb2Qgc2VsZWN0b3IgZWxlbWVudHMsIG1hdGNoaW5nIHBvbGljaWVzIGluIEFORCBjb25kaXRpb24sIHdpdGhpbiB0aGUgc2FtZSBydWxlCiAgICAgKi8KICAgIGdldCBuYW1lc3BhY2VBbmRQb2QoKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgbmFtZXNwYWNlUnVsZTogdGhpcy53cmFwcGVyLmZpbmQoJ1tkYXRhLXRlc3RpZD1tYXRjaC1leHByZXNzaW9uLW5hbWVzcGFjZS1hbmQtcG9kLXNlbGVjdG9yLW5zLXJ1bGVdJyksCiAgICAgICAgICAgIHBvZFJ1bGU6IHRoaXMud3JhcHBlci5maW5kKCdbZGF0YS10ZXN0aWQ9bWF0Y2gtZXhwcmVzc2lvbi1uYW1lc3BhY2UtYW5kLXBvZC1zZWxlY3Rvci1wb2QtcnVsZV0nKSwKICAgICAgICB9OwogICAgfQogICAgZ2V0IHJ1bGVUeXBlKCkgewogICAgICAgIHJldHVybiB0aGlzLndyYXBwZXIuZmluZCgnW2RhdGEtdGVzdGlkPWxhYmVsZWQtc2VsZWN0LXR5cGUtc2VsZWN0b3JdJyk7CiAgICB9Cn0K"},{"version":3,"file":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/networking.k8s.io.networkpolicy/__tests__/utils/selectors.ts","sourceRoot":"","sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/networking.k8s.io.networkpolicy/__tests__/utils/selectors.ts"],"names":[],"mappings":"AAAA,MAAM,OAAO,yBAAyB;IAGpC,YAAY,OAAY;QACtB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,+CAA+C,CAAC,CAAC;IAC5E,CAAC;IAED;;OAEG;IACH,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CACtB,mDAAmD,CACpD,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,6CAA6C,CAAC,CAAC;IAC1E,CAAC;IAED;;OAEG;IACH,IAAI,eAAe;QACjB,OAAO;YACL,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAC9B,mEAAmE,CACpE;YACD,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CACxB,oEAAoE,CACrE;SACF,CAAC;IACJ,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;IACzE,CAAC;CACF","sourcesContent":["export class PolicyRuleTargetSelectors {\n  private wrapper;\n\n  constructor(wrapper: any) {\n    this.wrapper = wrapper;\n  }\n\n  get ipBlock() {\n    return this.wrapper.find('[data-testid=labeled-input-ip-block-selector]');\n  }\n\n  /**\n   * Namespace selector element; matches policies in OR condition, in conjunction with the other rules\n   */\n  get namespace() {\n    return this.wrapper.find(\n      '[data-testid=match-expression-namespace-selector]'\n    );\n  }\n\n  /**\n   * Pod selector element; matches policies in OR condition, in conjunction with the other rules\n   */\n  get pod() {\n    return this.wrapper.find('[data-testid=match-expression-pod-selector]');\n  }\n\n  /**\n   * Namespace and pod selector elements, matching policies in AND condition, within the same rule\n   */\n  get namespaceAndPod() {\n    return {\n      namespaceRule: this.wrapper.find(\n        '[data-testid=match-expression-namespace-and-pod-selector-ns-rule]'\n      ),\n      podRule: this.wrapper.find(\n        '[data-testid=match-expression-namespace-and-pod-selector-pod-rule]'\n      ),\n    };\n  }\n\n  get ruleType() {\n    return this.wrapper.find('[data-testid=labeled-select-type-selector]');\n  }\n}\n"]}]}