{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js??ref--17-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/validators/formRules/index.ts","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/validators/formRules/index.ts","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js","mtime":1716430466133}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/validators/formRules/index.ts","sourceRoot":"","sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/validators/formRules/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { RBAC } from '@shell/config/types';\nimport { HCI } from '@shell/config/labels-annotations';\nimport isEmpty from 'lodash/isEmpty';\nimport has from 'lodash/has';\n// import uniq from 'lodash/uniq';\nimport cronstrue from 'cronstrue';\nimport { Translation } from '@shell/types/t';\n\n// import uniq from 'lodash/uniq';\nexport type Validator<T = undefined | string> = (val: any, arg?: any) => T;\n\nexport type ValidatorFactory = (arg1: any, arg2?: any) => Validator\n\ntype ServicePort = {\n  name?: string,\n  nodePort?: string | number,\n  port?: string | number,\n  targetPort?: string | number,\n  idx: number\n}\n\nexport class Port {\n  empty: boolean;\n  int: number;\n  string: string;\n  isNumber: boolean;\n  isInt: boolean;\n  constructor(port: number | string | undefined) {\n    this.string = String(port);\n    this.int = parseInt(this.string, 10);\n    this.empty = (!port && this.int !== 0);\n    this.isNumber = !isNaN(this.int) && !this.string.includes('e'); // leaving out the exponent edge case to keep the logic simple and because port numbers aren't that big...\n    this.isInt = this.isNumber && !this.string.includes('.');\n  }\n}\n\nconst httpsKeys = [\n  'server-url'\n];\n\nconst runValidators = (val: any, validators: Validator[]) => {\n  for (const validator of validators) {\n    const message = validator(val);\n\n    if (message) {\n      return message;\n    }\n  }\n};\n\nexport interface ValidationOptions {\n  key?: string,\n}\n\n// \"t\" is the function name we use for getting a translated string\nexport default function(t: Translation, { key = 'Value' }: ValidationOptions): { [key:string]: Validator<any> | ValidatorFactory } {\n  // utility validators these validators only get used by other validators\n  const startDot: ValidatorFactory = (label: string): Validator => (val: string) => val?.slice(0, 1) === '.' ? t(`validation.dns.${ label }.startDot`, { key }) : undefined;\n\n  const endDot = (label: string): Validator => (val: string) => val?.slice(-1) === '.' ? t(`validation.dns.${ label }.endDot`, { key }) : undefined;\n\n  const startNumber: ValidatorFactory = (label: string): Validator => (val: string) => val?.slice(0, 1)?.match(/[0-9]/) ? t(`validation.dns.${ label }.startNumber`, { key }) : undefined;\n\n  const startHyphen: ValidatorFactory = (label: string): Validator => (val: string) => val?.slice(0, 1) === '-' ? t(`validation.dns.${ label }.startHyphen`, { key }) : undefined;\n\n  const endHyphen: ValidatorFactory = (label: string): Validator => (val: string) => val?.slice(-1) === '-' ? t(`validation.dns.${ label }.endHyphen`, { key }) : undefined;\n\n  const minValue: ValidatorFactory = (min: string) => (val: string | number) => Number(val) < Number(min) ? t('validation.minValue', { key, min }) : undefined;\n\n  const maxValue: ValidatorFactory = (max: string) => (val: string | number) => Number(val) > Number(max) ? t('validation.maxValue', { key, max }) : undefined;\n\n  const betweenValues: ValidatorFactory = ([min, max]: string[]) => (val: string | number) => minValue(min)(val) || maxValue(max)(val) ? t('validation.betweenValues', {\n    key, min, max\n  }) : undefined;\n\n  const minLength: ValidatorFactory = (min: string) => (val: string) => val.length < Number(min) ? t('validation.minLength', { key, min }) : undefined;\n\n  const maxLength: ValidatorFactory = (max: string) => (val: string) => val.length > Number(max) ? t('validation.maxLength', { key, max }) : undefined;\n\n  const betweenLengths: ValidatorFactory = ([min, max]: string[]) => (val: string) => minLength(min)(val) || maxLength(max)(val) ? t('validation.betweenLengths', {\n    key, min, max\n  }) : undefined;\n\n  const requiredInt: Validator = (val: string) => isNaN(parseInt(val, 10)) ? t('validation.number.requiredInt', { key }) : undefined;\n\n  const isInteger: Validator = (val: string | number) => !Number.isInteger(+val) || `${ val }`.match(/\\.+/g) ? t('validation.number.requiredInt', { key }) : undefined;\n\n  const isPositive: Validator = (val: string | number) => +val < 0 ? t('validation.number.isPositive', { key }) : undefined;\n\n  const isOctal: Validator = (val: string | number) => {\n    const valueString = `${ val }`;\n    const isValid = valueString.match(/(^0+)(.+)/);\n\n    return isValid ? t('validation.number.isOctal', { key }) : undefined;\n  };\n\n  const portNumber: Validator = (val: string) => parseInt(val, 10) < 1 || parseInt(val, 10) > 65535 ? t('validation.number.between', {\n    key, min: '1', max: '65535'\n  }) : undefined;\n\n  const dnsChars: Validator = (val: string) => {\n    const matchedChars = val?.match(/[^${'A-Za-z0-9-'}]/g);\n\n    if (matchedChars) {\n      return t('validation.chars', {\n        key, count: matchedChars.length, chars: matchedChars.map((char) => char === ' ' ? 'Space' : `\"${ char }\"`).join(', ')\n      });\n    }\n\n    return undefined;\n  };\n\n  // the weird edge case here deals with internationalized domain names which are prepended with 'xn--'\n  // https://datatracker.ietf.org/doc/html/rfc5891#section-4.2.3.1\n  const dnsDoubleDash: Validator = (val: string) => (val?.substr(2, 2) === '--' && val?.substr(0, 2) !== 'xn') ? t(`validation.dns.doubleHyphen`, { key }) : undefined;\n\n  const dnsIanaServiceNameDoubleDash: Validator = (val: string) => (val?.substr(2, 2) === '--' && val?.substr(0, 2) !== 'xn') ? t(`validation.dns.doubleHyphen`, { key }) : undefined;\n\n  const dnsEmpty: ValidatorFactory = (label: string): Validator => (val = '') => val.length === 0 ? t(`validation.dns.${ label }.emptyLabel`, { key, min: 1 }) : undefined;\n\n  const dnsTooLong: ValidatorFactory = (label: string, length = 63): Validator => (val = '') => val.length > length ? t(`validation.dns.${ label }.tooLongLabel`, { key, max: length }) : undefined;\n\n  // eslint-disable-next-line no-unused-vars\n  const hostnameEmpty: Validator = (val = '') => val.length === 0 ? t('validation.dns.hostname.empty', { key }) : undefined;\n\n  const hostnameTooLong: Validator = (val = '') => val.length > 253 ? t('validation.dns.hostname.tooLong', { key, max: 253 }) : undefined;\n\n  const absolutePath: Validator = (val = '') => val[0] !== '/' && val.length > 0 ? t('validation.path', { key }) : undefined;\n\n  const required: Validator = (val: any) => !val && val !== false ? t('validation.required', { key }) : undefined;\n\n  const noUpperCase: Validator = (val = '') => val.toLowerCase() !== val ? t('validation.noUpperCase', { key }) : undefined;\n\n  const cronSchedule: Validator = (val: string) => {\n    try {\n      cronstrue.toString(val);\n    } catch (e) {\n      return t('validation.invalidCron');\n    }\n  };\n\n  const isHttps: ValidatorFactory = (key: string) => {\n    const isHttps: Validator = (val: string) => httpsKeys.includes(key) && !val.toLowerCase().startsWith('https://') ? t('validation.setting.serverUrl.https') : undefined;\n\n    return isHttps;\n  };\n\n  const interval: Validator = (val: string) => !/^\\d+[hms]$/.test(val) ? t('validation.monitoring.route.interval', { key }) : undefined;\n\n  const containerImage: Validator = (val: any) => !val?.image ? t('workload.validation.containerImage', { name: val.name }) : undefined;\n\n  const containerImages: Validator = (val: any | [any]) => {\n    const containers = val.jobTemplate ? val?.jobTemplate?.spec?.template?.spec?.containers : val?.template?.spec?.containers;\n\n    if (!containers || !containers.length) {\n      return t('validation.required', { key: t('workload.container.titles.containers') });\n    }\n\n    // making sure each container has an image name\n    return containers.map((container: any) => containerImage(container)).find((containerError: string) => containerError);\n  };\n\n  const dnsLabel: Validator = (val: string) => {\n    const validators = [\n      dnsChars,\n      startHyphen('label'),\n      endHyphen('label'),\n      dnsDoubleDash,\n      // dnsEmpty('label'), // questionable as to if this is needed if the field is also required...\n      dnsTooLong('label')\n    ];\n\n    return runValidators(val, validators);\n  };\n\n  const dnsLabelIanaServiceName: Validator = (val: string) => {\n    const validators = [\n      dnsChars,\n      startHyphen('label'),\n      endHyphen('label'),\n      dnsIanaServiceNameDoubleDash,\n      dnsEmpty('label'), // questionable as to if this is needed if the field is also required...\n      dnsTooLong('label', 15)\n    ];\n\n    return runValidators(val, validators);\n  };\n\n  const dnsLabelRestricted: Validator = (val: string) => {\n    const validators = [\n      dnsChars,\n      startNumber('label'),\n      startHyphen('label'),\n      endHyphen('label'),\n      dnsDoubleDash,\n      dnsEmpty('label'), // questionable as to if this is needed if the field is also required...\n      dnsTooLong('label')\n    ];\n\n    return runValidators(val, validators);\n  };\n\n  const hostname: Validator = (val: string) => {\n    if (val) {\n      const validators = [\n        startDot('hostname'),\n        hostnameTooLong,\n        endDot('hostname')\n      ];\n\n      const hostNameMessage = runValidators(val, validators);\n\n      if (hostNameMessage) {\n        return hostNameMessage;\n      }\n\n      const labels = val.split('.');\n      const labelValidators = [\n        dnsChars,\n        startHyphen('hostname'),\n        endHyphen('hostname'),\n        dnsDoubleDash,\n        dnsEmpty('hostname'),\n        dnsTooLong('hostname')\n      ];\n\n      for ( let i = 0; i < labels.length; i++ ) {\n        const labelMessage = runValidators(labels[i], labelValidators);\n\n        if (labelMessage) {\n          return labelMessage;\n        }\n      }\n    }\n  };\n\n  const wildcardHostname: Validator = (val: string) => {\n    // allow wildcard in first part of hostname\n    val = val ? val.replace(/^\\*\\./, '') : val;\n\n    return hostname(val);\n  };\n\n  const externalName: Validator = (val: string) => {\n    if (isEmpty(val)) {\n      return t('validation.service.externalName.none');\n    } else {\n      return hostname(val);\n    }\n  };\n\n  const testRule = (val: string | undefined) => {\n    return 'This is an error returned by the testRule validator';\n  };\n\n  const ruleGroups: Validator = (val: {groups?: any}) => isEmpty(val?.groups) ? t('validation.prometheusRule.groups.required') : undefined;\n\n  const clusterName: ValidatorFactory = (isRke2: boolean): Validator => (val: string | undefined) => isRke2 && (val || '')?.match(/^(c-.{5}|local)$/i) ? t('validation.cluster.name') : undefined;\n\n  const servicePort: Validator<string | Port | undefined> = (val: ServicePort) => {\n    const {\n      name,\n      idx\n    } = val;\n\n    const nodePort = new Port(val.nodePort);\n    const listeningPort = new Port(val.port);\n    const targetPort = new Port(val.targetPort);\n\n    if (isEmpty(name)) {\n      return t('validation.service.ports.name.required', { position: idx + 1 });\n    }\n\n    if (!nodePort.empty) {\n      if (!nodePort.isInt) {\n        return t('validation.service.ports.nodePort.requiredInt', { position: idx + 1 });\n      } else if (nodePort.int < 1 || nodePort.int > 65535) {\n        return t('validation.service.ports.nodePort.between', { position: idx + 1 });\n      }\n    }\n\n    if (!listeningPort.empty) {\n      if (!listeningPort.isInt) {\n        return t('validation.service.ports.port.requiredInt', { position: idx + 1 });\n      } else if (listeningPort.int < 1 || listeningPort.int > 65535) {\n        return t('validation.service.ports.port.between', { position: idx + 1 });\n      } else if (listeningPort.string?.includes('.')) {\n        return listeningPort;\n      }\n    } else {\n      return t('validation.service.ports.port.required', { position: idx + 1 });\n    }\n\n    if (!targetPort.empty) {\n      if (!targetPort.isInt) {\n        const ianaServiceNameErrors = dnsLabelIanaServiceName(targetPort.string);\n\n        if (ianaServiceNameErrors) {\n          return ianaServiceNameErrors;\n        }\n      } else if (targetPort.int < 1 || targetPort.int > 65535) {\n        return t('validation.service.ports.targetPort.between', { position: idx + 1 });\n      }\n    } else {\n      return t('validation.service.ports.targetPort.required', { position: idx + 1 });\n    }\n\n    return undefined;\n  };\n\n  const groupIsValid: Validator = (val, readableIndex) => {\n    let returnMessage: string | undefined;\n\n    if (isEmpty(val?.name)) {\n      return t('validation.prometheusRule.groups.valid.name', { index: readableIndex });\n    }\n\n    if (isEmpty(val.rules)) {\n      return t('validation.prometheusRule.groups.valid.singleEntry', { index: readableIndex });\n    } else {\n      val.rules.forEach((rule: any, idx: number) => {\n        const readableRuleIndex = idx + 1;\n\n        if (has(rule, 'alert') && isEmpty(rule?.alert) && !returnMessage) {\n          returnMessage = t('validation.prometheusRule.groups.valid.rule.alertName', { groupIndex: readableIndex, ruleIndex: readableRuleIndex });\n        } else if (has(rule, 'record') && isEmpty(rule?.record)) {\n          returnMessage = t('validation.prometheusRule.groups.valid.rule.recordName', { groupIndex: readableIndex, ruleIndex: readableRuleIndex });\n        }\n\n        if ((has(rule, 'expr') && isEmpty(rule.expr) && !returnMessage) || (!has(rule, 'expr') && !returnMessage)) {\n          returnMessage = t('validation.prometheusRule.groups.valid.rule.expr', { groupIndex: readableIndex, ruleIndex: readableRuleIndex });\n        }\n\n        if (has(rule, 'alert')) {\n          if (\n            (has(rule, 'labels') && isEmpty(rule.labels) && !returnMessage) ||\n            (!has(rule, 'labels') && !returnMessage)\n          ) {\n            returnMessage = t('validation.prometheusRule.groups.valid.rule.labels', { groupIndex: readableIndex, ruleIndex: readableRuleIndex });\n          }\n        }\n      });\n    }\n\n    return returnMessage;\n  };\n\n  const groupsAreValid: Validator = (val) => {\n    const groups = [...val]; // making a new array in the function because I'm gonna mutate it later...\n    let message;\n\n    groups.forEach((group, idx, arr) => {\n      message = groupIsValid(group, idx + 1);\n      if (!!message) {\n        arr.length = idx + 1; // this is a tricksy way of breaking a forEach loop since we just want the first message\n      }\n    });\n\n    return message;\n  };\n\n  const matching: Validator = (val) => {\n    if (isEmpty(val?.match) && isEmpty(val?.['match_re'])) {\n      return t('validation.monitoring.route.match');\n    }\n  };\n\n  const roleTemplateRules: ValidatorFactory = (type): Validator => (val = []) => {\n    if (val.some((rule: any) => isEmpty(rule.verbs))) {\n      return t('validation.roleTemplate.roleTemplateRules.missingVerb');\n    }\n\n    if (val.some((rule: any) => rule.resources?.length && rule.nonResourceURLs?.length)) {\n      return t('validation.roleTemplate.roleTemplateRules.noResourceAndNonResource');\n    }\n\n    if (type === RBAC.ROLE) {\n      if (val.some((rule: any) => isEmpty(rule.resources))) {\n        return t('validation.roleTemplate.roleTemplateRules.missingResource');\n      }\n\n      if (val.some((rule: any) => isEmpty(rule.apiGroups))) {\n        return t('validation.roleTemplate.roleTemplateRules.missingApiGroup');\n      }\n    } else if (val.some((rule: any) => isEmpty(rule.resources) && isEmpty(rule.nonResourceURLs) && isEmpty(rule.apiGroups))) {\n      return t('validation.roleTemplate.roleTemplateRules.missingOneResource');\n    }\n\n    return undefined;\n  };\n\n  // The existing validator for clusterIp never actually returns an error\n  const clusterIp: Validator = (val) => undefined;\n\n  const backupTarget: Validator = (val) => {\n    const parseValue = JSON.parse(val);\n    const type = parseValue.type;\n\n    if (!type) {\n      return t('validation.required', { key: 'Type' });\n    }\n\n    if (type === 's3') {\n      if (!parseValue.accessKeyId) {\n        return t('validation.required', { key: 'accessKeyId' });\n      }\n\n      if (!parseValue.secretAccessKey) {\n        return t('validation.required', { key: 'secretAccessKey' });\n      }\n\n      if (!parseValue.bucketRegion) {\n        return t('validation.required', { key: 'bucketRegion' });\n      }\n\n      if (!parseValue.bucketName) {\n        return t('validation.required', { key: 'bucketName' });\n      }\n    }\n\n    return undefined;\n  };\n\n  const imageUrl: Validator = (val) => {\n    const VM_IMAGE_FILE_FORMAT = ['qcow', 'qcow2', 'raw', 'img', 'iso'];\n\n    if (!val || val === '') {\n      return undefined;\n    }\n\n    const urlSlug = val.split('/').pop();\n    const fileExtension = urlSlug.split('.').pop().toLowerCase();\n\n    if (!VM_IMAGE_FILE_FORMAT.includes(fileExtension)) {\n      return t('harvester.validation.image.ruleTip');\n    }\n\n    return undefined;\n  };\n\n  const fileRequired: Validator = (val = {}) => {\n    if (!val[HCI.IMAGE_NAME]) {\n      return t('validation.required', { key: t('harvester.image.fileName') });\n    }\n  };\n\n  const subDomain: Validator = (val) => {\n    const matchedChars = val?.match(/[^a-z0-9.-]/g);\n\n    if (matchedChars) {\n      return t('validation.chars', {\n        key, count: matchedChars.length, chars: matchedChars.map((char: string) => char === ' ' ? 'Space' : `\"${ char }\"`).join(', ')\n      });\n    }\n\n    return runValidators(val, [startHyphen('label'), endHyphen('label'), startDot('label'), endDot('label'), required]);\n  };\n\n  return {\n    absolutePath,\n    backupTarget,\n    betweenLengths,\n    betweenValues,\n    clusterIp,\n    clusterName,\n    containerImage,\n    containerImages,\n    cronSchedule,\n    dnsLabel,\n    dnsLabelIanaServiceName,\n    dnsLabelRestricted,\n    externalName,\n    fileRequired,\n    groupsAreValid,\n    hostname,\n    imageUrl,\n    interval,\n    isHttps,\n    matching,\n    maxLength,\n    maxValue,\n    minLength,\n    minValue,\n    noUpperCase,\n    portNumber,\n    required,\n    requiredInt,\n    isInteger,\n    isPositive,\n    isOctal,\n    roleTemplateRules,\n    ruleGroups,\n    servicePort,\n    subDomain,\n    testRule,\n    wildcardHostname,\n  };\n}\n"]}]}