{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js??ref--17-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/workload/__tests__/Job.test.ts","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/workload/__tests__/Job.test.ts","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js","mtime":1716430466133}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgbW91bnQgfSBmcm9tICdAdnVlL3Rlc3QtdXRpbHMnOwppbXBvcnQgSm9iIGZyb20gJ0BzaGVsbC9lZGl0L3dvcmtsb2FkL0pvYi52dWUnOwppbXBvcnQgeyBfRURJVCB9IGZyb20gJ0BzaGVsbC9jb25maWcvcXVlcnktcGFyYW1zJzsKaW1wb3J0IHsgV09SS0xPQURfVFlQRVMgfSBmcm9tICdAc2hlbGwvY29uZmlnL3R5cGVzJzsKaW1wb3J0IHsgY2xlYW5IdG1sRGlyZWN0aXZlIH0gZnJvbSAnQHNoZWxsL3BsdWdpbnMvY2xlYW4taHRtbC1kaXJlY3RpdmUnOwpkZXNjcmliZSgnY29tcG9uZW50OiBKb2InLCAoKSA9PiB7CiAgICBkZXNjcmliZSgnZ2l2ZW4gQ3JvbkpvYiB0eXBlcycsICgpID0+IHsKICAgICAgICBpdC5lYWNoKFsKICAgICAgICAgICAgJ3N1Y2Nlc3NmdWwnLAogICAgICAgICAgICAnZmFpbGVkJywKICAgICAgICBdKSgnc2hvdWxkIGVtaXQgYW4gdXBkYXRlIG9uICVwIGlucHV0JywgKGZpZWxkKSA9PiB7CiAgICAgICAgICAgIGNvbnN0IHdyYXBwZXIgPSBtb3VudChKb2IsIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IHsgY2xlYW5IdG1sRGlyZWN0aXZlIH0sCiAgICAgICAgICAgICAgICBwcm9wc0RhdGE6IHsKICAgICAgICAgICAgICAgICAgICBtb2RlOiBfRURJVCwKICAgICAgICAgICAgICAgICAgICB0eXBlOiBXT1JLTE9BRF9UWVBFUy5DUk9OX0pPQgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgY29uc3QgaW5wdXQgPSB3cmFwcGVyLmZpbmQoYFtkYXRhLXRlc3RpZD0iaW5wdXQtam9iLSR7ZmllbGR9Il1gKS5maW5kKCdpbnB1dCcpOwogICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IDEyMzsKICAgICAgICAgICAgaW5wdXQuc2V0VmFsdWUobmV3VmFsdWUpOwogICAgICAgICAgICBleHBlY3Qod3JhcHBlci5lbWl0dGVkKCdpbnB1dCcpKS50b0hhdmVMZW5ndGgoMSk7CiAgICAgICAgfSk7CiAgICAgICAgaXQuZWFjaChbCiAgICAgICAgICAgICdjb25jdXJyZW5jeVBvbGljeScsCiAgICAgICAgICAgICdzdXNwZW5kJywKICAgICAgICBdKSgnc2hvdWxkIGVtaXQgYW4gdXBkYXRlIG9uICVwIHJhZGlvIG9wdGlvbiBjaGFuZ2UnLCAoZmllbGQpID0+IHsKICAgICAgICAgICAgY29uc3Qgd3JhcHBlciA9IG1vdW50KEpvYiwgewogICAgICAgICAgICAgICAgcHJvcHNEYXRhOiB7CiAgICAgICAgICAgICAgICAgICAgbW9kZTogX0VESVQsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogV09SS0xPQURfVFlQRVMuQ1JPTl9KT0IKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGNvbnN0IHJhZGlvT3B0aW9uID0gd3JhcHBlcgogICAgICAgICAgICAgICAgLmZpbmQoYFtkYXRhLXRlc3RpZD0iaW5wdXQtam9iLSR7ZmllbGR9Il1gKQogICAgICAgICAgICAgICAgLmZpbmQoJ2xhYmVsJyk7CiAgICAgICAgICAgIHJhZGlvT3B0aW9uLnRyaWdnZXIoJ2NsaWNrJyk7CiAgICAgICAgICAgIGV4cGVjdCh3cmFwcGVyLmVtaXR0ZWQoJ2lucHV0JykpLnRvSGF2ZUxlbmd0aCgxKTsKICAgICAgICB9KTsKICAgIH0pOwogICAgZGVzY3JpYmUuZWFjaChbCiAgICAgICAgW1dPUktMT0FEX1RZUEVTLkpPQiwgW11dLAogICAgICAgIFtXT1JLTE9BRF9UWVBFUy5DUk9OX0pPQiwgWydzdGFydGluZ0RlYWRsaW5lU2Vjb25kcycsICd0ZXJtaW5hdGlvbiddXSwKICAgIF0pKCdnaXZlbiB3b3JrbG9hZCB0eXBlICVwJywgKHR5cGUsIGV4dHJhRmllbGRzKSA9PiB7CiAgICAgICAgaXQuZWFjaChbCiAgICAgICAgICAgIC4uLmV4dHJhRmllbGRzLAogICAgICAgICAgICAnY29tcGxldGlvbnMnLAogICAgICAgICAgICAncGFyYWxsZWxpc20nLAogICAgICAgICAgICAnYmFja29mZkxpbWl0JywKICAgICAgICAgICAgJ2FjdGl2ZURlYWRsaW5lU2Vjb25kcycsCiAgICAgICAgXSkoJ3Nob3VsZCBlbWl0IGFuIHVwZGF0ZSBvbiAlcCBpbnB1dCBhbmQgYmx1cicsIChmaWVsZCkgPT4gewogICAgICAgICAgICBjb25zdCB3cmFwcGVyID0gbW91bnQoSm9iLCB7CiAgICAgICAgICAgICAgICBwcm9wc0RhdGE6IHsKICAgICAgICAgICAgICAgICAgICBtb2RlOiBfRURJVCwKICAgICAgICAgICAgICAgICAgICB0eXBlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBjb25zdCBpbnB1dCA9IHdyYXBwZXIuZmluZChgW2RhdGEtdGVzdGlkPSJpbnB1dC1qb2ItJHtmaWVsZH0iXWApLmZpbmQoJ2lucHV0Jyk7CiAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gMTIzOwogICAgICAgICAgICBpbnB1dC5zZXRWYWx1ZShuZXdWYWx1ZSk7CiAgICAgICAgICAgIGlucHV0LnRyaWdnZXIoJ2JsdXInKTsKICAgICAgICAgICAgZXhwZWN0KHdyYXBwZXIuZW1pdHRlZCgnaW5wdXQnKSkudG9IYXZlTGVuZ3RoKDEpOwogICAgICAgIH0pOwogICAgfSk7Cn0pOwo="},{"version":3,"file":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/workload/__tests__/Job.test.ts","sourceRoot":"","sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/workload/__tests__/Job.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { mount } from '@vue/test-utils';\nimport Job from '@shell/edit/workload/Job.vue';\nimport { _EDIT } from '@shell/config/query-params';\nimport { WORKLOAD_TYPES } from '@shell/config/types';\nimport { cleanHtmlDirective } from '@shell/plugins/clean-html-directive';\n\ndescribe('component: Job', () => {\n  describe('given CronJob types', () => {\n    it.each([\n      'successful',\n      'failed',\n    ])('should emit an update on %p input', (field) => {\n      const wrapper = mount(Job, {\n        directives: { cleanHtmlDirective },\n        propsData:  {\n          mode: _EDIT,\n          type: WORKLOAD_TYPES.CRON_JOB\n        }\n      });\n      const input = wrapper.find(`[data-testid=\"input-job-${ field }\"]`).find('input');\n      const newValue = 123;\n\n      input.setValue(newValue);\n\n      expect(wrapper.emitted('input')).toHaveLength(1);\n    });\n\n    it.each([\n      'concurrencyPolicy',\n      'suspend',\n    ])('should emit an update on %p radio option change', (field) => {\n      const wrapper = mount(Job, {\n        propsData: {\n          mode: _EDIT,\n          type: WORKLOAD_TYPES.CRON_JOB\n        }\n      });\n      const radioOption = wrapper\n        .find(`[data-testid=\"input-job-${ field }\"]`)\n        .find('label');\n\n      radioOption.trigger('click');\n\n      expect(wrapper.emitted('input')).toHaveLength(1);\n    });\n  });\n\n  describe.each([\n    [WORKLOAD_TYPES.JOB, []],\n    [WORKLOAD_TYPES.CRON_JOB, ['startingDeadlineSeconds', 'termination']],\n  ])('given workload type %p', (type, extraFields) => {\n    it.each([\n      ...extraFields,\n      'completions',\n      'parallelism',\n      'backoffLimit',\n      'activeDeadlineSeconds',\n    ])('should emit an update on %p input and blur', (field) => {\n      const wrapper = mount(Job, {\n        propsData: {\n          mode: _EDIT,\n          type\n        }\n      });\n      const input = wrapper.find(`[data-testid=\"input-job-${ field }\"]`).find('input');\n      const newValue = 123;\n\n      input.setValue(newValue);\n      input.trigger('blur');\n\n      expect(wrapper.emitted('input')).toHaveLength(1);\n    });\n  });\n});\n"]}]}