{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js??ref--17-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/settings.ts","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/settings.ts","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js","mtime":1716430466133}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgTUFOQUdFTUVOVCB9IGZyb20gJ0BzaGVsbC9jb25maWcvdHlwZXMnOwppbXBvcnQgeyBERUZBVUxUX1BFUkZfU0VUVElORywgU0VUVElORyB9IGZyb20gJ0BzaGVsbC9jb25maWcvc2V0dGluZ3MnOwpleHBvcnQgY29uc3QgZmV0Y2hPckNyZWF0ZVNldHRpbmcgPSBhc3luYyAoc3RvcmUsIGlkLCB2YWwsIHNhdmUgPSB0cnVlKSA9PiB7CiAgICBsZXQgc2V0dGluZzsKICAgIHRyeSB7CiAgICAgICAgc2V0dGluZyA9IGF3YWl0IHN0b3JlLmRpc3BhdGNoKCdtYW5hZ2VtZW50L2ZpbmQnLCB7IHR5cGU6IE1BTkFHRU1FTlQuU0VUVElORywgaWQgfSk7CiAgICB9CiAgICBjYXRjaCAoX2EpIHsKICAgICAgICBjb25zdCBzY2hlbWEgPSBzdG9yZS5nZXR0ZXJzWydtYW5hZ2VtZW50L3NjaGVtYUZvciddKE1BTkFHRU1FTlQuU0VUVElORyk7CiAgICAgICAgY29uc3QgdXJsID0gc2NoZW1hLmxpbmtGb3IoJ2NvbGxlY3Rpb24nKTsKICAgICAgICBzZXR0aW5nID0gYXdhaXQgc3RvcmUuZGlzcGF0Y2goJ21hbmFnZW1lbnQvY3JlYXRlJywgewogICAgICAgICAgICB0eXBlOiBNQU5BR0VNRU5ULlNFVFRJTkcsIG1ldGFkYXRhOiB7IG5hbWU6IGlkIH0sIHZhbHVlOiB2YWwsIGRlZmF1bHQ6IHZhbCB8fCAnJwogICAgICAgIH0pOwogICAgICAgIGlmIChzYXZlKSB7CiAgICAgICAgICAgIGF3YWl0IHNldHRpbmcuc2F2ZSh7IHVybCB9KTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gc2V0dGluZzsKfTsKLyoqCiAgKiBGZXRjaCBhIHNwZWNpZmljIHNldHRpbmcgdGhhdCBtaWdodCBub3QgZXhpc3QKICAqIFdlIGZldGNoIGFsbCBzZXR0aW5ncyAtIHJlYWxpdHkgaXMgUmFuY2hlciB3aWxsIGhhdmUgZG9uZSB0aGlzIGFscmVhZHksIHNvIHRoZXJlJ3Mgbm8gb3ZlcmhlYWQgaW4gZG9pbmcKICAqIHRoaXMgLSBidXQgaWYgd2UgZmV0Y2ggYSBzcGVjaWZpYyBzZXR0aW5nIHRoYXQgZG9lcyBub3QgZXhpc3QsIHdlIHdpbGwgZ2V0IGEgNDA0LCB3aGljaCB3ZSBkb24ndCB3YW50CiAgKi8KZXhwb3J0IGNvbnN0IGZldGNoU2V0dGluZyA9IGFzeW5jIChzdG9yZSwgaWQpID0+IHsKICAgIGNvbnN0IGFsbCA9IGF3YWl0IHN0b3JlLmRpc3BhdGNoKCdtYW5hZ2VtZW50L2ZpbmRBbGwnLCB7IHR5cGU6IE1BTkFHRU1FTlQuU0VUVElORyB9KTsKICAgIGNvbnN0IHNldHRpbmcgPSAoYWxsIHx8IFtdKS5maW5kKChzZXR0aW5nKSA9PiBzZXR0aW5nLmlkID09PSBpZCk7CiAgICByZXR1cm4gc2V0dGluZzsKfTsKZXhwb3J0IGNvbnN0IHNldFNldHRpbmcgPSBhc3luYyAoc3RvcmUsIGlkLCB2YWwpID0+IHsKICAgIGNvbnN0IHNldHRpbmcgPSBhd2FpdCBmZXRjaE9yQ3JlYXRlU2V0dGluZyhzdG9yZSwgaWQsIHZhbCwgZmFsc2UpOwogICAgc2V0dGluZy52YWx1ZSA9IHZhbDsKICAgIGF3YWl0IHNldHRpbmcuc2F2ZSgpOwogICAgcmV0dXJuIHNldHRpbmc7Cn07CmV4cG9ydCBjb25zdCBnZXRQZXJmb3JtYW5jZVNldHRpbmcgPSAocm9vdEdldHRlcnMpID0+IHsKICAgIGNvbnN0IHBlcmZTZXR0aW5nUmVzb3VyY2UgPSByb290R2V0dGVyc1snbWFuYWdlbWVudC9ieUlkJ10oTUFOQUdFTUVOVC5TRVRUSU5HLCBTRVRUSU5HLlVJX1BFUkZPUk1BTkNFKTsKICAgIGxldCBwZXJmU2V0dGluZyA9IHt9OwogICAgaWYgKHBlcmZTZXR0aW5nUmVzb3VyY2UgPT09IG51bGwgfHwgcGVyZlNldHRpbmdSZXNvdXJjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGVyZlNldHRpbmdSZXNvdXJjZS52YWx1ZSkgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIHBlcmZTZXR0aW5nID0gSlNPTi5wYXJzZShwZXJmU2V0dGluZ1Jlc291cmNlLnZhbHVlKTsKICAgICAgICB9CiAgICAgICAgY2F0Y2ggKGUpIHsKICAgICAgICAgICAgY29uc29sZS53YXJuKCd1aS1wZXJmb3JtYW5jZSBzZXR0aW5nIGNvbnRhaW5zIGludmFsaWQgZGF0YScpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGUKICAgICAgICB9CiAgICB9CiAgICAvLyBTdGFydCB3aXRoIHRoZSBkZWZhdWx0IGFuZCBvdmVyd3JpdGUgdGhlIHZhbHVlcyBmcm9tIHRoZSBzZXR0aW5nIC0gZW5zdXJlcyB3ZSBoYXZlIGRlZmF1bHRzIGZvciBuZXdseSBhZGRlZCBvcHRpb25zCiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihERUZBVUxUX1BFUkZfU0VUVElORywgcGVyZlNldHRpbmcgfHwge30pOwp9Owo="},{"version":3,"file":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/settings.ts","sourceRoot":"","sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/settings.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAC;AAEjD,OAAO,EAAE,oBAAoB,EAAgB,OAAO,EAAE,MAAM,wBAAwB,CAAC;AAErF,MAAM,CAAC,MAAM,oBAAoB,GAAG,KAAK,EAAC,KAAiB,EAAE,EAAU,EAAE,GAAW,EAAE,IAAI,GAAG,IAAI,EAAgB,EAAE;IACjH,IAAI,OAAO,CAAC;IAEZ,IAAI;QACF,OAAO,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,iBAAiB,EAAE,EAAE,IAAI,EAAE,UAAU,CAAC,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC;KACrF;IAAC,WAAM;QACN,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACzE,MAAM,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAEzC,OAAO,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,mBAAmB,EAAE;YAClD,IAAI,EAAE,UAAU,CAAC,OAAO,EAAE,QAAQ,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,IAAI,EAAE;SACjF,CAAC,CAAC;QACH,IAAK,IAAI,EAAG;YACV,MAAM,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;SAC7B;KACF;IAED,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF;;;;IAII;AACJ,MAAM,CAAC,MAAM,YAAY,GAAG,KAAK,EAAC,KAAiB,EAAE,EAAU,EAAgB,EAAE;IAC/E,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,oBAAoB,EAAE,EAAE,IAAI,EAAE,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC;IACrF,MAAM,OAAO,GAAG,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,OAAY,EAAE,EAAE,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;IAEtE,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAAG,KAAK,EAAC,KAAiB,EAAE,EAAU,EAAE,GAAW,EAAgB,EAAE;IAC1F,MAAM,OAAO,GAAG,MAAM,oBAAoB,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;IAElE,OAAO,CAAC,KAAK,GAAG,GAAG,CAAC;IACpB,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;IAErB,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,WAAgE,EAAgB,EAAE;IACtH,MAAM,mBAAmB,GAAG,WAAW,CAAC,iBAAiB,CAAC,CAAC,UAAU,CAAC,OAAO,EAAE,OAAO,CAAC,cAAc,CAAC,CAAC;IACvG,IAAI,WAAW,GAAG,EAAE,CAAC;IAErB,IAAI,mBAAmB,aAAnB,mBAAmB,uBAAnB,mBAAmB,CAAE,KAAK,EAAE;QAC9B,IAAI;YACF,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;SACrD;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,IAAI,CAAC,8CAA8C,CAAC,CAAC,CAAC,iCAAiC;SAChG;KACF;IAED,sHAAsH;IACtH,OAAO,MAAM,CAAC,MAAM,CAAC,oBAAoB,EAAE,WAAW,IAAI,EAAE,CAAC,CAAC;AAChE,CAAC,CAAC","sourcesContent":["import { MANAGEMENT } from '@shell/config/types';\nimport { Store } from 'vuex';\nimport { DEFAULT_PERF_SETTING, PerfSettings, SETTING } from '@shell/config/settings';\n\nexport const fetchOrCreateSetting = async(store: Store<any>, id: string, val: string, save = true): Promise<any> => {\n  let setting;\n\n  try {\n    setting = await store.dispatch('management/find', { type: MANAGEMENT.SETTING, id });\n  } catch {\n    const schema = store.getters['management/schemaFor'](MANAGEMENT.SETTING);\n    const url = schema.linkFor('collection');\n\n    setting = await store.dispatch('management/create', {\n      type: MANAGEMENT.SETTING, metadata: { name: id }, value: val, default: val || ''\n    });\n    if ( save ) {\n      await setting.save({ url });\n    }\n  }\n\n  return setting;\n};\n\n/**\n  * Fetch a specific setting that might not exist\n  * We fetch all settings - reality is Rancher will have done this already, so there's no overhead in doing\n  * this - but if we fetch a specific setting that does not exist, we will get a 404, which we don't want\n  */\nexport const fetchSetting = async(store: Store<any>, id: string): Promise<any> => {\n  const all = await store.dispatch('management/findAll', { type: MANAGEMENT.SETTING });\n  const setting = (all || []).find((setting: any) => setting.id === id);\n\n  return setting;\n};\n\nexport const setSetting = async(store: Store<any>, id: string, val: string): Promise<any> => {\n  const setting = await fetchOrCreateSetting(store, id, val, false);\n\n  setting.value = val;\n  await setting.save();\n\n  return setting;\n};\n\nexport const getPerformanceSetting = (rootGetters: Record<string, (arg0: string, arg1: string) => any>): PerfSettings => {\n  const perfSettingResource = rootGetters['management/byId'](MANAGEMENT.SETTING, SETTING.UI_PERFORMANCE);\n  let perfSetting = {};\n\n  if (perfSettingResource?.value) {\n    try {\n      perfSetting = JSON.parse(perfSettingResource.value);\n    } catch (e) {\n      console.warn('ui-performance setting contains invalid data'); // eslint-disable-line no-console\n    }\n  }\n\n  // Start with the default and overwrite the values from the setting - ensures we have defaults for newly added options\n  return Object.assign(DEFAULT_PERF_SETTING, perfSetting || {});\n};\n"]}]}