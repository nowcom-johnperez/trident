{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js??ref--17-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/core/types.ts","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/core/types.ts","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js","mtime":1716430466133}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8gQ2x1c3RlciBQcm92aXNpb25pbmcgdHlwZXMKZXhwb3J0ICogZnJvbSAnLi90eXBlcy1wcm92aXNpb25pbmcnOwovKiogRW51bSByZWdhcmRpbmcgdGhlIGV4dGVuc2lvbmFibGUgYXJlYXMvcGxhY2VzIG9mIHRoZSBVSSAqLwpleHBvcnQgdmFyIEV4dGVuc2lvblBvaW50OwooZnVuY3Rpb24gKEV4dGVuc2lvblBvaW50KSB7CiAgICBFeHRlbnNpb25Qb2ludFsiQUNUSU9OIl0gPSAiQWN0aW9uIjsKICAgIEV4dGVuc2lvblBvaW50WyJUQUIiXSA9ICJUYWIiOwogICAgRXh0ZW5zaW9uUG9pbnRbIlBBTkVMIl0gPSAiUGFuZWwiOwogICAgRXh0ZW5zaW9uUG9pbnRbIkNBUkQiXSA9ICJDYXJkIjsKICAgIEV4dGVuc2lvblBvaW50WyJUQUJMRV9DT0wiXSA9ICJUYWJsZUNvbHVtbiI7Cn0pKEV4dGVuc2lvblBvaW50IHx8IChFeHRlbnNpb25Qb2ludCA9IHt9KSk7Ci8qKiBFbnVtIHJlZ2FyZGluZyBhY3Rpb24gbG9jYXRpb25zIHRoYXQgYXJlIGV4dGVuc2lvbmFibGUgaW4gdGhlIFVJICovCmV4cG9ydCB2YXIgQWN0aW9uTG9jYXRpb247CihmdW5jdGlvbiAoQWN0aW9uTG9jYXRpb24pIHsKICAgIEFjdGlvbkxvY2F0aW9uWyJIRUFERVIiXSA9ICJoZWFkZXItYWN0aW9uIjsKICAgIEFjdGlvbkxvY2F0aW9uWyJUQUJMRSJdID0gInRhYmxlLWFjdGlvbiI7Cn0pKEFjdGlvbkxvY2F0aW9uIHx8IChBY3Rpb25Mb2NhdGlvbiA9IHt9KSk7Ci8qKiBFbnVtIHJlZ2FyZGluZyBwYW5lbCBsb2NhdGlvbnMgdGhhdCBhcmUgZXh0ZW5zaW9uYWJsZSBpbiB0aGUgVUkgKi8KZXhwb3J0IHZhciBQYW5lbExvY2F0aW9uOwooZnVuY3Rpb24gKFBhbmVsTG9jYXRpb24pIHsKICAgIFBhbmVsTG9jYXRpb25bIkRFVEFJTFNfTUFTVEhFQUQiXSA9ICJkZXRhaWxzLW1hc3RoZWFkIjsKICAgIFBhbmVsTG9jYXRpb25bIkRFVEFJTF9UT1AiXSA9ICJkZXRhaWwtdG9wIjsKICAgIFBhbmVsTG9jYXRpb25bIlJFU09VUkNFX0xJU1QiXSA9ICJyZXNvdXJjZS1saXN0IjsKfSkoUGFuZWxMb2NhdGlvbiB8fCAoUGFuZWxMb2NhdGlvbiA9IHt9KSk7Ci8qKiBFbnVtIHJlZ2FyZGluZyB0YWIgbG9jYXRpb25zIHRoYXQgYXJlIGV4dGVuc2lvbmFibGUgaW4gdGhlIFVJICovCmV4cG9ydCB2YXIgVGFiTG9jYXRpb247CihmdW5jdGlvbiAoVGFiTG9jYXRpb24pIHsKICAgIFRhYkxvY2F0aW9uWyJSRVNPVVJDRV9ERVRBSUwiXSA9ICJ0YWIiOwogICAgVGFiTG9jYXRpb25bIkNMVVNURVJfQ1JFQVRFX1JLRTIiXSA9ICJjbHVzdGVyLWNyZWF0ZS1ya2UyIjsKfSkoVGFiTG9jYXRpb24gfHwgKFRhYkxvY2F0aW9uID0ge30pKTsKLyoqIEVudW0gcmVnYXJkaW5nIGNhcmQgbG9jYXRpb25zIHRoYXQgYXJlIGV4dGVuc2lvbmFibGUgaW4gdGhlIFVJICovCmV4cG9ydCB2YXIgQ2FyZExvY2F0aW9uOwooZnVuY3Rpb24gKENhcmRMb2NhdGlvbikgewogICAgQ2FyZExvY2F0aW9uWyJDTFVTVEVSX0RBU0hCT0FSRF9DQVJEIl0gPSAiY2x1c3Rlci1kYXNoYm9hcmQtY2FyZCI7Cn0pKENhcmRMb2NhdGlvbiB8fCAoQ2FyZExvY2F0aW9uID0ge30pKTsKLyoqIEVudW0gcmVnYXJkaW5nIHRhYmxlIGNvbCBsb2NhdGlvbnMgdGhhdCBhcmUgZXh0ZW5zaW9uYWJsZSBpbiB0aGUgVUkgKi8KZXhwb3J0IHZhciBUYWJsZUNvbHVtbkxvY2F0aW9uOwooZnVuY3Rpb24gKFRhYmxlQ29sdW1uTG9jYXRpb24pIHsKICAgIFRhYmxlQ29sdW1uTG9jYXRpb25bIlJFU09VUkNFIl0gPSAicmVzb3VyY2UtbGlzdCI7Cn0pKFRhYmxlQ29sdW1uTG9jYXRpb24gfHwgKFRhYmxlQ29sdW1uTG9jYXRpb24gPSB7fSkpOwo="},{"version":3,"file":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/core/types.ts","sourceRoot":"","sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/core/types.ts"],"names":[],"mappings":"AAGA,6BAA6B;AAC7B,cAAc,sBAAsB,CAAC;AAsCrC,8DAA8D;AAC9D,MAAM,CAAN,IAAY,cAMX;AAND,WAAY,cAAc;IACxB,mCAAiB,CAAA;IACjB,6BAAW,CAAA;IACX,iCAAe,CAAA;IACf,+BAAa,CAAA;IACb,2CAAyB,CAAA;AAC3B,CAAC,EANW,cAAc,KAAd,cAAc,QAMzB;AAED,uEAAuE;AACvE,MAAM,CAAN,IAAY,cAGX;AAHD,WAAY,cAAc;IACxB,0CAAwB,CAAA;IACxB,wCAAsB,CAAA;AACxB,CAAC,EAHW,cAAc,KAAd,cAAc,QAGzB;AAED,sEAAsE;AACtE,MAAM,CAAN,IAAY,aAIX;AAJD,WAAY,aAAa;IACvB,sDAAqC,CAAA;IACrC,0CAAyB,CAAA;IACzB,gDAA+B,CAAA;AACjC,CAAC,EAJW,aAAa,KAAb,aAAa,QAIxB;AAED,oEAAoE;AACpE,MAAM,CAAN,IAAY,WAGX;AAHD,WAAY,WAAW;IACrB,sCAAuB,CAAA;IACvB,0DAA2C,CAAA;AAC7C,CAAC,EAHW,WAAW,KAAX,WAAW,QAGtB;AAED,qEAAqE;AACrE,MAAM,CAAN,IAAY,YAEX;AAFD,WAAY,YAAY;IACtB,iEAAiD,CAAA;AACnD,CAAC,EAFW,YAAY,KAAZ,YAAY,QAEvB;AAED,0EAA0E;AAC1E,MAAM,CAAN,IAAY,mBAEX;AAFD,WAAY,mBAAmB;IAC7B,iDAA0B,CAAA;AAC5B,CAAC,EAFW,mBAAmB,KAAnB,mBAAmB,QAE9B","sourcesContent":["import { ProductFunction } from './plugin';\nimport { RouteConfig, Location } from 'vue-router';\n\n// Cluster Provisioning types\nexport * from './types-provisioning';\n\n// package.json metadata\nexport interface PackageMetadata {\n  name: string;\n  version: string;\n  description: string;\n  icon: string;\n}\n\n// export interface Route {\n//   name: string;\n//   path: string;\n//   component: Object | Function,\n//   children: Route[];\n// }\n\nexport type VuexStoreObject = { [key: string]: any }\nexport type CoreStoreSpecifics = { state: () => VuexStoreObject, getters: VuexStoreObject, mutations: VuexStoreObject, actions: VuexStoreObject }\nexport type CoreStoreConfig = { namespace: string, baseUrl?: string, modelBaseClass?: string, supportsStream?: boolean, isClusterStore?: boolean }\nexport type CoreStoreInit = (store: any, ctx: any) => void;\nexport type RegisterStore = () => (store: any) => void\nexport type UnregisterStore = (store: any) => void\n\nexport type PluginRouteConfig = {parent?: string, route: RouteConfig}\n\nexport type OnEnterLeavePackageConfig = {\n  clusterId: string,\n  product: string,\n  oldProduct: string,\n  isExt: string,\n  oldIsExt: string\n}\n\nexport type OnNavToPackage = (store: any, config: OnEnterLeavePackageConfig) => Promise<void>;\nexport type OnNavAwayFromPackage = (store: any, config: OnEnterLeavePackageConfig) => Promise<void>;\nexport type OnLogOut = (store: any) => Promise<void>;\n\n/** Enum regarding the extensionable areas/places of the UI */\nexport enum ExtensionPoint {\n  ACTION = 'Action', // eslint-disable-line no-unused-vars\n  TAB = 'Tab', // eslint-disable-line no-unused-vars\n  PANEL = 'Panel', // eslint-disable-line no-unused-vars\n  CARD = 'Card', // eslint-disable-line no-unused-vars\n  TABLE_COL = 'TableColumn', // eslint-disable-line no-unused-vars\n}\n\n/** Enum regarding action locations that are extensionable in the UI */\nexport enum ActionLocation {\n  HEADER = 'header-action', // eslint-disable-line no-unused-vars\n  TABLE = 'table-action', // eslint-disable-line no-unused-vars\n}\n\n/** Enum regarding panel locations that are extensionable in the UI */\nexport enum PanelLocation {\n  DETAILS_MASTHEAD = 'details-masthead', // eslint-disable-line no-unused-vars\n  DETAIL_TOP = 'detail-top', // eslint-disable-line no-unused-vars\n  RESOURCE_LIST = 'resource-list', // eslint-disable-line no-unused-vars\n}\n\n/** Enum regarding tab locations that are extensionable in the UI */\nexport enum TabLocation {\n  RESOURCE_DETAIL = 'tab', // eslint-disable-line no-unused-vars\n  CLUSTER_CREATE_RKE2 = 'cluster-create-rke2', // eslint-disable-line no-unused-vars\n}\n\n/** Enum regarding card locations that are extensionable in the UI */\nexport enum CardLocation {\n  CLUSTER_DASHBOARD_CARD = 'cluster-dashboard-card', // eslint-disable-line no-unused-vars\n}\n\n/** Enum regarding table col locations that are extensionable in the UI */\nexport enum TableColumnLocation {\n  RESOURCE = 'resource-list', // eslint-disable-line no-unused-vars\n}\n\n/** Definition of the shortcut object (keyboard shortcuts) */\nexport type ShortCutKey = {\n  windows?: string[];\n  mac?: string[];\n};\n\n/** Definition of the action options (table actions) */\nexport type ActionOpts = {\n  event: any;\n  isAlt: boolean;\n  action: any;\n};\n\n/** Definition of an extension action (options that can be passed when setting an extension action) */\nexport type Action = {\n  label?: string;\n  labelKey?: string;\n  tooltipKey?: string;\n  tooltip?: string;\n  shortcut?: string | ShortCutKey;\n  svg?: Function;\n  icon?: string;\n  multiple?: boolean;\n  enabled?: Function | boolean;\n  invoke: (opts: ActionOpts, resources: any[], globals?: any) => void | boolean | Promise<boolean>;\n};\n\n/** Definition of a panel (options that can be passed when defining an extension panel enhancement) */\nexport type Panel = {\n  component: Function;\n};\n\n/** Definition of a card (options that can be passed when defining an extension card enhancement) */\nexport type Card = {\n  label?: string;\n  labelKey?: string;\n  component: Function;\n};\n\nexport type TableColumn = any;\n\n/** Definition of a tab (options that can be passed when defining an extension tab enhancement) */\nexport type Tab = {\n  name: string;\n  label?: string;\n  labelKey?: string;\n  tooltipKey?: string;\n  tooltip?: string;\n  showHeader?: boolean;\n  weight?: number;\n  component: Function;\n};\n\n/** Definition of the locationConfig object (used in extensions) */\nexport type LocationConfig = {\n  product?: string[],\n  resource?: string[],\n  namespace?: string[],\n  cluster?: string[],\n  id?: string[],\n  mode?: string[],\n  hash?: string[],\n  /**\n   * path match from URL (excludes host address)\n   */\n  path?: { [key: string]: string | boolean}[],\n  /**\n   * Query Params from URL\n   */\n  queryParam?: { [key: string]: string},\n  /**\n   * Context specific params.\n   *\n   * Components can provide additional context specific params that this value must match\n   */\n  context?: { [key: string]: string},\n};\n\nexport interface ProductOptions {\n  /**\n   * The category this product belongs under. i.e. 'config'\n   */\n  category?: string;\n\n  /**\n   * Hide the Copy KubeConfig button in the header\n   */\n  hideCopyConfig?: boolean;\n\n  /**\n   * Hide the Download KubeConfig button in the header\n   */\n  hideKubeConfig?: boolean;\n\n  /**\n   * Hide the Kubectl Shell button in the header\n   */\n  hideKubeShell?: boolean;\n\n  /**\n   * Hide the Namespace location\n   */\n  hideNamespaceLocation?: boolean;\n\n  /**\n   * Hide the system resources\n   */\n\n  hideSystemResources?: boolean;\n  /**\n   * The icon that should be displayed beside this item in the navigation.\n   */\n  icon?: string,\n\n  /**\n   * Only load the product if the feature is present\n   */\n  ifFeature?: string | RegExp;\n\n  /**\n   * Only load the product if the type is present\n   */\n  ifHave?: string;\n\n  /**\n   * Only load the product if the group is present\n   */\n  ifHaveGroup?: string | RegExp;\n\n  /**\n   * Only load the product if the type is present\n   */\n  ifHaveType?: string | RegExp;\n\n  /**\n   * The vuex store that this product should use by default i.e. 'management'\n   */\n  inStore?: string;\n\n  /**\n   * Show the cluster switcher in the navigation\n   */\n  showClusterSwitcher?: boolean;\n\n  /**\n   * Show the namespace filter in the header\n   */\n  showNamespaceFilter?: boolean;\n\n  /**\n   * A number used to determine where in navigation this item will be placed. The highest number will be at the top of the list.\n   */\n  weight?: number;\n\n  /**\n   * The route that the product will lead to if click on in navigation.\n   */\n  to?: Location;\n\n  /**\n   * Leaving these here for completeness but I don't think these should be advertised as useable to plugin creators.\n   */\n  // ifHaveVerb: string | RegExp;\n  // removable: string;\n  // showWorkspaceSwitcher: boolean;\n  // supportRoute: string;\n  // typeStoreMap: string;\n}\n\nexport interface HeaderOptions {\n  /**\n   * Name of the header. This should be unique.\n   */\n  name?: string;\n\n  /**\n   * A string that will show in the table column as a header\n   */\n  label?: string;\n\n  /**\n   * A translation key where the resulting string will show in the table column as a header\n   */\n  labelKey?: string;\n\n  /**\n   * A string which represents the path to access the value from the row object i.e. `row.meta.value`.\n   */\n  value?: string;\n\n  /**\n   * A string which represents the path to access the value from the row object which we'll use to sort i.e. `row.meta.value`\n   */\n  sort?: string | string[];\n\n  /**\n   * A string which represents the path to access the value from the row object which we'll use to search i.e. `row.meta.value`.\n   * It can be false to disable searching on this field\n   */\n  search?: string | boolean;\n\n  /**\n   * Number of pixels the column should be in the table\n   */\n  width?: number;\n\n  /**\n   * The name of a custom formatter. The available formatters can bee seen in `@rancher/shell/components/formatter`\n   */\n  formatter?: string;\n\n  /**\n   * These options are dependent on the formatter that's chosen. Examples can be seen in `@rancher/shell/components/formatter` and `@rancher/shell/config/table-headers`\n   */\n  formatterOpts?: any;\n\n  /**\n   * Provide a function which accets a row and returns the value that should be displayed in the column\n   * @param row This can be any value which represents the row\n   * @returns Can return {@link string | number | null | undefined} to display in the column\n   */\n  getValue?: (row: any) => string | number | null | undefined;\n}\n\nexport interface ConfigureTypeOptions {\n  /**\n   * The resource can edit/show yaml\n   */\n  canYaml?: boolean;\n\n  /**\n   * Modify the way the name looks when displayed\n   */\n  displayName?: string;\n\n  /**\n   * New resources can be created of this type\n   */\n  isCreatable?: boolean;\n\n  /**\n   * Resources of this type can be deleted/removed\n   */\n  isRemovable?: boolean;\n\n  /**\n   * This type should be grouped by namespaces when displayed in a table\n   */\n  namespaced?: boolean;\n\n  /**\n   * Show the age column in when displaying this type in a table\n   */\n  showAge?: boolean;\n\n   /**\n   * Show the masthead at the top of the list view of this type\n   */\n  showListMasthead?: boolean;\n\n   /**\n   * Show the state column in when displaying this type in a table\n   */\n  showState?: boolean;\n\n  /**\n   * Leaving these here for completeness but I don't think these should be advertised as useable to plugin creators.\n   */\n  // alias\n  // customRoute\n  // customRoute\n  // depaginate\n  // graphConfig\n  // hasGraph\n  // isEditable\n  // limit\n  // listGroups\n  // localOnly\n  // location\n  // match\n  // realResource\n  // resource\n  // resourceDetail\n  // resourceEdit\n  // showConfigView\n}\n\nexport interface ConfigureVirtualTypeOptions extends ConfigureTypeOptions {\n  /**\n   * The translation key displayed anywhere this type is referenced\n   */\n  labelKey: string;\n\n  /**\n   * An identifier that should be unique across all types\n   */\n  name: string;\n\n  /**\n   * The route that this type should correspond to {@link PluginRouteConfig} {@link RouteConfig}\n   */\n  route: PluginRouteConfig | RouteConfig;\n}\n\nexport interface DSLReturnType {\n  /**\n   * Register multiple types by name and place them all in a group if desired. Primarily used for grouping things in the cluster explorer navigation.\n   * @param types A list of types that are going to be registered\n   * @param group Conditionally a group you want to places all the types in\n   * @returns {@link void}\n   */\n  basicType: (types: string[], group?: string) => void;\n\n  /**\n   * Configure a myriad of options for the specified type\n   * @param type The type to be configured\n   * @param options {@link ConfigureTypeOptions}\n   * @returns {@link void}\n   */\n  configureType: (type: string, options: ConfigureTypeOptions) => void;\n\n  /**\n   * Register the headers/columns that should be used when rendering a table for the specified type.\n   * @param type The type you'd like to register headers/columns for.\n   * @param headers {@link HeaderOptions[]}\n   * @returns {@link void}\n   */\n  headers: (type: string, headers: HeaderOptions[]) => void;\n\n  /**\n   * Create and register a new product\n   * @param options {@link ProductOptions}\n   * @returns {@link void}\n   */\n  product: (options: ProductOptions) => void;\n\n  /**\n   * Create and label a group. The group will show up in navigation\n   * @param groupNane Name of the group\n   * @param label Label in navigation\n   * @returns {@link void}\n   */\n  mapGroup: (groupName: string, label: string) => void;\n\n  /**\n   * Create and configure a myriad of options for a type\n   * @param options {@link ConfigureVirtualTypeOptions}\n   * @returns {@link void}\n   */\n  virtualType: (options: ConfigureVirtualTypeOptions) => void;\n\n  /**\n   * Leaving these here for completeness but I don't think these should be advertised as useable to plugin creators.\n   */\n  // componentForType: (type: string, replacementType: string)\n  // groupBy: (type: string, field: string)\n  // hideBulkActions: (type: string, field)\n  // ignoreGroup: (regexOrString)\n  // ignoreType: (regexOrString)\n  //\n  // mapType: (match, replace)\n  // moveType: (match, group)\n  // setGroupDefaultType: (input, defaultType)\n  // spoofedType: (obj)\n  // weightGroup: (input, weight, forBasic)\n  // weightType: (input, weight, forBasic)\n}\n\n/**\n * Interface for a Dashboard plugin\n */\nexport interface IPlugin {\n  /**\n   * Add a product\n   * @param importFn Function that will import the module containing a product definition\n   */\n  addProduct(importFn: ProductFunction): void;\n\n  /**\n   * Add a locale to the i18n store\n   * @param locale Locale id (e.g. en-us)\n   * @param label Label for the locale to be displayed in the i18n chooser\n   */\n  addLocale(locale: string, label: string): void;\n\n  /**\n   * Plugin metadata\n   */\n  metadata: PackageMetadata;\n\n  /**\n   * Validators used in the same manner as shell/utils/custom-validators\n   */\n  validators: {[key: string]: Function};\n\n  /**\n   * Add a module containing localisations for a specific locale\n   */\n  addL10n(locale: string, fn: Function): void;\n\n  /**\n   * Add a route to the Vue Router\n   */\n  addRoute(route: RouteConfig): void;\n  addRoute(parent: string, route: RouteConfig): void;\n\n  /**\n   * Adds an action/button to the UI\n   */\n  addAction(where: ActionLocation | string, when: LocationConfig | string, action: Action): void;\n\n  /**\n   * Adds a tab to the UI (ResourceTabs component)\n   */\n  addTab(where: TabLocation | string, when: LocationConfig | string, action: Tab): void;\n\n  /**\n   * Adds a panel/component to the UI\n   */\n  addPanel(where: PanelLocation | string, when: LocationConfig | string, action: Panel): void;\n\n  /**\n   * Adds a card to the UI\n   */\n  addCard(where: CardLocation | string, when: LocationConfig | string, action: Card): void;\n\n  /**\n   * Adds a new column to the SortableTable component\n   */\n  addTableColumn(where: TableColumnLocation | string, when: LocationConfig | string, action: TableColumn): void;\n\n  /**\n   * Set the component to use for the landing home page\n   * @param component Home page component\n   */\n  setHomePage(component: any): void;\n\n  /**\n   * Add routes to the Vue Router\n   */\n  addRoutes(routes: PluginRouteConfig[] | RouteConfig[]): void;\n\n   /**\n    * Add a hook to be called when the plugin is uninstalled\n    * @param hook Function to call when the plugin is uninstalled\n    */\n  addUninstallHook(hook: Function): void;\n\n  /**\n   * Add a generic Vuex Store\n   */\n  addStore(storeName: string, register: RegisterStore, unregister: UnregisterStore): void;\n  /**\n   * Add a dashboard Vuex store.\n   *\n   * This will contain the toolset (getters/mutations/actions/etc) required by the dashboard to support Dashboard components. Most of these\n   * will be automatically supplemented when the store is registered, others though will need to be provided to supply package specific\n   * functionality (see storeSpecifics). For instance a component may request to fetch all of a resource type which, via a number of generic\n   * actions, will eventually call a `request` action which will make the raw http request. This is a pkg specific feature so needs the\n   * `request` action needs to be supplied in the `storeSpecifics`\n   */\n  addDashboardStore(storeName: string, storeSpecifics: CoreStoreSpecifics, config: CoreStoreConfig, init?: CoreStoreInit): void;\n\n  /**\n   * Add hooks that will execute when a user navigates\n   * - to a route owned by this package\n   * - from a route owned by this package\n   */\n  addNavHooks(\n    onEnter?: OnNavToPackage,\n    onLeave?: OnNavAwayFromPackage,\n    onLogOut?: OnLogOut\n  ): void;\n\n  /**\n   * Register 'something' that can be dynamically loaded - e.g. model, edit, create, list, i18n\n   * @param {String} type type of thing to register, e.g. 'edit'\n   * @param {String} name unique name of 'something'\n   * @param {Function} fn function that dynamically loads the module for the thing being registered\n   */\n  register(type: string, name: string, fn: Function | Boolean): void;\n\n  /**\n   * Will return all of the configuration functions used for creating a new product.\n   * @param store The store that was passed to the function that's passed to `plugin.addProduct(function)`\n   * @param productName The name of the new product. This name is displayed in the navigation.\n   */\n  DSL(store: any, productName: string): DSLReturnType;\n}\n\n// Internal interface\n// Built-in extensions may use this, but external extensions should not, as this is subject to change\n// Defined as any for now\nexport type IInternal = any;\n"]}]}