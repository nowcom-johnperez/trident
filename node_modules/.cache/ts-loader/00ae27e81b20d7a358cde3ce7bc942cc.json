{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js??ref--17-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/models/__tests__/management.cattle.io.node.ts","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/models/__tests__/management.cattle.io.node.ts","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js","mtime":1716430466133}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IE1nbXROb2RlIGZyb20gJ0BzaGVsbC9tb2RlbHMvbWFuYWdlbWVudC5jYXR0bGUuaW8ubm9kZSc7CmRlc2NyaWJlKCdjbGFzcyBNZ210Tm9kZScsICgpID0+IHsKICAgIGNvbnN0IGZvbyA9ICdmb28nOwogICAgY29uc3QgYmFyID0gJ2Jhcic7CiAgICBjb25zdCB0ID0gamVzdC5mbigoKSA9PiBiYXIpOwogICAgY29uc3QgY3R4ID0geyByb290R2V0dGVyczogeyAnaTE4bi90JzogdCB9IH07CiAgICBjb25zdCByZXNldE1vY2tzID0gKCkgPT4gewogICAgICAgIC8vIENsZWFyIGFsbCBtb2NrIGZ1bmN0aW9uIGNhbGxzOgogICAgICAgIGplc3QuY2xlYXJBbGxNb2NrcygpOwogICAgfTsKICAgIGl0KCdzaG91bGQgbm90IHJldHVybiBhZGRyZXNzZXMgaWYgdGhleSBhcmUgbm90IHByZXNlbnQgaW4gdGhlIHJlc291cmNlIHN0YXR1cywgdGhlIGludGVybmFsTm9kZVN0YXR1cywgb3IgdGhlIHJrZU5vZGUga2V5IGluIHN0YXR1cycsICgpID0+IHsKICAgICAgICBjb25zdCBtZ210Tm9kZSA9IG5ldyBNZ210Tm9kZSh7IHN0YXR1czoge30gfSk7CiAgICAgICAgZXhwZWN0KG1nbXROb2RlLmFkZHJlc3NlcykudG9TdHJpY3RFcXVhbChbXSk7CiAgICAgICAgcmVzZXRNb2NrcygpOwogICAgfSk7CiAgICBkZXNjcmliZSgnc2hvdWxkIHJldHVybiBhZGRyZXNzZXMnLCAoKSA9PiB7CiAgICAgICAgY29uc3QgYWRkcmVzc2VzID0gW2Zvb107CiAgICAgICAgaXQoJ2lmIHRoZXkgYXJlIHByZXNlbnQgZGlyZWN0bHkgb24gdGhlIHJlc291cmNlIHN0YXR1cycsICgpID0+IHsKICAgICAgICAgICAgY29uc3QgbWdtdE5vZGUgPSBuZXcgTWdtdE5vZGUoeyBzdGF0dXM6IHsgYWRkcmVzc2VzIH0gfSk7CiAgICAgICAgICAgIGV4cGVjdChtZ210Tm9kZS5hZGRyZXNzZXMpLnRvU3RyaWN0RXF1YWwoYWRkcmVzc2VzKTsKICAgICAgICB9KTsKICAgICAgICBpdCgnaWYgdGhleSBhcmUgbm90IHByZXNlbnQgZGlyZWN0bHkgb24gdGhlIHJlc291cmNlIHN0YXR1cyBidXQgYXJlIG9uICJzdGF0dXMuaW50ZXJuYWxOb2RlU3RhdHVzIicsICgpID0+IHsKICAgICAgICAgICAgY29uc3QgbWdtdE5vZGUgPSBuZXcgTWdtdE5vZGUoeyBzdGF0dXM6IHsgaW50ZXJuYWxOb2RlU3RhdHVzOiB7IGFkZHJlc3NlcyB9IH0gfSk7CiAgICAgICAgICAgIGV4cGVjdChtZ210Tm9kZS5hZGRyZXNzZXMpLnRvU3RyaWN0RXF1YWwoYWRkcmVzc2VzKTsKICAgICAgICB9KTsKICAgIH0pOwogICAgZGVzY3JpYmUoJ3Nob3VsZCByZXR1cm4gYW4gaW50ZXJuYWxJcCcsICgpID0+IHsKICAgICAgICBjb25zdCBhZGRyZXNzZXMgPSBbeyB0eXBlOiAnSW50ZXJuYWxJUCcsIGFkZHJlc3M6IGZvbyB9XTsKICAgICAgICBjb25zdCBpbnRlcm5hbEFkZHJlc3MgPSBmb287CiAgICAgICAgaXQoJ2lmIGFkZHJlc3NlcyBpbmNsdWRlcyBhbiBvYmplY3Qgd2l0aCBhbiBhcHByb3ByaWF0ZSB0eXBlIGFuZCBhZGRyZXNzJywgKCkgPT4gewogICAgICAgICAgICBjb25zdCBtZ210Tm9kZSA9IG5ldyBNZ210Tm9kZSh7IHN0YXR1czogeyBhZGRyZXNzZXMgfSB9KTsKICAgICAgICAgICAgZXhwZWN0KG1nbXROb2RlLmludGVybmFsSXApLnRvU3RyaWN0RXF1YWwoZm9vKTsKICAgICAgICB9KTsKICAgICAgICBpdCgnaWYgaW50ZXJuYWxOb2RlU3RhdHVzLmFkZHJlc3NlcyBpbmNsdWRlcyBhbiBvYmplY3Qgd2l0aCBhbiBhcHByb3ByaWF0ZSB0eXBlIGFuZCBhZGRyZXNzJywgKCkgPT4gewogICAgICAgICAgICBjb25zdCBtZ210Tm9kZSA9IG5ldyBNZ210Tm9kZSh7IHN0YXR1czogeyBpbnRlcm5hbE5vZGVTdGF0dXM6IHsgYWRkcmVzc2VzIH0gfSB9KTsKICAgICAgICAgICAgZXhwZWN0KG1nbXROb2RlLmludGVybmFsSXApLnRvU3RyaWN0RXF1YWwoZm9vKTsKICAgICAgICB9KTsKICAgICAgICBpdCgnaWYgYWRkcmVzc2VzIGFuZCBpbnRlcm5hbE5vZGVTdGF0dXMuYWRkcmVzc2VzIGRvIG5vdCBwcm92aWRlIGFuIGludGVybmFsIGlwIGFuZCB0aGUgc3RhdHVzIGluY2x1ZGVzIGFuIHJrZU5vZGUga2V5IHdpdGggYW4gYXBwcm9wcmlhdGUgdHlwZSBhbmQgYWRkcmVzcycsICgpID0+IHsKICAgICAgICAgICAgY29uc3QgbWdtdE5vZGUgPSBuZXcgTWdtdE5vZGUoeyBzdGF0dXM6IHsgcmtlTm9kZTogeyBpbnRlcm5hbEFkZHJlc3MgfSB9IH0pOwogICAgICAgICAgICBleHBlY3QobWdtdE5vZGUuaW50ZXJuYWxJcCkudG9TdHJpY3RFcXVhbChpbnRlcm5hbEFkZHJlc3MpOwogICAgICAgIH0pOwogICAgfSk7CiAgICBkZXNjcmliZSgnc2hvdWxkIHJldHVybiBhbiBleHRlcm5hbElwJywgKCkgPT4gewogICAgICAgIGNvbnN0IGFkZHJlc3NlcyA9IFt7IHR5cGU6ICdFeHRlcm5hbElQJywgYWRkcmVzczogZm9vIH1dOwogICAgICAgIGNvbnN0IGFkZHJlc3MgPSBmb287CiAgICAgICAgaXQoJ2lmIGFkZHJlc3NlcyBpbmNsdWRlcyBhbiBvYmplY3Qgd2l0aCBhbiBhcHByb3ByaWF0ZSB0eXBlIGFuZCBhZGRyZXNzJywgKCkgPT4gewogICAgICAgICAgICBjb25zdCBtZ210Tm9kZSA9IG5ldyBNZ210Tm9kZSh7IHN0YXR1czogeyBhZGRyZXNzZXMgfSB9KTsKICAgICAgICAgICAgZXhwZWN0KG1nbXROb2RlLmV4dGVybmFsSXApLnRvU3RyaWN0RXF1YWwoZm9vKTsKICAgICAgICB9KTsKICAgICAgICBpdCgnaWYgaW50ZXJuYWxOb2RlU3RhdHVzLmFkZHJlc3NlcyBpbmNsdWRlcyBhbiBvYmplY3Qgd2l0aCBhbiBhcHByb3ByaWF0ZSB0eXBlIGFuZCBhZGRyZXNzJywgKCkgPT4gewogICAgICAgICAgICBjb25zdCBtZ210Tm9kZSA9IG5ldyBNZ210Tm9kZSh7IHN0YXR1czogeyBpbnRlcm5hbE5vZGVTdGF0dXM6IHsgYWRkcmVzc2VzIH0gfSB9KTsKICAgICAgICAgICAgZXhwZWN0KG1nbXROb2RlLmV4dGVybmFsSXApLnRvU3RyaWN0RXF1YWwoZm9vKTsKICAgICAgICB9KTsKICAgICAgICBpdCgnaWYgYWRkcmVzc2VzIGFuZCBpbnRlcm5hbE5vZGVTdGF0dXMuYWRkcmVzc2VzIGRvIG5vdCBwcm92aWRlIGFuIGV4dGVybmFsIGlwIGFuZCB0aGUgc3RhdHVzIGluY2x1ZGVzIGFuIHJrZU5vZGUga2V5IHdpdGggYW4gYXBwcm9wcmlhdGUgdHlwZSBhbmQgYWRkcmVzcycsICgpID0+IHsKICAgICAgICAgICAgY29uc3QgbWdtdE5vZGUgPSBuZXcgTWdtdE5vZGUoeyBzdGF0dXM6IHsgcmtlTm9kZTogeyBhZGRyZXNzIH0gfSB9KTsKICAgICAgICAgICAgZXhwZWN0KG1nbXROb2RlLmV4dGVybmFsSXApLnRvU3RyaWN0RXF1YWwoYWRkcmVzcyk7CiAgICAgICAgfSk7CiAgICB9KTsKICAgIGRlc2NyaWJlKCdzaG91bGQgcmV0dXJuIGFuIGFwcHJvcHJpYXRlIG1lc3NhZ2UnLCAoKSA9PiB7CiAgICAgICAgaXQoJ2lmIHRoZXJlIGlzIG5vIGludGVybmFsSXAgdG8gZGlzcGxheScsICgpID0+IHsKICAgICAgICAgICAgY29uc3QgbWdtdE5vZGUgPSBuZXcgTWdtdE5vZGUoeyBzdGF0dXM6IHt9IH0sIGN0eCk7CiAgICAgICAgICAgIGV4cGVjdChtZ210Tm9kZS5pbnRlcm5hbElwKS50b1N0cmljdEVxdWFsKGJhcik7CiAgICAgICAgICAgIGV4cGVjdCh0KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7CiAgICAgICAgICAgIGV4cGVjdCh0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnZ2VuZXJpYy5ub25lJyk7CiAgICAgICAgICAgIHJlc2V0TW9ja3MoKTsKICAgICAgICB9KTsKICAgICAgICBpdCgnaWYgdGhlcmUgaXMgbm8gZXh0ZXJuYWxJcCB0byBkaXNwbGF5JywgKCkgPT4gewogICAgICAgICAgICBjb25zdCBtZ210Tm9kZSA9IG5ldyBNZ210Tm9kZSh7IHN0YXR1czoge30gfSwgY3R4KTsKICAgICAgICAgICAgZXhwZWN0KG1nbXROb2RlLmV4dGVybmFsSXApLnRvU3RyaWN0RXF1YWwoYmFyKTsKICAgICAgICAgICAgZXhwZWN0KHQpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTsKICAgICAgICAgICAgZXhwZWN0KHQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdnZW5lcmljLm5vbmUnKTsKICAgICAgICAgICAgcmVzZXRNb2NrcygpOwogICAgICAgIH0pOwogICAgfSk7Cn0pOwo="},{"version":3,"file":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/models/__tests__/management.cattle.io.node.ts","sourceRoot":"","sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/models/__tests__/management.cattle.io.node.ts"],"names":[],"mappings":"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","sourcesContent":["import MgmtNode from '@shell/models/management.cattle.io.node';\n\ndescribe('class MgmtNode', () => {\n  const foo = 'foo';\n  const bar = 'bar';\n  const t = jest.fn(() => bar);\n  const ctx = { rootGetters: { 'i18n/t': t } };\n\n  const resetMocks = () => {\n    // Clear all mock function calls:\n    jest.clearAllMocks();\n  };\n\n  it('should not return addresses if they are not present in the resource status, the internalNodeStatus, or the rkeNode key in status', () => {\n    const mgmtNode = new MgmtNode({ status: {} });\n\n    expect(mgmtNode.addresses).toStrictEqual([]);\n    resetMocks();\n  });\n\n  describe('should return addresses', () => {\n    const addresses = [foo];\n\n    it('if they are present directly on the resource status', () => {\n      const mgmtNode = new MgmtNode({ status: { addresses } });\n\n      expect(mgmtNode.addresses).toStrictEqual(addresses);\n    });\n    it('if they are not present directly on the resource status but are on \"status.internalNodeStatus\"', () => {\n      const mgmtNode = new MgmtNode({ status: { internalNodeStatus: { addresses } } });\n\n      expect(mgmtNode.addresses).toStrictEqual(addresses);\n    });\n  });\n\n  describe('should return an internalIp', () => {\n    const addresses = [{ type: 'InternalIP', address: foo }];\n    const internalAddress = foo;\n\n    it('if addresses includes an object with an appropriate type and address', () => {\n      const mgmtNode = new MgmtNode({ status: { addresses } });\n\n      expect(mgmtNode.internalIp).toStrictEqual(foo);\n    });\n    it('if internalNodeStatus.addresses includes an object with an appropriate type and address', () => {\n      const mgmtNode = new MgmtNode({ status: { internalNodeStatus: { addresses } } });\n\n      expect(mgmtNode.internalIp).toStrictEqual(foo);\n    });\n    it('if addresses and internalNodeStatus.addresses do not provide an internal ip and the status includes an rkeNode key with an appropriate type and address', () => {\n      const mgmtNode = new MgmtNode({ status: { rkeNode: { internalAddress } } });\n\n      expect(mgmtNode.internalIp).toStrictEqual(internalAddress);\n    });\n  });\n\n  describe('should return an externalIp', () => {\n    const addresses = [{ type: 'ExternalIP', address: foo }];\n    const address = foo;\n\n    it('if addresses includes an object with an appropriate type and address', () => {\n      const mgmtNode = new MgmtNode({ status: { addresses } });\n\n      expect(mgmtNode.externalIp).toStrictEqual(foo);\n    });\n    it('if internalNodeStatus.addresses includes an object with an appropriate type and address', () => {\n      const mgmtNode = new MgmtNode({ status: { internalNodeStatus: { addresses } } });\n\n      expect(mgmtNode.externalIp).toStrictEqual(foo);\n    });\n    it('if addresses and internalNodeStatus.addresses do not provide an external ip and the status includes an rkeNode key with an appropriate type and address', () => {\n      const mgmtNode = new MgmtNode({ status: { rkeNode: { address } } });\n\n      expect(mgmtNode.externalIp).toStrictEqual(address);\n    });\n  });\n\n  describe('should return an appropriate message', () => {\n    it('if there is no internalIp to display', () => {\n      const mgmtNode = new MgmtNode({ status: {} }, ctx);\n\n      expect(mgmtNode.internalIp).toStrictEqual(bar);\n      expect(t).toHaveBeenCalledTimes(1);\n      expect(t).toHaveBeenCalledWith('generic.none');\n      resetMocks();\n    });\n    it('if there is no externalIp to display', () => {\n      const mgmtNode = new MgmtNode({ status: {} }, ctx);\n\n      expect(mgmtNode.externalIp).toStrictEqual(bar);\n      expect(t).toHaveBeenCalledTimes(1);\n      expect(t).toHaveBeenCalledWith('generic.none');\n      resetMocks();\n    });\n  });\n});\n"]}]}