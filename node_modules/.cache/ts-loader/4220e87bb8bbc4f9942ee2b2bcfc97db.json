{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js??ref--17-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/config/pod-security-admission.ts","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/config/pod-security-admission.ts","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js","mtime":1716430466133}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqCiAqIEFsbCB0aGUgUFNBIGxhYmVscyBhcmUgY3JlYXRlZCB3aXRoIHRoaXMgcHJlZml4LCBzbyB3ZSBjYW4gdXNlIHRoaXMgdG8gaWRlbnRpZnkgdGhlbQogKi8KZXhwb3J0IGNvbnN0IFBTQUxhYmVsUHJlZml4ID0gJ3BvZC1zZWN1cml0eS5rdWJlcm5ldGVzLmlvLyc7Ci8qKgogKiBEZWZhdWx0IG1vZGVzIG9mIHJlc3RyaWN0aW9ucyB1c2VkIGZvciBQU0EKICovCmV4cG9ydCBjb25zdCBQU0FNb2RlcyA9IFsnZW5mb3JjZScsICdhdWRpdCcsICd3YXJuJ107Ci8qKgogKiBMZXZlbHMgb2YgcmVzdHJpY3Rpb25zIGZvciB0aGUgUFNBCiAqLwpleHBvcnQgY29uc3QgUFNBTGV2ZWxzID0gWydwcml2aWxlZ2VkJywgJ2Jhc2VsaW5lJywgJ3Jlc3RyaWN0ZWQnXTsKLyoqCiAqIFVzZWQgZm9yIHJlc3RyaWN0aW9ucyBpbiB0ZW1wbGF0ZXMKICovCmV4cG9ydCBjb25zdCBQU0FEaW1lbnNpb25zID0gWyd1c2VybmFtZXMnLCAncnVudGltZUNsYXNzZXMnLCAnbmFtZXNwYWNlcyddOwovKioKICogRm9yIHRoZSBVSSwgd2UgcHJlZmVyIHVzZSB0aGlzIHZhbHVlIGFzIGRlZmF1bHQgb25lCiAqLwpleHBvcnQgY29uc3QgUFNBRGVmYXVsdExldmVsID0gUFNBTGV2ZWxzWzBdOwovKioKICogRGVmYXVsdCB2YWx1ZXMgZm9yIFBTQSBzaG91bGQgYWx3YXlzIGJlIHRoaXMgb25lCiAqLwpleHBvcnQgY29uc3QgUFNBRGVmYXVsdFZlcnNpb24gPSAnbGF0ZXN0JzsKLyoqCiAqIFBTQSBsYWJlbHMgZm9yIG5hbWVzcGFjZXMuCiAqIE1PREUgbXVzdCBiZSBvbmUgb2YgYGVuZm9yY2VgLCBgYXVkaXRgLCBvciBgd2FybmAuCiAqIExFVkVMIG11c3QgYmUgb25lIG9mIGBwcml2aWxlZ2VkYCwgYGJhc2VsaW5lYCwgb3IgYHJlc3RyaWN0ZWRgLgogKiBwb2Qtc2VjdXJpdHkua3ViZXJuZXRlcy5pby88TU9ERT46IDxMRVZFTD4KICoKICogT3B0aW9uYWw6IHBlci1tb2RlIHZlcnNpb24gbGFiZWwgdGhhdCBjYW4gYmUgdXNlZCB0byBwaW4gdGhlIHBvbGljeSB0byB0aGUKICogdmVyc2lvbiB0aGF0IHNoaXBwZWQgd2l0aCBhIGdpdmVuIEt1YmVybmV0ZXMgbWlub3IgdmVyc2lvbiAoZm9yIGV4YW1wbGUgdjEuMjUpLgogKgogKiBodHRwczovL2t1YmVybmV0ZXMuaW8vZG9jcy9jb25jZXB0cy9zZWN1cml0eS9wb2Qtc2VjdXJpdHktYWRtaXNzaW9uLyNwb2Qtc2VjdXJpdHktYWRtaXNzaW9uLWxhYmVscy1mb3ItbmFtZXNwYWNlcwogKi8KZXhwb3J0IGNvbnN0IFBTQUxhYmVsc05hbWVzcGFjZU1vZGUgPSBQU0FNb2Rlcy5yZWR1Y2UoKGFjYywgbW9kZSkgPT4gWwogICAgLi4uYWNjLAogICAgYCR7UFNBTGFiZWxQcmVmaXh9JHttb2RlfWAsCl0sIFtdKTsKLyoqCiAqIFBTQSBsYWJlbHMgZm9yIG5hbWVzcGFjZXMuCiAqIE1PREUgbXVzdCBiZSBvbmUgb2YgYGVuZm9yY2VgLCBgYXVkaXRgLCBvciBgd2FybmAuCiAqIFZFUlNJT04gbXVzdCBiZSBhIHZhbGlkIEt1YmVybmV0ZXMgbWlub3IgdmVyc2lvbiwgb3IgYGxhdGVzdGAuCiAqIHBvZC1zZWN1cml0eS5rdWJlcm5ldGVzLmlvLzxNT0RFPi12ZXJzaW9uOiA8VkVSU0lPTj4KICoKICogaHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvc2VjdXJpdHkvcG9kLXNlY3VyaXR5LWFkbWlzc2lvbi8jcG9kLXNlY3VyaXR5LWFkbWlzc2lvbi1sYWJlbHMtZm9yLW5hbWVzcGFjZXMKICovCmV4cG9ydCBjb25zdCBQU0FMYWJlbHNOYW1lc3BhY2VWZXJzaW9uID0gUFNBTW9kZXMucmVkdWNlKChhY2MsIG1vZGUpID0+IFsKICAgIC4uLmFjYywKICAgIGAke1BTQUxhYmVsUHJlZml4fSR7bW9kZX0tdmVyc2lvbmAKXSwgW10pOwovKioKICogUFNBIGxhYmVscyBmb3IgbmFtZXNwYWNlcy4KICogTU9ERSBtdXN0IGJlIG9uZSBvZiBgZW5mb3JjZWAsIGBhdWRpdGAsIG9yIGB3YXJuYC4KICogTEVWRUwgbXVzdCBiZSBvbmUgb2YgYHByaXZpbGVnZWRgLCBgYmFzZWxpbmVgLCBvciBgcmVzdHJpY3RlZGAuCiAqIHBvZC1zZWN1cml0eS5rdWJlcm5ldGVzLmlvLzxNT0RFPjogPExFVkVMPgogKgogKiBPcHRpb25hbDogcGVyLW1vZGUgdmVyc2lvbiBsYWJlbCB0aGF0IGNhbiBiZSB1c2VkIHRvIHBpbiB0aGUgcG9saWN5IHRvIHRoZQogKiB2ZXJzaW9uIHRoYXQgc2hpcHBlZCB3aXRoIGEgZ2l2ZW4gS3ViZXJuZXRlcyBtaW5vciB2ZXJzaW9uIChmb3IgZXhhbXBsZSB2MS4yNSkuCiAqCiAqIE1PREUgbXVzdCBiZSBvbmUgb2YgYGVuZm9yY2VgLCBgYXVkaXRgLCBvciBgd2FybmAuCiAqIFZFUlNJT04gbXVzdCBiZSBhIHZhbGlkIEt1YmVybmV0ZXMgbWlub3IgdmVyc2lvbiwgb3IgYGxhdGVzdGAuCiAqIHBvZC1zZWN1cml0eS5rdWJlcm5ldGVzLmlvLzxNT0RFPi12ZXJzaW9uOiA8VkVSU0lPTj4KICoKICogaHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvc2VjdXJpdHkvcG9kLXNlY3VyaXR5LWFkbWlzc2lvbi8jcG9kLXNlY3VyaXR5LWFkbWlzc2lvbi1sYWJlbHMtZm9yLW5hbWVzcGFjZXMKICovCmV4cG9ydCBjb25zdCBQU0FMYWJlbHNOYW1lc3BhY2VzID0gWy4uLlBTQUxhYmVsc05hbWVzcGFjZU1vZGUsIC4uLlBTQUxhYmVsc05hbWVzcGFjZVZlcnNpb25dOwovKioKICogR2VuZXJhdGVkIHRhYmxlIG9mIGljb25zIHdpdGggb3IgaGFyZGNvZGVkIGdlbmVyYXRlZCBQU0EgbGFiZWxzCiAqLwpleHBvcnQgY29uc3QgUFNBSWNvbnNEaXNwbGF5ID0gT2JqZWN0LmFzc2lnbih7fSwgLi4uUFNBTGFiZWxzTmFtZXNwYWNlcy5tYXAoKHBzYSkgPT4gKHsgW3BzYV06ICdpY29uLXBvZF9zZWN1cml0eScgfSkpKTsK"},{"version":3,"file":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/config/pod-security-admission.ts","sourceRoot":"","sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/config/pod-security-admission.ts"],"names":[],"mappings":"AAEA;;GAEG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,6BAA6B,CAAC;AAE5D;;GAEG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAc,CAAC,SAAS,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;AAEhE;;GAEG;AACH,MAAM,CAAC,MAAM,SAAS,GAAe,CAAC,YAAY,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;AAE9E;;GAEG;AACH,MAAM,CAAC,MAAM,aAAa,GAAmB,CAAC,WAAW,EAAE,gBAAgB,EAAE,YAAY,CAAC,CAAC;AAE3F;;GAEG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AAE5C;;GAEG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,QAAQ,CAAC;AAE1C;;;;;;;;;;GAUG;AACH,MAAM,CAAC,MAAM,sBAAsB,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC;IACnE,GAAG,GAAG;IACN,GAAI,cAAe,GAAI,IAAK,EAAE;CAC/B,EAAE,EAAc,CAAC,CAAC;AAEnB;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,yBAAyB,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC;IACtE,GAAG,GAAG;IACN,GAAI,cAAe,GAAI,IAAK,UAAU;CACvC,EAAE,EAAc,CAAC,CAAC;AAEnB;;;;;;;;;;;;;;GAcG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAa,CAAC,GAAG,sBAAsB,EAAE,GAAG,yBAAyB,CAAC,CAAC;AAEvG;;GAEG;AACH,MAAM,CAAC,MAAM,eAAe,GAA2B,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,mBAAmB,EAAE,CAAC,CAAC,CAAC,CAAC","sourcesContent":["import { PSADimension, PSALevel, PSAMode } from '@shell/types/pod-security-admission';\n\n/**\n * All the PSA labels are created with this prefix, so we can use this to identify them\n */\nexport const PSALabelPrefix = 'pod-security.kubernetes.io/';\n\n/**\n * Default modes of restrictions used for PSA\n */\nexport const PSAModes: PSAMode[] = ['enforce', 'audit', 'warn'];\n\n/**\n * Levels of restrictions for the PSA\n */\nexport const PSALevels: PSALevel[] = ['privileged', 'baseline', 'restricted'];\n\n/**\n * Used for restrictions in templates\n */\nexport const PSADimensions: PSADimension[] = ['usernames', 'runtimeClasses', 'namespaces'];\n\n/**\n * For the UI, we prefer use this value as default one\n */\nexport const PSADefaultLevel = PSALevels[0];\n\n/**\n * Default values for PSA should always be this one\n */\nexport const PSADefaultVersion = 'latest';\n\n/**\n * PSA labels for namespaces.\n * MODE must be one of `enforce`, `audit`, or `warn`.\n * LEVEL must be one of `privileged`, `baseline`, or `restricted`.\n * pod-security.kubernetes.io/<MODE>: <LEVEL>\n *\n * Optional: per-mode version label that can be used to pin the policy to the\n * version that shipped with a given Kubernetes minor version (for example v1.25).\n *\n * https://kubernetes.io/docs/concepts/security/pod-security-admission/#pod-security-admission-labels-for-namespaces\n */\nexport const PSALabelsNamespaceMode = PSAModes.reduce((acc, mode) => [\n  ...acc,\n  `${ PSALabelPrefix }${ mode }`,\n], [] as string[]);\n\n/**\n * PSA labels for namespaces.\n * MODE must be one of `enforce`, `audit`, or `warn`.\n * VERSION must be a valid Kubernetes minor version, or `latest`.\n * pod-security.kubernetes.io/<MODE>-version: <VERSION>\n *\n * https://kubernetes.io/docs/concepts/security/pod-security-admission/#pod-security-admission-labels-for-namespaces\n */\nexport const PSALabelsNamespaceVersion = PSAModes.reduce((acc, mode) => [\n  ...acc,\n  `${ PSALabelPrefix }${ mode }-version`\n], [] as string[]);\n\n/**\n * PSA labels for namespaces.\n * MODE must be one of `enforce`, `audit`, or `warn`.\n * LEVEL must be one of `privileged`, `baseline`, or `restricted`.\n * pod-security.kubernetes.io/<MODE>: <LEVEL>\n *\n * Optional: per-mode version label that can be used to pin the policy to the\n * version that shipped with a given Kubernetes minor version (for example v1.25).\n *\n * MODE must be one of `enforce`, `audit`, or `warn`.\n * VERSION must be a valid Kubernetes minor version, or `latest`.\n * pod-security.kubernetes.io/<MODE>-version: <VERSION>\n *\n * https://kubernetes.io/docs/concepts/security/pod-security-admission/#pod-security-admission-labels-for-namespaces\n */\nexport const PSALabelsNamespaces: string[] = [...PSALabelsNamespaceMode, ...PSALabelsNamespaceVersion];\n\n/**\n * Generated table of icons with or hardcoded generated PSA labels\n */\nexport const PSAIconsDisplay: Record<string, string> = Object.assign({}, ...PSALabelsNamespaces.map((psa) => ({ [psa]: 'icon-pod_security' })));\n"]}]}