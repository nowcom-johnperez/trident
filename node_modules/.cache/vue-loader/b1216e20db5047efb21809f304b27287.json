{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/autoscaling.horizontalpodautoscaler/metric-target.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/autoscaling.horizontalpodautoscaler/metric-target.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBMYWJlbGVkU2VsZWN0IGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL2Zvcm0vTGFiZWxlZFNlbGVjdCc7CmltcG9ydCB7IExhYmVsZWRJbnB1dCB9IGZyb20gJ0Bjb21wb25lbnRzL0Zvcm0vTGFiZWxlZElucHV0JzsKaW1wb3J0IHsgZmluZEJ5IH0gZnJvbSAnQHNoZWxsL3V0aWxzL2FycmF5JzsKaW1wb3J0IGZpbHRlciBmcm9tICdsb2Rhc2gvZmlsdGVyJzsKaW1wb3J0IFVuaXRJbnB1dCBmcm9tICdAc2hlbGwvY29tcG9uZW50cy9mb3JtL1VuaXRJbnB1dCc7CmltcG9ydCB7IHBhcnNlU2kgfSBmcm9tICdAc2hlbGwvdXRpbHMvdW5pdHMnOwoKZXhwb3J0IGRlZmF1bHQgewogIGNvbXBvbmVudHM6IHsKICAgIExhYmVsZWRTZWxlY3QsCiAgICBMYWJlbGVkSW5wdXQsCiAgICBVbml0SW5wdXQsCiAgfSwKICBwcm9wczogewogICAgdmFsdWU6IHsKICAgICAgdHlwZTogICAgT2JqZWN0LAogICAgICBkZWZhdWx0OiAoKSA9PiAoe30pLAogICAgfSwKCiAgICBtb2RlOiB7CiAgICAgIHR5cGU6ICAgIFN0cmluZywKICAgICAgZGVmYXVsdDogJ2NyZWF0ZScsCiAgICB9LAoKICAgIG1ldHJpY1Jlc291cmNlOiB7CiAgICAgIHR5cGU6ICAgICBTdHJpbmcsCiAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgfSwKCiAgICByZXNvdXJjZU5hbWU6IHsKICAgICAgdHlwZTogICAgU3RyaW5nLAogICAgICBkZWZhdWx0OiBudWxsLAogICAgfSwKICB9LAogIGRhdGEoKSB7CiAgICBjb25zdCBvdXQgPSBbCiAgICAgIHsKICAgICAgICBsYWJlbDogICAgICB0aGlzLnQoJ2hwYS5tZXRyaWNUYXJnZXQuYXZlcmFnZVZhbC5sYWJlbCcpLAogICAgICAgIHZhbHVlOiAgICAgICdBdmVyYWdlVmFsdWUnLAogICAgICAgIHNwZWNLZXk6ICAgICdhdmVyYWdlVmFsdWUnLAogICAgICAgIHZhbGlkVHlwZXM6IFsncmVzb3VyY2UnLCAncG9kJywgJ29iamVjdCcsICdleHRlcm5hbCddLAogICAgICB9LAogICAgICB7CiAgICAgICAgbGFiZWw6ICAgICAgdGhpcy50KCdocGEubWV0cmljVGFyZ2V0LnV0aWxpemF0aW9uLmxhYmVsJyksCiAgICAgICAgdmFsdWU6ICAgICAgJ1V0aWxpemF0aW9uJywKICAgICAgICBzcGVjS2V5OiAgICAnYXZlcmFnZVV0aWxpemF0aW9uJywKICAgICAgICB2YWxpZFR5cGVzOiBbJ3Jlc291cmNlJ10sCiAgICAgICAgZGVmYXVsdDogICAgODAsCiAgICAgIH0sCiAgICAgIHsKICAgICAgICBsYWJlbDogICAgICB0aGlzLnQoJ2hwYS5tZXRyaWNUYXJnZXQudmFsdWUubGFiZWwnKSwKICAgICAgICB2YWx1ZTogICAgICAnVmFsdWUnLAogICAgICAgIHNwZWNLZXk6ICAgICd2YWx1ZScsCiAgICAgICAgdmFsaWRUeXBlczogWydvYmplY3QnLCAnZXh0ZXJuYWwnXSwKICAgICAgfSwKICAgIF07CgogICAgY29uc3QgdGFyZ2V0VHlwZXMgPSBmaWx0ZXIob3V0LCAoaXRlbSkgPT4gewogICAgICByZXR1cm4gaXRlbS52YWxpZFR5cGVzLmluY2x1ZGVzKHRoaXMubWV0cmljUmVzb3VyY2UpOwogICAgfSk7CgogICAgY29uc3QgcXVhbnRpdHkgPSB0aGlzLmluaXRRdWFudGl0eSgpOwoKICAgIHJldHVybiB7IHRhcmdldFR5cGVzLCBxdWFudGl0eSB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIGlzUmVzb3VyY2VNZXRyaWNUeXBlKCkgewogICAgICByZXR1cm4gdGhpcy5tZXRyaWNSZXNvdXJjZSA9PT0gJ3Jlc291cmNlJzsKICAgIH0sCiAgfSwKCiAgd2F0Y2g6IHsKICAgIHJlc291cmNlTmFtZShuZXdSbiwgX29sZFJuKSB7CiAgICAgIGNvbnN0IHsKICAgICAgICB2YWx1ZTogeyB0eXBlOiBtZXRyaWNUeXBlIH0sCiAgICAgICAgdGFyZ2V0VHlwZXMsCiAgICAgIH0gPSB0aGlzOwogICAgICBjb25zdCBtYXRjaCA9IGZpbmRCeSh0YXJnZXRUeXBlcywgeyB2YWx1ZTogbWV0cmljVHlwZSB9KTsKICAgICAgbGV0IG51ZURlZmF1bHQgPSBtYXRjaD8uZGVmYXVsdCA/PyAnODAnOwoKICAgICAgaWYgKG1ldHJpY1R5cGUgIT09ICdVdGlsaXphdGlvbicpIHsKICAgICAgICBpZiAobmV3Um4gPT09ICdjcHUnKSB7CiAgICAgICAgICBudWVEZWZhdWx0ID0gYCR7IG51ZURlZmF1bHQgfW1gOwogICAgICAgIH0gZWxzZSBpZiAobmV3Um4gPT09ICdtZW1vcnknKSB7CiAgICAgICAgICBudWVEZWZhdWx0ID0gYCR7IG51ZURlZmF1bHQgfU1pYDsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHRoaXMuJHNldCh0aGlzLnZhbHVlLCBtYXRjaD8uc3BlY0tleSwgbnVlRGVmYXVsdCk7CiAgICAgIHRoaXMucXVhbnRpdHkgPSBudWVEZWZhdWx0OwogICAgfSwKCiAgICAndmFsdWUudHlwZScodGFyZ2V0VHlwZSwgb2xkVHlwZSkgewogICAgICBjb25zdCB7IHRhcmdldFR5cGVzLCByZXNvdXJjZU5hbWUgfSA9IHRoaXM7CiAgICAgIGNvbnN0IHRvRGVsZXRlID0gZmluZEJ5KHRhcmdldFR5cGVzLCB7IHZhbHVlOiBvbGRUeXBlIH0pOwogICAgICBjb25zdCBudWUgPSBmaW5kQnkodGFyZ2V0VHlwZXMsIHsgdmFsdWU6IHRhcmdldFR5cGUgfSk7CiAgICAgIGxldCBudWVEZWZhdWx0ID0gbnVlPy5kZWZhdWx0ID8/ICc4MCc7CgogICAgICBpZiAodGFyZ2V0VHlwZSAhPT0gJ1V0aWxpemF0aW9uJykgewogICAgICAgIGlmIChyZXNvdXJjZU5hbWUgPT09ICdjcHUnKSB7CiAgICAgICAgICBudWVEZWZhdWx0ID0gYCR7IG51ZURlZmF1bHQgfW1gOwogICAgICAgIH0gZWxzZSBpZiAocmVzb3VyY2VOYW1lID09PSAnbWVtb3J5JykgewogICAgICAgICAgbnVlRGVmYXVsdCA9IGAkeyBudWVEZWZhdWx0IH1NaWA7CiAgICAgICAgfQogICAgICB9CgogICAgICBkZWxldGUgdGhpcy52YWx1ZVt0b0RlbGV0ZS5zcGVjS2V5XTsKCiAgICAgIHRoaXMuJHNldCh0aGlzLnZhbHVlLCBudWU/LnNwZWNLZXksIG51ZURlZmF1bHQpOwogICAgICB0aGlzLnF1YW50aXR5ID0gbnVlRGVmYXVsdDsKICAgIH0sCiAgfSwKCiAgbWV0aG9kczogewogICAgaW5pdFF1YW50aXR5KCkgewogICAgICBjb25zdCB7IGlzUmVzb3VyY2VNZXRyaWNUeXBlLCBtb2RlLCB2YWx1ZSB9ID0gdGhpczsKICAgICAgbGV0IHF1YW50aXR5OwoKICAgICAgLy8gb25seSBwYXJzZSBzaSBvbiBhIG1ldHJpYyB0eXBlIG9mIFJlc291cmNlIGJlY2F1c2UgdGhhdCBpcyB0aGUgb25seSBpdGVtIHdlIGtub3cgZm9yIHN1cmUgaGFzIGFuIFNJIHN1ZmZpeAogICAgICAvLyBvdGhlciB3aXNlIHVzZXJzIHRoYXQgY3JlYXRlZCBhIEhQQSBvdXRzaWRlIG9mIFVJIHdpbGwgaGF2ZSBzb21ldGhpbmcgbGlrZSAxayBjb252ZXJ0ZWQgdG8gMTAwMCwgd2hpY2ggaXMgYWNjdXJhdGUgYnV0IGlzIG5vdCB3aGF0IGlzIHJlcHJlc2VudGVkIGluIHRoZSB5YW1sIGZvciBleGFtcGxlLgogICAgICAvLyB0aGlzIGlzIGFsc28gd2hhdCBlbWJlciB1aSBkb2VzCiAgICAgIGlmIChtb2RlID09PSAnZWRpdCcgJiYgaXNSZXNvdXJjZU1ldHJpY1R5cGUpIHsKICAgICAgICBpZiAodmFsdWU/LmF2ZXJhZ2VWYWx1ZSkgewogICAgICAgICAgcXVhbnRpdHkgPSBwYXJzZVNpKHZhbHVlLmF2ZXJhZ2VWYWx1ZSk7CiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZT8uYXZlcmFnZVV0aWxpemF0aW9uKSB7CiAgICAgICAgICBxdWFudGl0eSA9IHZhbHVlLmF2ZXJhZ2VVdGlsaXphdGlvbjsKICAgICAgICB9IGVsc2UgaWYgKHZhbHVlPy52YWx1ZSkgewogICAgICAgICAgcXVhbnRpdHkgPSBwYXJzZVNpKHZhbHVlLnZhbHVlKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcXVhbnRpdHkgPQogICAgICAgICAgdmFsdWU/LmF2ZXJhZ2VWYWx1ZSB8fCB2YWx1ZT8uYXZlcmFnZVV0aWxpemF0aW9uIHx8IHZhbHVlPy52YWx1ZTsKICAgICAgfQoKICAgICAgcmV0dXJuIHF1YW50aXR5OwogICAgfSwKICAgIHVwZGF0ZVF1YW50aXR5VmFsdWUodmFsKSB7CiAgICAgIGlmICh0aGlzLnZhbHVlPy50eXBlID09PSAnVmFsdWUnKSB7CiAgICAgICAgdGhpcy4kc2V0KHRoaXMudmFsdWUsICd2YWx1ZScsIHZhbCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy4kc2V0KHRoaXMudmFsdWUsICdhdmVyYWdlVmFsdWUnLCB2YWwpOwogICAgICB9CiAgICB9LAogIH0sCn07Cg=="},{"version":3,"sources":["metric-target.vue"],"names":[],"mappingsfile":"metric-target.vue","sourceRoot":"node_modules/@rancher/shell/edit/autoscaling.horizontalpodautoscaler","sourcesContent":["<script>\nimport LabeledSelect from '@shell/components/form/LabeledSelect';\nimport { LabeledInput } from '@components/Form/LabeledInput';\nimport { findBy } from '@shell/utils/array';\nimport filter from 'lodash/filter';\nimport UnitInput from '@shell/components/form/UnitInput';\nimport { parseSi } from '@shell/utils/units';\n\nexport default {\n  components: {\n    LabeledSelect,\n    LabeledInput,\n    UnitInput,\n  },\n  props: {\n    value: {\n      type:    Object,\n      default: () => ({}),\n    },\n\n    mode: {\n      type:    String,\n      default: 'create',\n    },\n\n    metricResource: {\n      type:     String,\n      required: true,\n    },\n\n    resourceName: {\n      type:    String,\n      default: null,\n    },\n  },\n  data() {\n    const out = [\n      {\n        label:      this.t('hpa.metricTarget.averageVal.label'),\n        value:      'AverageValue',\n        specKey:    'averageValue',\n        validTypes: ['resource', 'pod', 'object', 'external'],\n      },\n      {\n        label:      this.t('hpa.metricTarget.utilization.label'),\n        value:      'Utilization',\n        specKey:    'averageUtilization',\n        validTypes: ['resource'],\n        default:    80,\n      },\n      {\n        label:      this.t('hpa.metricTarget.value.label'),\n        value:      'Value',\n        specKey:    'value',\n        validTypes: ['object', 'external'],\n      },\n    ];\n\n    const targetTypes = filter(out, (item) => {\n      return item.validTypes.includes(this.metricResource);\n    });\n\n    const quantity = this.initQuantity();\n\n    return { targetTypes, quantity };\n  },\n  computed: {\n    isResourceMetricType() {\n      return this.metricResource === 'resource';\n    },\n  },\n\n  watch: {\n    resourceName(newRn, _oldRn) {\n      const {\n        value: { type: metricType },\n        targetTypes,\n      } = this;\n      const match = findBy(targetTypes, { value: metricType });\n      let nueDefault = match?.default ?? '80';\n\n      if (metricType !== 'Utilization') {\n        if (newRn === 'cpu') {\n          nueDefault = `${ nueDefault }m`;\n        } else if (newRn === 'memory') {\n          nueDefault = `${ nueDefault }Mi`;\n        }\n      }\n\n      this.$set(this.value, match?.specKey, nueDefault);\n      this.quantity = nueDefault;\n    },\n\n    'value.type'(targetType, oldType) {\n      const { targetTypes, resourceName } = this;\n      const toDelete = findBy(targetTypes, { value: oldType });\n      const nue = findBy(targetTypes, { value: targetType });\n      let nueDefault = nue?.default ?? '80';\n\n      if (targetType !== 'Utilization') {\n        if (resourceName === 'cpu') {\n          nueDefault = `${ nueDefault }m`;\n        } else if (resourceName === 'memory') {\n          nueDefault = `${ nueDefault }Mi`;\n        }\n      }\n\n      delete this.value[toDelete.specKey];\n\n      this.$set(this.value, nue?.specKey, nueDefault);\n      this.quantity = nueDefault;\n    },\n  },\n\n  methods: {\n    initQuantity() {\n      const { isResourceMetricType, mode, value } = this;\n      let quantity;\n\n      // only parse si on a metric type of Resource because that is the only item we know for sure has an SI suffix\n      // other wise users that created a HPA outside of UI will have something like 1k converted to 1000, which is accurate but is not what is represented in the yaml for example.\n      // this is also what ember ui does\n      if (mode === 'edit' && isResourceMetricType) {\n        if (value?.averageValue) {\n          quantity = parseSi(value.averageValue);\n        } else if (value?.averageUtilization) {\n          quantity = value.averageUtilization;\n        } else if (value?.value) {\n          quantity = parseSi(value.value);\n        }\n      } else {\n        quantity =\n          value?.averageValue || value?.averageUtilization || value?.value;\n      }\n\n      return quantity;\n    },\n    updateQuantityValue(val) {\n      if (this.value?.type === 'Value') {\n        this.$set(this.value, 'value', val);\n      } else {\n        this.$set(this.value, 'averageValue', val);\n      }\n    },\n  },\n};\n</script>\n\n<template>\n  <div class=\"metric-target\">\n    <div class=\"row\">\n      <div class=\"col span-6\">\n        <LabeledSelect\n          v-model=\"value.type\"\n          :mode=\"mode\"\n          :label=\"t('hpa.metricTarget.type.label')\"\n          :options=\"targetTypes\"\n        />\n      </div>\n      <div\n        v-if=\"isResourceMetricType\"\n        class=\"col span-6\"\n      >\n        <UnitInput\n          v-if=\"value.type === 'Utilization'\"\n          v-model=\"value.averageUtilization\"\n          :label=\"t('hpa.metricTarget.quantity.label')\"\n          :mode=\"mode\"\n          placeholder=\"80\"\n          :required=\"true\"\n          :suffix=\"t('suffix.percent')\"\n        />\n        <UnitInput\n          v-else-if=\"resourceName === 'cpu'\"\n          v-model=\"quantity\"\n          :input-exponent=\"-1\"\n          :label=\"t('hpa.metricTarget.quantity.label')\"\n          :mode=\"mode\"\n          :placeholder=\"t('containerResourceLimit.cpuPlaceholder')\"\n          :required=\"true\"\n          :base-unit=\"t('suffix.cpus')\"\n          :output-modifier=\"true\"\n          @input=\"updateQuantityValue\"\n        />\n        <UnitInput\n          v-else-if=\"resourceName === 'memory'\"\n          v-model=\"quantity\"\n          :input-exponent=\"2\"\n          :label=\"t('containerResourceLimit.requestsMemory')\"\n          :mode=\"mode\"\n          :placeholder=\"t('containerResourceLimit.memPlaceholder')\"\n          :required=\"true\"\n          :output-modifier=\"true\"\n          :increment=\"1024\"\n          @input=\"updateQuantityValue\"\n        />\n      </div>\n      <div\n        v-else\n        class=\"col span-6\"\n      >\n        <LabeledInput\n          v-model=\"quantity\"\n          placeholder=\"1\"\n          type=\"text\"\n          :label=\"t('hpa.metricTarget.quantity.label')\"\n          :mode=\"mode\"\n          :required=\"true\"\n          @input=\"updateQuantityValue\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.metric-target {\n  width: 100%;\n}\n</style>\n"]}]}