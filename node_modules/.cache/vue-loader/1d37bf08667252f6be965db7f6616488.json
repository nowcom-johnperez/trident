{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/monitoring.coreos.com.alertmanagerconfig/types/opsgenie.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/monitoring.coreos.com.alertmanagerconfig/types/opsgenie.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBBcnJheUxpc3QgZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvZm9ybS9BcnJheUxpc3QnOwppbXBvcnQgeyBMYWJlbGVkSW5wdXQgfSBmcm9tICdAY29tcG9uZW50cy9Gb3JtL0xhYmVsZWRJbnB1dCc7CmltcG9ydCBTZWxlY3QgZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvZm9ybS9TZWxlY3QnOwppbXBvcnQgeyBDaGVja2JveCB9IGZyb20gJ0Bjb21wb25lbnRzL0Zvcm0vQ2hlY2tib3gnOwppbXBvcnQgSW5wdXRXaXRoU2VsZWN0IGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL2Zvcm0vSW5wdXRXaXRoU2VsZWN0JzsKaW1wb3J0IFNpbXBsZVNlY3JldFNlbGVjdG9yIGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL2Zvcm0vU2ltcGxlU2VjcmV0U2VsZWN0b3InOwppbXBvcnQgeyBfVklFVyB9IGZyb20gJ0BzaGVsbC9jb25maWcvcXVlcnktcGFyYW1zJzsKCmV4cG9ydCBjb25zdCBUQVJHRVRTID0gWwogIHsKICAgIGxhYmVsOiAnSWQnLAogICAgdmFsdWU6ICdpZCcKICB9LAogIHsKICAgIGxhYmVsOiAnTmFtZScsCiAgICB2YWx1ZTogJ25hbWUnCiAgfSwKICB7CiAgICBsYWJlbDogJ1VzZXJuYW1lJywKICAgIHZhbHVlOiAndXNlcm5hbWUnCiAgfQpdOwoKZXhwb3J0IGNvbnN0IFRZUEVTID0gWwogIHsKICAgIGxhYmVsOiAnVGVhbScsCiAgICB2YWx1ZTogJ3RlYW0nCiAgfSwKICB7CiAgICBsYWJlbDogJ1VzZXInLAogICAgdmFsdWU6ICd1c2VyJwogIH0sCiAgewogICAgbGFiZWw6ICdFc2NhbGF0aW9uJywKICAgIHZhbHVlOiAnZXNjYWxhdGlvbicKICB9LAogIHsKICAgIGxhYmVsOiAnU2NoZWR1bGUnLAogICAgdmFsdWU6ICdzY2hlZHVsZScKICB9Cl07CgpleHBvcnQgZGVmYXVsdCB7CiAgY29tcG9uZW50czogewogICAgQXJyYXlMaXN0LCBDaGVja2JveCwgSW5wdXRXaXRoU2VsZWN0LCBMYWJlbGVkSW5wdXQsIFNlbGVjdCwgU2ltcGxlU2VjcmV0U2VsZWN0b3IKICB9LAogIHByb3BzOiB7CiAgICBtb2RlOiB7CiAgICAgIHR5cGU6ICAgICBTdHJpbmcsCiAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgfSwKICAgIHZhbHVlOiB7CiAgICAgIHR5cGU6ICAgICBPYmplY3QsCiAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9LAogICAgbmFtZXNwYWNlOiB7CiAgICAgIHR5cGU6ICAgIFN0cmluZywKICAgICAgZGVmYXVsdDogJycKICAgIH0KICB9LAogIGRhdGEoKSB7CiAgICB0aGlzLiRzZXQodGhpcy52YWx1ZSwgJ2h0dHBDb25maWcnLCB0aGlzLnZhbHVlLmh0dHBDb25maWcgfHwge30pOwogICAgdGhpcy4kc2V0KHRoaXMudmFsdWUsICdzZW5kUmVzb2x2ZWQnLCB0eXBlb2YgdGhpcy52YWx1ZS5zZW5kUmVzb2x2ZWQgPT09ICdib29sZWFuJyA/IHRoaXMudmFsdWUuc2VuZF9yZXNvbHZlZCA6IHRydWUpOwogICAgdGhpcy4kc2V0KHRoaXMudmFsdWUsICdyZXNwb25kZXJzJywgdGhpcy52YWx1ZS5yZXNwb25kZXJzIHx8IFtdKTsKCiAgICBjb25zdCByZXNwb25kZXJzID0gdGhpcy52YWx1ZS5yZXNwb25kZXJzLm1hcCgocmVzcG9uZGVyKSA9PiB7CiAgICAgIGNvbnN0IHRhcmdldCA9IFRBUkdFVFMuZmluZCgodGFyZ2V0KSA9PiByZXNwb25kZXJbdGFyZ2V0LnZhbHVlXSk7CgogICAgICByZXR1cm4gewogICAgICAgIHR5cGU6ICAgcmVzcG9uZGVyLnR5cGUsCiAgICAgICAgdGFyZ2V0OiB0YXJnZXQudmFsdWUsCiAgICAgICAgdmFsdWU6ICByZXNwb25kZXJbdGFyZ2V0LnZhbHVlXQogICAgICB9OwogICAgfSk7CgogICAgcmV0dXJuIHsKICAgICAgZGVmYXVsdFJlc3BvbmRlcjogewogICAgICAgIHR5cGU6ICAgVFlQRVNbMF0udmFsdWUsCiAgICAgICAgdGFyZ2V0OiBUQVJHRVRTWzBdLnZhbHVlLAogICAgICAgIHZhbHVlOiAgJycKICAgICAgfSwKICAgICAgcmVzcG9uZGVycywKICAgICAgVEFSR0VUUywKICAgICAgVFlQRVMsCiAgICAgIHZpZXc6ICAgICAgICAgICAgICAgICAgICBfVklFVywKICAgICAgaW5pdGlhbEFwaUtleVNlY3JldE5hbWU6IHRoaXMudmFsdWU/LmFwaUtleT8ubmFtZSA/IHRoaXMudmFsdWUuYXBpS2V5Lm5hbWUgOiAnJywKICAgICAgaW5pdGlhbEFwaUtleVNlY3JldEtleTogIHRoaXMudmFsdWU/LmFwaUtleT8ua2V5ID8gdGhpcy52YWx1ZS5hcGlLZXkua2V5IDogJycsCiAgICAgIG5vbmU6ICAgICAgICAgICAgICAgICAgICAnX19bW05PTkVdXV9fJywKICAgIH07CiAgfSwKCiAgY29tcHV0ZWQ6IHsKICAgIGlzVmlldygpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kZSA9PT0gX1ZJRVc7CiAgICB9CiAgfSwKCiAgd2F0Y2g6IHsKICAgIHJlc3BvbmRlcnM6IHsKICAgICAgZGVlcDogdHJ1ZSwKICAgICAgaGFuZGxlcigpIHsKICAgICAgICBjb25zdCByZXNwb25kZXJzID0gdGhpcy5yZXNwb25kZXJzLm1hcCgocmVzcG9uZGVyKSA9PiB7CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICB0eXBlOiAgICAgICAgICAgICAgIHJlc3BvbmRlci50eXBlLAogICAgICAgICAgICBbcmVzcG9uZGVyLnRhcmdldF06IHJlc3BvbmRlci52YWx1ZQogICAgICAgICAgfTsKICAgICAgICB9KTsKCiAgICAgICAgdGhpcy4kc2V0KHRoaXMudmFsdWUsICdyZXNwb25kZXJzJywgcmVzcG9uZGVycyk7CiAgICAgIH0KICAgIH0KICB9LAoKICBtZXRob2RzOiB7CiAgICB1cGRhdGVSZXNwb25kZXIoeyBzZWxlY3RlZCwgdGV4dCB9LCByb3cpIHsKICAgICAgcm93LnRhcmdldCA9IHNlbGVjdGVkOwogICAgICByb3cudmFsdWUgPSB0ZXh0OwogICAgfSwKICAgIHR5cGVMYWJlbCh0eXBlKSB7CiAgICAgIHJldHVybiBUWVBFUy5maW5kKCh0KSA9PiB0LnZhbHVlID09PSB0eXBlKS5sYWJlbDsKICAgIH0sCiAgICB0YXJnZXRMYWJlbCh0YXJnZXQpIHsKICAgICAgcmV0dXJuIFRBUkdFVFMuZmluZCgodCkgPT4gdC52YWx1ZSA9PT0gdGFyZ2V0KS5sYWJlbDsKICAgIH0sCiAgICB1cGRhdGVBcGlLZXlTZWNyZXROYW1lKG5hbWUpIHsKICAgICAgY29uc3QgZXhpc3RpbmdLZXkgPSB0aGlzLnZhbHVlLmFwaUtleT8ua2V5IHx8ICcnOwoKICAgICAgaWYgKHRoaXMudmFsdWUuYXBpS2V5KSB7CiAgICAgICAgaWYgKG5hbWUgPT09IHRoaXMubm9uZSkgewogICAgICAgICAgZGVsZXRlIHRoaXMudmFsdWUuYXBpS2V5OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLnZhbHVlLmFwaUtleSA9IHsKICAgICAgICAgICAga2V5OiBleGlzdGluZ0tleSwKICAgICAgICAgICAgbmFtZSwKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMudmFsdWVbJ2FwaUtleSddID0gewogICAgICAgICAga2V5OiAnJywKICAgICAgICAgIG5hbWUKICAgICAgICB9OwogICAgICB9CiAgICB9LAogICAgdXBkYXRlQXBpS2V5U2VjcmV0S2V5KGtleSkgewogICAgICBjb25zdCBleGlzdGluZ05hbWUgPSB0aGlzLnZhbHVlLmFwaUtleT8ubmFtZSB8fCAnJzsKCiAgICAgIGlmICh0aGlzLnZhbHVlLmFwaUtleSkgewogICAgICAgIHRoaXMudmFsdWUuYXBpS2V5ID0gewogICAgICAgICAgbmFtZTogZXhpc3RpbmdOYW1lLAogICAgICAgICAga2V5CiAgICAgICAgfTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnZhbHVlWydhcGlLZXknXSA9IHsKICAgICAgICAgIG5hbWU6ICcnLAogICAgICAgICAga2V5CiAgICAgICAgfTsKICAgICAgfQogICAgfQogIH0KfTsK"},{"version":3,"sources":["opsgenie.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"opsgenie.vue","sourceRoot":"node_modules/@rancher/shell/edit/monitoring.coreos.com.alertmanagerconfig/types","sourcesContent":["<script>\nimport ArrayList from '@shell/components/form/ArrayList';\nimport { LabeledInput } from '@components/Form/LabeledInput';\nimport Select from '@shell/components/form/Select';\nimport { Checkbox } from '@components/Form/Checkbox';\nimport InputWithSelect from '@shell/components/form/InputWithSelect';\nimport SimpleSecretSelector from '@shell/components/form/SimpleSecretSelector';\nimport { _VIEW } from '@shell/config/query-params';\n\nexport const TARGETS = [\n  {\n    label: 'Id',\n    value: 'id'\n  },\n  {\n    label: 'Name',\n    value: 'name'\n  },\n  {\n    label: 'Username',\n    value: 'username'\n  }\n];\n\nexport const TYPES = [\n  {\n    label: 'Team',\n    value: 'team'\n  },\n  {\n    label: 'User',\n    value: 'user'\n  },\n  {\n    label: 'Escalation',\n    value: 'escalation'\n  },\n  {\n    label: 'Schedule',\n    value: 'schedule'\n  }\n];\n\nexport default {\n  components: {\n    ArrayList, Checkbox, InputWithSelect, LabeledInput, Select, SimpleSecretSelector\n  },\n  props: {\n    mode: {\n      type:     String,\n      required: true,\n    },\n    value: {\n      type:     Object,\n      required: true\n    },\n    namespace: {\n      type:    String,\n      default: ''\n    }\n  },\n  data() {\n    this.$set(this.value, 'httpConfig', this.value.httpConfig || {});\n    this.$set(this.value, 'sendResolved', typeof this.value.sendResolved === 'boolean' ? this.value.send_resolved : true);\n    this.$set(this.value, 'responders', this.value.responders || []);\n\n    const responders = this.value.responders.map((responder) => {\n      const target = TARGETS.find((target) => responder[target.value]);\n\n      return {\n        type:   responder.type,\n        target: target.value,\n        value:  responder[target.value]\n      };\n    });\n\n    return {\n      defaultResponder: {\n        type:   TYPES[0].value,\n        target: TARGETS[0].value,\n        value:  ''\n      },\n      responders,\n      TARGETS,\n      TYPES,\n      view:                    _VIEW,\n      initialApiKeySecretName: this.value?.apiKey?.name ? this.value.apiKey.name : '',\n      initialApiKeySecretKey:  this.value?.apiKey?.key ? this.value.apiKey.key : '',\n      none:                    '__[[NONE]]__',\n    };\n  },\n\n  computed: {\n    isView() {\n      return this.mode === _VIEW;\n    }\n  },\n\n  watch: {\n    responders: {\n      deep: true,\n      handler() {\n        const responders = this.responders.map((responder) => {\n          return {\n            type:               responder.type,\n            [responder.target]: responder.value\n          };\n        });\n\n        this.$set(this.value, 'responders', responders);\n      }\n    }\n  },\n\n  methods: {\n    updateResponder({ selected, text }, row) {\n      row.target = selected;\n      row.value = text;\n    },\n    typeLabel(type) {\n      return TYPES.find((t) => t.value === type).label;\n    },\n    targetLabel(target) {\n      return TARGETS.find((t) => t.value === target).label;\n    },\n    updateApiKeySecretName(name) {\n      const existingKey = this.value.apiKey?.key || '';\n\n      if (this.value.apiKey) {\n        if (name === this.none) {\n          delete this.value.apiKey;\n        } else {\n          this.value.apiKey = {\n            key: existingKey,\n            name,\n          };\n        }\n      } else {\n        this.value['apiKey'] = {\n          key: '',\n          name\n        };\n      }\n    },\n    updateApiKeySecretKey(key) {\n      const existingName = this.value.apiKey?.name || '';\n\n      if (this.value.apiKey) {\n        this.value.apiKey = {\n          name: existingName,\n          key\n        };\n      } else {\n        this.value['apiKey'] = {\n          name: '',\n          key\n        };\n      }\n    }\n  }\n};\n</script>\n\n<template>\n  <div>\n    <div class=\"row\">\n      <div class=\"col span-12\">\n        <h3>Target</h3>\n      </div>\n    </div>\n    <div class=\"row mb-20\">\n      <SimpleSecretSelector\n        v-if=\"namespace\"\n        :initial-key=\"initialApiKeySecretKey\"\n        :mode=\"mode\"\n        :initial-name=\"initialApiKeySecretName\"\n        :namespace=\"namespace\"\n        :disabled=\"mode === view\"\n        :secret-name-label=\"t('monitoring.alertmanagerConfig.opsgenie.apiKey')\"\n        @updateSecretName=\"updateApiKeySecretName\"\n        @updateSecretKey=\"updateApiKeySecretKey\"\n      />\n      <Banner\n        v-else\n        color=\"error\"\n      >\n        {{ t('alertmanagerConfigReceiver.namespaceWarning') }}\n      </Banner>\n    </div>\n    <div class=\"row mb-20\">\n      <div class=\"col span-12\">\n        <LabeledInput\n          v-model=\"value.httpConfig.proxyUrl\"\n          :mode=\"mode\"\n          label=\"Proxy URL\"\n          placeholder=\"e.g. http://my-proxy/\"\n        />\n      </div>\n    </div>\n    <div class=\"row mb-20\">\n      <Checkbox\n        v-model=\"value.sendResolved\"\n        :mode=\"mode\"\n        label=\"Enable send resolved alerts\"\n      />\n    </div>\n    <div class=\"row\">\n      <div class=\"col span-12\">\n        <h3>Responders</h3>\n        <ArrayList\n          v-model=\"responders\"\n          :mode=\"mode\"\n          :default-add-value=\"defaultResponder\"\n          :show-header=\"true\"\n        >\n          <template v-slot:column-headers>\n            <div class=\"responders-heading\">\n              <div\n                class=\"row\"\n                :class=\"{'mb-15': isView, 'mb-10': !isView}\"\n              >\n                <div class=\"col span-6\">\n                  <span class=\"text-label\">Type</span>\n                </div>\n                <div class=\"col span-6 send-to\">\n                  <span class=\"text-label\">Send To</span>\n                </div>\n              </div>\n            </div>\n          </template>\n          <template v-slot:columns=\"scope\">\n            <div class=\"row responder\">\n              <div class=\"col span-6\">\n                <span v-if=\"isView\">{{ typeLabel(scope.row.value.type) }}</span>\n                <Select\n                  v-else\n                  v-model=\"scope.row.value.type\"\n                  :mode=\"mode\"\n                  :options=\"TYPES\"\n                />\n              </div>\n              <div class=\"col-span-6 target-container\">\n                <span v-if=\"isView\">{{ targetLabel(scope.row.value.target) }}: {{ scope.row.value.value }}</span>\n                <InputWithSelect\n                  v-else\n                  class=\"target\"\n                  :mode=\"mode\"\n                  :options=\"TARGETS\"\n                  :select-value=\"scope.row.value.target\"\n                  :text-value=\"scope.row.value.value\"\n                  @input=\"updateResponder($event, scope.row.value)\"\n                />\n              </div>\n            </div>\n          </template>\n        </ArrayList>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n  .responders-heading {\n    display: grid;\n    grid-template-columns: auto $array-list-remove-margin;\n  }\n\n  .responder {\n    &, .target-container {\n      width: 100%;\n    }\n\n    .target-container ::v-deep .unlabeled-select {\n      min-width: 35%;\n      height: 100%;\n    }\n\n    .target {\n      height: 100%;\n    }\n  }\n</style>\n"]}]}