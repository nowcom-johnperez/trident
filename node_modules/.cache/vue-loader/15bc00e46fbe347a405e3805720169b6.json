{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/pages/c/_cluster/monitoring/monitor/index.vue?vue&type=style&index=0&id=4732fe86&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/pages/c/_cluster/monitoring/monitor/index.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5oZWFkZXJ7CiAgZGlzcGxheTogZmxleDsKICBIMXsKICAgIGZsZXg6IDE7CiAgfQp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AA4FA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/@rancher/shell/pages/c/_cluster/monitoring/monitor","sourcesContent":["<script>\nimport Loading from '@shell/components/Loading';\nimport Tabbed from '@shell/components/Tabbed';\nimport Tab from '@shell/components/Tabbed/Tab';\nimport TypeDescription from '@shell/components/TypeDescription';\n\nimport ResourceTable from '@shell/components/ResourceTable';\nimport { MONITORING } from '@shell/config/types';\nimport { allHash } from '@shell/utils/promise';\nexport default {\n  components: {\n    Loading, Tabbed, Tab, ResourceTable, TypeDescription\n  },\n\n  async fetch() {\n    this.podMonitorSchema = this.$store.getters['cluster/schemaFor'](MONITORING.PODMONITOR);\n    this.serviceMonitorSchema = this.$store.getters['cluster/schemaFor'](MONITORING.SERVICEMONITOR);\n\n    const hash = await allHash( {\n      podMonitors:     this.$store.dispatch('cluster/findAll', { type: MONITORING.PODMONITOR } ),\n      serviceMonitors: this.$store.dispatch('cluster/findAll', { type: MONITORING.SERVICEMONITOR } )\n    });\n\n    this.podMonitors = hash.podMonitors;\n    this.serviceMonitors = hash.serviceMonitors;\n  },\n\n  data() {\n    const initTab = this.$route.query.resource || MONITORING.SPOOFED.PODMONITOR;\n\n    return {\n      podMonitors: [], serviceMonitors: [], podMonitorSchema: null, serviceMonitorSchema: null, initTab\n    };\n  },\n\n  computed: {\n    createRoute() {\n      const activeResource = this.$refs?.tabs?.activeTabName || this.routeSchema.id;\n\n      return {\n        name:   'c-cluster-monitoring-monitor-create',\n        params: { cluster: this.$route.params.cluster },\n        query:  { resource: activeResource }\n      };\n    },\n  }\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n  <div v-else>\n    <div class=\"row header mb-40\">\n      <h1>  {{ t('monitoring.monitors') }}</h1>\n      <div>\n        <button\n          class=\"btn btn-lg role-primary float right\"\n          @click=\"$router.push(createRoute)\"\n        >\n          {{ t('resourceList.head.createFromYaml') }}\n        </button>\n      </div>\n    </div>\n    <Tabbed\n      ref=\"tabs\"\n      :default-tab=\"initTab\"\n    >\n      <Tab\n        :name=\"podMonitorSchema.id\"\n        :label=\"$store.getters['type-map/labelFor'](podMonitorSchema, 2)\"\n      >\n        <TypeDescription :resource=\"podMonitorSchema.id\" />\n        <ResourceTable\n          :schema=\"podMonitorSchema\"\n          :rows=\"podMonitors\"\n        />\n      </Tab>\n      <Tab\n        :name=\"serviceMonitorSchema.id\"\n        :label=\"$store.getters['type-map/labelFor'](serviceMonitorSchema, 2)\"\n      >\n        <TypeDescription :resource=\"serviceMonitorSchema.id\" />\n        <ResourceTable\n          :schema=\"serviceMonitorSchema\"\n          :rows=\"serviceMonitors\"\n        />\n      </Tab>\n    </Tabbed>\n  </div>\n</template>\n\n<style lang='scss' scoped>\n.header{\n  display: flex;\n  H1{\n    flex: 1;\n  }\n}\n</style>\n"]}]}