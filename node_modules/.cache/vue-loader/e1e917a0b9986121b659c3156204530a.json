{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/monitoring.coreos.com.prometheusrule/GroupRules.vue?vue&type=style&index=0&id=5cb5b7d0&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/monitoring.coreos.com.prometheusrule/GroupRules.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5ydWxlcyB7CiAgLnJ1bGUgewogICAgYm9yZGVyOiBzb2xpZCAxcHggdmFyKC0tYm9yZGVyKTsKICAgIHBhZGRpbmc6IDIwcHg7CiAgICBtYXJnaW4tYm90dG9tOiAyMHB4OwogICAgcG9zaXRpb246IHJlbGF0aXZlOwogIH0KfQo="},{"version":3,"sources":["GroupRules.vue"],"names":[],"mappings":";AAyNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"GroupRules.vue","sourceRoot":"node_modules/@rancher/shell/edit/monitoring.coreos.com.prometheusrule","sourcesContent":["<script>\nimport has from 'lodash/has';\nimport { Banner } from '@components/Banner';\nimport { removeAt } from '@shell/utils/array';\nimport { _VIEW } from '@shell/config/query-params';\nimport ArrayListGrouped from '@shell/components/form/ArrayListGrouped';\nimport AlertingRule from './AlertingRule';\nimport RecordingRule from './RecordingRule';\n\nexport default {\n  components: {\n    ArrayListGrouped,\n    AlertingRule,\n    Banner,\n    RecordingRule,\n  },\n\n  props: {\n    value: {\n      type:    Array,\n      default: () => [],\n    },\n\n    mode: {\n      type:    String,\n      default: 'create',\n    },\n  },\n\n  data(props) {\n    const defaultAlert = {\n      alert:  '',\n      expr:   '',\n      for:    '0s',\n      labels: {\n        severity:     'none',\n        namespace:    'default',\n        cluster_id:   this.$store.getters['clusterId'],\n        cluster_name: this.$store.getters['currentCluster'].spec.displayName\n      },\n    };\n\n    if (!this.value.rules) {\n      this.value['rules'] = [defaultAlert];\n    }\n\n    return { defaultAlert };\n  },\n\n  computed: {\n    recordingRules() {\n      const { value: rules } = this;\n\n      return rules.filter((rule) => has(rule, 'record'));\n    },\n    alertingRules() {\n      const { value: rules } = this;\n\n      return rules.filter((rule) => has(rule, 'alert'));\n    },\n    customRules() {\n      const { value: rules } = this;\n\n      return rules.filter(\n        (rule) => !has(rule, 'alert') && !has(rule, 'record')\n      );\n    },\n    hideRecordingRulesOnView() {\n      return this.isView && (this.recordingRules || []).length === 0;\n    },\n    hideAlertingRulesOnView() {\n      return this.isView && (this.alertingRules || []).length === 0;\n    },\n    isView() {\n      return this.mode === _VIEW;\n    },\n    disableAddRecord() {\n      const { value: rules } = this;\n\n      return rules.find((rule) => has(rule, 'alert'));\n    },\n    disableAddAlert() {\n      const { value: rules } = this;\n\n      return rules.find((rule) => has(rule, 'record'));\n    },\n  },\n\n  methods: {\n    addRule(ruleType) {\n      const { value } = this;\n\n      switch (ruleType) {\n      case 'record':\n        value.push({\n          record: '',\n          expr:   '',\n          labels: {\n            severity:     'none',\n            namespace:    'default',\n            cluster_id:   this.$store.getters['clusterId'],\n            cluster_name: this.$store.getters['currentCluster'].spec.displayName\n\n          },\n        });\n        break;\n      case 'alert':\n        value.push(this.defaultAlert);\n        break;\n      default:\n        break;\n      }\n    },\n    removeRule(ruleIndex) {\n      removeAt(this.value, ruleIndex);\n    },\n  },\n};\n</script>\n\n<template>\n  <div class=\"container-group-rules\">\n    <div :class=\"[{ hide: hideRecordingRulesOnView }, 'container-recording-rules']\">\n      <h3 class=\"mt-20 mb-20\">\n        <t k=\"prometheusRule.recordingRules.label\" />\n        <i\n          v-if=\"disableAddRecord\"\n          v-clean-tooltip=\"t('validation.prometheusRule.groups.singleAlert')\"\n          class=\"icon icon-info\"\n        />\n      </h3>\n      <ArrayListGrouped :value=\"recordingRules\">\n        <template #default=\"props\">\n          <RecordingRule\n            class=\"rule\"\n            :value=\"props.row.value\"\n            :mode=\"mode\"\n          />\n        </template>\n        <template #add>\n          <button\n            v-if=\"!isView\"\n            :disabled=\"disableAddRecord\"\n            type=\"button\"\n            class=\"btn role-tertiary\"\n            @click=\"addRule('record')\"\n          >\n            <t k=\"prometheusRule.recordingRules.addLabel\" />\n          </button>\n          <span v-else />\n        </template>\n        <template v-slot:remove-button=\"props\">\n          <button\n            v-if=\"!isView\"\n            type=\"button\"\n            class=\"btn role-link close btn-sm\"\n            @click=\"removeRule(props.i)\"\n          >\n            <i class=\"icon icon-x\" />\n          </button>\n          <span v-else />\n        </template>\n      </ArrayListGrouped>\n    </div>\n    <div :class=\"[{ hide: hideAlertingRulesOnView }, 'container-alerting-rules']\">\n      <div class=\"mt-20 mb-20\">\n        <h3>\n          <t k=\"prometheusRule.alertingRules.label\" />\n          <i\n            v-if=\"disableAddAlert\"\n            v-clean-tooltip=\"t('validation.prometheusRule.groups.singleAlert')\"\n            class=\"icon icon-info\"\n          />\n        </h3>\n        <Banner\n          v-if=\"!isView\"\n          color=\"info\"\n          :label=\"t('prometheusRule.alertingRules.bannerText')\"\n        />\n      </div>\n      <ArrayListGrouped :value=\"alertingRules\">\n        <template #default=\"props\">\n          <AlertingRule\n            class=\"rule\"\n            :value=\"props.row.value\"\n            :mode=\"mode\"\n          />\n        </template>\n        <template #add>\n          <button\n            v-if=\"!isView\"\n            :disabled=\"disableAddAlert\"\n            type=\"button\"\n            class=\"btn role-tertiary\"\n            @click=\"addRule('alert')\"\n          >\n            <t k=\"prometheusRule.alertingRules.addLabel\" />\n          </button>\n          <span v-else />\n        </template>\n        <template v-slot:remove-button=\"props\">\n          <button\n            v-if=\"!isView\"\n            type=\"button\"\n            class=\"btn role-link close btn-sm\"\n            @click=\"removeRule(props.i)\"\n          >\n            <i class=\"icon icon-x\" />\n          </button>\n          <span v-else />\n        </template>\n      </ArrayListGrouped>\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.rules {\n  .rule {\n    border: solid 1px var(--border);\n    padding: 20px;\n    margin-bottom: 20px;\n    position: relative;\n  }\n}\n</style>\n"]}]}