{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/pages/c/_cluster/apps/charts/install.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/pages/c/_cluster/apps/charts/install.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBqc3lhbWwgZnJvbSAnanMteWFtbCc7CmltcG9ydCBtZXJnZSBmcm9tICdsb2Rhc2gvbWVyZ2UnOwppbXBvcnQgaXNFcXVhbCBmcm9tICdsb2Rhc2gvaXNFcXVhbCc7CmltcG9ydCB7IG1hcFByZWYsIERJRkYgfSBmcm9tICdAc2hlbGwvc3RvcmUvcHJlZnMnOwppbXBvcnQgeyBtYXBGZWF0dXJlLCBNVUxUSV9DTFVTVEVSLCBMRUdBQ1kgfSBmcm9tICdAc2hlbGwvc3RvcmUvZmVhdHVyZXMnOwppbXBvcnQgeyBtYXBHZXR0ZXJzIH0gZnJvbSAndnVleCc7CmltcG9ydCB7IEJhbm5lciB9IGZyb20gJ0Bjb21wb25lbnRzL0Jhbm5lcic7CmltcG9ydCBCdXR0b25Hcm91cCBmcm9tICdAc2hlbGwvY29tcG9uZW50cy9CdXR0b25Hcm91cCc7CmltcG9ydCBDaGFydFJlYWRtZSBmcm9tICdAc2hlbGwvY29tcG9uZW50cy9DaGFydFJlYWRtZSc7CmltcG9ydCB7IENoZWNrYm94IH0gZnJvbSAnQGNvbXBvbmVudHMvRm9ybS9DaGVja2JveCc7CmltcG9ydCBMYWJlbGVkU2VsZWN0IGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL2Zvcm0vTGFiZWxlZFNlbGVjdCc7CmltcG9ydCB7IExhYmVsZWRJbnB1dCB9IGZyb20gJ0Bjb21wb25lbnRzL0Zvcm0vTGFiZWxlZElucHV0JzsKaW1wb3J0IHsgTGFiZWxlZFRvb2x0aXAgfSBmcm9tICdAY29tcG9uZW50cy9MYWJlbGVkVG9vbHRpcCc7CmltcG9ydCBMYXp5SW1hZ2UgZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvTGF6eUltYWdlJzsKaW1wb3J0IExvYWRpbmcgZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvTG9hZGluZyc7CmltcG9ydCBOYW1lTnNEZXNjcmlwdGlvbiBmcm9tICdAc2hlbGwvY29tcG9uZW50cy9mb3JtL05hbWVOc0Rlc2NyaXB0aW9uJzsKaW1wb3J0IFJlc291cmNlQ2FuY2VsTW9kYWwgZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvUmVzb3VyY2VDYW5jZWxNb2RhbCc7CmltcG9ydCBRdWVzdGlvbnMgZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvUXVlc3Rpb25zJzsKaW1wb3J0IFRhYmJlZCBmcm9tICdAc2hlbGwvY29tcG9uZW50cy9UYWJiZWQnOwppbXBvcnQgVW5pdElucHV0IGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL2Zvcm0vVW5pdElucHV0JzsKaW1wb3J0IFlhbWxFZGl0b3IsIHsgRURJVE9SX01PREVTIH0gZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvWWFtbEVkaXRvcic7CmltcG9ydCBXaXphcmQgZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvV2l6YXJkJzsKaW1wb3J0IFR5cGVEZXNjcmlwdGlvbiBmcm9tICdAc2hlbGwvY29tcG9uZW50cy9UeXBlRGVzY3JpcHRpb24nOwppbXBvcnQgQ2hhcnRNaXhpbiBmcm9tICdAc2hlbGwvbWl4aW5zL2NoYXJ0JzsKaW1wb3J0IENoaWxkSG9vaywgeyBCRUZPUkVfU0FWRV9IT09LUywgQUZURVJfU0FWRV9IT09LUyB9IGZyb20gJ0BzaGVsbC9taXhpbnMvY2hpbGQtaG9vayc7CmltcG9ydCB7IENBVEFMT0csIE1BTkFHRU1FTlQsIERFRkFVTFRfV09SS1NQQUNFLCBDQVBJIH0gZnJvbSAnQHNoZWxsL2NvbmZpZy90eXBlcyc7CmltcG9ydCB7CiAgQ0hBUlQsIEZST01fQ0xVU1RFUiwgRlJPTV9UT09MUywgSElERV9TSURFX05BViwgTkFNRVNQQUNFLCBSRVBPLCBSRVBPX1RZUEUsIFZFUlNJT04sIF9GTEFHR0VECn0gZnJvbSAnQHNoZWxsL2NvbmZpZy9xdWVyeS1wYXJhbXMnOwppbXBvcnQgeyBDQVRBTE9HIGFzIENBVEFMT0dfQU5OT1RBVElPTlMsIFBST0pFQ1QgfSBmcm9tICdAc2hlbGwvY29uZmlnL2xhYmVscy1hbm5vdGF0aW9ucyc7CgppbXBvcnQgeyBleGNlcHRpb25Ub0Vycm9yc0FycmF5IH0gZnJvbSAnQHNoZWxsL3V0aWxzL2Vycm9yJzsKaW1wb3J0IHsgY2xvbmUsIGRpZmYsIGdldCwgc2V0IH0gZnJvbSAnQHNoZWxsL3V0aWxzL29iamVjdCc7CmltcG9ydCB7IGlnbm9yZVZhcmlhYmxlcyB9IGZyb20gJy4vaW5zdGFsbC5oZWxwZXJzJzsKaW1wb3J0IHsgZmluZEJ5LCBpbnNlcnRBdCB9IGZyb20gJ0BzaGVsbC91dGlscy9hcnJheSc7CmltcG9ydCBWdWUgZnJvbSAndnVlJzsKaW1wb3J0IHsgc2FmZXJEdW1wIH0gZnJvbSAnQHNoZWxsL3V0aWxzL2NyZWF0ZS15YW1sJzsKaW1wb3J0IHsgTElOVVgsIFdJTkRPV1MgfSBmcm9tICdAc2hlbGwvc3RvcmUvY2F0YWxvZyc7Cgpjb25zdCBWQUxVRVNfU1RBVEUgPSB7CiAgRk9STTogJ0ZPUk0nLAogIFlBTUw6ICdZQU1MJywKICBESUZGOiAnRElGRicKfTsKCmZ1bmN0aW9uIGlzUGxhaW5MYXlvdXQocXVlcnkpIHsKICByZXR1cm4gT2JqZWN0LmtleXMocXVlcnkpLmluY2x1ZGVzKEhJREVfU0lERV9OQVYpOwp9CgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0luc3RhbGwnLAoKICBsYXlvdXQoY29udGV4dCkgewogICAgcmV0dXJuIGlzUGxhaW5MYXlvdXQoY29udGV4dC5xdWVyeSkgPyAncGxhaW4nIDogJyc7CiAgfSwKCiAgY29tcG9uZW50czogewogICAgQmFubmVyLAogICAgQnV0dG9uR3JvdXAsCiAgICBDaGFydFJlYWRtZSwKICAgIENoZWNrYm94LAogICAgTGFiZWxlZElucHV0LAogICAgTGFiZWxlZFNlbGVjdCwKICAgIExhYmVsZWRUb29sdGlwLAogICAgTGF6eUltYWdlLAogICAgTG9hZGluZywKICAgIE5hbWVOc0Rlc2NyaXB0aW9uLAogICAgUmVzb3VyY2VDYW5jZWxNb2RhbCwKICAgIFF1ZXN0aW9ucywKICAgIFRhYmJlZCwKICAgIFVuaXRJbnB1dCwKICAgIFlhbWxFZGl0b3IsCiAgICBXaXphcmQsCiAgICBUeXBlRGVzY3JpcHRpb24KICB9LAoKICBtaXhpbnM6IFsKICAgIENoaWxkSG9vaywKICAgIENoYXJ0TWl4aW4KICBdLAoKICBhc3luYyBmZXRjaCgpIHsKICAgIHRoaXMuZXJyb3JzID0gW107CiAgICAvLyBJTVBPUlRBTlQhIEFueSBleGNlcHRpb24gdGhyb3duIGJlZm9yZSB0aGlzLnZhbHVlIGlzIHNldCB3aWxsIHJlc3VsdCBpbiBhbiBlbXB0eSBwYWdlCgogICAgLyoKICAgICAgZmV0Y2hDaGFydCBpcyBkZWZpbmVkIGluIHNoZWxsL21peGlucy4gSXQgZmlyc3QgY2hlY2tzIHRoZSBVUkwKICAgICAgcXVlcnkgZm9yIGFuIGFwcCBuYW1lIGFuZCBuYW1lc3BhY2UuIEl0IHVzZXMgdGhvc2UgdmFsdWVzIHRvIGNoZWNrCiAgICAgIGZvciBhIGNhdGFsb2cgYXBwIHJlc291cmNlLiBJZiBmb3VuZCwgaXQgc2V0cyB0aGUgZm9ybSB0byBlZGl0CiAgICAgIG1vZGUuIElmIG5vdCwgaXQgc2V0cyB0aGUgZm9ybSB0byBjcmVhdGUgbW9kZS4KCiAgICAgIElmIHRoZSBhcHAgYW5kIGFwcCBuYW1lc3BhY2UgYXJlIG5vdCBwcm92aWRlZCBpbiB0aGUgcXVlcnksCiAgICAgIGl0IGNoZWNrcyBmb3IgdGFyZ2V0IG5hbWUgYW5kIG5hbWVzcGFjZSB2YWx1ZXMgZGVmaW5lZCBpbiB0aGUKICAgICAgSGVsbSBjaGFydCBpdHNlbGYuCiAgICAqLwogICAgdHJ5IHsKICAgICAgYXdhaXQgdGhpcy5mZXRjaENoYXJ0KCk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIGNvbnNvbGUud2FybignVW5hYmxlIHRvIGZldGNoIGNoYXJ0OiAnLCBlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlCiAgICB9CgogICAgdHJ5IHsKICAgICAgYXdhaXQgdGhpcy5mZXRjaEF1dG9JbnN0YWxsSW5mbygpOwogICAgfSBjYXRjaCAoZSkgewogICAgICBjb25zb2xlLndhcm4oJ1VuYWJsZSB0byBkZXRlcm1pbmUgaWYgb3RoZXIgY2hhcnRzIHJlcXVpcmUgaW5zdGFsbDogJywgZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZQogICAgfQoKICAgIC8vIElmIHRoZSBjaGFydCBkb2Vzbid0IGNvbnRhaW4gc3lzdGVtIGBzeXN0ZW1EZWZhdWx0UmVnaXN0cnlgIHByb3BlcnRpZXMgdGhlcmUncyBubyBwb2ludCBhcHBseWluZyB0aGVtCiAgICBpZiAodGhpcy5zaG93Q3VzdG9tUmVnaXN0cnkpIHsKICAgICAgLy8gTm90ZTogQ2x1c3RlciBzY29wZWQgcmVnaXN0cnkgaXMgb25seSBzdXBwb3J0ZWQgZm9yIG5vZGUgZHJpdmVyIGNsdXN0ZXJzCiAgICAgIHRyeSB7CiAgICAgICAgdGhpcy5jbHVzdGVyUmVnaXN0cnkgPSBhd2FpdCB0aGlzLmdldENsdXN0ZXJSZWdpc3RyeSgpOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgY29uc29sZS53YXJuKCdVbmFibGUgdG8gZ2V0IGNsdXN0ZXIgcmVnaXN0cnk6ICcsIGUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGUKICAgICAgfQoKICAgICAgdHJ5IHsKICAgICAgICB0aGlzLmdsb2JhbFJlZ2lzdHJ5ID0gYXdhaXQgdGhpcy5nZXRHbG9iYWxSZWdpc3RyeSgpOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgY29uc29sZS53YXJuKCdVbmFibGUgdG8gZ2V0IGdsb2JhbCByZWdpc3RyeTogJywgZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZQogICAgICB9CiAgICAgIHRoaXMuZGVmYXVsdFJlZ2lzdHJ5U2V0dGluZyA9IHRoaXMuY2x1c3RlclJlZ2lzdHJ5IHx8IHRoaXMuZ2xvYmFsUmVnaXN0cnk7CiAgICB9CgogICAgdHJ5IHsKICAgICAgdGhpcy5zZXJ2ZXJVcmxTZXR0aW5nID0gYXdhaXQgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ21hbmFnZW1lbnQvZmluZCcsIHsKICAgICAgICB0eXBlOiBNQU5BR0VNRU5ULlNFVFRJTkcsCiAgICAgICAgaWQ6ICAgJ3NlcnZlci11cmwnCiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICBjb25zb2xlLmVycm9yKCdVbmFibGUgdG8gZmV0Y2ggYHNlcnZlci11cmxgIHNldHRpbmc6ICcsIGUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGUKICAgIH0KCiAgICAvKgogICAgICBGaWd1cmUgb3V0IHRoZSBuYW1lc3BhY2Ugd2hlcmUgdGhlIGNoYXJ0IGlzCiAgICAgIGJlaW5nIGluc3RhbGxlZCBvciB1cGdyYWRlZC4KICAgICovCiAgICBpZiAoIHRoaXMuZXhpc3RpbmcgKSB7CiAgICAgIC8qCiAgICAgIElmIHRoZSBIZWxtIGNoYXJ0IGlzIGFscmVhZHkgaW5zdGFsbGVkLAogICAgICB1c2UgdGhlIGV4aXN0aW5nIG5hbWVzcGFjZSBieSBkZWZhdWx0LgogICAgKi8KCiAgICAgIHRoaXMuZm9yY2VOYW1lc3BhY2UgPSB0aGlzLmV4aXN0aW5nLm1ldGFkYXRhLm5hbWVzcGFjZTsKICAgICAgdGhpcy5uYW1lRGlzYWJsZWQgPSB0cnVlOwogICAgfSBlbHNlIGlmICh0aGlzLiRyb3V0ZS5xdWVyeVtGUk9NX0NMVVNURVJdID09PSBfRkxBR0dFRCkgewogICAgICAvKiBGb3IgRmxlZXQsIHVzZSB0aGUgZmxlZXQtZGVmYXVsdCBuYW1lc3BhY2UuICovCiAgICAgIHRoaXMuZm9yY2VOYW1lc3BhY2UgPSBERUZBVUxUX1dPUktTUEFDRTsKICAgIH0gZWxzZSBpZiAoIHRoaXMuY2hhcnQ/LnRhcmdldE5hbWVzcGFjZSApIHsKICAgICAgLyogSWYgYSB0YXJnZXQgbmFtZXNwYWNlIGlzIGRlZmluZWQgaW4gdGhlIGNoYXJ0LAogICAgICBzZXQgdGhlIHRhcmdldCBuYW1lc3BhY2UgYXMgZGVmYXVsdC4gKi8KICAgICAgdGhpcy5mb3JjZU5hbWVzcGFjZSA9IHRoaXMuY2hhcnQudGFyZ2V0TmFtZXNwYWNlOwogICAgfSBlbHNlIGlmICggdGhpcy5xdWVyeS5hcHBOYW1lc3BhY2UgKSB7CiAgICAgIC8qIElmIGEgbmFtZXNwYWNlIGlzIGRlZmluZWQgaW4gdGhlIFVSTCBxdWVyeSwKICAgICAgIHVzZSB0aGF0IG5hbWVzcGFjZSBhcyBkZWZhdWx0LiAqLwogICAgICB0aGlzLmZvcmNlTmFtZXNwYWNlID0gdGhpcy5xdWVyeS5hcHBOYW1lc3BhY2U7CiAgICB9IGVsc2UgewogICAgICB0aGlzLmZvcmNlTmFtZXNwYWNlID0gbnVsbDsKICAgIH0KCiAgICAvKiBDaGVjayBpZiB0aGUgYXBwIGlzIGRlcHJlY2F0ZWQuICovCiAgICB0cnkgewogICAgICB0aGlzLmxlZ2FjeUFwcCA9IHRoaXMuZXhpc3RpbmcgPyBhd2FpdCB0aGlzLmV4aXN0aW5nLmRlcGxveWVkQXNMZWdhY3koKSA6IGZhbHNlOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aGlzLmxlZ2FjeUFwcCA9IGZhbHNlOwogICAgICBjb25zb2xlLndhcm4oJ1VuYWJsZSB0byBkZXRlcm1pbmUgaWYgZXhpc3RpbmcgaW5zdGFsbCBpcyBhIGxlZ2FjeSBhcHA6ICcsIGUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGUKICAgIH0KCiAgICAvKiBDaGVjayBpZiB0aGUgYXBwIGlzIGEgbXVsdGljbHVzdGVyIGRlcHJlY2F0ZWQgYXBwLgogICAgKE11bHRpY2x1c3RlciBhcHBzIHdlcmUgcmVwbGFjZWQgYnkgRmxlZXQuKSAqLwoKICAgIHRyeSB7CiAgICAgIHRoaXMubWNhcHAgPSB0aGlzLmV4aXN0aW5nID8gYXdhaXQgdGhpcy5leGlzdGluZy5kZXBsb3llZEFzTXVsdGlDbHVzdGVyKCkgOiBmYWxzZTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhpcy5tY2FwcCA9IGZhbHNlOwogICAgICBjb25zb2xlLndhcm4oJ1VuYWJsZSB0byBkZXRlcm1pbmUgaWYgZXhpc3RpbmcgaW5zdGFsbCBpcyBhIG1jIGFwcDogJywgZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZQogICAgfQoKICAgIC8qIFRoZSBmb3JtIHN0YXRlIGlzIGludGlhbGl6ZWQgYXMgYSBjaGFydEluc3RhbGxBY3Rpb24gcmVzb3VyY2UuICovCiAgICB0cnkgewogICAgICB0aGlzLnZhbHVlID0gYXdhaXQgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2NsdXN0ZXIvY3JlYXRlJywgewogICAgICAgIHR5cGU6ICAgICAnY2hhcnRJbnN0YWxsQWN0aW9uJywKICAgICAgICBtZXRhZGF0YTogewogICAgICAgICAgbmFtZXNwYWNlOiB0aGlzLmZvcmNlTmFtZXNwYWNlIHx8IHRoaXMuJHN0b3JlLmdldHRlcnNbJ2RlZmF1bHROYW1lc3BhY2UnXSwKICAgICAgICAgIG5hbWU6ICAgICAgdGhpcy5leGlzdGluZz8uc3BlYz8ubmFtZSB8fCB0aGlzLnF1ZXJ5LmFwcE5hbWUgfHwgJycsCiAgICAgICAgfQogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgY29uc29sZS5lcnJvcignVW5hYmxlIHRvIGNyZWF0ZSBvYmplY3Qgb2YgdHlwZSBgY2hhcnRJbnN0YWxsQWN0aW9uYDogJywgZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZQoKICAgICAgLy8gTm90aGluZydzIGdvaW5nIHRvIHdvcmsgd2l0aG91dCBhIGB2YWx1ZWAuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcmFuY2hlci9kYXNoYm9hcmQvaXNzdWVzLzk0NTIgdG8gaGFuZGxlIHRoaXMgYW5kIG90aGVyIGNhdGNoZXMuCiAgICAgIHJldHVybjsKICAgIH0KCiAgICAvKiBMb2dpYyBmb3Igd2hlbiB0aGUgSGVsbSBjaGFydCBpcyBub3QgYWxyZWFkeSBpbnN0YWxsZWQgKi8KICAgIGlmICggIXRoaXMuZXhpc3RpbmcpIHsKICAgICAgLyoKICAgICAgICBUaGUgdGFyZ2V0IG5hbWUgaXMgdXNlZCBmb3IgR2l0IHJlcG9zIGZvciBGbGVldC4KICAgICAgICBUaGUgdGFyZ2V0IG5hbWUgaW5kaWNhdGVzIHRoZSBuYW1lIG9mIHRoZSBjbHVzdGVyCiAgICAgICAgZ3JvdXAgdGhhdCB0aGUgY2hhcnQgaXMgbWVhbnQgdG8gYmUgaW5zdGFsbGVkIGluLgogICAgICAqLwogICAgICBpZiAoIHRoaXMuY2hhcnQ/LnRhcmdldE5hbWUgKSB7CiAgICAgICAgLyoKICAgICAgICAgIFNldCB0aGUgbmFtZSBvZiB0aGUgY2hhcnRJbnN0YWxsQWN0aW9uCiAgICAgICAgICB0byB0aGUgbmFtZSBvZiB0aGUgY2x1c3RlciBncm91cAogICAgICAgICAgd2hlcmUgdGhlIGNoYXJ0IHNob3VsZCBiZSBpbnN0YWxsZWQuCiAgICAgICAgKi8KICAgICAgICB0aGlzLnZhbHVlLm1ldGFkYXRhLm5hbWUgPSB0aGlzLmNoYXJ0LnRhcmdldE5hbWU7CiAgICAgICAgdGhpcy5uYW1lRGlzYWJsZWQgPSB0cnVlOwogICAgICB9IGVsc2UgaWYgKCB0aGlzLnF1ZXJ5LmFwcE5hbWUgKSB7CiAgICAgICAgdGhpcy52YWx1ZS5tZXRhZGF0YS5uYW1lID0gdGhpcy5xdWVyeS5hcHBOYW1lOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMubmFtZURpc2FibGVkID0gZmFsc2U7CiAgICAgIH0KCiAgICAgIGlmICggdGhpcy5xdWVyeS5kZXNjcmlwdGlvbiApIHsKICAgICAgICB0aGlzLmN1c3RvbUNtZE9wdHMuZGVzY3JpcHRpb24gPSB0aGlzLnF1ZXJ5LmRlc2NyaXB0aW9uOwogICAgICB9CiAgICB9IC8qIEVuZCBvZiBsb2dpYyBmb3Igd2hlbiBjaGFydCBpcyBhbHJlYWR5IGluc3RhbGxlZCAqLwoKICAgIC8qCiAgICAgIExvZ2ljIGZvciB3aGF0IHRvIGRvIGlmIHRoZSB1c2VyIGlzIGluc3RhbGxpbmcKICAgICAgdGhlIEhlbG0gY2hhcnQgZm9yIHRoZSBmaXJzdCB0aW1lIGFuZCBhIGRlZmF1bHQKICAgICAgbmFtZXNwYWNlIGhhcyBiZWVuIHNldC4KICAgICovCiAgICBpZiAodGhpcy5mb3JjZU5hbWVzcGFjZSAmJiAhdGhpcy5leGlzdGluZykgewogICAgICBsZXQgbnM7CgogICAgICAvKgogICAgICAgIEJlZm9yZSBtb3ZpbmcgZm9yd2FyZCwgY2hlY2sgdG8gbWFrZSBzdXJlIHRoZQogICAgICAgIGRlZmF1bHQgbmFtZXNwYWNlIGV4aXN0cyBhbmQgdGhlIGxvZ2dlZC1pbiB1c2VyCiAgICAgICAgaGFzIHBlcm1pc3Npb24gdG8gc2VlIGl0LgogICAgICAqLwogICAgICB0cnkgewogICAgICAgIG5zID0gYXdhaXQgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2NsdXN0ZXIvZmluZCcsIHsgdHlwZTogTkFNRVNQQUNFLCBpZDogdGhpcy5mb3JjZU5hbWVzcGFjZSB9KTsKICAgICAgICBjb25zdCBwcm9qZWN0ID0gbnMubWV0YWRhdGEuYW5ub3RhdGlvbnM/LltQUk9KRUNUXTsKCiAgICAgICAgaWYgKHByb2plY3QpIHsKICAgICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3QucmVwbGFjZSgnOicsICcvJyk7CiAgICAgICAgfQogICAgICB9IGNhdGNoIHt9CiAgICB9CgogICAgLyogSWYgbm8gY2hhcnQgYnkgdGhlIGdpdmVuIGFwcCBuYW1lIGFuZCBuYW1lc3BhY2UKICAgICBjYW4gYmUgZm91bmQsIG9yIGlmIG5vIHZlcnNpb24gaXMgZm91bmQsIGRvIG5vdGhpbmcuICovCiAgICBpZiAoICF0aGlzLmNoYXJ0IHx8ICF0aGlzLnF1ZXJ5LnZlcnNpb25OYW1lKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBpZiAoIHRoaXMudmVyc2lvbiAmJiBwcm9jZXNzLmNsaWVudCApIHsKICAgICAgLyoKICAgICAgICBDaGVjayBpZiB0aGUgSGVsbSBjaGFydCBoYXMgcHJvdmlkZWQgdGhlIG5hbWUKICAgICAgICBvZiBhIFZ1ZSBjb21wb25lbnQgdG8gdXNlIGZvciBjb25maWd1cmluZwogICAgICAgIGNoYXJ0IHZhbHVlcy4gSWYgc28sIGxvYWQgdGhhdCBjb21wb25lbnQuCgogICAgICAgIFRoaXMgd2lsbCBzZXQgdGhpcy52YWx1ZXNDb21wb25lbnQsCiAgICAgICAgdGhpcy5jb21wb25lbnRIYXNUYWJzIGFuZCB0aGlzLnNob3dWYWx1ZXNDb21wb25lbnQuCiAgICAgICovCiAgICAgIGF3YWl0IHRoaXMubG9hZFZhbHVlc0NvbXBvbmVudCgpOwogICAgfQoKICAgIC8qCiAgICAgIENoZWNrIGlmIHRoZSBIZWxtIGNoYXJ0IGhhcyBpbmRpY2F0ZWQKICAgICAgdGhhdCB0aGUgdXNlciBzaG91bGQgZmlsbCBvdXQgdGhlIGNoYXJ0IHZhbHVlcwogICAgICB0aHJvdWdoIGEgd2l6YXJkLXN0eWxlIHdvcmtmbG93LiBJZiBzbywgbG9hZAogICAgICB0aGUgY2hhcnQgc3RlcHMuCiAgICAqLwogICAgYXdhaXQgdGhpcy5sb2FkQ2hhcnRTdGVwcygpOwoKICAgIC8qCiAgICAgIHRoaXMubG9hZGVkVmVyc2lvbiB3aWxsIG9ubHkgYmUgdHJ1ZSBpZiB5b3Ugc2VsZWN0IGEgbm9uLWRlZmFsdXQKICAgICAgb3B0aW9uIGZyb20gdGhlICJWZXJzaW9uIiBkcm9wZG93biBtZW51IGluIEFwcHMgJiBNYXJrZXRwbGFjZQogICAgICB3aGVuIHVwZGF0aW5nIGEgcHJldmlvdXNseSBpbnN0YWxsZWQgYXBwLgogICAgKi8KICAgIGlmICggIXRoaXMubG9hZGVkVmVyc2lvbiB8fCB0aGlzLmxvYWRlZFZlcnNpb24gIT09IHRoaXMudmVyc2lvbi5rZXkgKSB7CiAgICAgIGxldCB1c2VyVmFsdWVzOwoKICAgICAgLyoKICAgICAgICBXaGVuIHlvdSBzZWxlY3QgYSB2ZXJzaW9uLCBhIG5ldyBjaGFydCBpcyBsb2FkZWQuIFRoZW4KICAgICAgICBSYW5jaGVyIGFudGljaXBhdGVzIHRoYXQgeW91IHByb2JhYmx5IHdhbnQgdG8gcG9ydCBhbGwgb2YgeW91cgogICAgICAgIHByZXZpb3VzbHkgY3VzdG9taXplZCwgbm9uLWRlZmF1bHQgdmFsdWVzIGZyb20gdGhlIG9sZCBjaGFydAogICAgICAgIHZlcnNpb24gdG8gdGhlIG5ldyBjaGFydCB2ZXJzaW9uLCBzbyBpdCBhcHBsaWVzIHRoZSBwcmV2aW91cwogICAgICAgIGNoYXJ0J3MgY3VzdG9taXphdGlvbiB0byB0aGUgbmV3IGNoYXJ0IHZhbHVlcyBiZWZvcmUKICAgICAgICB5b3Ugc2VlIHRoZSB2YWx1ZXMgZm9ybSBvbiB0aGUgbmV4dCBwYWdlIGluIHRoZSB3b3JrZmxvdy4KICAgICAgKi8KICAgICAgaWYgKCB0aGlzLmxvYWRlZFZlcnNpb24gKSB7CiAgICAgICAgaWYgKCB0aGlzLnNob3dpbmdZYW1sICkgewogICAgICAgICAgdGhpcy5hcHBseVlhbWxUb1ZhbHVlcygpOwogICAgICAgIH0KICAgICAgICAvKgogICAgICAgICAgdGhpcy5sb2FkZWRWZXJzaW9uVmFsdWVzIGlzIHRha2VuIGZyb20gdmVyc2lvbkluZm8sCiAgICAgICAgICB3aGljaCBjb250YWlucyBldmVyeXRoaW5nIHRoZXJlIGlzIHRvIGtub3cgYWJvdXQgYSBzcGVjaWZpYwogICAgICAgICAgdmVyc2lvbiBvZiBhIEhlbG0gY2hhcnQsIGluY2x1ZGluZyBhbGwgY2hhcnQgdmFsdWVzLAogICAgICAgICAgY2hhcnQgbWV0YWRhdGEsIGEgc2hvcnQgYXBwIFJFQURNRSBhbmQgYSBtb3JlCiAgICAgICAgICB2ZXJzaW9uLXNwZWNpZmljIFJFQURNRSBjYWxsZWQgdGhlIGNoYXJ0IFJFQURNRS4KCiAgICAgICAgICBIZXJlIHdlIGFzc3VtZSB0aGF0IGFueSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIHZhbHVlcyBpbgogICAgICAgICAgdHdvIGRpZmZlcmVudCBIZWxtIGNoYXJ0IHZlcnNpb25zIGlzIGEgInVzZXIgdmFsdWUsIiBvcgogICAgICAgICAgYSB1c2VyLXNlbGVjdGVkIGN1c3RvbWl6YXRpb24uCiAgICAgICAgKi8KICAgICAgICB1c2VyVmFsdWVzID0gZGlmZih0aGlzLmxvYWRlZFZlcnNpb25WYWx1ZXMsIHRoaXMuY2hhcnRWYWx1ZXMpOwogICAgICB9IGVsc2UgaWYgKCB0aGlzLmV4aXN0aW5nICkgewogICAgICAgIC8qIEZvciBhbiBhbHJlYWR5IGluc3RhbGxlZCBhcHAsIHVzZSB0aGUgdmFsdWVzIGZyb20gdGhlIHByZXZpb3VzIGluc3RhbGwuICovCiAgICAgICAgdXNlclZhbHVlcyA9IGNsb25lKHRoaXMuZXhpc3Rpbmcuc3BlYz8udmFsdWVzIHx8IHt9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvKiBGb3IgYW4gbmV3IGFwcCwgc3RhcnQgZW1wdHkuICovCiAgICAgICAgdXNlclZhbHVlcyA9IHt9OwogICAgICB9CgogICAgICAvKgogICAgICAgIFJlbW92ZSBnbG9iYWwgdmFsdWVzIGlmIHRoZXkgYXJlIGlkZW50aWNhbCB0bwogICAgICAgIHRoZSBjdXJyZW50bHkgYXZhaWxhYmxlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjbHVzdGVyCiAgICAgICAgYW5kIFJhbmNoZXIgc2V0dGluZ3MuCgogICAgICAgIEltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgSGVsbSBjaGFydCBpcyBpbnN0YWxsZWQgb3IKICAgICAgICB1cGdyYWRlZCwgdGhlIGdsb2JhbCB2YWx1ZXMgYXJlIHJlLWFkZGVkLgogICAgICAqLwogICAgICB0aGlzLnJlbW92ZUdsb2JhbFZhbHVlc0Zyb20odXNlclZhbHVlcyk7CgogICAgICAvKgogICAgICAgIFRoZSBtZXJnZSgpIG1ldGhvZCBpcyB1c2VkIHRvIG1lcmdlIHR3byBvciBtb3JlIG9iamVjdHMKICAgICAgICBzdGFydGluZyB3aXRoIHRoZSBsZWZ0LW1vc3QgdG8gdGhlIHJpZ2h0LW1vc3QgdG8gY3JlYXRlIGEKICAgICAgICBwYXJlbnQgbWFwcGluZyBvYmplY3QuIFdoZW4gdHdvIGtleXMgYXJlIHRoZSBzYW1lLCB0aGUKICAgICAgICBnZW5lcmF0ZWQgb2JqZWN0IHdpbGwgaGF2ZSB2YWx1ZSBmb3IgdGhlIHJpZ2h0bW9zdCBrZXkuCiAgICAgICAgSW4gdGhpcyBjYXNlLCBhbnkgdmFsdWVzIGluIHVzZXJWYWx1ZXMgb3ZlcnJpZGUgYW55CiAgICAgICAgbWF0Y2hpbmcgdmFsdWVzIGluIHZlcnNpb25JbmZvLgogICAgICAqLwogICAgICB0aGlzLmNoYXJ0VmFsdWVzID0gbWVyZ2UobWVyZ2Uoe30sIHRoaXMudmVyc2lvbkluZm8/LnZhbHVlcyB8fCB7fSksIHVzZXJWYWx1ZXMpOwoKICAgICAgaWYgKHRoaXMuc2hvd0N1c3RvbVJlZ2lzdHJ5KSB7CiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIGlucHV0IHRvIGNvbmZpZ3VyZSB0aGUgcmVnaXN0cnkgc2hvdWxkIG5ldmVyIGJlCiAgICAgICAgICogc2hvd24gZm9yIHRoaXJkLXBhcnR5IGNoYXJ0cywgd2hpY2ggZG9uJ3QgaGF2ZSBSYW5jaGVyCiAgICAgICAgICogZ2xvYmFsIHZhbHVlcy4KICAgICAgICAgKi8KICAgICAgICBjb25zdCBleGlzdGluZ1JlZ2lzdHJ5ID0gdGhpcy5jaGFydFZhbHVlcz8uZ2xvYmFsPy5zeXN0ZW1EZWZhdWx0UmVnaXN0cnkgfHwgdGhpcy5jaGFydFZhbHVlcz8uZ2xvYmFsPy5jYXR0bGU/LnN5c3RlbURlZmF1bHRSZWdpc3RyeTsKCiAgICAgICAgZGVsZXRlIHRoaXMuY2hhcnRWYWx1ZXM/Lmdsb2JhbD8uc3lzdGVtRGVmYXVsdFJlZ2lzdHJ5OwogICAgICAgIGRlbGV0ZSB0aGlzLmNoYXJ0VmFsdWVzPy5nbG9iYWw/LmNhdHRsZT8uc3lzdGVtRGVmYXVsdFJlZ2lzdHJ5OwoKICAgICAgICB0aGlzLmN1c3RvbVJlZ2lzdHJ5U2V0dGluZyA9IGV4aXN0aW5nUmVnaXN0cnkgfHwgdGhpcy5kZWZhdWx0UmVnaXN0cnlTZXR0aW5nOwogICAgICAgIHRoaXMuc2hvd0N1c3RvbVJlZ2lzdHJ5SW5wdXQgPSAhIXRoaXMuY3VzdG9tUmVnaXN0cnlTZXR0aW5nOwogICAgICB9CgogICAgICAvKiBTZXJpYWxpemVzIGFuIG9iamVjdCBhcyBhIFlBTUwgZG9jdW1lbnQgKi8KICAgICAgdGhpcy52YWx1ZXNZYW1sID0gc2FmZXJEdW1wKHRoaXMuY2hhcnRWYWx1ZXMpOwoKICAgICAgLyogRm9yIFlBTUwgZGlmZiAqLwogICAgICBpZiAoICF0aGlzLmxvYWRlZFZlcnNpb24gKSB7CiAgICAgICAgdGhpcy5vcmlnaW5hbFlhbWxWYWx1ZXMgPSB0aGlzLnZhbHVlc1lhbWw7CiAgICAgIH0KCiAgICAgIHRoaXMubG9hZGVkVmVyc2lvblZhbHVlcyA9IHRoaXMudmVyc2lvbkluZm8/LnZhbHVlcyB8fCB7fTsKICAgICAgdGhpcy5sb2FkZWRWZXJzaW9uID0gdGhpcy52ZXJzaW9uPy5rZXk7CiAgICB9CgogICAgLyogQ2hlY2sgaWYgY2hhcnQgZXhpc3RzIGFuZCBpZiByZXF1aXJlZCB2YWx1ZXMgZXhpc3QgKi8KICAgIHRoaXMudXBkYXRlU3RlcE9uZVJlYWR5KCk7CgogICAgdGhpcy5wcmVGb3JtWWFtbE9wdGlvbiA9IHRoaXMudmFsdWVzQ29tcG9uZW50IHx8IHRoaXMuaGFzUXVlc3Rpb25zID8gVkFMVUVTX1NUQVRFLkZPUk0gOiBWQUxVRVNfU1RBVEUuWUFNTDsKCiAgICAvKiBMb29rIGZvciBhbm5vdGF0aW9uIHRvIHNheSB0aGlzIGFwcCBpcyBhIGxlZ2FjeSBtaWdyYXRlZCBhcHAgKHdlIGxvb2sgaW4gZWl0aGVyIHBsYWNlIGZvciBub3cpICovCiAgICB0aGlzLm1pZ3JhdGVkQXBwID0gKHRoaXMuZXhpc3Rpbmc/LnNwZWM/LmNoYXJ0Py5tZXRhZGF0YT8uYW5ub3RhdGlvbnM/LltDQVRBTE9HX0FOTk9UQVRJT05TLk1JR1JBVEVEXSA9PT0gJ3RydWUnKTsKICB9LAoKICBkYXRhKCkgewogICAgLyogSGVsbSBDTEkgb3B0aW9ucyB0aGF0IGFyZSBub3QgcGVyc2lzdGVkIG9uIHRoZSBiYWNrIGVuZCwKICAgIGJ1dCBhcmUgdXNlZCBmb3IgdGhlIGZpbmFsIGluc3RhbGwvdXBncmFkZSBvcGVyYXRpb24uICovCiAgICBjb25zdCBkZWZhdWx0Q21kT3B0cyA9IHsKICAgICAgY2xlYW51cE9uRmFpbDogZmFsc2UsCiAgICAgIGNyZHM6ICAgICAgICAgIHRydWUsCiAgICAgIGhvb2tzOiAgICAgICAgIHRydWUsCiAgICAgIGZvcmNlOiAgICAgICAgIGZhbHNlLAogICAgICByZXNldFZhbHVlczogICBmYWxzZSwKICAgICAgb3BlbkFwaTogICAgICAgdHJ1ZSwKICAgICAgd2FpdDogICAgICAgICAgdHJ1ZSwKICAgICAgdGltZW91dDogICAgICAgNjAwLAogICAgICBoaXN0b3J5TWF4OiAgICA1LAogICAgfTsKCiAgICByZXR1cm4gewogICAgICBkZWZhdWx0UmVnaXN0cnlTZXR0aW5nOiAnJywKICAgICAgY3VzdG9tUmVnaXN0cnlTZXR0aW5nOiAgJycsCiAgICAgIHNlcnZlclVybFNldHRpbmc6ICAgICAgIG51bGwsCiAgICAgIGNoYXJ0VmFsdWVzOiAgICAgICAgICAgIG51bGwsCiAgICAgIGNsdXN0ZXJSZWdpc3RyeTogICAgICAgICcnLAogICAgICBvcmlnaW5hbFlhbWxWYWx1ZXM6ICAgICBudWxsLAogICAgICBwcmV2aW91c1lhbWxWYWx1ZXM6ICAgICBudWxsLAogICAgICBlcnJvcnM6ICAgICAgICAgICAgICAgICBudWxsLAogICAgICBleGlzdGluZzogICAgICAgICAgICAgICBudWxsLAogICAgICBnbG9iYWxSZWdpc3RyeTogICAgICAgICAnJywKICAgICAgZm9yY2VOYW1lc3BhY2U6ICAgICAgICAgbnVsbCwKICAgICAgbG9hZGVkVmVyc2lvbjogICAgICAgICAgbnVsbCwKICAgICAgbG9hZGVkVmVyc2lvblZhbHVlczogICAgbnVsbCwKICAgICAgbGVnYWN5QXBwOiAgICAgICAgICAgICAgbnVsbCwKICAgICAgbWNhcHA6ICAgICAgICAgICAgICAgICAgbnVsbCwKICAgICAgbW9kZTogICAgICAgICAgICAgICAgICAgbnVsbCwKICAgICAgdmFsdWU6ICAgICAgICAgICAgICAgICAgbnVsbCwKICAgICAgdmFsdWVzQ29tcG9uZW50OiAgICAgICAgbnVsbCwKICAgICAgdmFsdWVzWWFtbDogICAgICAgICAgICAgJycsCiAgICAgIHByb2plY3Q6ICAgICAgICAgICAgICAgIG51bGwsCiAgICAgIG1pZ3JhdGVkQXBwOiAgICAgICAgICAgIGZhbHNlLAogICAgICBkZWZhdWx0Q21kT3B0cywKICAgICAgY3VzdG9tQ21kT3B0czogICAgICAgICAgeyAuLi5kZWZhdWx0Q21kT3B0cyB9LAogICAgICBhdXRvSW5zdGFsbEluZm86ICAgICAgICBbXSwKCiAgICAgIG5hbWVEaXNhYmxlZDogZmFsc2UsCgogICAgICBwcmVGb3JtWWFtbE9wdGlvbjogICAgICAgVkFMVUVTX1NUQVRFLllBTUwsCiAgICAgIGZvcm1ZYW1sT3B0aW9uOiAgICAgICAgICBWQUxVRVNfU1RBVEUuWUFNTCwKICAgICAgc2hvd0RpZmY6ICAgICAgICAgICAgICAgIGZhbHNlLAogICAgICBzaG93VmFsdWVzQ29tcG9uZW50OiAgICAgdHJ1ZSwKICAgICAgc2hvd1F1ZXN0aW9uczogICAgICAgICAgIHRydWUsCiAgICAgIHNob3dTbGlkZUluOiAgICAgICAgICAgICBmYWxzZSwKICAgICAgc2hvd25SZWFkbWVXaW5kb3dzOiAgICAgIFtdLAogICAgICBjb21wb25lbnRIYXNUYWJzOiAgICAgICAgZmFsc2UsCiAgICAgIHNob3dDb21tYW5kU3RlcDogICAgICAgICBmYWxzZSwKICAgICAgc2hvd0N1c3RvbVJlZ2lzdHJ5SW5wdXQ6IGZhbHNlLAogICAgICBpc05hbWVzcGFjZU5ldzogICAgICAgICAgZmFsc2UsCgogICAgICBzdGVwQmFzaWM6IHsKICAgICAgICBuYW1lOiAgICAgICAgICAgJ2Jhc2ljcycsCiAgICAgICAgbGFiZWw6ICAgICAgICAgIHRoaXMudCgnY2F0YWxvZy5pbnN0YWxsLnN0ZXBzLmJhc2ljcy5sYWJlbCcpLAogICAgICAgIHN1YnRleHQ6ICAgICAgICB0aGlzLnQoJ2NhdGFsb2cuaW5zdGFsbC5zdGVwcy5iYXNpY3Muc3VidGV4dCcpLAogICAgICAgIGRlc2NyaXB0aW9uS2V5OiAnY2F0YWxvZy5pbnN0YWxsLnN0ZXBzLmJhc2ljcy5kZXNjcmlwdGlvbicsCiAgICAgICAgcmVhZHk6ICAgICAgICAgIHRydWUsCiAgICAgICAgd2VpZ2h0OiAgICAgICAgIDMwCiAgICAgIH0sCiAgICAgIHN0ZXBDbHVzdGVyVHBsVmVyc2lvbjogewogICAgICAgIG5hbWU6ICAgICAgICAgICAnY2x1c3RlclRwbFZlcnNpb24nLAogICAgICAgIGxhYmVsOiAgICAgICAgICB0aGlzLnQoJ2NhdGFsb2cuaW5zdGFsbC5zdGVwcy5jbHVzdGVyVHBsVmVyc2lvbi5sYWJlbCcpLAogICAgICAgIHN1YnRleHQ6ICAgICAgICB0aGlzLnQoJ2NhdGFsb2cuaW5zdGFsbC5zdGVwcy5jbHVzdGVyVHBsVmVyc2lvbi5zdWJ0ZXh0JyksCiAgICAgICAgZGVzY3JpcHRpb25LZXk6ICdjYXRhbG9nLmluc3RhbGwuc3RlcHMuaGVsbVZhbHVlcy5kZXNjcmlwdGlvbicsCiAgICAgICAgcmVhZHk6ICAgICAgICAgIHRydWUsCiAgICAgICAgd2VpZ2h0OiAgICAgICAgIDMwCiAgICAgIH0sCiAgICAgIHN0ZXBWYWx1ZXM6IHsKICAgICAgICBuYW1lOiAgICAgICAgICAgJ2hlbG1WYWx1ZXMnLAogICAgICAgIGxhYmVsOiAgICAgICAgICB0aGlzLnQoJ2NhdGFsb2cuaW5zdGFsbC5zdGVwcy5oZWxtVmFsdWVzLmxhYmVsJyksCiAgICAgICAgc3VidGV4dDogICAgICAgIHRoaXMudCgnY2F0YWxvZy5pbnN0YWxsLnN0ZXBzLmhlbG1WYWx1ZXMuc3VidGV4dCcpLAogICAgICAgIGRlc2NyaXB0aW9uS2V5OiAnY2F0YWxvZy5pbnN0YWxsLnN0ZXBzLmhlbG1WYWx1ZXMuZGVzY3JpcHRpb24nLAogICAgICAgIHJlYWR5OiAgICAgICAgICB0cnVlLAogICAgICAgIHdlaWdodDogICAgICAgICAyMAogICAgICB9LAogICAgICBzdGVwQ29tbWFuZHM6IHsKICAgICAgICBuYW1lOiAgICAgICAgICAgJ2hlbG1DbGknLAogICAgICAgIGxhYmVsOiAgICAgICAgICB0aGlzLnQoJ2NhdGFsb2cuaW5zdGFsbC5zdGVwcy5oZWxtQ2xpLmxhYmVsJyksCiAgICAgICAgc3VidGV4dDogICAgICAgIHRoaXMudCgnY2F0YWxvZy5pbnN0YWxsLnN0ZXBzLmhlbG1DbGkuc3VidGV4dCcpLAogICAgICAgIGRlc2NyaXB0aW9uS2V5OiAnY2F0YWxvZy5pbnN0YWxsLnN0ZXBzLmhlbG1DbGkuZGVzY3JpcHRpb24nLAogICAgICAgIHJlYWR5OiAgICAgICAgICB0cnVlLAogICAgICAgIHdlaWdodDogICAgICAgICAxMAogICAgICB9LAoKICAgICAgY3VzdG9tU3RlcHM6IFsKCiAgICAgIF0sCgogICAgICBpc1BsYWluTGF5b3V0OiBpc1BsYWluTGF5b3V0KHRoaXMuJHJvdXRlLnF1ZXJ5KSwKCiAgICAgIGxlZ2FjeURlZnM6IHsKICAgICAgICBsZWdhY3k6IHRoaXMudCgnY2F0YWxvZy5pbnN0YWxsLmVycm9yLmxlZ2FjeS5jYXRlZ29yeS5sZWdhY3knKSwKICAgICAgICBtY206ICAgIHRoaXMudCgnY2F0YWxvZy5pbnN0YWxsLmVycm9yLmxlZ2FjeS5jYXRlZ29yeS5tY20nKQogICAgICB9CiAgICB9OwogIH0sCgogIGNvbXB1dGVkOiB7CiAgICAuLi5tYXBHZXR0ZXJzKHsgaW5TdG9yZTogJ2NhdGFsb2cvaW5TdG9yZScsIGZlYXR1cmVzOiAnZmVhdHVyZXMvZ2V0JyB9KSwKICAgIG1jbTogbWFwRmVhdHVyZShNVUxUSV9DTFVTVEVSKSwKCiAgICAvKioKICAgICAqIFJldHVybiBsaXN0IG9mIHZhcmlhYmxlcyB0byBmaWx0ZXIgY2hhcnQgcXVlc3Rpb25zCiAgICAgKi8KICAgIGlnbm9yZVZhcmlhYmxlcygpIHsKICAgICAgcmV0dXJuIGlnbm9yZVZhcmlhYmxlcyh0aGlzLmN1cnJlbnRDbHVzdGVyLCB0aGlzLnZlcnNpb25JbmZvKTsKICAgIH0sCgogICAgbmFtZXNwYWNlSXNOZXcoKSB7CiAgICAgIGNvbnN0IGFsbCA9IHRoaXMuJHN0b3JlLmdldHRlcnNbJ2NsdXN0ZXIvYWxsJ10oTkFNRVNQQUNFKTsKICAgICAgY29uc3Qgd2FudCA9IHRoaXMudmFsdWU/Lm1ldGFkYXRhPy5uYW1lc3BhY2U7CgogICAgICBpZiAoICF3YW50ICkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQoKICAgICAgcmV0dXJuICFmaW5kQnkoYWxsLCAnaWQnLCB3YW50KTsKICAgIH0sCgogICAgc2hvd1Byb2plY3QoKSB7CiAgICAgIHJldHVybiB0aGlzLmlzUmFuY2hlciAmJiAhdGhpcy5leGlzdGluZyAmJiB0aGlzLmZvcmNlTmFtZXNwYWNlOwogICAgfSwKCiAgICBwcm9qZWN0T3B0cygpIHsKICAgICAgY29uc3QgY2x1c3RlciA9IHRoaXMuY3VycmVudENsdXN0ZXI7CiAgICAgIGNvbnN0IHByb2plY3RzID0gdGhpcy4kc3RvcmUuZ2V0dGVyc1snbWFuYWdlbWVudC9hbGwnXShNQU5BR0VNRU5ULlBST0pFQ1QpOwoKICAgICAgY29uc3Qgb3V0ID0gcHJvamVjdHMuZmlsdGVyKCh4KSA9PiB4LnNwZWMuY2x1c3Rlck5hbWUgPT09IGNsdXN0ZXI/LmlkKS5tYXAoKHByb2plY3QpID0+IHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgaWQ6ICAgIHByb2plY3QuaWQsCiAgICAgICAgICBsYWJlbDogcHJvamVjdC5uYW1lRGlzcGxheSwKICAgICAgICAgIHZhbHVlOiBwcm9qZWN0LmlkCiAgICAgICAgfTsKICAgICAgfSk7CgogICAgICBvdXQudW5zaGlmdCh7CiAgICAgICAgaWQ6ICAgICdub25lJywKICAgICAgICBsYWJlbDogYCgkeyB0aGlzLnQoJ2dlbmVyaWMubm9uZScpIH0pYCwKICAgICAgICB2YWx1ZTogJycsCiAgICAgIH0pOwoKICAgICAgcmV0dXJuIG91dDsKICAgIH0sCgogICAgY2hhcnRzKCkgewogICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5leGlzdGluZz8ubWF0Y2hpbmdDaGFydCh0cnVlKTsKCiAgICAgIGNvbnN0IG91dCA9IHRoaXMuJHN0b3JlLmdldHRlcnNbJ2NhdGFsb2cvY2hhcnRzJ10uZmlsdGVyKCh4KSA9PiB7CiAgICAgICAgaWYgKCB4LmtleSA9PT0gY3VycmVudD8ua2V5IHx8IHguY2hhcnROYW1lID09PSBjdXJyZW50Py5jaGFydE5hbWUgKSB7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIGlmICggeC5oaWRkZW4gJiYgIXRoaXMuc2hvd0hpZGRlbiApIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CgogICAgICAgIGlmICggeC5kZXByZWNhdGVkICYmICF0aGlzLnNob3dEZXByZWNhdGVkICkgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0pOwoKICAgICAgbGV0IGxhc3QgPSAnJzsKCiAgICAgIGZvciAoIGxldCBpID0gMCA7IGkgPCBvdXQubGVuZ3RoIDsgaSsrICkgewogICAgICAgIGlmICggb3V0W2ldLnJlcG9OYW1lICE9PSBsYXN0ICkgewogICAgICAgICAgbGFzdCA9IG91dFtpXS5yZXBvTmFtZTsKICAgICAgICAgIGluc2VydEF0KG91dCwgaSwgewogICAgICAgICAgICBraW5kOiAgICAgJ2xhYmVsJywKICAgICAgICAgICAgbGFiZWw6ICAgIG91dFtpXS5yZXBvTmFtZURpc3BsYXksCiAgICAgICAgICAgIGRpc2FibGVkOiB0cnVlCiAgICAgICAgICB9KTsKICAgICAgICAgIGkrKzsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBvdXQ7CiAgICB9LAoKICAgIHNob3dTZWxlY3RWZXJzaW9uT3JDaGFydCgpIHsKICAgICAgLy8gQWxsb3cgdGhlIHVzZXIgdG8gY2hvb3NlIGEgdmVyc2lvbiBpZiB0aGUgYXBwIGV4aXN0cyBPUiB0aGV5J3ZlIGNvbWUgZnJvbSB0b29scwogICAgICByZXR1cm4gdGhpcy5leGlzdGluZyB8fCAoRlJPTV9UT09MUyBpbiB0aGlzLiRyb3V0ZS5xdWVyeSk7CiAgICB9LAoKICAgIHNob3dOYW1lRWRpdG9yKCkgewogICAgICByZXR1cm4gIXRoaXMubmFtZURpc2FibGVkIHx8ICF0aGlzLmZvcmNlTmFtZXNwYWNlOwogICAgfSwKCiAgICBzaG93VmVyc2lvbnMoKSB7CiAgICAgIHJldHVybiB0aGlzLmNoYXJ0Py52ZXJzaW9ucy5sZW5ndGggPiAxOwogICAgfSwKCiAgICB0YXJnZXROYW1lc3BhY2UoKSB7CiAgICAgIGlmICggdGhpcy5mb3JjZU5hbWVzcGFjZSApIHsKICAgICAgICByZXR1cm4gdGhpcy5mb3JjZU5hbWVzcGFjZTsKICAgICAgfSBlbHNlIGlmICggdGhpcy52YWx1ZT8ubWV0YWRhdGEubmFtZXNwYWNlICkgewogICAgICAgIHJldHVybiB0aGlzLnZhbHVlLm1ldGFkYXRhLm5hbWVzcGFjZTsKICAgICAgfQoKICAgICAgcmV0dXJuICdkZWZhdWx0JzsKICAgIH0sCgogICAgZWRpdG9yTW9kZSgpIHsKICAgICAgaWYgKCB0aGlzLnNob3dEaWZmICkgewogICAgICAgIHJldHVybiBFRElUT1JfTU9ERVMuRElGRl9DT0RFOwogICAgICB9CgogICAgICByZXR1cm4gRURJVE9SX01PREVTLkVESVRfQ09ERTsKICAgIH0sCgogICAgc2hvd2luZ1lhbWwoKSB7CiAgICAgIHJldHVybiB0aGlzLmZvcm1ZYW1sT3B0aW9uID09PSBWQUxVRVNfU1RBVEUuWUFNTCB8fCAoICF0aGlzLnZhbHVlc0NvbXBvbmVudCAmJiAhdGhpcy5oYXNRdWVzdGlvbnMgKTsKICAgIH0sCgogICAgc2hvd2luZ1lhbWxEaWZmKCkgewogICAgICByZXR1cm4gdGhpcy5mb3JtWWFtbE9wdGlvbiA9PT0gVkFMVUVTX1NUQVRFLkRJRkY7CiAgICB9LAoKICAgIGZvcm1ZYW1sT3B0aW9ucygpIHsKICAgICAgY29uc3Qgb3B0aW9ucyA9IFtdOwoKICAgICAgaWYgKHRoaXMudmFsdWVzQ29tcG9uZW50IHx8IHRoaXMuaGFzUXVlc3Rpb25zKSB7CiAgICAgICAgb3B0aW9ucy5wdXNoKHsKICAgICAgICAgIGxhYmVsS2V5OiAnY2F0YWxvZy5pbnN0YWxsLnNlY3Rpb24uY2hhcnRPcHRpb25zJywKICAgICAgICAgIHZhbHVlOiAgICBWQUxVRVNfU1RBVEUuRk9STSwKICAgICAgICB9KTsKICAgICAgfQogICAgICBvcHRpb25zLnB1c2goewogICAgICAgIGxhYmVsS2V5OiAnY2F0YWxvZy5pbnN0YWxsLnNlY3Rpb24udmFsdWVzWWFtbCcsCiAgICAgICAgdmFsdWU6ICAgIFZBTFVFU19TVEFURS5ZQU1MLAogICAgICB9LCB7CiAgICAgICAgbGFiZWxLZXk6ICdjYXRhbG9nLmluc3RhbGwuc2VjdGlvbi5kaWZmJywKICAgICAgICB2YWx1ZTogICAgVkFMVUVTX1NUQVRFLkRJRkYsCiAgICAgICAgLy8gPT09IHF1aXRlIG9idmlvdXNseSBzaG91bGRuJ3Qgd29yaywgYnV0IGhhcyBiZWVuIGFuZCBzdGlsbCBkb2VzLiBXaGVuIHRoZSBtYWdpYyBicmVha3MgYWRkcmVzcyB3aXRoIGhlYXZpZXIgc3RyaW5naWZ5L2pzeWFtbC5kdW1wCiAgICAgICAgZGlzYWJsZWQ6IHRoaXMuZm9ybVlhbWxPcHRpb24gPT09IFZBTFVFU19TVEFURS5GT1JNID8gdGhpcy5vcmlnaW5hbFlhbWxWYWx1ZXMgPT09IGpzeWFtbC5kdW1wKHRoaXMuY2hhcnRWYWx1ZXMgfHwge30pIDogdGhpcy5vcmlnaW5hbFlhbWxWYWx1ZXMgPT09IHRoaXMudmFsdWVzWWFtbCwKICAgICAgfSk7CgogICAgICByZXR1cm4gb3B0aW9uczsKICAgIH0sCgogICAgeWFtbERpZmZNb2RlT3B0aW9ucygpIHsKICAgICAgcmV0dXJuIFt7CiAgICAgICAgbGFiZWxLZXk6ICdyZXNvdXJjZVlhbWwuYnV0dG9ucy51bmlmaWVkJywKICAgICAgICB2YWx1ZTogICAgJ3VuaWZpZWQnLAogICAgICB9LCB7CiAgICAgICAgbGFiZWxLZXk6ICdyZXNvdXJjZVlhbWwuYnV0dG9ucy5zcGxpdCcsCiAgICAgICAgdmFsdWU6ICAgICdzcGxpdCcsCiAgICAgIH1dOwogICAgfSwKCiAgICBzdGVwcGVyTmFtZSgpIHsKICAgICAgcmV0dXJuIHRoaXMuZXhpc3Rpbmc/Lm5hbWVEaXNwbGF5IHx8IHRoaXMuY2hhcnQ/LmNoYXJ0TmFtZURpc3BsYXk7CiAgICB9LAoKICAgIHN0ZXBwZXJTdWJ0ZXh0KCkgewogICAgICByZXR1cm4gdGhpcy5leGlzdGluZyAmJiB0aGlzLmN1cnJlbnRWZXJzaW9uICE9PSB0aGlzLnRhcmdldFZlcnNpb24gPyBgJHsgdGhpcy5jdXJyZW50VmVyc2lvbiB9ID4gJHsgdGhpcy50YXJnZXRWZXJzaW9uIH1gIDogdGhpcy50YXJnZXRWZXJzaW9uOwogICAgfSwKCiAgICByZWFkbWVXaW5kb3dOYW1lKCkgewogICAgICAvLyBWZXJzaW9uIGNhbiBjaGFuZ2UsIHNvIGFsbG93IG11bHRpcGxlIFdNIHRhYnMgZm9yIGRpZmZlcmVudCB2ZXJzaW9ucwogICAgICByZXR1cm4gYCR7IHRoaXMuc3RlcHBlck5hbWUgfS0keyB0aGlzLnZlcnNpb24/LnZlcnNpb24gfWA7CiAgICB9LAoKICAgIHNob3dpbmdSZWFkbWVXaW5kb3coKSB7CiAgICAgIHJldHVybiAhIXRoaXMuJHN0b3JlLmdldHRlcnNbJ3dtL2J5SWQnXSh0aGlzLnJlYWRtZVdpbmRvd05hbWUpOwogICAgfSwKCiAgICBkaWZmTW9kZTogbWFwUHJlZihESUZGKSwKCiAgICBzdGVwMURlc2NyaXB0aW9uKCkgewogICAgICBjb25zdCBkZXNjcmlwdGlvbktleSA9IHRoaXMuc3RlcHMuZmluZCgocykgPT4gcy5uYW1lID09PSAnYmFzaWNzJykuZGVzY3JpcHRpb25LZXk7CgogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVyc1snaTE4bi93aXRoRmFsbGJhY2snXShkZXNjcmlwdGlvbktleSwgeyBhY3Rpb246IHRoaXMuYWN0aW9uLCBleGlzdGluZzogISF0aGlzLmV4aXN0aW5nIH0sICcnKTsKICAgIH0sCgogICAgc3RlcDJEZXNjcmlwdGlvbigpIHsKICAgICAgY29uc3QgZGVzY3JpcHRpb25LZXkgPSB0aGlzLnN0ZXBzLmZpbmQoKHMpID0+IHMubmFtZSA9PT0gJ2hlbG1WYWx1ZXMnKS5kZXNjcmlwdGlvbktleTsKCiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzWydpMThuL3dpdGhGYWxsYmFjayddKGRlc2NyaXB0aW9uS2V5LCB7IGFjdGlvbjogdGhpcy5hY3Rpb24sIGV4aXN0aW5nOiAhIXRoaXMuZXhpc3RpbmcgfSwgJycpOwogICAgfSwKCiAgICBzdGVwM0Rlc2NyaXB0aW9uKCkgewogICAgICBjb25zdCBkZXNjcmlwdGlvbktleSA9IHRoaXMuc3RlcHMuZmluZCgocykgPT4gcy5uYW1lID09PSAnaGVsbUNsaScpLmRlc2NyaXB0aW9uS2V5OwoKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnNbJ2kxOG4vd2l0aEZhbGxiYWNrJ10oZGVzY3JpcHRpb25LZXksIHsgYWN0aW9uOiB0aGlzLmFjdGlvbiwgZXhpc3Rpbmc6ICEhdGhpcy5leGlzdGluZyB9LCAnJyk7CiAgICB9LAoKICAgIHN0ZXBzKCkgewogICAgICBjb25zdCBzdGVwcyA9IFtdOwoKICAgICAgY29uc3QgdHlwZSA9IHRoaXMudmVyc2lvbj8uYW5ub3RhdGlvbnM/LltDQVRBTE9HX0FOTk9UQVRJT05TLlRZUEVdOwoKICAgICAgaWYgKCB0eXBlID09PSBDQVRBTE9HX0FOTk9UQVRJT05TLl9DTFVTVEVSX1RQTCApIHsKICAgICAgICBpZiAodGhpcy5maWx0ZXJlZFZlcnNpb25zPy5sZW5ndGggPiAxKSB7CiAgICAgICAgICBzdGVwcy5wdXNoKHRoaXMuc3RlcENsdXN0ZXJUcGxWZXJzaW9uKTsKICAgICAgICB9CiAgICAgICAgc3RlcHMucHVzaCh7CiAgICAgICAgICAuLi50aGlzLnN0ZXBWYWx1ZXMsCiAgICAgICAgICBsYWJlbDogICAgICAgICAgdGhpcy50KCdjYXRhbG9nLmluc3RhbGwuc3RlcHMuY2x1c3RlclRwbFZhbHVlcy5sYWJlbCcpLAogICAgICAgICAgc3VidGV4dDogICAgICAgIHRoaXMudCgnY2F0YWxvZy5pbnN0YWxsLnN0ZXBzLmNsdXN0ZXJUcGxWYWx1ZXMuc3VidGV4dCcpLAogICAgICAgICAgZGVzY3JpcHRpb25LZXk6ICdjYXRhbG9nLmluc3RhbGwuc3RlcHMuY2x1c3RlclRwbFZhbHVlcy5kZXNjcmlwdGlvbicsCiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc3RlcHMucHVzaCgKICAgICAgICAgIHRoaXMuc3RlcEJhc2ljLAogICAgICAgICAgdGhpcy5zdGVwVmFsdWVzLAogICAgICAgICAgLi4udGhpcy5jdXN0b21TdGVwcwogICAgICAgICk7CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLnNob3dDb21tYW5kU3RlcCkgewogICAgICAgIHN0ZXBzLnB1c2godGhpcy5zdGVwQ29tbWFuZHMpOwogICAgICB9CgogICAgICByZXR1cm4gc3RlcHMuc29ydCgoYSwgYikgPT4gKGIud2VpZ2h0IHx8IDApIC0gKGEud2VpZ2h0IHx8IDApKTsKICAgIH0sCgogICAgY21kT3B0aW9ucygpIHsKICAgICAgcmV0dXJuIHRoaXMuc2hvd0NvbW1hbmRTdGVwID8gdGhpcy5jdXN0b21DbWRPcHRzIDogdGhpcy5kZWZhdWx0Q21kT3B0czsKICAgIH0sCgogICAgbmFtZXNwYWNlTmV3QWxsb3dlZCgpIHsKICAgICAgcmV0dXJuICF0aGlzLmV4aXN0aW5nICYmICF0aGlzLmZvcmNlTmFtZXNwYWNlOwogICAgfSwKCiAgICBsZWdhY3lFbmFibGVkKCkgewogICAgICAvLyBDaGVjayBmb3IgdGhlIGxlZ2FjeSBmZWF0dXJlIGZsYWcgaW4gdGhlIHNldHRpbmdzCiAgICAgIHJldHVybiB0aGlzLmZlYXR1cmVzKExFR0FDWSk7CiAgICB9LAoKICAgIGxlZ2FjeUZlYXR1cmVSb3V0ZSgpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBuYW1lOiAgICdjLWNsdXN0ZXItcHJvZHVjdC1yZXNvdXJjZScsCiAgICAgICAgcGFyYW1zOiB7IHByb2R1Y3Q6ICdzZXR0aW5ncycsIHJlc291cmNlOiAnbWFuYWdlbWVudC5jYXR0bGUuaW8uZmVhdHVyZScgfQogICAgICB9OwogICAgfSwKCiAgICBsZWdhY3lBcHBSb3V0ZSgpIHsKICAgICAgcmV0dXJuIHsgbmFtZTogJ2MtY2x1c3Rlci1sZWdhY3ktcHJvamVjdCcgfTsKICAgIH0sCgogICAgd2luZG93c0luY29tcGF0aWJsZSgpIHsKICAgICAgaWYgKHRoaXMuY2hhcnQ/LndpbmRvd3NJbmNvbXBhdGlibGUpIHsKICAgICAgICByZXR1cm4gdGhpcy50KCdjYXRhbG9nLmNoYXJ0cy53aW5kb3dzSW5jb21wYXRpYmxlJyk7CiAgICAgIH0KICAgICAgaWYgKHRoaXMudmVyc2lvbkluZm8pIHsKICAgICAgICBjb25zdCBpbmNvbXBhdGlibGVWZXJzaW9uID0gISh0aGlzLnZlcnNpb25JbmZvPy5jaGFydD8uYW5ub3RhdGlvbnM/LltDQVRBTE9HX0FOTk9UQVRJT05TLlBFUk1JVFRFRF9PU10gfHwgTElOVVgpLmluY2x1ZGVzKCd3aW5kb3dzJyk7CgogICAgICAgIGlmIChpbmNvbXBhdGlibGVWZXJzaW9uICYmICF0aGlzLmNoYXJ0LndpbmRvd3NJbmNvbXBhdGlibGUpIHsKICAgICAgICAgIHJldHVybiB0aGlzLnQoJ2NhdGFsb2cuY2hhcnRzLnZlcnNpb25XaW5kb3dzSW5jb21wYXRpYmxlJyk7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gbnVsbDsKICAgIH0sCgogICAgLyoqCiAgICAgKiBDaGVjayBpZiB0aGUgY2hhcnQgY29udGFpbnMgYHN5c3RlbURlZmF1bHRSZWdpc3RyeWAgcHJvcGVydGllcy4KICAgICAqIElmIG5vdCB3ZSBzaG91bGRuJ3QgYXBwbHkgdGhlIHNldHRpbmcsIGJlY2F1c2UgaWYgdGhlIG9wdGlvbgogICAgICogaXMgZXhwb3NlZCBmb3IgdGhpcmQtcGFydHkgSGVsbSBjaGFydHMsIGl0IGNvbmZ1c2VzIHVzZXJzIGJlY2F1c2UKICAgICAqIGl0IHNob3dzIGEgcHJpdmF0ZSByZWdpc3RyeSBzZXR0aW5nIHRoYXQgaXMgbmV2ZXIgdXNlZAogICAgICogYnkgdGhlIGNoYXJ0IHRoZXkgYXJlIGluc3RhbGxpbmcuIElmIG5vdCBoaWRkZW4sIHRoZSBzZXR0aW5nCiAgICAgKiBkb2VzIG5vdGhpbmcsIGFuZCBpZiB0aGUgdXNlciBjaGFuZ2VzIGl0LCBpdCB3aWxsIGxvb2sgbGlrZQogICAgICogdGhlcmUgaXMgYSBidWcgaW4gdGhlIFVJIHdoZW4gaXQgZG9lc24ndCB3b3JrLCBiZWNhdXNlIFVJIGlzCiAgICAgKiBleHBvc2luZyBhIGZlYXR1cmUgdGhhdCB0aGUgY2hhcnQgZG9lcyBub3QgaGF2ZS4KICAgICAqLwogICAgc2hvd0N1c3RvbVJlZ2lzdHJ5KCkgewogICAgICBjb25zdCBnbG9iYWwgPSB0aGlzLnZlcnNpb25JbmZvPy52YWx1ZXM/Lmdsb2JhbCB8fCB7fTsKCiAgICAgIHJldHVybiBnbG9iYWwuc3lzdGVtRGVmYXVsdFJlZ2lzdHJ5ICE9PSB1bmRlZmluZWQgfHwgZ2xvYmFsLmNhdHRsZT8uc3lzdGVtRGVmYXVsdFJlZ2lzdHJ5ICE9PSB1bmRlZmluZWQ7CiAgICB9LAoKICB9LAoKICB3YXRjaDogewogICAgJyRyb3V0ZS5xdWVyeScobmV1LCBvbGQpIHsKICAgICAgaWYgKCAhaXNFcXVhbChuZXUsIG9sZCkgKSB7CiAgICAgICAgdGhpcy4kZmV0Y2goKTsKICAgICAgICB0aGlzLnNob3dTbGlkZUluID0gZmFsc2U7CiAgICAgIH0KICAgIH0sCgogICAgJ3ZhbHVlLm1ldGFkYXRhLm5hbWVzcGFjZScobmV1LCBvbGQpIHsKICAgICAgaWYgKG5ldSkgewogICAgICAgIGNvbnN0IG5zID0gdGhpcy4kc3RvcmUuZ2V0dGVyc1snY2x1c3Rlci9ieUlkJ10oTkFNRVNQQUNFLCB0aGlzLnZhbHVlLm1ldGFkYXRhLm5hbWVzcGFjZSk7CgogICAgICAgIGNvbnN0IHByb2plY3QgPSBucz8ubWV0YWRhdGEuYW5ub3RhdGlvbnM/LltQUk9KRUNUXTsKCiAgICAgICAgaWYgKHByb2plY3QpIHsKICAgICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3QucmVwbGFjZSgnOicsICcvJyk7CiAgICAgICAgfQogICAgICB9CiAgICB9LAoKICAgIHByZUZvcm1ZYW1sT3B0aW9uKG5ldSwgb2xkKSB7CiAgICAgIGlmIChuZXUgPT09IFZBTFVFU19TVEFURS5GT1JNICYmIHRoaXMudmFsdWVzWWFtbCAhPT0gdGhpcy5wcmV2aW91c1lhbWxWYWx1ZXMgJiYgISF0aGlzLiRyZWZzLmNhbmNlbE1vZGFsKSB7CiAgICAgICAgdGhpcy4kcmVmcy5jYW5jZWxNb2RhbC5zaG93KCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5mb3JtWWFtbE9wdGlvbiA9IG5ldTsKICAgICAgfQogICAgfSwKCiAgICBmb3JtWWFtbE9wdGlvbihuZXUsIG9sZCkgewogICAgICBzd2l0Y2ggKG5ldSkgewogICAgICBjYXNlIFZBTFVFU19TVEFURS5GT1JNOgogICAgICAgIC8vIFJldHVybiB0byBmb3JtLCByZXNldCBldmVyeXRoaW5nIGJhY2sgdG8gc3RhcnRpbmcgcG9pbnQKICAgICAgICB0aGlzLnZhbHVlc1lhbWwgPSB0aGlzLnByZXZpb3VzWWFtbFZhbHVlczsKCiAgICAgICAgdGhpcy5zaG93VmFsdWVzQ29tcG9uZW50ID0gdHJ1ZTsKICAgICAgICB0aGlzLnNob3dRdWVzdGlvbnMgPSB0cnVlOwoKICAgICAgICB0aGlzLnNob3dEaWZmID0gZmFsc2U7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgVkFMVUVTX1NUQVRFLllBTUw6CiAgICAgICAgLy8gU2hvdyB0aGUgWUFNTCBwcmV2aWV3CiAgICAgICAgaWYgKG9sZCA9PT0gVkFMVUVTX1NUQVRFLkZPUk0pIHsKICAgICAgICAgIHRoaXMudmFsdWVzWWFtbCA9IGpzeWFtbC5kdW1wKHRoaXMuY2hhcnRWYWx1ZXMgfHwge30pOwogICAgICAgICAgdGhpcy5wcmV2aW91c1lhbWxWYWx1ZXMgPSB0aGlzLnZhbHVlc1lhbWw7CiAgICAgICAgfQoKICAgICAgICB0aGlzLnNob3dWYWx1ZXNDb21wb25lbnQgPSBmYWxzZTsKICAgICAgICB0aGlzLnNob3dRdWVzdGlvbnMgPSBmYWxzZTsKCiAgICAgICAgdGhpcy5zaG93RGlmZiA9IGZhbHNlOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIFZBTFVFU19TVEFURS5ESUZGOgogICAgICAgIC8vIFNob3cgdGhlIFlBTUwgZGlmZgogICAgICAgIGlmIChvbGQgPT09IFZBTFVFU19TVEFURS5GT1JNKSB7CiAgICAgICAgICB0aGlzLnZhbHVlc1lhbWwgPSBqc3lhbWwuZHVtcCh0aGlzLmNoYXJ0VmFsdWVzIHx8IHt9KTsKICAgICAgICAgIHRoaXMucHJldmlvdXNZYW1sVmFsdWVzID0gdGhpcy52YWx1ZXNZYW1sOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5zaG93VmFsdWVzQ29tcG9uZW50ID0gZmFsc2U7CiAgICAgICAgdGhpcy5zaG93UXVlc3Rpb25zID0gZmFsc2U7CgogICAgICAgIHRoaXMudXBkYXRlVmFsdWUodGhpcy52YWx1ZXNZYW1sKTsKICAgICAgICB0aGlzLnNob3dEaWZmID0gdHJ1ZTsKICAgICAgICBicmVhazsKICAgICAgfQogICAgfSwKCiAgICByZXF1aXJlcygpIHsKICAgICAgdGhpcy51cGRhdGVTdGVwT25lUmVhZHkoKTsKICAgIH0sCgogICAgd2FybmluZ3MoKSB7CiAgICAgIHRoaXMudXBkYXRlU3RlcE9uZVJlYWR5KCk7CiAgICB9LAoKICB9LAoKICBhc3luYyBtb3VudGVkKCkgewogICAgLy8gTG9hZCBhIFZ1ZSBjb21wb25lbnQgbmFtZWQgaW4gdGhlIEhlbG0gY2hhcnQKICAgIC8vIGZvciBlZGl0aW5nIHZhbHVlcwogICAgYXdhaXQgdGhpcy5sb2FkVmFsdWVzQ29tcG9uZW50KCk7CgogICAgLy8gTG9hZCBIZWxtIGNoYXJ0IGluZm8gdXNlZCBmb3Igc2hvd2luZwogICAgLy8gd2l6YXJkIHN0ZXBzCiAgICBhd2FpdCB0aGlzLmxvYWRDaGFydFN0ZXBzKCk7CgogICAgd2luZG93LnNjcm9sbFRvcCA9IDA7CgogICAgdGhpcy5wcmVGb3JtWWFtbE9wdGlvbiA9IHRoaXMudmFsdWVzQ29tcG9uZW50IHx8IHRoaXMuaGFzUXVlc3Rpb25zID8gVkFMVUVTX1NUQVRFLkZPUk0gOiBWQUxVRVNfU1RBVEUuWUFNTDsKICB9LAoKICBiZWZvcmVEZXN0cm95KCkgewogICAgdGhpcy5zaG93blJlYWRtZVdpbmRvd3MuZm9yRWFjaCgobmFtZSkgPT4gdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ3dtL2Nsb3NlJywgbmFtZSwgeyByb290OiB0cnVlIH0pKTsKICB9LAoKICBtZXRob2RzOiB7CiAgICBhc3luYyBnZXRDbHVzdGVyUmVnaXN0cnkoKSB7CiAgICAgIGNvbnN0IGhhc1Blcm1pc3Npb25Ub1NlZVByb3ZDbHVzdGVyID0gdGhpcy4kc3RvcmUuZ2V0dGVyc1tgbWFuYWdlbWVudC9zY2hlbWFGb3JgXShDQVBJLlJBTkNIRVJfQ0xVU1RFUik7CgogICAgICBpZiAoaGFzUGVybWlzc2lvblRvU2VlUHJvdkNsdXN0ZXIpIHsKICAgICAgICBjb25zdCBtZ21DbHVzdGVyID0gdGhpcy4kc3RvcmUuZ2V0dGVyc1snY3VycmVudENsdXN0ZXInXTsKICAgICAgICBjb25zdCBwcm92Q2x1c3RlcklkID0gbWdtQ2x1c3Rlcj8ucHJvdkNsdXN0ZXJJZDsKICAgICAgICBsZXQgcHJvdkNsdXN0ZXI7CgogICAgICAgIHRyeSB7CiAgICAgICAgICBwcm92Q2x1c3RlciA9IHByb3ZDbHVzdGVySWQgPyBhd2FpdCB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnbWFuYWdlbWVudC9maW5kJywgewogICAgICAgICAgICB0eXBlOiBDQVBJLlJBTkNIRVJfQ0xVU1RFUiwKICAgICAgICAgICAgaWQ6ICAgcHJvdkNsdXN0ZXJJZAogICAgICAgICAgfSkgOiB7fTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKGBVbmFibGUgdG8gZmV0Y2ggcHJvdiBjbHVzdGVyICckeyBwcm92Q2x1c3RlcklkIH0nOiBgLCBlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlCiAgICAgICAgfQoKICAgICAgICBpZiAocHJvdkNsdXN0ZXI/LmlzUmtlMikgeyAvLyBpc1JrZTIgcmV0dXJucyB0cnVlIGZvciBib3RoIFJLRTIgYW5kIEszcyBjbHVzdGVycy4KICAgICAgICAgIGNvbnN0IGFnZW50Q29uZmlnID0gcHJvdkNsdXN0ZXIuc3BlYz8ucmtlQ29uZmlnPy5tYWNoaW5lU2VsZWN0b3JDb25maWc/LmZpbmQoKHgpID0+ICF4Lm1hY2hpbmVMYWJlbFNlbGVjdG9yKS5jb25maWc7CgogICAgICAgICAgLy8gSWYgYSBjbHVzdGVyIHNjb3BlZCByZWdpc3RyeSBleGlzdHMsCiAgICAgICAgICAvLyBpdCBzaG91bGQgYmUgdXNlZCBieSBkZWZhdWx0LgogICAgICAgICAgY29uc3QgY2x1c3RlclJlZ2lzdHJ5ID0gYWdlbnRDb25maWc/Llsnc3lzdGVtLWRlZmF1bHQtcmVnaXN0cnknXSB8fCAnJzsKCiAgICAgICAgICBpZiAoY2x1c3RlclJlZ2lzdHJ5KSB7CiAgICAgICAgICAgIHJldHVybiBjbHVzdGVyUmVnaXN0cnk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAocHJvdkNsdXN0ZXI/LmlzUmtlMSkgewogICAgICAgICAgLy8gRm9yIFJLRTEgY2x1c3RlcnMsIHRoZSBjbHVzdGVyIHNjb3BlZCBwcml2YXRlIHJlZ2lzdHJ5IGlzIG9uIHRoZSBtYW5hZ2VtZW50CiAgICAgICAgICAvLyBjbHVzdGVyLCBub3QgdGhlIHByb3Zpc2lvbmluZyBjbHVzdGVyLgogICAgICAgICAgY29uc3QgcmtlMVJlZ2lzdHJpZXMgPSBtZ21DbHVzdGVyPy5zcGVjPy5yYW5jaGVyS3ViZXJuZXRlc0VuZ2luZUNvbmZpZz8ucHJpdmF0ZVJlZ2lzdHJpZXM7CgogICAgICAgICAgaWYgKHJrZTFSZWdpc3RyaWVzPy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRSZWdpc3RyeSA9IHJrZTFSZWdpc3RyaWVzLmZpbmQoKHJlZ2lzdHJ5KSA9PiB7CiAgICAgICAgICAgICAgcmV0dXJuIHJlZ2lzdHJ5LmlzRGVmYXVsdDsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICByZXR1cm4gZGVmYXVsdFJlZ2lzdHJ5LnVybDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCgogICAgYXN5bmMgZ2V0R2xvYmFsUmVnaXN0cnkoKSB7CiAgICAgIC8vIFVzZSB0aGUgZ2xvYmFsIHJlZ2lzdHJ5IGFzIGEgZmFsbGJhY2suCiAgICAgIC8vIElmIGl0IGlzIGFuIGVtcHR5IHN0cmluZywgdGhlIGNvbnRhaW5lcgogICAgICAvLyBydW50aW1lIHdpbGwgcHVsbCBpbWFnZXMgZnJvbSBkb2NrZXIuaW8uCiAgICAgIGNvbnN0IGdsb2JhbFJlZ2lzdHJ5ID0gYXdhaXQgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ21hbmFnZW1lbnQvZmluZCcsIHsKICAgICAgICB0eXBlOiBNQU5BR0VNRU5ULlNFVFRJTkcsCiAgICAgICAgaWQ6ICAgJ3N5c3RlbS1kZWZhdWx0LXJlZ2lzdHJ5JwogICAgICB9KTsKCiAgICAgIHJldHVybiBnbG9iYWxSZWdpc3RyeS52YWx1ZTsKICAgIH0sCgogICAgdXBkYXRlVmFsdWUodmFsdWUpIHsKICAgICAgaWYgKHRoaXMuJHJlZnMueWFtbCkgewogICAgICAgIHRoaXMuJHJlZnMueWFtbC51cGRhdGVWYWx1ZSh2YWx1ZSk7CiAgICAgIH0KICAgIH0sCgogICAgYXN5bmMgbG9hZFZhbHVlc0NvbXBvbmVudCgpIHsKICAgICAgLy8gVGhlIGNvbnN0IGNvbXBvbmVudCBpcyBhIHN0cmluZywgZm9yIGV4YW1wbGUsICdtb25pdG9yaW5nJy4KICAgICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy52ZXJzaW9uPy5hbm5vdGF0aW9ucz8uW0NBVEFMT0dfQU5OT1RBVElPTlMuQ09NUE9ORU5UXTsKCiAgICAgIC8vIExvYWQgYSB2YWx1ZXMgY29tcG9uZW50IGZvciB0aGUgVUkgaWYgaXQgaXMgbmFtZWQgaW4gdGhlIEhlbG0gY2hhcnQuCiAgICAgIGlmICggY29tcG9uZW50ICkgewogICAgICAgIGNvbnN0IGhhc0NoYXJ0Q29tcG9uZW50ID0gdGhpcy4kc3RvcmUuZ2V0dGVyc1sndHlwZS1tYXAvaGFzQ3VzdG9tQ2hhcnQnXShjb21wb25lbnQpOwoKICAgICAgICBpZiAoIGhhc0NoYXJ0Q29tcG9uZW50ICkgewogICAgICAgICAgdGhpcy52YWx1ZXNDb21wb25lbnQgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzWyd0eXBlLW1hcC9pbXBvcnRDaGFydCddKGNvbXBvbmVudCk7CiAgICAgICAgICBjb25zdCBsb2FkZWQgPSBhd2FpdCB0aGlzLnZhbHVlc0NvbXBvbmVudCgpOwoKICAgICAgICAgIHRoaXMuc2hvd1ZhbHVlc0NvbXBvbmVudCA9IHRydWU7CiAgICAgICAgICB0aGlzLmNvbXBvbmVudEhhc1RhYnMgPSBsb2FkZWQ/LmRlZmF1bHQ/Lmhhc1RhYnMgfHwgZmFsc2U7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMudmFsdWVzQ29tcG9uZW50ID0gbnVsbDsKICAgICAgICAgIHRoaXMuY29tcG9uZW50SGFzVGFicyA9IGZhbHNlOwogICAgICAgICAgdGhpcy5zaG93VmFsdWVzQ29tcG9uZW50ID0gZmFsc2U7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMudmFsdWVzQ29tcG9uZW50ID0gbnVsbDsKICAgICAgICB0aGlzLmNvbXBvbmVudEhhc1RhYnMgPSBmYWxzZTsKICAgICAgICB0aGlzLnNob3dWYWx1ZXNDb21wb25lbnQgPSBmYWxzZTsKICAgICAgfQogICAgfSwKCiAgICBhc3luYyBsb2FkQ2hhcnRTdGVwcygpIHsKICAgICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy52ZXJzaW9uPy5hbm5vdGF0aW9ucz8uW0NBVEFMT0dfQU5OT1RBVElPTlMuQ09NUE9ORU5UXTsKCiAgICAgIGlmICggY29tcG9uZW50ICkgewogICAgICAgIGNvbnN0IHN0ZXBzID0gYXdhaXQgdGhpcy4kc3RvcmUuZ2V0dGVyc1snY2F0YWxvZy9jaGFydFN0ZXBzJ10oY29tcG9uZW50KTsKCiAgICAgICAgdGhpcy5jdXN0b21TdGVwcyA9IGF3YWl0IFByb21pc2UuYWxsKCBzdGVwcy5tYXAoKGNzKSA9PiB0aGlzLmxvYWRDaGFydFN0ZXAoY3MpKSk7CiAgICAgIH0KICAgIH0sCgogICAgYXN5bmMgbG9hZENoYXJ0U3RlcChjdXN0b21TdGVwKSB7CiAgICAgIGNvbnN0IGxvYWRlZCA9IGF3YWl0IGN1c3RvbVN0ZXAuY29tcG9uZW50KCk7CiAgICAgIGNvbnN0IHdpdGhGYWxsQmFjayA9IHRoaXMuJHN0b3JlLmdldHRlcnNbJ2kxOG4vd2l0aEZhbGxiYWNrJ107CgogICAgICByZXR1cm4gewogICAgICAgIG5hbWU6ICAgICAgY3VzdG9tU3RlcC5uYW1lLAogICAgICAgIGxhYmVsOiAgICAgd2l0aEZhbGxCYWNrKGxvYWRlZD8uZGVmYXVsdD8ubGFiZWwsIG51bGwsIGN1c3RvbVN0ZXAubmFtZSksCiAgICAgICAgc3VidGV4dDogICB3aXRoRmFsbEJhY2sobG9hZGVkPy5kZWZhdWx0Py5zdWJ0ZXh0LCBudWxsLCAnJyksCiAgICAgICAgd2VpZ2h0OiAgICBsb2FkZWQ/LmRlZmF1bHQ/LndlaWdodCwKICAgICAgICByZWFkeTogICAgIGZhbHNlLAogICAgICAgIGhpZGRlbjogICAgdHJ1ZSwKICAgICAgICBsb2FkaW5nOiAgIHRydWUsCiAgICAgICAgY29tcG9uZW50OiBjdXN0b21TdGVwLmNvbXBvbmVudCwKICAgICAgfTsKICAgIH0sCgogICAgc2VsZWN0Q2hhcnQoY2hhcnQpIHsKICAgICAgaWYgKCAhY2hhcnQgKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB0aGlzLiRyb3V0ZXIuYXBwbHlRdWVyeSh7CiAgICAgICAgW1JFUE9dOiAgICAgIGNoYXJ0LnJlcG9OYW1lLAogICAgICAgIFtSRVBPX1RZUEVdOiBjaGFydC5yZXBvVHlwZSwKICAgICAgICBbQ0hBUlRdOiAgICAgY2hhcnQuY2hhcnROYW1lLAogICAgICAgIFtWRVJTSU9OXTogICBjaGFydC52ZXJzaW9uc1swXS52ZXJzaW9uCiAgICAgIH0pOwogICAgfSwKCiAgICBjYW5jZWwoKSB7CiAgICAgIGlmICggdGhpcy5leGlzdGluZyApIHsKICAgICAgICB0aGlzLmRvbmUoKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLiRyb3V0ZS5xdWVyeVtGUk9NX1RPT0xTXSA9PT0gX0ZMQUdHRUQpIHsKICAgICAgICB0aGlzLiRyb3V0ZXIucmVwbGFjZSh0aGlzLmNsdXN0ZXJUb29sc0xvY2F0aW9uKCkpOwogICAgICB9IGVsc2UgaWYgKHRoaXMuJHJvdXRlLnF1ZXJ5W0ZST01fQ0xVU1RFUl0gPT09IF9GTEFHR0VEKSB7CiAgICAgICAgdGhpcy4kcm91dGVyLnJlcGxhY2UodGhpcy5jbHVzdGVyc0xvY2F0aW9uKCkpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuJHJvdXRlci5yZXBsYWNlKHRoaXMuY2hhcnRMb2NhdGlvbihmYWxzZSkpOwogICAgICB9CiAgICB9LAoKICAgIGRvbmUoKSB7CiAgICAgIGlmICggdGhpcy4kcm91dGUucXVlcnlbRlJPTV9UT09MU10gPT09IF9GTEFHR0VEICkgewogICAgICAgIHRoaXMuJHJvdXRlci5yZXBsYWNlKHRoaXMuY2x1c3RlclRvb2xzTG9jYXRpb24oKSk7CiAgICAgIH0gZWxzZSBpZiAodGhpcy4kcm91dGUucXVlcnlbRlJPTV9DTFVTVEVSXSA9PT0gX0ZMQUdHRUQpIHsKICAgICAgICB0aGlzLiRyb3V0ZXIucmVwbGFjZSh0aGlzLmNsdXN0ZXJzTG9jYXRpb24oKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gSWYgdGhlIGNyZWF0ZSBhcHAgcHJvY2VzcyBmYWlscyBoZWxtIHZhbGlkYXRpb24gdGhlbiB3ZSBzdGlsbCBnZXQgaGVyZS4uLiBzbyB1bnRpbCB0aGlzIGlzIGZpeGVkIG5ldyBhcHBzIHdpbGwgYmUgdGFrZW4gdG8gdGhlCiAgICAgICAgLy8gZ2VuZXJpYyBhcHBzIGxpc3QgKGV4aXN0aW5nIGFwcHMgd2lsbCBiZSB0YWtlbiB0byB0aGVpciBkZXRhaWwgcGFnZSkKICAgICAgICB0aGlzLiRyb3V0ZXIucmVwbGFjZSh0aGlzLmFwcExvY2F0aW9uKCkpOwogICAgICB9CiAgICB9LAoKICAgIGFzeW5jIGZpbmlzaChidG5DYikgewogICAgICB0cnkgewogICAgICAgIGNvbnN0IGlzVXBncmFkZSA9ICEhdGhpcy5leGlzdGluZzsKCiAgICAgICAgdGhpcy5lcnJvcnMgPSBbXTsKCiAgICAgICAgYXdhaXQgdGhpcy5hcHBseUhvb2tzKEJFRk9SRV9TQVZFX0hPT0tTKTsKCiAgICAgICAgY29uc3QgeyBlcnJvcnMsIGlucHV0IH0gPSB0aGlzLmFjdGlvbklucHV0KGlzVXBncmFkZSk7CgogICAgICAgIGlmICggZXJyb3JzPy5sZW5ndGggKSB7CiAgICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9yczsKICAgICAgICAgIGJ0bkNiKGZhbHNlKTsKCiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLnJlcG8uZG9BY3Rpb24oKGlzVXBncmFkZSA/ICd1cGdyYWRlJyA6ICdpbnN0YWxsJyksIGlucHV0KTsKICAgICAgICBjb25zdCBvcGVyYXRpb25JZCA9IGAkeyByZXMub3BlcmF0aW9uTmFtZXNwYWNlIH0vJHsgcmVzLm9wZXJhdGlvbk5hbWUgfWA7CgogICAgICAgIC8vIE5vbi1hZG1pbnMgd2l0aG91dCBhIGNsdXN0ZXIgd29uJ3QgYmUgYWJsZSB0byBmZXRjaCBvcGVyYXRpb25zIGltbWVkaWF0ZWx5CiAgICAgICAgYXdhaXQgdGhpcy5yZXBvLndhaXRGb3JPcGVyYXRpb24ob3BlcmF0aW9uSWQpOwoKICAgICAgICAvLyBEeW5hbWljYWxseSB1c2Ugc3RvcmUgZGVjaWRlZCB3aGVuIGxvYWRpbmcgY2F0YWxvZyAoY292ZXJzIHN0YW5kYXJkIHVzZXIgY2FzZSB3aGVuIHRoZXJlJ3Mgbm90IGNsdXN0ZXIpCiAgICAgICAgdGhpcy5vcGVyYXRpb24gPSBhd2FpdCB0aGlzLiRzdG9yZS5kaXNwYXRjaChgJHsgdGhpcy5pblN0b3JlIH0vZmluZGAsIHsKICAgICAgICAgIHR5cGU6IENBVEFMT0cuT1BFUkFUSU9OLAogICAgICAgICAgaWQ6ICAgb3BlcmF0aW9uSWQKICAgICAgICB9KTsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgIGF3YWl0IHRoaXMub3BlcmF0aW9uLndhaXRGb3JMaW5rKCdsb2dzJyk7CiAgICAgICAgICB0aGlzLm9wZXJhdGlvbi5vcGVuTG9ncygpOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIC8vIFRoZSB3YWl0IHRpbWVzIG91dCBldmVudHVhbGx5LCBtb3ZlIG9uLi4uCiAgICAgICAgfQoKICAgICAgICBhd2FpdCB0aGlzLmFwcGx5SG9va3MoQUZURVJfU0FWRV9IT09LUyk7CgogICAgICAgIGJ0bkNiKHRydWUpOwogICAgICAgIHRoaXMuZG9uZSgpOwogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICB0aGlzLmVycm9ycyA9IGV4Y2VwdGlvblRvRXJyb3JzQXJyYXkoZXJyKTsKICAgICAgICBidG5DYihmYWxzZSk7CiAgICAgIH0KICAgIH0sCgogICAgYWRkR2xvYmFsVmFsdWVzVG8odmFsdWVzKSB7CiAgICAgIGxldCBnbG9iYWwgPSB2YWx1ZXMuZ2xvYmFsOwoKICAgICAgaWYgKCAhZ2xvYmFsICkgewogICAgICAgIGdsb2JhbCA9IHt9OwogICAgICAgIHNldCh2YWx1ZXMsICdnbG9iYWwnLCBnbG9iYWwpOwogICAgICB9CgogICAgICBsZXQgY2F0dGxlID0gZ2xvYmFsLmNhdHRsZTsKCiAgICAgIGlmICggIWNhdHRsZSApIHsKICAgICAgICBjYXR0bGUgPSB7fTsKICAgICAgICBzZXQodmFsdWVzLmdsb2JhbCwgJ2NhdHRsZScsIGNhdHRsZSk7CiAgICAgIH0KCiAgICAgIGNvbnN0IGNsdXN0ZXIgPSB0aGlzLmN1cnJlbnRDbHVzdGVyOwogICAgICBjb25zdCBwcm9qZWN0cyA9IHRoaXMuJHN0b3JlLmdldHRlcnNbJ21hbmFnZW1lbnQvYWxsJ10oTUFOQUdFTUVOVC5QUk9KRUNUKTsKICAgICAgY29uc3Qgc3lzdGVtUHJvamVjdElkID0gcHJvamVjdHMuZmluZCgocCkgPT4gcC5zcGVjPy5kaXNwbGF5TmFtZSA9PT0gJ1N5c3RlbScpPy5pZD8uc3BsaXQoJy8nKT8uWzFdIHx8ICcnOwoKICAgICAgY29uc3Qgc2VydmVyVXJsID0gdGhpcy5zZXJ2ZXJVcmxTZXR0aW5nPy52YWx1ZSB8fCAnJzsKICAgICAgY29uc3QgaXNXaW5kb3dzID0gKGNsdXN0ZXI/Lndvcmtlck9TcyB8fCBbXSkuaW5jbHVkZXMoV0lORE9XUyk7CiAgICAgIGNvbnN0IHBhdGhQcmVmaXggPSBjbHVzdGVyPy5zcGVjPy5yYW5jaGVyS3ViZXJuZXRlc0VuZ2luZUNvbmZpZz8ucHJlZml4UGF0aCB8fCAnJzsKICAgICAgY29uc3Qgd2luZG93c1BhdGhQcmVmaXggPSBjbHVzdGVyPy5zcGVjPy5yYW5jaGVyS3ViZXJuZXRlc0VuZ2luZUNvbmZpZz8ud2luUHJlZml4UGF0aCB8fCAnJzsKCiAgICAgIHNldElmTm90U2V0KGNhdHRsZSwgJ2NsdXN0ZXJJZCcsIGNsdXN0ZXI/LmlkKTsKICAgICAgc2V0SWZOb3RTZXQoY2F0dGxlLCAnY2x1c3Rlck5hbWUnLCBjbHVzdGVyPy5uYW1lRGlzcGxheSk7CgogICAgICBpZiAodGhpcy5zaG93Q3VzdG9tUmVnaXN0cnkpIHsKICAgICAgICBzZXQoY2F0dGxlLCAnc3lzdGVtRGVmYXVsdFJlZ2lzdHJ5JywgdGhpcy5jdXN0b21SZWdpc3RyeVNldHRpbmcpOwogICAgICAgIHNldChnbG9iYWwsICdzeXN0ZW1EZWZhdWx0UmVnaXN0cnknLCB0aGlzLmN1c3RvbVJlZ2lzdHJ5U2V0dGluZyk7CiAgICAgIH0KCiAgICAgIHNldElmTm90U2V0KGdsb2JhbCwgJ2NhdHRsZS5zeXN0ZW1Qcm9qZWN0SWQnLCBzeXN0ZW1Qcm9qZWN0SWQpOwogICAgICBzZXRJZk5vdFNldChjYXR0bGUsICd1cmwnLCBzZXJ2ZXJVcmwpOwogICAgICBzZXRJZk5vdFNldChjYXR0bGUsICdya2VQYXRoUHJlZml4JywgcGF0aFByZWZpeCk7CiAgICAgIHNldElmTm90U2V0KGNhdHRsZSwgJ3JrZVdpbmRvd3NQYXRoUHJlZml4Jywgd2luZG93c1BhdGhQcmVmaXgpOwoKICAgICAgaWYgKCBpc1dpbmRvd3MgKSB7CiAgICAgICAgc2V0SWZOb3RTZXQoY2F0dGxlLCAnd2luZG93cy5lbmFibGVkJywgdHJ1ZSk7CiAgICAgIH0KCiAgICAgIHJldHVybiB2YWx1ZXM7CgogICAgICBmdW5jdGlvbiBzZXRJZk5vdFNldChvYmosIGtleSwgdmFsKSB7CiAgICAgICAgaWYgKCB0eXBlb2YgZ2V0KG9iaiwga2V5KSA9PT0gJ3VuZGVmaW5lZCcgKSB7CiAgICAgICAgICBzZXQob2JqLCBrZXksIHZhbCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LAoKICAgIHJlbW92ZUdsb2JhbFZhbHVlc0Zyb20odmFsdWVzKSB7CiAgICAgIGlmICggIXZhbHVlcyApIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGNvbnN0IGNsdXN0ZXIgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzWydjdXJyZW50Q2x1c3RlciddOwogICAgICBjb25zdCBzZXJ2ZXJVcmwgPSB0aGlzLnNlcnZlclVybFNldHRpbmc/LnZhbHVlIHx8ICcnOwogICAgICBjb25zdCBpc1dpbmRvd3MgPSAoY2x1c3Rlcj8ud29ya2VyT1NzIHx8IFtdKS5pbmNsdWRlcyhXSU5ET1dTKTsKICAgICAgY29uc3QgcGF0aFByZWZpeCA9IGNsdXN0ZXI/LnNwZWM/LnJhbmNoZXJLdWJlcm5ldGVzRW5naW5lQ29uZmlnPy5wcmVmaXhQYXRoIHx8ICcnOwogICAgICBjb25zdCB3aW5kb3dzUGF0aFByZWZpeCA9IGNsdXN0ZXI/LnNwZWM/LnJhbmNoZXJLdWJlcm5ldGVzRW5naW5lQ29uZmlnPy53aW5QcmVmaXhQYXRoIHx8ICcnOwoKICAgICAgaWYgKCB2YWx1ZXMuZ2xvYmFsPy5jYXR0bGUgKSB7CiAgICAgICAgZGVsZXRlSWZFcXVhbCh2YWx1ZXMuZ2xvYmFsLmNhdHRsZSwgJ2NsdXN0ZXJJZCcsIGNsdXN0ZXI/LmlkKTsKICAgICAgICBkZWxldGVJZkVxdWFsKHZhbHVlcy5nbG9iYWwuY2F0dGxlLCAnY2x1c3Rlck5hbWUnLCBjbHVzdGVyPy5uYW1lRGlzcGxheSk7CiAgICAgICAgZGVsZXRlSWZFcXVhbCh2YWx1ZXMuZ2xvYmFsLmNhdHRsZSwgJ3VybCcsIHNlcnZlclVybCk7CiAgICAgICAgZGVsZXRlSWZFcXVhbCh2YWx1ZXMuZ2xvYmFsLmNhdHRsZSwgJ3JrZVBhdGhQcmVmaXgnLCBwYXRoUHJlZml4KTsKICAgICAgICBkZWxldGVJZkVxdWFsKHZhbHVlcy5nbG9iYWwuY2F0dGxlLCAncmtlV2luZG93c1BhdGhQcmVmaXgnLCB3aW5kb3dzUGF0aFByZWZpeCk7CgogICAgICAgIGlmICggaXNXaW5kb3dzICkgewogICAgICAgICAgZGVsZXRlSWZFcXVhbCh2YWx1ZXMuZ2xvYmFsLmNhdHRsZS53aW5kb3dzLCAnZW5hYmxlZCcsIHRydWUpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgaWYgKCB2YWx1ZXMuZ2xvYmFsPy5jYXR0bGU/LndpbmRvd3MgJiYgIU9iamVjdC5rZXlzKHZhbHVlcy5nbG9iYWwuY2F0dGxlLndpbmRvd3MpLmxlbmd0aCApIHsKICAgICAgICBkZWxldGUgdmFsdWVzLmdsb2JhbC5jYXR0bGUud2luZG93czsKICAgICAgfQoKICAgICAgaWYgKCB2YWx1ZXMuZ2xvYmFsPy5jYXR0bGUgJiYgIU9iamVjdC5rZXlzKHZhbHVlcy5nbG9iYWwuY2F0dGxlKS5sZW5ndGggKSB7CiAgICAgICAgZGVsZXRlIHZhbHVlcy5nbG9iYWwuY2F0dGxlOwogICAgICB9CgogICAgICBpZiAoICFPYmplY3Qua2V5cyh2YWx1ZXMuZ2xvYmFsIHx8IHt9KS5sZW5ndGggKSB7CiAgICAgICAgZGVsZXRlIHZhbHVlcy5nbG9iYWw7CiAgICAgIH0KCiAgICAgIHJldHVybiB2YWx1ZXM7CgogICAgICBmdW5jdGlvbiBkZWxldGVJZkVxdWFsKG9iaiwga2V5LCB2YWwpIHsKICAgICAgICBpZiAoIGdldChvYmosIGtleSkgPT09IHZhbCApIHsKICAgICAgICAgIGRlbGV0ZSBvYmpba2V5XTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCgogICAgYXBwbHlZYW1sVG9WYWx1ZXMoKSB7CiAgICAgIHRyeSB7CiAgICAgICAgdGhpcy5jaGFydFZhbHVlcyA9IGpzeWFtbC5sb2FkKHRoaXMudmFsdWVzWWFtbCk7CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIHJldHVybiB7IGVycm9yczogZXhjZXB0aW9uVG9FcnJvcnNBcnJheShlcnIpIH07CiAgICAgIH0KCiAgICAgIHJldHVybiB7IGVycm9yczogW10gfTsKICAgIH0sCgogICAgLyoKICAgICAgYWN0aW9uSW5wdXQgZGV0ZXJtaW5lcyB3aGF0IHZhbHVlcyBSYW5jaGVyIGZpbmFsbHkgc2VuZHMKICAgICAgdG8gdGhlIGJhY2tlbmQgd2hlbiBpbnN0YWxsaW5nIG9yIHVwZ3JhZGluZyB0aGUgYXBwLiBJdAogICAgICBpbmplY3RzIFJhbmNoZXItc3BlY2lmaWMgdmFsdWVzIGludG8gdGhlIGNoYXJ0IHZhbHVlcy4KICAgICovCiAgICBhY3Rpb25JbnB1dChpc1VwZ3JhZGUpIHsKICAgICAgLyogRGVmYXVsdCB2YWx1ZXMgZGVmaW5lZCBpbiB0aGUgSGVsbSBjaGFydCBpdHNlbGYgKi8KICAgICAgY29uc3QgZnJvbUNoYXJ0ID0gdGhpcy52ZXJzaW9uSW5mbz8udmFsdWVzIHx8IHt9OwoKICAgICAgY29uc3QgZXJyb3JzID0gW107CgogICAgICBpZiAoIHRoaXMuc2hvd2luZ1lhbWwgfHwgdGhpcy5zaG93aW5nWWFtbERpZmYgKSB7CiAgICAgICAgY29uc3QgeyBlcnJvcnM6IHlhbWxFcnJvcnMgfSA9IHRoaXMuYXBwbHlZYW1sVG9WYWx1ZXMoKTsKCiAgICAgICAgZXJyb3JzLnB1c2goLi4ueWFtbEVycm9ycyk7CiAgICAgIH0KCiAgICAgIC8qCiAgICAgICAgT25seSBzYXZlIHRoZSB2YWx1ZXMgdGhhdCBkaWZmZXIgZnJvbSB0aGUgY2hhcnQncyBzdGFuZGFyZCB2YWx1ZXMueWFtbC4KICAgICAgICBjaGFydFZhbHVlcyBpcyBjcmVhdGVkIGJ5IGFwcGx5aW5nIHRoZSB1c2VyJ3MgY3VzdG9taXplZCBvbnRvCiAgICAgICAgdGhlIGRlZmF1bHQgY2hhcnQgdmFsdWVzLgogICAgICAqLwogICAgICBjb25zdCB2YWx1ZXMgPSBkaWZmKGZyb21DaGFydCwgdGhpcy5jaGFydFZhbHVlcyk7CgogICAgICAvKgogICAgICAgIFJlZmVyIHRvIHRoZSBkZXZlbG9wZXIgZG9jcyBhdCBkb2NzL2RldmVsb3Blci9oZWxtLWNoYXJ0LWFwcHMubWQKICAgICAgICBmb3IgZGV0YWlscyBvbiB3aGF0IHZhbHVlcyBhcmUgaW5qZWN0ZWQgYW5kIHdoZXJlIHRoZXkgY29tZSBmcm9tLgogICAgICAqLwoKICAgICAgdGhpcy5hZGRHbG9iYWxWYWx1ZXNUbyh2YWx1ZXMpOwoKICAgICAgY29uc3QgZm9ybSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy52YWx1ZSkpOwoKICAgICAgLyoKICAgICAgICBNaWdyYXRlZCBhbm5vdGF0aW9ucyBhcmUgcmVxdWlyZWQgdG8gYWxsb3cgYSBkZXByZWNhdGVkIGxlZ2FjeSBhcHAgdG8gYmUKICAgICAgICB1cGdyYWRlZC4KICAgICAgKi8KICAgICAgY29uc3QgbWlncmF0ZWRBbm5vdGF0aW9ucyA9IHRoaXMubWlncmF0ZWRBcHAgPyB7IFtDQVRBTE9HX0FOTk9UQVRJT05TLk1JR1JBVEVEXTogJ3RydWUnIH0gOiB7fTsKCiAgICAgIGNvbnN0IGNoYXJ0ID0gewogICAgICAgIGNoYXJ0TmFtZTogICB0aGlzLmNoYXJ0LmNoYXJ0TmFtZSwKICAgICAgICB2ZXJzaW9uOiAgICAgdGhpcy52ZXJzaW9uPy52ZXJzaW9uIHx8IHRoaXMucXVlcnkudmVyc2lvbk5hbWUsCiAgICAgICAgcmVsZWFzZU5hbWU6IGZvcm0ubWV0YWRhdGEubmFtZSwKICAgICAgICBkZXNjcmlwdGlvbjogdGhpcy5jdXN0b21DbWRPcHRzLmRlc2NyaXB0aW9uLAogICAgICAgIGFubm90YXRpb25zOiB7CiAgICAgICAgICAuLi5taWdyYXRlZEFubm90YXRpb25zLAogICAgICAgICAgW0NBVEFMT0dfQU5OT1RBVElPTlMuU09VUkNFX1JFUE9fVFlQRV06IHRoaXMuY2hhcnQucmVwb1R5cGUsCiAgICAgICAgICBbQ0FUQUxPR19BTk5PVEFUSU9OUy5TT1VSQ0VfUkVQT19OQU1FXTogdGhpcy5jaGFydC5yZXBvTmFtZQogICAgICAgIH0sCiAgICAgICAgdmFsdWVzLAogICAgICB9OwoKICAgICAgaWYgKCBpc1VwZ3JhZGUgKSB7CiAgICAgICAgY2hhcnQucmVzZXRWYWx1ZXMgPSB0aGlzLmNtZE9wdGlvbnMucmVzZXRWYWx1ZXM7CiAgICAgIH0KCiAgICAgIC8qCiAgICAgICAgQ29uZmlndXJlIEhlbG0gQ0xJIG9wdGlvbnMgZm9yIGRvaW5nIHRoZSBpbnN0YWxsIG9yCiAgICAgICAgdXBncmFkZSBvcGVyYXRpb24uCiAgICAgICovCiAgICAgIGNvbnN0IG91dCA9IHsKICAgICAgICBjaGFydHM6ICAgIFtjaGFydF0sCiAgICAgICAgbm9Ib29rczogICB0aGlzLmNtZE9wdGlvbnMuaG9va3MgPT09IGZhbHNlLAogICAgICAgIHRpbWVvdXQ6ICAgdGhpcy5jbWRPcHRpb25zLnRpbWVvdXQgPiAwID8gYCR7IHRoaXMuY21kT3B0aW9ucy50aW1lb3V0IH1zYCA6IG51bGwsCiAgICAgICAgd2FpdDogICAgICB0aGlzLmNtZE9wdGlvbnMud2FpdCA9PT0gdHJ1ZSwKICAgICAgICBuYW1lc3BhY2U6IGZvcm0ubWV0YWRhdGEubmFtZXNwYWNlLAogICAgICAgIHByb2plY3RJZDogdGhpcy5wcm9qZWN0LAogICAgICB9OwoKICAgICAgLyoKICAgICAgICBDb25maWd1cmUgSGVsbSBDTEkgb3B0aW9ucyB0aGF0IGFyZSBzcGVjaWZpYyB0bwogICAgICAgIGluc3RhbGxzIG9yIHNwZWNpZmljIHRvIHVwZ3JhZGVzLgogICAgICAqLwogICAgICBpZiAoIGlzVXBncmFkZSApIHsKICAgICAgICBvdXQuZm9yY2UgPSB0aGlzLmNtZE9wdGlvbnMuZm9yY2UgPT09IHRydWU7CiAgICAgICAgb3V0Lmhpc3RvcnlNYXggPSB0aGlzLmNtZE9wdGlvbnMuaGlzdG9yeU1heDsKICAgICAgICBvdXQuY2xlYW51cE9uRmFpbCA9IHRoaXMuY21kT3B0aW9ucy5jbGVhbnVwT25GYWlsOwogICAgICB9IGVsc2UgewogICAgICAgIG91dC5kaXNhYmxlT3BlbkFQSVZhbGlkYXRpb24gPSB0aGlzLmNtZE9wdGlvbnMub3BlbkFwaSA9PT0gZmFsc2U7CiAgICAgICAgb3V0LnNraXBDUkRzID0gdGhpcy5jbWRPcHRpb25zLmNyZHMgPT09IGZhbHNlOwogICAgICB9CgogICAgICBjb25zdCBtb3JlID0gW107CgogICAgICBjb25zdCBhdXRvID0gKHRoaXMudmVyc2lvbj8uYW5ub3RhdGlvbnM/LltDQVRBTE9HX0FOTk9UQVRJT05TLkFVVE9fSU5TVEFMTF9HVktdIHx8ICcnKS5zcGxpdCgvXHMqLFxzKi8pLmZpbHRlcigoeCkgPT4gISF4KS5yZXZlcnNlKCk7CgogICAgICBmb3IgKCBjb25zdCBndnIgb2YgYXV0byApIHsKICAgICAgICBjb25zdCBwcm92aWRlciA9IHRoaXMuJHN0b3JlLmdldHRlcnNbJ2NhdGFsb2cvdmVyc2lvblByb3ZpZGluZyddKHsKICAgICAgICAgIGd2ciwKICAgICAgICAgIHJlcG9OYW1lOiB0aGlzLmNoYXJ0LnJlcG9OYW1lLAogICAgICAgICAgcmVwb1R5cGU6IHRoaXMuY2hhcnQucmVwb1R5cGUKICAgICAgICB9KTsKCiAgICAgICAgaWYgKCBwcm92aWRlciApIHsKICAgICAgICAgIG1vcmUucHVzaChwcm92aWRlcik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGVycm9ycy5wdXNoKGBUaGlzIGNoYXJ0IHJlcXVpcmVzIGFub3RoZXIgY2hhcnQgdGhhdCBwcm92aWRlcyAkeyBndnIgfSwgYnV0IG5vbmUgd2FzIHdhcyBmb3VuZGApOwogICAgICAgIH0KICAgICAgfQoKICAgICAgLyogQ2hhcnQgY3VzdG9tIFVJIGNvbXBvbmVudHMgaGF2ZSB0aGUgYWJpbGl0eSB0byBlZGl0IENSRCBjaGFydCB2YWx1ZXMgZWcgZ2F0ZWtlZXBlci1jcmQgaGFzIHZhbHVlcy5lbmFibGVSdW50aW1lRGVmYXVsdFNlY2NvbXBQcm9maWxlCiAgICAgICAgbGlrZSB0aGUgbWFpbiBjaGFydCwgb25seSBDUkQgdmFsdWVzIHRoYXQgZGlmZmVyIGZyb20gZGVmYXVsdHMgc2hvdWxkIGJlIHNlbnQgb24gaW5zdGFsbC91cGdyYWRlCiAgICAgICAgQ1JEcyBzaG91bGQgYmUgaW5zdGFsbGVkIHdpdGggdGhlIHNhbWUgZ2xvYmFsIHZhbHVlcyBhcyB0aGUgbWFpbiBjaGFydAogICAgICAqLwogICAgICBmb3IgKGNvbnN0IHZlcnNpb25JbmZvIG9mIHRoaXMuYXV0b0luc3RhbGxJbmZvKSB7CiAgICAgICAgLy8gYWxsVmFsdWVzIGFyZSB0aGUgdmFsdWVzIHBvdGVudGlhbGx5IGNoYW5nZWQgaW4gdGhlIGluc3RhbGxhdGlvbiB1aTogYW55IHByZXZpb3VzbHkgY3VzdG9taXplZCB2YWx1ZXMgKyBkZWZhdWx0cwogICAgICAgIC8vIHZhbHVlcyBhcmUgZGVmYXVsdCB2YWx1ZXMgZnJvbSB0aGUgY2hhcnQKICAgICAgICBjb25zdCB7IGFsbFZhbHVlcywgdmFsdWVzOiBjcmRWYWx1ZXMgfSA9IHZlcnNpb25JbmZvOwoKICAgICAgICAvLyBvbmx5IHNhdmUgY3JkIHZhbHVlcyB0aGF0IGRpZmZlciBmcm9tIHRoZSBkZWZhdWx0cyBkZWZpbmVkIGluIGNoYXJ0IHZhbHVlcy55YW1sCiAgICAgICAgY29uc3QgY3VzdG9taXplZENyZFZhbHVlcyA9IGRpZmYoY3JkVmFsdWVzLCBhbGxWYWx1ZXMpOwoKICAgICAgICAvLyBDUkQgZ2xvYmFscyBzaG91bGQgYmUgb3ZlcndyaXR0ZW4gYnkgbWFpbiBjaGFydCBnbG9iYWxzCiAgICAgICAgLy8gd2Ugd2FudCB0byBhdm9pZCBpbmNsdWRpbmcgZ2xvYmFscyBwcmVzZW50IG9uIGNyZCB2YWx1ZXMgYW5kIG5vdCBtYWluIGNoYXJ0IHZhbHVlcwogICAgICAgIC8vIHRoYXQgY292ZXJzIHRoZSBzY2VuYXJpbyB3aGVyZSBhIGdsb2JhbCB2YWx1ZSB3YXMgY3VzdG9taXplZCBvbiBhIHByZXZpb3VzIGluc3RhbGwgKGFuZCBzbyBpcyBwcmVzZW50IGluIGNyZCBnbG9iYWwgdmFscykgYW5kIHRoZSB1c2VyIGhhcyByZXZlcnRlZCBpdCB0byBkZWZhdWx0IG9uIHRoaXMgdXBkYXRlIChubyBsb25nZXIgcHJlc2VudCBpbiBtYWluIGNoYXJ0IGdsb2JhbCB2YWxzKQogICAgICAgIGNvbnN0IGNyZFZhbHVlc1RvSW5zdGFsbCA9IHsgLi4uY3VzdG9taXplZENyZFZhbHVlcywgZ2xvYmFsOiB2YWx1ZXMuZ2xvYmFsIH07CgogICAgICAgIG91dC5jaGFydHMudW5zaGlmdCh7CiAgICAgICAgICBjaGFydE5hbWU6ICAgdmVyc2lvbkluZm8uY2hhcnQubmFtZSwKICAgICAgICAgIHZlcnNpb246ICAgICB2ZXJzaW9uSW5mby5jaGFydC52ZXJzaW9uLAogICAgICAgICAgcmVsZWFzZU5hbWU6IHZlcnNpb25JbmZvLmNoYXJ0LmFubm90YXRpb25zW0NBVEFMT0dfQU5OT1RBVElPTlMuUkVMRUFTRV9OQU1FXSB8fCBjaGFydC5uYW1lLAogICAgICAgICAgcHJvamVjdElkOiAgIHRoaXMucHJvamVjdCwKICAgICAgICAgIHZhbHVlczogICAgICBjcmRWYWx1ZXNUb0luc3RhbGwKICAgICAgICB9KTsKICAgICAgfQogICAgICAvKgogICAgICAgICdtb3JlJyBjb250YWlucyBhZGRpdGlvbmFsCiAgICAgICAgY2hhcnRzIHRoYXQgbWF5IG5vdCBiZSBDUkQgY2hhcnRzIGJ1dCBhcmUgYWxzbyBtZWFudCB0byBiZSBpbnN0YWxsZWQgYXQKICAgICAgICB0aGUgc2FtZSB0aW1lLgogICAgICAqLwogICAgICBmb3IgKCBjb25zdCBkZXBlbmRlbmN5IG9mIG1vcmUgKSB7CiAgICAgICAgb3V0LmNoYXJ0cy51bnNoaWZ0KHsKICAgICAgICAgIGNoYXJ0TmFtZTogICBkZXBlbmRlbmN5Lm5hbWUsCiAgICAgICAgICB2ZXJzaW9uOiAgICAgZGVwZW5kZW5jeS52ZXJzaW9uLAogICAgICAgICAgcmVsZWFzZU5hbWU6IGRlcGVuZGVuY3kuYW5ub3RhdGlvbnNbQ0FUQUxPR19BTk5PVEFUSU9OUy5SRUxFQVNFX05BTUVdIHx8IGRlcGVuZGVuY3kubmFtZSwKICAgICAgICAgIHByb2plY3RJZDogICB0aGlzLnByb2plY3QsCiAgICAgICAgICB2YWx1ZXM6ICAgICAgdGhpcy5hZGRHbG9iYWxWYWx1ZXNUbyh7IGdsb2JhbDogdmFsdWVzLmdsb2JhbCB9KSwKICAgICAgICAgIGFubm90YXRpb25zOiB7CiAgICAgICAgICAgIC4uLm1pZ3JhdGVkQW5ub3RhdGlvbnMsCiAgICAgICAgICAgIFtDQVRBTE9HX0FOTk9UQVRJT05TLlNPVVJDRV9SRVBPX1RZUEVdOiBkZXBlbmRlbmN5LnJlcG9UeXBlLAogICAgICAgICAgICBbQ0FUQUxPR19BTk5PVEFUSU9OUy5TT1VSQ0VfUkVQT19OQU1FXTogZGVwZW5kZW5jeS5yZXBvTmFtZQogICAgICAgICAgfSwKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgcmV0dXJuIHsgZXJyb3JzLCBpbnB1dDogb3V0IH07CiAgICB9LAoKICAgIHRhYkNoYW5nZWQoKSB7CiAgICAgIHdpbmRvdy5zY3JvbGxUb3AgPSAwOwogICAgfSwKCiAgICB1cGRhdGVTdGVwT25lUmVhZHkoKSB7CiAgICAgIGNvbnN0IG9rUmVxdWlyZXMgPSAhdGhpcy5yZXF1aXJlcy5sZW5ndGg7CiAgICAgIGNvbnN0IG9rQ2hhcnQgPSAhIXRoaXMuY2hhcnQ7CgogICAgICB0aGlzLnN0ZXBzWzBdLnJlYWR5ID0gb2tSZXF1aXJlcyAmJiBva0NoYXJ0OwogICAgfSwKCiAgICB1cGRhdGVTdGVwVHdvUmVhZHkodXBkYXRlKSB7CiAgICAgIHRoaXMudXBkYXRlU3RlcCgnaGVsbVZhbHVlcycsIHsgcmVhZHk6IHVwZGF0ZSB9KTsKICAgIH0sCgogICAgZ2V0T3B0aW9uTGFiZWwob3B0KSB7CiAgICAgIHJldHVybiBvcHQ/LmNoYXJ0TmFtZURpc3BsYXk7CiAgICB9LAoKICAgIHNob3dSZWFkbWVXaW5kb3coKSB7CiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCd3bS9vcGVuJywgewogICAgICAgIGlkOiAgICAgICAgdGhpcy5yZWFkbWVXaW5kb3dOYW1lLAogICAgICAgIGxhYmVsOiAgICAgdGhpcy5yZWFkbWVXaW5kb3dOYW1lLAogICAgICAgIGljb246ICAgICAgJ2ZpbGUnLAogICAgICAgIGNvbXBvbmVudDogJ0NoYXJ0UmVhZG1lJywKICAgICAgICBhdHRyczogICAgIHsgdmVyc2lvbkluZm86IHRoaXMudmVyc2lvbkluZm8gfQogICAgICB9LCB7IHJvb3Q6IHRydWUgfSk7CiAgICAgIHRoaXMuc2hvd25SZWFkbWVXaW5kb3dzLnB1c2godGhpcy5yZWFkbWVXaW5kb3dOYW1lKTsKICAgIH0sCgogICAgdXBkYXRlU3RlcChzdGVwTmFtZSwgdXBkYXRlKSB7CiAgICAgIGNvbnN0IHN0ZXAgPSB0aGlzLnN0ZXBzLmZpbmQoKHN0ZXApID0+IHN0ZXAubmFtZSA9PT0gc3RlcE5hbWUpOwoKICAgICAgaWYgKHN0ZXApIHsKICAgICAgICBmb3IgKGNvbnN0IHByb3AgaW4gdXBkYXRlKSB7CiAgICAgICAgICBWdWUuc2V0KHN0ZXAsIHByb3AsIHVwZGF0ZVtwcm9wXSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwKfTsK"},{"version":3,"sources":["install.vue"],"names":[],"mappingsfile":"install.vue","sourceRoot":"node_modules/@rancher/shell/pages/c/_cluster/apps/charts","sourcesContent":["<script>\nimport jsyaml from 'js-yaml';\nimport merge from 'lodash/merge';\nimport isEqual from 'lodash/isEqual';\nimport { mapPref, DIFF } from '@shell/store/prefs';\nimport { mapFeature, MULTI_CLUSTER, LEGACY } from '@shell/store/features';\nimport { mapGetters } from 'vuex';\nimport { Banner } from '@components/Banner';\nimport ButtonGroup from '@shell/components/ButtonGroup';\nimport ChartReadme from '@shell/components/ChartReadme';\nimport { Checkbox } from '@components/Form/Checkbox';\nimport LabeledSelect from '@shell/components/form/LabeledSelect';\nimport { LabeledInput } from '@components/Form/LabeledInput';\nimport { LabeledTooltip } from '@components/LabeledTooltip';\nimport LazyImage from '@shell/components/LazyImage';\nimport Loading from '@shell/components/Loading';\nimport NameNsDescription from '@shell/components/form/NameNsDescription';\nimport ResourceCancelModal from '@shell/components/ResourceCancelModal';\nimport Questions from '@shell/components/Questions';\nimport Tabbed from '@shell/components/Tabbed';\nimport UnitInput from '@shell/components/form/UnitInput';\nimport YamlEditor, { EDITOR_MODES } from '@shell/components/YamlEditor';\nimport Wizard from '@shell/components/Wizard';\nimport TypeDescription from '@shell/components/TypeDescription';\nimport ChartMixin from '@shell/mixins/chart';\nimport ChildHook, { BEFORE_SAVE_HOOKS, AFTER_SAVE_HOOKS } from '@shell/mixins/child-hook';\nimport { CATALOG, MANAGEMENT, DEFAULT_WORKSPACE, CAPI } from '@shell/config/types';\nimport {\n  CHART, FROM_CLUSTER, FROM_TOOLS, HIDE_SIDE_NAV, NAMESPACE, REPO, REPO_TYPE, VERSION, _FLAGGED\n} from '@shell/config/query-params';\nimport { CATALOG as CATALOG_ANNOTATIONS, PROJECT } from '@shell/config/labels-annotations';\n\nimport { exceptionToErrorsArray } from '@shell/utils/error';\nimport { clone, diff, get, set } from '@shell/utils/object';\nimport { ignoreVariables } from './install.helpers';\nimport { findBy, insertAt } from '@shell/utils/array';\nimport Vue from 'vue';\nimport { saferDump } from '@shell/utils/create-yaml';\nimport { LINUX, WINDOWS } from '@shell/store/catalog';\n\nconst VALUES_STATE = {\n  FORM: 'FORM',\n  YAML: 'YAML',\n  DIFF: 'DIFF'\n};\n\nfunction isPlainLayout(query) {\n  return Object.keys(query).includes(HIDE_SIDE_NAV);\n}\n\nexport default {\n  name: 'Install',\n\n  layout(context) {\n    return isPlainLayout(context.query) ? 'plain' : '';\n  },\n\n  components: {\n    Banner,\n    ButtonGroup,\n    ChartReadme,\n    Checkbox,\n    LabeledInput,\n    LabeledSelect,\n    LabeledTooltip,\n    LazyImage,\n    Loading,\n    NameNsDescription,\n    ResourceCancelModal,\n    Questions,\n    Tabbed,\n    UnitInput,\n    YamlEditor,\n    Wizard,\n    TypeDescription\n  },\n\n  mixins: [\n    ChildHook,\n    ChartMixin\n  ],\n\n  async fetch() {\n    this.errors = [];\n    // IMPORTANT! Any exception thrown before this.value is set will result in an empty page\n\n    /*\n      fetchChart is defined in shell/mixins. It first checks the URL\n      query for an app name and namespace. It uses those values to check\n      for a catalog app resource. If found, it sets the form to edit\n      mode. If not, it sets the form to create mode.\n\n      If the app and app namespace are not provided in the query,\n      it checks for target name and namespace values defined in the\n      Helm chart itself.\n    */\n    try {\n      await this.fetchChart();\n    } catch (e) {\n      console.warn('Unable to fetch chart: ', e); // eslint-disable-line no-console\n    }\n\n    try {\n      await this.fetchAutoInstallInfo();\n    } catch (e) {\n      console.warn('Unable to determine if other charts require install: ', e); // eslint-disable-line no-console\n    }\n\n    // If the chart doesn't contain system `systemDefaultRegistry` properties there's no point applying them\n    if (this.showCustomRegistry) {\n      // Note: Cluster scoped registry is only supported for node driver clusters\n      try {\n        this.clusterRegistry = await this.getClusterRegistry();\n      } catch (e) {\n        console.warn('Unable to get cluster registry: ', e); // eslint-disable-line no-console\n      }\n\n      try {\n        this.globalRegistry = await this.getGlobalRegistry();\n      } catch (e) {\n        console.warn('Unable to get global registry: ', e); // eslint-disable-line no-console\n      }\n      this.defaultRegistrySetting = this.clusterRegistry || this.globalRegistry;\n    }\n\n    try {\n      this.serverUrlSetting = await this.$store.dispatch('management/find', {\n        type: MANAGEMENT.SETTING,\n        id:   'server-url'\n      });\n    } catch (e) {\n      console.error('Unable to fetch `server-url` setting: ', e); // eslint-disable-line no-console\n    }\n\n    /*\n      Figure out the namespace where the chart is\n      being installed or upgraded.\n    */\n    if ( this.existing ) {\n      /*\n      If the Helm chart is already installed,\n      use the existing namespace by default.\n    */\n\n      this.forceNamespace = this.existing.metadata.namespace;\n      this.nameDisabled = true;\n    } else if (this.$route.query[FROM_CLUSTER] === _FLAGGED) {\n      /* For Fleet, use the fleet-default namespace. */\n      this.forceNamespace = DEFAULT_WORKSPACE;\n    } else if ( this.chart?.targetNamespace ) {\n      /* If a target namespace is defined in the chart,\n      set the target namespace as default. */\n      this.forceNamespace = this.chart.targetNamespace;\n    } else if ( this.query.appNamespace ) {\n      /* If a namespace is defined in the URL query,\n       use that namespace as default. */\n      this.forceNamespace = this.query.appNamespace;\n    } else {\n      this.forceNamespace = null;\n    }\n\n    /* Check if the app is deprecated. */\n    try {\n      this.legacyApp = this.existing ? await this.existing.deployedAsLegacy() : false;\n    } catch (e) {\n      this.legacyApp = false;\n      console.warn('Unable to determine if existing install is a legacy app: ', e); // eslint-disable-line no-console\n    }\n\n    /* Check if the app is a multicluster deprecated app.\n    (Multicluster apps were replaced by Fleet.) */\n\n    try {\n      this.mcapp = this.existing ? await this.existing.deployedAsMultiCluster() : false;\n    } catch (e) {\n      this.mcapp = false;\n      console.warn('Unable to determine if existing install is a mc app: ', e); // eslint-disable-line no-console\n    }\n\n    /* The form state is intialized as a chartInstallAction resource. */\n    try {\n      this.value = await this.$store.dispatch('cluster/create', {\n        type:     'chartInstallAction',\n        metadata: {\n          namespace: this.forceNamespace || this.$store.getters['defaultNamespace'],\n          name:      this.existing?.spec?.name || this.query.appName || '',\n        }\n      });\n    } catch (e) {\n      console.error('Unable to create object of type `chartInstallAction`: ', e); // eslint-disable-line no-console\n\n      // Nothing's going to work without a `value`. See https://github.com/rancher/dashboard/issues/9452 to handle this and other catches.\n      return;\n    }\n\n    /* Logic for when the Helm chart is not already installed */\n    if ( !this.existing) {\n      /*\n        The target name is used for Git repos for Fleet.\n        The target name indicates the name of the cluster\n        group that the chart is meant to be installed in.\n      */\n      if ( this.chart?.targetName ) {\n        /*\n          Set the name of the chartInstallAction\n          to the name of the cluster group\n          where the chart should be installed.\n        */\n        this.value.metadata.name = this.chart.targetName;\n        this.nameDisabled = true;\n      } else if ( this.query.appName ) {\n        this.value.metadata.name = this.query.appName;\n      } else {\n        this.nameDisabled = false;\n      }\n\n      if ( this.query.description ) {\n        this.customCmdOpts.description = this.query.description;\n      }\n    } /* End of logic for when chart is already installed */\n\n    /*\n      Logic for what to do if the user is installing\n      the Helm chart for the first time and a default\n      namespace has been set.\n    */\n    if (this.forceNamespace && !this.existing) {\n      let ns;\n\n      /*\n        Before moving forward, check to make sure the\n        default namespace exists and the logged-in user\n        has permission to see it.\n      */\n      try {\n        ns = await this.$store.dispatch('cluster/find', { type: NAMESPACE, id: this.forceNamespace });\n        const project = ns.metadata.annotations?.[PROJECT];\n\n        if (project) {\n          this.project = project.replace(':', '/');\n        }\n      } catch {}\n    }\n\n    /* If no chart by the given app name and namespace\n     can be found, or if no version is found, do nothing. */\n    if ( !this.chart || !this.query.versionName) {\n      return;\n    }\n\n    if ( this.version && process.client ) {\n      /*\n        Check if the Helm chart has provided the name\n        of a Vue component to use for configuring\n        chart values. If so, load that component.\n\n        This will set this.valuesComponent,\n        this.componentHasTabs and this.showValuesComponent.\n      */\n      await this.loadValuesComponent();\n    }\n\n    /*\n      Check if the Helm chart has indicated\n      that the user should fill out the chart values\n      through a wizard-style workflow. If so, load\n      the chart steps.\n    */\n    await this.loadChartSteps();\n\n    /*\n      this.loadedVersion will only be true if you select a non-defalut\n      option from the \"Version\" dropdown menu in Apps & Marketplace\n      when updating a previously installed app.\n    */\n    if ( !this.loadedVersion || this.loadedVersion !== this.version.key ) {\n      let userValues;\n\n      /*\n        When you select a version, a new chart is loaded. Then\n        Rancher anticipates that you probably want to port all of your\n        previously customized, non-default values from the old chart\n        version to the new chart version, so it applies the previous\n        chart's customization to the new chart values before\n        you see the values form on the next page in the workflow.\n      */\n      if ( this.loadedVersion ) {\n        if ( this.showingYaml ) {\n          this.applyYamlToValues();\n        }\n        /*\n          this.loadedVersionValues is taken from versionInfo,\n          which contains everything there is to know about a specific\n          version of a Helm chart, including all chart values,\n          chart metadata, a short app README and a more\n          version-specific README called the chart README.\n\n          Here we assume that any difference between the values in\n          two different Helm chart versions is a \"user value,\" or\n          a user-selected customization.\n        */\n        userValues = diff(this.loadedVersionValues, this.chartValues);\n      } else if ( this.existing ) {\n        /* For an already installed app, use the values from the previous install. */\n        userValues = clone(this.existing.spec?.values || {});\n      } else {\n        /* For an new app, start empty. */\n        userValues = {};\n      }\n\n      /*\n        Remove global values if they are identical to\n        the currently available information about the cluster\n        and Rancher settings.\n\n        Immediately before the Helm chart is installed or\n        upgraded, the global values are re-added.\n      */\n      this.removeGlobalValuesFrom(userValues);\n\n      /*\n        The merge() method is used to merge two or more objects\n        starting with the left-most to the right-most to create a\n        parent mapping object. When two keys are the same, the\n        generated object will have value for the rightmost key.\n        In this case, any values in userValues override any\n        matching values in versionInfo.\n      */\n      this.chartValues = merge(merge({}, this.versionInfo?.values || {}), userValues);\n\n      if (this.showCustomRegistry) {\n        /**\n         * The input to configure the registry should never be\n         * shown for third-party charts, which don't have Rancher\n         * global values.\n         */\n        const existingRegistry = this.chartValues?.global?.systemDefaultRegistry || this.chartValues?.global?.cattle?.systemDefaultRegistry;\n\n        delete this.chartValues?.global?.systemDefaultRegistry;\n        delete this.chartValues?.global?.cattle?.systemDefaultRegistry;\n\n        this.customRegistrySetting = existingRegistry || this.defaultRegistrySetting;\n        this.showCustomRegistryInput = !!this.customRegistrySetting;\n      }\n\n      /* Serializes an object as a YAML document */\n      this.valuesYaml = saferDump(this.chartValues);\n\n      /* For YAML diff */\n      if ( !this.loadedVersion ) {\n        this.originalYamlValues = this.valuesYaml;\n      }\n\n      this.loadedVersionValues = this.versionInfo?.values || {};\n      this.loadedVersion = this.version?.key;\n    }\n\n    /* Check if chart exists and if required values exist */\n    this.updateStepOneReady();\n\n    this.preFormYamlOption = this.valuesComponent || this.hasQuestions ? VALUES_STATE.FORM : VALUES_STATE.YAML;\n\n    /* Look for annotation to say this app is a legacy migrated app (we look in either place for now) */\n    this.migratedApp = (this.existing?.spec?.chart?.metadata?.annotations?.[CATALOG_ANNOTATIONS.MIGRATED] === 'true');\n  },\n\n  data() {\n    /* Helm CLI options that are not persisted on the back end,\n    but are used for the final install/upgrade operation. */\n    const defaultCmdOpts = {\n      cleanupOnFail: false,\n      crds:          true,\n      hooks:         true,\n      force:         false,\n      resetValues:   false,\n      openApi:       true,\n      wait:          true,\n      timeout:       600,\n      historyMax:    5,\n    };\n\n    return {\n      defaultRegistrySetting: '',\n      customRegistrySetting:  '',\n      serverUrlSetting:       null,\n      chartValues:            null,\n      clusterRegistry:        '',\n      originalYamlValues:     null,\n      previousYamlValues:     null,\n      errors:                 null,\n      existing:               null,\n      globalRegistry:         '',\n      forceNamespace:         null,\n      loadedVersion:          null,\n      loadedVersionValues:    null,\n      legacyApp:              null,\n      mcapp:                  null,\n      mode:                   null,\n      value:                  null,\n      valuesComponent:        null,\n      valuesYaml:             '',\n      project:                null,\n      migratedApp:            false,\n      defaultCmdOpts,\n      customCmdOpts:          { ...defaultCmdOpts },\n      autoInstallInfo:        [],\n\n      nameDisabled: false,\n\n      preFormYamlOption:       VALUES_STATE.YAML,\n      formYamlOption:          VALUES_STATE.YAML,\n      showDiff:                false,\n      showValuesComponent:     true,\n      showQuestions:           true,\n      showSlideIn:             false,\n      shownReadmeWindows:      [],\n      componentHasTabs:        false,\n      showCommandStep:         false,\n      showCustomRegistryInput: false,\n      isNamespaceNew:          false,\n\n      stepBasic: {\n        name:           'basics',\n        label:          this.t('catalog.install.steps.basics.label'),\n        subtext:        this.t('catalog.install.steps.basics.subtext'),\n        descriptionKey: 'catalog.install.steps.basics.description',\n        ready:          true,\n        weight:         30\n      },\n      stepClusterTplVersion: {\n        name:           'clusterTplVersion',\n        label:          this.t('catalog.install.steps.clusterTplVersion.label'),\n        subtext:        this.t('catalog.install.steps.clusterTplVersion.subtext'),\n        descriptionKey: 'catalog.install.steps.helmValues.description',\n        ready:          true,\n        weight:         30\n      },\n      stepValues: {\n        name:           'helmValues',\n        label:          this.t('catalog.install.steps.helmValues.label'),\n        subtext:        this.t('catalog.install.steps.helmValues.subtext'),\n        descriptionKey: 'catalog.install.steps.helmValues.description',\n        ready:          true,\n        weight:         20\n      },\n      stepCommands: {\n        name:           'helmCli',\n        label:          this.t('catalog.install.steps.helmCli.label'),\n        subtext:        this.t('catalog.install.steps.helmCli.subtext'),\n        descriptionKey: 'catalog.install.steps.helmCli.description',\n        ready:          true,\n        weight:         10\n      },\n\n      customSteps: [\n\n      ],\n\n      isPlainLayout: isPlainLayout(this.$route.query),\n\n      legacyDefs: {\n        legacy: this.t('catalog.install.error.legacy.category.legacy'),\n        mcm:    this.t('catalog.install.error.legacy.category.mcm')\n      }\n    };\n  },\n\n  computed: {\n    ...mapGetters({ inStore: 'catalog/inStore', features: 'features/get' }),\n    mcm: mapFeature(MULTI_CLUSTER),\n\n    /**\n     * Return list of variables to filter chart questions\n     */\n    ignoreVariables() {\n      return ignoreVariables(this.currentCluster, this.versionInfo);\n    },\n\n    namespaceIsNew() {\n      const all = this.$store.getters['cluster/all'](NAMESPACE);\n      const want = this.value?.metadata?.namespace;\n\n      if ( !want ) {\n        return false;\n      }\n\n      return !findBy(all, 'id', want);\n    },\n\n    showProject() {\n      return this.isRancher && !this.existing && this.forceNamespace;\n    },\n\n    projectOpts() {\n      const cluster = this.currentCluster;\n      const projects = this.$store.getters['management/all'](MANAGEMENT.PROJECT);\n\n      const out = projects.filter((x) => x.spec.clusterName === cluster?.id).map((project) => {\n        return {\n          id:    project.id,\n          label: project.nameDisplay,\n          value: project.id\n        };\n      });\n\n      out.unshift({\n        id:    'none',\n        label: `(${ this.t('generic.none') })`,\n        value: '',\n      });\n\n      return out;\n    },\n\n    charts() {\n      const current = this.existing?.matchingChart(true);\n\n      const out = this.$store.getters['catalog/charts'].filter((x) => {\n        if ( x.key === current?.key || x.chartName === current?.chartName ) {\n          return true;\n        }\n\n        if ( x.hidden && !this.showHidden ) {\n          return false;\n        }\n\n        if ( x.deprecated && !this.showDeprecated ) {\n          return false;\n        }\n\n        return true;\n      });\n\n      let last = '';\n\n      for ( let i = 0 ; i < out.length ; i++ ) {\n        if ( out[i].repoName !== last ) {\n          last = out[i].repoName;\n          insertAt(out, i, {\n            kind:     'label',\n            label:    out[i].repoNameDisplay,\n            disabled: true\n          });\n          i++;\n        }\n      }\n\n      return out;\n    },\n\n    showSelectVersionOrChart() {\n      // Allow the user to choose a version if the app exists OR they've come from tools\n      return this.existing || (FROM_TOOLS in this.$route.query);\n    },\n\n    showNameEditor() {\n      return !this.nameDisabled || !this.forceNamespace;\n    },\n\n    showVersions() {\n      return this.chart?.versions.length > 1;\n    },\n\n    targetNamespace() {\n      if ( this.forceNamespace ) {\n        return this.forceNamespace;\n      } else if ( this.value?.metadata.namespace ) {\n        return this.value.metadata.namespace;\n      }\n\n      return 'default';\n    },\n\n    editorMode() {\n      if ( this.showDiff ) {\n        return EDITOR_MODES.DIFF_CODE;\n      }\n\n      return EDITOR_MODES.EDIT_CODE;\n    },\n\n    showingYaml() {\n      return this.formYamlOption === VALUES_STATE.YAML || ( !this.valuesComponent && !this.hasQuestions );\n    },\n\n    showingYamlDiff() {\n      return this.formYamlOption === VALUES_STATE.DIFF;\n    },\n\n    formYamlOptions() {\n      const options = [];\n\n      if (this.valuesComponent || this.hasQuestions) {\n        options.push({\n          labelKey: 'catalog.install.section.chartOptions',\n          value:    VALUES_STATE.FORM,\n        });\n      }\n      options.push({\n        labelKey: 'catalog.install.section.valuesYaml',\n        value:    VALUES_STATE.YAML,\n      }, {\n        labelKey: 'catalog.install.section.diff',\n        value:    VALUES_STATE.DIFF,\n        // === quite obviously shouldn't work, but has been and still does. When the magic breaks address with heavier stringify/jsyaml.dump\n        disabled: this.formYamlOption === VALUES_STATE.FORM ? this.originalYamlValues === jsyaml.dump(this.chartValues || {}) : this.originalYamlValues === this.valuesYaml,\n      });\n\n      return options;\n    },\n\n    yamlDiffModeOptions() {\n      return [{\n        labelKey: 'resourceYaml.buttons.unified',\n        value:    'unified',\n      }, {\n        labelKey: 'resourceYaml.buttons.split',\n        value:    'split',\n      }];\n    },\n\n    stepperName() {\n      return this.existing?.nameDisplay || this.chart?.chartNameDisplay;\n    },\n\n    stepperSubtext() {\n      return this.existing && this.currentVersion !== this.targetVersion ? `${ this.currentVersion } > ${ this.targetVersion }` : this.targetVersion;\n    },\n\n    readmeWindowName() {\n      // Version can change, so allow multiple WM tabs for different versions\n      return `${ this.stepperName }-${ this.version?.version }`;\n    },\n\n    showingReadmeWindow() {\n      return !!this.$store.getters['wm/byId'](this.readmeWindowName);\n    },\n\n    diffMode: mapPref(DIFF),\n\n    step1Description() {\n      const descriptionKey = this.steps.find((s) => s.name === 'basics').descriptionKey;\n\n      return this.$store.getters['i18n/withFallback'](descriptionKey, { action: this.action, existing: !!this.existing }, '');\n    },\n\n    step2Description() {\n      const descriptionKey = this.steps.find((s) => s.name === 'helmValues').descriptionKey;\n\n      return this.$store.getters['i18n/withFallback'](descriptionKey, { action: this.action, existing: !!this.existing }, '');\n    },\n\n    step3Description() {\n      const descriptionKey = this.steps.find((s) => s.name === 'helmCli').descriptionKey;\n\n      return this.$store.getters['i18n/withFallback'](descriptionKey, { action: this.action, existing: !!this.existing }, '');\n    },\n\n    steps() {\n      const steps = [];\n\n      const type = this.version?.annotations?.[CATALOG_ANNOTATIONS.TYPE];\n\n      if ( type === CATALOG_ANNOTATIONS._CLUSTER_TPL ) {\n        if (this.filteredVersions?.length > 1) {\n          steps.push(this.stepClusterTplVersion);\n        }\n        steps.push({\n          ...this.stepValues,\n          label:          this.t('catalog.install.steps.clusterTplValues.label'),\n          subtext:        this.t('catalog.install.steps.clusterTplValues.subtext'),\n          descriptionKey: 'catalog.install.steps.clusterTplValues.description',\n        });\n      } else {\n        steps.push(\n          this.stepBasic,\n          this.stepValues,\n          ...this.customSteps\n        );\n      }\n\n      if (this.showCommandStep) {\n        steps.push(this.stepCommands);\n      }\n\n      return steps.sort((a, b) => (b.weight || 0) - (a.weight || 0));\n    },\n\n    cmdOptions() {\n      return this.showCommandStep ? this.customCmdOpts : this.defaultCmdOpts;\n    },\n\n    namespaceNewAllowed() {\n      return !this.existing && !this.forceNamespace;\n    },\n\n    legacyEnabled() {\n      // Check for the legacy feature flag in the settings\n      return this.features(LEGACY);\n    },\n\n    legacyFeatureRoute() {\n      return {\n        name:   'c-cluster-product-resource',\n        params: { product: 'settings', resource: 'management.cattle.io.feature' }\n      };\n    },\n\n    legacyAppRoute() {\n      return { name: 'c-cluster-legacy-project' };\n    },\n\n    windowsIncompatible() {\n      if (this.chart?.windowsIncompatible) {\n        return this.t('catalog.charts.windowsIncompatible');\n      }\n      if (this.versionInfo) {\n        const incompatibleVersion = !(this.versionInfo?.chart?.annotations?.[CATALOG_ANNOTATIONS.PERMITTED_OS] || LINUX).includes('windows');\n\n        if (incompatibleVersion && !this.chart.windowsIncompatible) {\n          return this.t('catalog.charts.versionWindowsIncompatible');\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Check if the chart contains `systemDefaultRegistry` properties.\n     * If not we shouldn't apply the setting, because if the option\n     * is exposed for third-party Helm charts, it confuses users because\n     * it shows a private registry setting that is never used\n     * by the chart they are installing. If not hidden, the setting\n     * does nothing, and if the user changes it, it will look like\n     * there is a bug in the UI when it doesn't work, because UI is\n     * exposing a feature that the chart does not have.\n     */\n    showCustomRegistry() {\n      const global = this.versionInfo?.values?.global || {};\n\n      return global.systemDefaultRegistry !== undefined || global.cattle?.systemDefaultRegistry !== undefined;\n    },\n\n  },\n\n  watch: {\n    '$route.query'(neu, old) {\n      if ( !isEqual(neu, old) ) {\n        this.$fetch();\n        this.showSlideIn = false;\n      }\n    },\n\n    'value.metadata.namespace'(neu, old) {\n      if (neu) {\n        const ns = this.$store.getters['cluster/byId'](NAMESPACE, this.value.metadata.namespace);\n\n        const project = ns?.metadata.annotations?.[PROJECT];\n\n        if (project) {\n          this.project = project.replace(':', '/');\n        }\n      }\n    },\n\n    preFormYamlOption(neu, old) {\n      if (neu === VALUES_STATE.FORM && this.valuesYaml !== this.previousYamlValues && !!this.$refs.cancelModal) {\n        this.$refs.cancelModal.show();\n      } else {\n        this.formYamlOption = neu;\n      }\n    },\n\n    formYamlOption(neu, old) {\n      switch (neu) {\n      case VALUES_STATE.FORM:\n        // Return to form, reset everything back to starting point\n        this.valuesYaml = this.previousYamlValues;\n\n        this.showValuesComponent = true;\n        this.showQuestions = true;\n\n        this.showDiff = false;\n        break;\n      case VALUES_STATE.YAML:\n        // Show the YAML preview\n        if (old === VALUES_STATE.FORM) {\n          this.valuesYaml = jsyaml.dump(this.chartValues || {});\n          this.previousYamlValues = this.valuesYaml;\n        }\n\n        this.showValuesComponent = false;\n        this.showQuestions = false;\n\n        this.showDiff = false;\n        break;\n      case VALUES_STATE.DIFF:\n        // Show the YAML diff\n        if (old === VALUES_STATE.FORM) {\n          this.valuesYaml = jsyaml.dump(this.chartValues || {});\n          this.previousYamlValues = this.valuesYaml;\n        }\n\n        this.showValuesComponent = false;\n        this.showQuestions = false;\n\n        this.updateValue(this.valuesYaml);\n        this.showDiff = true;\n        break;\n      }\n    },\n\n    requires() {\n      this.updateStepOneReady();\n    },\n\n    warnings() {\n      this.updateStepOneReady();\n    },\n\n  },\n\n  async mounted() {\n    // Load a Vue component named in the Helm chart\n    // for editing values\n    await this.loadValuesComponent();\n\n    // Load Helm chart info used for showing\n    // wizard steps\n    await this.loadChartSteps();\n\n    window.scrollTop = 0;\n\n    this.preFormYamlOption = this.valuesComponent || this.hasQuestions ? VALUES_STATE.FORM : VALUES_STATE.YAML;\n  },\n\n  beforeDestroy() {\n    this.shownReadmeWindows.forEach((name) => this.$store.dispatch('wm/close', name, { root: true }));\n  },\n\n  methods: {\n    async getClusterRegistry() {\n      const hasPermissionToSeeProvCluster = this.$store.getters[`management/schemaFor`](CAPI.RANCHER_CLUSTER);\n\n      if (hasPermissionToSeeProvCluster) {\n        const mgmCluster = this.$store.getters['currentCluster'];\n        const provClusterId = mgmCluster?.provClusterId;\n        let provCluster;\n\n        try {\n          provCluster = provClusterId ? await this.$store.dispatch('management/find', {\n            type: CAPI.RANCHER_CLUSTER,\n            id:   provClusterId\n          }) : {};\n        } catch (e) {\n          console.error(`Unable to fetch prov cluster '${ provClusterId }': `, e); // eslint-disable-line no-console\n        }\n\n        if (provCluster?.isRke2) { // isRke2 returns true for both RKE2 and K3s clusters.\n          const agentConfig = provCluster.spec?.rkeConfig?.machineSelectorConfig?.find((x) => !x.machineLabelSelector).config;\n\n          // If a cluster scoped registry exists,\n          // it should be used by default.\n          const clusterRegistry = agentConfig?.['system-default-registry'] || '';\n\n          if (clusterRegistry) {\n            return clusterRegistry;\n          }\n        }\n\n        if (provCluster?.isRke1) {\n          // For RKE1 clusters, the cluster scoped private registry is on the management\n          // cluster, not the provisioning cluster.\n          const rke1Registries = mgmCluster?.spec?.rancherKubernetesEngineConfig?.privateRegistries;\n\n          if (rke1Registries?.length > 0) {\n            const defaultRegistry = rke1Registries.find((registry) => {\n              return registry.isDefault;\n            });\n\n            return defaultRegistry.url;\n          }\n        }\n      }\n    },\n\n    async getGlobalRegistry() {\n      // Use the global registry as a fallback.\n      // If it is an empty string, the container\n      // runtime will pull images from docker.io.\n      const globalRegistry = await this.$store.dispatch('management/find', {\n        type: MANAGEMENT.SETTING,\n        id:   'system-default-registry'\n      });\n\n      return globalRegistry.value;\n    },\n\n    updateValue(value) {\n      if (this.$refs.yaml) {\n        this.$refs.yaml.updateValue(value);\n      }\n    },\n\n    async loadValuesComponent() {\n      // The const component is a string, for example, 'monitoring'.\n      const component = this.version?.annotations?.[CATALOG_ANNOTATIONS.COMPONENT];\n\n      // Load a values component for the UI if it is named in the Helm chart.\n      if ( component ) {\n        const hasChartComponent = this.$store.getters['type-map/hasCustomChart'](component);\n\n        if ( hasChartComponent ) {\n          this.valuesComponent = this.$store.getters['type-map/importChart'](component);\n          const loaded = await this.valuesComponent();\n\n          this.showValuesComponent = true;\n          this.componentHasTabs = loaded?.default?.hasTabs || false;\n        } else {\n          this.valuesComponent = null;\n          this.componentHasTabs = false;\n          this.showValuesComponent = false;\n        }\n      } else {\n        this.valuesComponent = null;\n        this.componentHasTabs = false;\n        this.showValuesComponent = false;\n      }\n    },\n\n    async loadChartSteps() {\n      const component = this.version?.annotations?.[CATALOG_ANNOTATIONS.COMPONENT];\n\n      if ( component ) {\n        const steps = await this.$store.getters['catalog/chartSteps'](component);\n\n        this.customSteps = await Promise.all( steps.map((cs) => this.loadChartStep(cs)));\n      }\n    },\n\n    async loadChartStep(customStep) {\n      const loaded = await customStep.component();\n      const withFallBack = this.$store.getters['i18n/withFallback'];\n\n      return {\n        name:      customStep.name,\n        label:     withFallBack(loaded?.default?.label, null, customStep.name),\n        subtext:   withFallBack(loaded?.default?.subtext, null, ''),\n        weight:    loaded?.default?.weight,\n        ready:     false,\n        hidden:    true,\n        loading:   true,\n        component: customStep.component,\n      };\n    },\n\n    selectChart(chart) {\n      if ( !chart ) {\n        return;\n      }\n\n      this.$router.applyQuery({\n        [REPO]:      chart.repoName,\n        [REPO_TYPE]: chart.repoType,\n        [CHART]:     chart.chartName,\n        [VERSION]:   chart.versions[0].version\n      });\n    },\n\n    cancel() {\n      if ( this.existing ) {\n        this.done();\n      } else if (this.$route.query[FROM_TOOLS] === _FLAGGED) {\n        this.$router.replace(this.clusterToolsLocation());\n      } else if (this.$route.query[FROM_CLUSTER] === _FLAGGED) {\n        this.$router.replace(this.clustersLocation());\n      } else {\n        this.$router.replace(this.chartLocation(false));\n      }\n    },\n\n    done() {\n      if ( this.$route.query[FROM_TOOLS] === _FLAGGED ) {\n        this.$router.replace(this.clusterToolsLocation());\n      } else if (this.$route.query[FROM_CLUSTER] === _FLAGGED) {\n        this.$router.replace(this.clustersLocation());\n      } else {\n        // If the create app process fails helm validation then we still get here... so until this is fixed new apps will be taken to the\n        // generic apps list (existing apps will be taken to their detail page)\n        this.$router.replace(this.appLocation());\n      }\n    },\n\n    async finish(btnCb) {\n      try {\n        const isUpgrade = !!this.existing;\n\n        this.errors = [];\n\n        await this.applyHooks(BEFORE_SAVE_HOOKS);\n\n        const { errors, input } = this.actionInput(isUpgrade);\n\n        if ( errors?.length ) {\n          this.errors = errors;\n          btnCb(false);\n\n          return;\n        }\n\n        const res = await this.repo.doAction((isUpgrade ? 'upgrade' : 'install'), input);\n        const operationId = `${ res.operationNamespace }/${ res.operationName }`;\n\n        // Non-admins without a cluster won't be able to fetch operations immediately\n        await this.repo.waitForOperation(operationId);\n\n        // Dynamically use store decided when loading catalog (covers standard user case when there's not cluster)\n        this.operation = await this.$store.dispatch(`${ this.inStore }/find`, {\n          type: CATALOG.OPERATION,\n          id:   operationId\n        });\n\n        try {\n          await this.operation.waitForLink('logs');\n          this.operation.openLogs();\n        } catch (e) {\n          // The wait times out eventually, move on...\n        }\n\n        await this.applyHooks(AFTER_SAVE_HOOKS);\n\n        btnCb(true);\n        this.done();\n      } catch (err) {\n        this.errors = exceptionToErrorsArray(err);\n        btnCb(false);\n      }\n    },\n\n    addGlobalValuesTo(values) {\n      let global = values.global;\n\n      if ( !global ) {\n        global = {};\n        set(values, 'global', global);\n      }\n\n      let cattle = global.cattle;\n\n      if ( !cattle ) {\n        cattle = {};\n        set(values.global, 'cattle', cattle);\n      }\n\n      const cluster = this.currentCluster;\n      const projects = this.$store.getters['management/all'](MANAGEMENT.PROJECT);\n      const systemProjectId = projects.find((p) => p.spec?.displayName === 'System')?.id?.split('/')?.[1] || '';\n\n      const serverUrl = this.serverUrlSetting?.value || '';\n      const isWindows = (cluster?.workerOSs || []).includes(WINDOWS);\n      const pathPrefix = cluster?.spec?.rancherKubernetesEngineConfig?.prefixPath || '';\n      const windowsPathPrefix = cluster?.spec?.rancherKubernetesEngineConfig?.winPrefixPath || '';\n\n      setIfNotSet(cattle, 'clusterId', cluster?.id);\n      setIfNotSet(cattle, 'clusterName', cluster?.nameDisplay);\n\n      if (this.showCustomRegistry) {\n        set(cattle, 'systemDefaultRegistry', this.customRegistrySetting);\n        set(global, 'systemDefaultRegistry', this.customRegistrySetting);\n      }\n\n      setIfNotSet(global, 'cattle.systemProjectId', systemProjectId);\n      setIfNotSet(cattle, 'url', serverUrl);\n      setIfNotSet(cattle, 'rkePathPrefix', pathPrefix);\n      setIfNotSet(cattle, 'rkeWindowsPathPrefix', windowsPathPrefix);\n\n      if ( isWindows ) {\n        setIfNotSet(cattle, 'windows.enabled', true);\n      }\n\n      return values;\n\n      function setIfNotSet(obj, key, val) {\n        if ( typeof get(obj, key) === 'undefined' ) {\n          set(obj, key, val);\n        }\n      }\n    },\n\n    removeGlobalValuesFrom(values) {\n      if ( !values ) {\n        return;\n      }\n\n      const cluster = this.$store.getters['currentCluster'];\n      const serverUrl = this.serverUrlSetting?.value || '';\n      const isWindows = (cluster?.workerOSs || []).includes(WINDOWS);\n      const pathPrefix = cluster?.spec?.rancherKubernetesEngineConfig?.prefixPath || '';\n      const windowsPathPrefix = cluster?.spec?.rancherKubernetesEngineConfig?.winPrefixPath || '';\n\n      if ( values.global?.cattle ) {\n        deleteIfEqual(values.global.cattle, 'clusterId', cluster?.id);\n        deleteIfEqual(values.global.cattle, 'clusterName', cluster?.nameDisplay);\n        deleteIfEqual(values.global.cattle, 'url', serverUrl);\n        deleteIfEqual(values.global.cattle, 'rkePathPrefix', pathPrefix);\n        deleteIfEqual(values.global.cattle, 'rkeWindowsPathPrefix', windowsPathPrefix);\n\n        if ( isWindows ) {\n          deleteIfEqual(values.global.cattle.windows, 'enabled', true);\n        }\n      }\n\n      if ( values.global?.cattle?.windows && !Object.keys(values.global.cattle.windows).length ) {\n        delete values.global.cattle.windows;\n      }\n\n      if ( values.global?.cattle && !Object.keys(values.global.cattle).length ) {\n        delete values.global.cattle;\n      }\n\n      if ( !Object.keys(values.global || {}).length ) {\n        delete values.global;\n      }\n\n      return values;\n\n      function deleteIfEqual(obj, key, val) {\n        if ( get(obj, key) === val ) {\n          delete obj[key];\n        }\n      }\n    },\n\n    applyYamlToValues() {\n      try {\n        this.chartValues = jsyaml.load(this.valuesYaml);\n      } catch (err) {\n        return { errors: exceptionToErrorsArray(err) };\n      }\n\n      return { errors: [] };\n    },\n\n    /*\n      actionInput determines what values Rancher finally sends\n      to the backend when installing or upgrading the app. It\n      injects Rancher-specific values into the chart values.\n    */\n    actionInput(isUpgrade) {\n      /* Default values defined in the Helm chart itself */\n      const fromChart = this.versionInfo?.values || {};\n\n      const errors = [];\n\n      if ( this.showingYaml || this.showingYamlDiff ) {\n        const { errors: yamlErrors } = this.applyYamlToValues();\n\n        errors.push(...yamlErrors);\n      }\n\n      /*\n        Only save the values that differ from the chart's standard values.yaml.\n        chartValues is created by applying the user's customized onto\n        the default chart values.\n      */\n      const values = diff(fromChart, this.chartValues);\n\n      /*\n        Refer to the developer docs at docs/developer/helm-chart-apps.md\n        for details on what values are injected and where they come from.\n      */\n\n      this.addGlobalValuesTo(values);\n\n      const form = JSON.parse(JSON.stringify(this.value));\n\n      /*\n        Migrated annotations are required to allow a deprecated legacy app to be\n        upgraded.\n      */\n      const migratedAnnotations = this.migratedApp ? { [CATALOG_ANNOTATIONS.MIGRATED]: 'true' } : {};\n\n      const chart = {\n        chartName:   this.chart.chartName,\n        version:     this.version?.version || this.query.versionName,\n        releaseName: form.metadata.name,\n        description: this.customCmdOpts.description,\n        annotations: {\n          ...migratedAnnotations,\n          [CATALOG_ANNOTATIONS.SOURCE_REPO_TYPE]: this.chart.repoType,\n          [CATALOG_ANNOTATIONS.SOURCE_REPO_NAME]: this.chart.repoName\n        },\n        values,\n      };\n\n      if ( isUpgrade ) {\n        chart.resetValues = this.cmdOptions.resetValues;\n      }\n\n      /*\n        Configure Helm CLI options for doing the install or\n        upgrade operation.\n      */\n      const out = {\n        charts:    [chart],\n        noHooks:   this.cmdOptions.hooks === false,\n        timeout:   this.cmdOptions.timeout > 0 ? `${ this.cmdOptions.timeout }s` : null,\n        wait:      this.cmdOptions.wait === true,\n        namespace: form.metadata.namespace,\n        projectId: this.project,\n      };\n\n      /*\n        Configure Helm CLI options that are specific to\n        installs or specific to upgrades.\n      */\n      if ( isUpgrade ) {\n        out.force = this.cmdOptions.force === true;\n        out.historyMax = this.cmdOptions.historyMax;\n        out.cleanupOnFail = this.cmdOptions.cleanupOnFail;\n      } else {\n        out.disableOpenAPIValidation = this.cmdOptions.openApi === false;\n        out.skipCRDs = this.cmdOptions.crds === false;\n      }\n\n      const more = [];\n\n      const auto = (this.version?.annotations?.[CATALOG_ANNOTATIONS.AUTO_INSTALL_GVK] || '').split(/\\s*,\\s*/).filter((x) => !!x).reverse();\n\n      for ( const gvr of auto ) {\n        const provider = this.$store.getters['catalog/versionProviding']({\n          gvr,\n          repoName: this.chart.repoName,\n          repoType: this.chart.repoType\n        });\n\n        if ( provider ) {\n          more.push(provider);\n        } else {\n          errors.push(`This chart requires another chart that provides ${ gvr }, but none was was found`);\n        }\n      }\n\n      /* Chart custom UI components have the ability to edit CRD chart values eg gatekeeper-crd has values.enableRuntimeDefaultSeccompProfile\n        like the main chart, only CRD values that differ from defaults should be sent on install/upgrade\n        CRDs should be installed with the same global values as the main chart\n      */\n      for (const versionInfo of this.autoInstallInfo) {\n        // allValues are the values potentially changed in the installation ui: any previously customized values + defaults\n        // values are default values from the chart\n        const { allValues, values: crdValues } = versionInfo;\n\n        // only save crd values that differ from the defaults defined in chart values.yaml\n        const customizedCrdValues = diff(crdValues, allValues);\n\n        // CRD globals should be overwritten by main chart globals\n        // we want to avoid including globals present on crd values and not main chart values\n        // that covers the scenario where a global value was customized on a previous install (and so is present in crd global vals) and the user has reverted it to default on this update (no longer present in main chart global vals)\n        const crdValuesToInstall = { ...customizedCrdValues, global: values.global };\n\n        out.charts.unshift({\n          chartName:   versionInfo.chart.name,\n          version:     versionInfo.chart.version,\n          releaseName: versionInfo.chart.annotations[CATALOG_ANNOTATIONS.RELEASE_NAME] || chart.name,\n          projectId:   this.project,\n          values:      crdValuesToInstall\n        });\n      }\n      /*\n        'more' contains additional\n        charts that may not be CRD charts but are also meant to be installed at\n        the same time.\n      */\n      for ( const dependency of more ) {\n        out.charts.unshift({\n          chartName:   dependency.name,\n          version:     dependency.version,\n          releaseName: dependency.annotations[CATALOG_ANNOTATIONS.RELEASE_NAME] || dependency.name,\n          projectId:   this.project,\n          values:      this.addGlobalValuesTo({ global: values.global }),\n          annotations: {\n            ...migratedAnnotations,\n            [CATALOG_ANNOTATIONS.SOURCE_REPO_TYPE]: dependency.repoType,\n            [CATALOG_ANNOTATIONS.SOURCE_REPO_NAME]: dependency.repoName\n          },\n        });\n      }\n\n      return { errors, input: out };\n    },\n\n    tabChanged() {\n      window.scrollTop = 0;\n    },\n\n    updateStepOneReady() {\n      const okRequires = !this.requires.length;\n      const okChart = !!this.chart;\n\n      this.steps[0].ready = okRequires && okChart;\n    },\n\n    updateStepTwoReady(update) {\n      this.updateStep('helmValues', { ready: update });\n    },\n\n    getOptionLabel(opt) {\n      return opt?.chartNameDisplay;\n    },\n\n    showReadmeWindow() {\n      this.$store.dispatch('wm/open', {\n        id:        this.readmeWindowName,\n        label:     this.readmeWindowName,\n        icon:      'file',\n        component: 'ChartReadme',\n        attrs:     { versionInfo: this.versionInfo }\n      }, { root: true });\n      this.shownReadmeWindows.push(this.readmeWindowName);\n    },\n\n    updateStep(stepName, update) {\n      const step = this.steps.find((step) => step.name === stepName);\n\n      if (step) {\n        for (const prop in update) {\n          Vue.set(step, prop, update[prop]);\n        }\n      }\n    }\n  },\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n  <div\n    v-else-if=\"!legacyApp && !mcapp\"\n    class=\"install-steps pt-20\"\n    :class=\"{ 'isPlainLayout': isPlainLayout}\"\n  >\n    <TypeDescription resource=\"chart\" />\n    <Wizard\n      v-if=\"value\"\n      :steps=\"steps\"\n      :errors=\"errors\"\n      :edit-first-step=\"true\"\n      :banner-title=\"stepperName\"\n      :banner-title-subtext=\"stepperSubtext\"\n      :finish-mode=\"action\"\n      class=\"wizard\"\n      :class=\"{'windowsIncompatible': windowsIncompatible}\"\n      @cancel=\"cancel\"\n      @finish=\"finish\"\n    >\n      <template\n        v-for=\"customStep of customSteps\"\n        v-slot:[customStep.name]\n      >\n        <component\n          :is=\"customStep.component\"\n          :key=\"customStep.name\"\n          @update=\"updateStep(customStep.name, $event)\"\n          @errors=\"e=>errors.push(...e)\"\n        />\n      </template>\n      <template #bannerTitleImage>\n        <div>\n          <div class=\"logo-bg\">\n            <LazyImage\n              :src=\"chart ? chart.icon : ''\"\n              class=\"logo\"\n            />\n          </div>\n          <label\n            v-if=\"windowsIncompatible\"\n            class=\"os-label\"\n          >\n            {{ windowsIncompatible }}\n          </label>\n        </div>\n      </template>\n      <template #basics>\n        <div class=\"step__basic\">\n          <Banner\n            v-if=\"step1Description\"\n            color=\"info\"\n            class=\"description\"\n          >\n            <div>\n              <span>{{ step1Description }}</span>\n              <span\n                v-if=\"namespaceNewAllowed\"\n                class=\"mt-10\"\n              >\n                {{ t('catalog.install.steps.basics.nsCreationDescription', {}, true) }}\n              </span>\n            </div>\n          </Banner>\n          <div\n            v-if=\"requires.length || warnings.length\"\n            class=\"mb-15\"\n          >\n            <Banner\n              v-for=\"msg in requires\"\n              :key=\"msg\"\n              color=\"error\"\n            >\n              <span v-clean-html=\"msg\" />\n            </Banner>\n\n            <Banner\n              v-for=\"msg in warnings\"\n              :key=\"msg\"\n              color=\"warning\"\n            >\n              <span v-clean-html=\"msg\" />\n            </Banner>\n          </div>\n          <div\n            v-if=\"showSelectVersionOrChart\"\n            class=\"row mb-20\"\n          >\n            <div class=\"col span-4\">\n              <!-- We have a chart for the app, let the user select a new version -->\n              <LabeledSelect\n                v-if=\"chart\"\n                :label=\"t('catalog.install.version')\"\n                :value=\"query.versionName\"\n                :options=\"filteredVersions\"\n                :selectable=\"version => !version.disabled\"\n                @input=\"selectVersion\"\n              />\n              <!-- Can't find the chart for the app, let the user try to select one -->\n              <LabeledSelect\n                v-else\n                :label=\"t('catalog.install.chart')\"\n                :value=\"chart\"\n                :options=\"charts\"\n                :selectable=\"option => !option.disabled\"\n                :get-option-label=\"opt => getOptionLabel(opt)\"\n                option-key=\"key\"\n                @input=\"selectChart($event)\"\n              >\n                <template v-slot:option=\"opt\">\n                  <template v-if=\"opt.kind === 'divider'\">\n                    <hr>\n                  </template>\n                  <template v-else-if=\"opt.kind === 'label'\">\n                    <b style=\"position: relative; left: -2.5px;\">{{ opt.label }}</b>\n                  </template>\n                </template>\n              </LabeledSelect>\n            </div>\n          </div>\n          <NameNsDescription\n            v-model=\"value\"\n            :description-hidden=\"true\"\n            :mode=\"mode\"\n            :name-disabled=\"nameDisabled\"\n            :name-required=\"false\"\n            :name-ns-hidden=\"!showNameEditor\"\n            :force-namespace=\"forceNamespace\"\n            :namespace-new-allowed=\"namespaceNewAllowed\"\n            :extra-columns=\"showProject ? ['project'] : []\"\n            :show-spacer=\"false\"\n            :horizontal=\"false\"\n            @isNamespaceNew=\"isNamespaceNew = $event\"\n          >\n            <template\n              v-if=\"showProject\"\n              #project\n            >\n              <LabeledSelect\n                v-model=\"project\"\n                :disabled=\"!namespaceIsNew\"\n                :label=\"t('catalog.install.project')\"\n                option-key=\"id\"\n                :options=\"projectOpts\"\n                :tooltip=\"!namespaceIsNew ? t('catalog.install.namespaceIsInProject', {namespace: value.metadata.namespace}, true) : ''\"\n                :hover-tooltip=\"!namespaceIsNew\"\n                :status=\"'info'\"\n              />\n            </template>\n          </NameNsDescription>\n          <Checkbox\n            v-model=\"showCommandStep\"\n            class=\"mb-20\"\n            :label=\"t('catalog.install.steps.helmCli.checkbox', { action, existing: !!existing })\"\n          />\n\n          <Checkbox\n            v-if=\"showCustomRegistry\"\n            v-model=\"showCustomRegistryInput\"\n            class=\"mb-20\"\n            :label=\"t('catalog.chart.registry.custom.checkBoxLabel')\"\n            :tooltip=\"t('catalog.chart.registry.tooltip')\"\n          />\n          <div class=\"row\">\n            <div class=\"col span-6\">\n              <LabeledInput\n                v-if=\"showCustomRegistryInput\"\n                v-model=\"customRegistrySetting\"\n                label-key=\"catalog.chart.registry.custom.inputLabel\"\n                placeholder-key=\"catalog.chart.registry.custom.placeholder\"\n                :min-height=\"30\"\n              />\n            </div>\n          </div>\n          <div\n            class=\"step__values__controls--spacer\"\n            style=\"flex:1\"\n          >\n&nbsp;\n          </div>\n          <Banner\n            v-if=\"isNamespaceNew && value.metadata.namespace.length\"\n            color=\"info\"\n          >\n            <div v-clean-html=\"t('catalog.install.steps.basics.createNamespace', {namespace: value.metadata.namespace}, true) \" />\n          </Banner>\n        </div>\n      </template>\n      <template #clusterTplVersion>\n        <Banner\n          color=\"info\"\n          class=\"description\"\n        >\n          {{ t('catalog.install.steps.clusterTplVersion.description') }}\n        </Banner>\n        <div class=\"row mb-20\">\n          <div class=\"col span-4\">\n            <LabeledSelect\n              v-if=\"chart\"\n              :label=\"t('catalog.install.version')\"\n              :value=\"query.versionName\"\n              :options=\"filteredVersions\"\n              :selectable=\"version => !version.disabled\"\n              @input=\"selectVersion\"\n            />\n          </div>\n          <div class=\"step__values__controls--spacer\">\n&nbsp;\n          </div>\n          <div class=\"btn-group\">\n            <button\n              type=\"button\"\n              class=\"btn bg-primary btn-sm\"\n              :disabled=\"!hasReadme || showingReadmeWindow\"\n              @click=\"showSlideIn = !showSlideIn\"\n            >\n              {{ t('catalog.install.steps.helmValues.chartInfo.button') }}\n            </button>\n          </div>\n        </div>\n      </template>\n      <template #helmValues>\n        <Banner\n          v-if=\"step2Description\"\n          color=\"info\"\n          class=\"description\"\n        >\n          {{ step2Description }}\n        </Banner>\n        <div class=\"step__values__controls\">\n          <ButtonGroup\n            v-model=\"preFormYamlOption\"\n            data-testid=\"btn-group-options-view\"\n            :options=\"formYamlOptions\"\n            inactive-class=\"bg-disabled btn-sm\"\n            active-class=\"bg-primary btn-sm\"\n            :disabled=\"preFormYamlOption != formYamlOption\"\n          />\n          <div class=\"step__values__controls--spacer\">\n&nbsp;\n          </div>\n          <ButtonGroup\n            v-if=\"showDiff\"\n            v-model=\"diffMode\"\n            :options=\"yamlDiffModeOptions\"\n            inactive-class=\"bg-disabled btn-sm\"\n            active-class=\"bg-primary btn-sm\"\n          />\n          <div\n            v-if=\"hasReadme && !showingReadmeWindow\"\n            class=\"btn-group\"\n          >\n            <button\n              type=\"button\"\n              class=\"btn bg-primary btn-sm\"\n              @click=\"showSlideIn = !showSlideIn\"\n            >\n              {{ t('catalog.install.steps.helmValues.chartInfo.button') }}\n            </button>\n          </div>\n        </div>\n\n        <div class=\"scroll__container\">\n          <div class=\"scroll__content\">\n            <!-- Values (as Custom Component in ./shell/charts/) -->\n            <template v-if=\"valuesComponent && showValuesComponent\">\n              <Tabbed\n                v-if=\"componentHasTabs\"\n                ref=\"tabs\"\n                :side-tabs=\"true\"\n                :class=\"{'with-name': showNameEditor}\"\n                class=\"step__values__content\"\n                @changed=\"tabChanged($event)\"\n              >\n                <component\n                  :is=\"valuesComponent\"\n                  v-model=\"chartValues\"\n                  :mode=\"mode\"\n                  :chart=\"chart\"\n                  class=\"step__values__content\"\n                  :existing=\"existing\"\n                  :version=\"version\"\n                  :version-info=\"versionInfo\"\n                  :auto-install-info=\"autoInstallInfo\"\n                  @warn=\"e=>errors.push(e)\"\n                  @register-before-hook=\"registerBeforeHook\"\n                  @register-after-hook=\"registerAfterHook\"\n                  @valid=\"updateStepTwoReady($event)\"\n                />\n              </Tabbed>\n              <template v-else>\n                <component\n                  :is=\"valuesComponent\"\n                  v-if=\"valuesComponent\"\n                  v-model=\"chartValues\"\n                  :mode=\"mode\"\n                  :chart=\"chart\"\n                  class=\"step__values__content\"\n                  :existing=\"existing\"\n                  :version=\"version\"\n                  :version-info=\"versionInfo\"\n                  :auto-install-info=\"autoInstallInfo\"\n                  @warn=\"e=>errors.push(e)\"\n                  @register-before-hook=\"registerBeforeHook\"\n                  @register-after-hook=\"registerAfterHook\"\n                />\n              </template>\n            </template>\n\n            <!-- Values (as Questions, abstracted component based on question.yaml configuration from repositories)  -->\n            <Tabbed\n              v-else-if=\"hasQuestions && showQuestions\"\n              ref=\"tabs\"\n              :side-tabs=\"true\"\n              :class=\"{'with-name': showNameEditor}\"\n              class=\"step__values__content\"\n              @changed=\"tabChanged($event)\"\n            >\n              <Questions\n                v-model=\"chartValues\"\n                :in-store=\"inStore\"\n                :mode=\"mode\"\n                :source=\"versionInfo\"\n                :ignore-variables=\"ignoreVariables\"\n                tabbed=\"multiple\"\n                :target-namespace=\"targetNamespace\"\n              />\n            </Tabbed>\n            <!-- Values (as YAML) -->\n            <template v-else>\n              <YamlEditor\n                ref=\"yaml\"\n                v-model=\"valuesYaml\"\n                class=\"step__values__content\"\n                :scrolling=\"true\"\n                :initial-yaml-values=\"originalYamlValues\"\n                :editor-mode=\"editorMode\"\n                :hide-preview-buttons=\"true\"\n              />\n            </template>\n          </div>\n        </div>\n\n        <!-- Confirm loss of changes on toggle from yaml/preview to form -->\n        <ResourceCancelModal\n          ref=\"cancelModal\"\n          :is-cancel-modal=\"false\"\n          :is-form=\"true\"\n          @cancel-cancel=\"preFormYamlOption=formYamlOption\"\n          @confirm-cancel=\"formYamlOption = preFormYamlOption;\"\n        />\n      </template>\n      <template #helmCli>\n        <Banner\n          v-if=\"step3Description\"\n          color=\"info\"\n          class=\"description\"\n        >\n          {{ step3Description }}\n        </Banner>\n        <div>\n          <Checkbox\n            v-if=\"existing\"\n            v-model=\"customCmdOpts.cleanupOnFail\"\n            :label=\"t('catalog.install.helm.cleanupOnFail')\"\n          />\n        </div>\n        <div>\n          <Checkbox\n            v-if=\"!existing\"\n            v-model=\"customCmdOpts.crds\"\n            :label=\"t('catalog.install.helm.crds')\"\n          />\n        </div>\n        <div>\n          <Checkbox\n            v-model=\"customCmdOpts.hooks\"\n            :label=\"t('catalog.install.helm.hooks')\"\n          />\n        </div>\n        <div>\n          <Checkbox\n            v-if=\"existing\"\n            v-model=\"customCmdOpts.force\"\n            :label=\"t('catalog.install.helm.force')\"\n          />\n        </div>\n        <div>\n          <Checkbox\n            v-if=\"existing\"\n            v-model=\"customCmdOpts.resetValues\"\n            :label=\"t('catalog.install.helm.resetValues')\"\n          />\n        </div>\n        <div>\n          <Checkbox\n            v-if=\"!existing\"\n            v-model=\"customCmdOpts.openApi\"\n            :label=\"t('catalog.install.helm.openapi')\"\n          />\n        </div>\n        <div>\n          <Checkbox\n            v-model=\"customCmdOpts.wait\"\n            :label=\"t('catalog.install.helm.wait')\"\n          />\n        </div>\n        <div\n          style=\"display: block; max-width: 400px;\"\n          class=\"mt-10\"\n        >\n          <UnitInput\n            v-model.number=\"customCmdOpts.timeout\"\n            :label=\"t('catalog.install.helm.timeout.label')\"\n            :suffix=\"t('catalog.install.helm.timeout.unit', {value: customCmdOpts.timeout})\"\n          />\n        </div>\n        <div\n          style=\"display: block; max-width: 400px;\"\n          class=\"mt-10\"\n        >\n          <UnitInput\n            v-if=\"existing\"\n            v-model.number=\"customCmdOpts.historyMax\"\n            :label=\"t('catalog.install.helm.historyMax.label')\"\n            :suffix=\"t('catalog.install.helm.historyMax.unit', {value: customCmdOpts.historyMax})\"\n          />\n        </div>\n        <div\n          style=\"display: block; max-width: 400px;\"\n          class=\"mt-10\"\n        >\n          <LabeledInput\n            v-model=\"customCmdOpts.description\"\n            label-key=\"catalog.install.helm.description.label\"\n            placeholder-key=\"catalog.install.helm.description.placeholder\"\n            :min-height=\"30\"\n          />\n        </div>\n      </template>\n    </Wizard>\n    <div\n      class=\"slideIn\"\n      :class=\"{'hide': false, 'slideIn__show': showSlideIn}\"\n    >\n      <h2 class=\"slideIn__header\">\n        {{ t('catalog.install.steps.helmValues.chartInfo.label') }}\n        <div class=\"slideIn__header__buttons\">\n          <div\n            v-clean-tooltip=\"t('catalog.install.slideIn.dock')\"\n            class=\"slideIn__header__button\"\n            @click=\"showSlideIn = false; showReadmeWindow()\"\n          >\n            <i class=\"icon icon-dock\" />\n          </div>\n          <div\n            class=\"slideIn__header__button\"\n            @click=\"showSlideIn = false\"\n          >\n            <i class=\"icon icon-close\" />\n          </div>\n        </div>\n      </h2>\n      <ChartReadme\n        v-if=\"hasReadme\"\n        :version-info=\"versionInfo\"\n        class=\"chart-content__tabs\"\n      />\n    </div>\n  </div>\n\n  <!-- App is deployed as a Legacy or MultiCluster app, don't let user update from here -->\n  <div\n    v-else\n    class=\"install-steps\"\n    :class=\"{ 'isPlainLayout': isPlainLayout}\"\n  >\n    <div class=\"outer-container\">\n      <div class=\"header mb-20\">\n        <div class=\"title\">\n          <div class=\"top choice-banner\">\n            <div class=\"title\">\n              <!-- Logo -->\n              <slot name=\"bannerTitleImage\">\n                <div class=\"round-image\">\n                  <LazyImage\n                    :src=\"chart ? chart.icon : ''\"\n                    class=\"logo\"\n                  />\n                </div>\n              </slot>\n              <!-- Title with subtext -->\n              <div class=\"subtitle\">\n                <h2 v-if=\"stepperName\">\n                  {{ stepperName }}\n                </h2>\n                <span\n                  v-if=\"stepperSubtext\"\n                  class=\"subtext\"\n                >{{ stepperSubtext }}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <Banner\n        color=\"warning\"\n        class=\"description\"\n      >\n        <span v-if=\"!mcapp\">\n          {{ t('catalog.install.error.legacy.label', { legacyType: mcapp ? legacyDefs.mcm : legacyDefs.legacy }, true) }}\n        </span>\n        <template v-if=\"!legacyEnabled\">\n          <span v-clean-html=\"t('catalog.install.error.legacy.enableLegacy.prompt', true)\" />\n          <nuxt-link :to=\"legacyFeatureRoute\">\n            {{ t('catalog.install.error.legacy.enableLegacy.goto') }}\n          </nuxt-link>\n        </template>\n        <template v-else-if=\"mcapp\">\n          <span v-clean-html=\"t('catalog.install.error.legacy.mcmNotSupported')\" />\n        </template>\n        <template v-else>\n          <nuxt-link :to=\"legacyAppRoute\">\n            <span v-clean-html=\"t('catalog.install.error.legacy.navigate')\" />\n          </nuxt-link>\n        </template>\n      </Banner>\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n  $title-height: 50px;\n  $padding: 5px;\n  $slideout-width: 35%;\n\n  .install-steps {\n    padding-top: 0;\n    height: 0;\n    position: relative;\n    overflow: hidden;\n\n    &.isPlainLayout {\n      padding: 20px;\n    }\n\n    .description {\n      display: flex;\n      flex-direction: column;\n      margin-top: 0;\n    }\n  }\n\n  .wizard {\n    .logo-bg {\n      margin-right: 10px;\n      height: $title-height;\n      width: $title-height;\n      background-color: white;\n      border: $padding solid white;\n      border-radius: calc( 3 * var(--border-radius));\n      position: relative;\n    }\n\n    .logo {\n      max-height: $title-height - 2 * $padding;\n      max-width: $title-height - 2 * $padding;\n      position: absolute;\n      width: auto;\n      height: auto;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      margin: auto;\n    }\n\n    // Hack - We're adding an absolute tag under the logo that we want to consume space without breaking vertical alignment of row.\n    // W  ith the slots available this isn't possible without adding tag specific styles to the root wizard classes\n    &.windowsIncompatible {\n      ::v-deep .header {\n        padding-bottom: 15px;\n      }\n    }\n\n    .os-label {\n      position: absolute;\n      background-color: var(--warning-banner-bg);\n      color:var(--warning);\n      margin-top: 5px;\n    }\n\n  }\n\n  .step {\n    &__basic {\n      display: flex;\n      flex-direction: column;\n      flex: 1;\n\n      .spacer {\n        line-height: 2;\n      }\n    }\n    &__values {\n      &__controls {\n        display: flex;\n        margin-bottom: 15px;\n\n        & > *:not(:last-of-type) {\n          margin-right: $padding * 2;\n        }\n\n        &--spacer {\n          flex: 1\n        }\n\n      }\n\n      &__content {\n        flex: 1;\n\n        ::v-deep .tab-container {\n          overflow: auto;\n        }\n      }\n\n    }\n  }\n\n  .slideIn {\n    $slideout-width: 35%;\n\n    border-left: var(--header-border-size) solid var(--header-border);\n    position: absolute;\n    top: 0;\n    right: -$slideout-width;\n    height: 100%;\n    background-color: var(--topmenu-bg);\n    width: $slideout-width;\n    z-index: 10;\n    display: flex;\n    flex-direction: column;\n\n    padding: 10px;\n\n    transition: right .5s ease;\n\n    &__header {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n\n      &__buttons {\n        display: flex;\n      }\n\n      &__button {\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        padding: 2px;\n        > i {\n          font-size: 20px;\n          opacity: 0.5;\n        }\n        &:hover {\n          background-color: var(--wm-closer-hover-bg);\n        }\n      }\n    }\n\n    .chart-content__tabs {\n      display: flex;\n      flex-direction: column;\n      flex: 1;\n\n      height: 0;\n\n      padding-bottom: 10px;\n\n      ::v-deep .chart-readmes {\n        flex: 1;\n        overflow: auto;\n      }\n    }\n\n    &__show {\n      right: 0;\n    }\n\n  }\n\n  .scroll {\n    &__container {\n      $yaml-height: 200px;\n      min-height: $yaml-height;\n      margin-bottom: 60px;\n      overflow: auto;\n      display: flex;\n      flex: 1;\n    }\n    &__content {\n      display: flex;\n      flex: 1;\n      overflow: auto;\n    }\n  }\n\n  ::v-deep .yaml-editor {\n    flex: 1\n  }\n\n.outer-container {\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n  overflow: auto;\n}\n\n.header {\n  display: flex;\n  align-content: space-between;\n  align-items: center;\n\n  border-bottom: var(--header-border-size) solid var(--header-border);\n\n  & > .title {\n    flex: 1;\n    min-height: 75px;\n  }\n\n  .choice-banner {\n\n    flex-basis: 40%;\n    display: flex;\n    align-items: center;\n\n    &.top {\n\n      H2 {\n        margin: 0px;\n      }\n\n      .title{\n        display: flex;\n        align-items: center;\n        justify-content: space-evenly;\n\n        & > .subtitle {\n          margin: 0 20px;\n        }\n      }\n\n      .subtitle{\n        display: flex;\n        flex-direction: column;\n        & .subtext {\n          color: var(--input-label);\n        }\n      }\n\n    }\n\n    &:not(.top){\n      box-shadow: 0px 0px 12px 3px var(--box-bg);\n      flex-direction: row;\n      align-items: center;\n      justify-content: start;\n      &:hover{\n        outline: var(--outline-width) solid var(--outline);\n        cursor: pointer;\n      }\n    }\n\n    & .round-image {\n      min-width: 50px;\n      height: 50px;\n      margin: 10px 10px 10px 0;\n      border-radius: 50%;\n      overflow: hidden;\n      .logo {\n        min-width: 50px;\n        height: 50px;\n      }\n    }\n  }\n}\n\n</style>\n"]}]}