{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/auth/github.vue?vue&type=style&index=0&id=5f1470ea&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/auth/github.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5zdGVwLWxpc3QgbGk6bm90KDpsYXN0LWNoaWxkKSB7CiAgbWFyZ2luLWJvdHRvbTogOHB4Owp9Ci5iYW5uZXIgewogIGRpc3BsYXk6IGJsb2NrOwoKICAmOjp2LWRlZXAgY29kZSB7CiAgICBwYWRkaW5nOiAwIDNweDsKICAgIG1hcmdpbjogMCAzcHg7CiAgfQp9Cg=="},{"version":3,"sources":["github.vue"],"names":[],"mappings":";AA0RA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"github.vue","sourceRoot":"node_modules/@rancher/shell/edit/auth","sourcesContent":["<script>\nimport Loading from '@shell/components/Loading';\nimport CreateEditView from '@shell/mixins/create-edit-view';\nimport CruResource from '@shell/components/CruResource';\nimport { RadioGroup } from '@components/Form/Radio';\nimport { LabeledInput } from '@components/Form/LabeledInput';\nimport { Banner } from '@components/Banner';\nimport CopyToClipboard from '@shell/components/CopyToClipboard';\nimport AllowedPrincipals from '@shell/components/auth/AllowedPrincipals';\nimport { MANAGEMENT } from '@shell/config/types';\nimport { findBy } from '@shell/utils/array';\nimport AuthConfig from '@shell/mixins/auth-config';\nimport AuthBanner from '@shell/components/auth/AuthBanner';\nimport InfoBox from '@shell/components/InfoBox';\n\nconst NAME = 'github';\n\nexport default {\n  components: {\n    Loading,\n    CruResource,\n    RadioGroup,\n    LabeledInput,\n    Banner,\n    CopyToClipboard,\n    AllowedPrincipals,\n    AuthBanner,\n    InfoBox\n  },\n\n  mixins: [CreateEditView, AuthConfig],\n\n  async fetch() {\n    await this.mixinFetch();\n\n    this.targetType = (!this.model.hostname || this.model.hostname === 'github.com' ? 'public' : 'private');\n    this.targetUrl = (this.model.tls ? 'https://' : 'http://') + (this.model.hostname || 'github.com');\n  },\n\n  data() {\n    return {\n      targetType: 'public',\n      targetUrl:  null,\n    };\n  },\n\n  computed: {\n    me() {\n      const out = findBy(this.principals, 'me', true);\n\n      return out;\n    },\n\n    isPublic() {\n      return this.targetType === 'public';\n    },\n\n    baseUrl() {\n      return `${ this.model.tls ? 'https://' : 'http://' }${ this.model.hostname }`;\n    },\n\n    displayName() {\n      return this.t(`model.authConfig.provider.${ NAME }`);\n    },\n\n    tArgs() {\n      return {\n        baseUrl:   this.baseUrl,\n        serverUrl: this.serverUrl,\n        provider:  this.displayName,\n        username:  this.principal.loginName || this.principal.name,\n      };\n    },\n\n    NAME() {\n      return NAME;\n    },\n\n    AUTH_CONFIG() {\n      return MANAGEMENT.AUTH_CONFIG;\n    },\n\n    toSave() {\n      return {\n        enabled:      true,\n        githubConfig: this.model,\n        description:  'Enable GitHub',\n      };\n    }\n\n  },\n\n  watch: {\n    targetType: 'updateHost',\n    targetUrl:  'updateHost',\n  },\n\n  methods: {\n    updateHost() {\n      const match = this.targetUrl.match(/^(((https?):)?\\/\\/)?([^/]+)(\\/.*)?$/);\n\n      if ( match ) {\n        if ( match[3] === 'http') {\n          this.model.tls = false;\n        } else {\n          this.model.tls = true;\n        }\n\n        this.model.hostname = match[4] || 'github.com';\n      }\n    },\n  },\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n  <div v-else>\n    <CruResource\n      :cancel-event=\"true\"\n      :done-route=\"doneRoute\"\n      :mode=\"mode\"\n      :resource=\"model\"\n      :subtypes=\"[]\"\n      :validation-passed=\"true\"\n      :finish-button-mode=\"model.enabled ? 'edit' : 'enable'\"\n      :can-yaml=\"false\"\n      :errors=\"errors\"\n      :show-cancel=\"showCancel\"\n      @error=\"e=>errors = e\"\n      @finish=\"save\"\n      @cancel=\"cancel\"\n    >\n      <template v-if=\"model.enabled && !isEnabling && !editConfig\">\n        <AuthBanner\n          :t-args=\"tArgs\"\n          :disable=\"disable\"\n          :edit=\"goToEdit\"\n        >\n          <template slot=\"rows\">\n            <tr><td>{{ t(`authConfig.${ NAME }.table.server`) }}: </td><td>{{ baseUrl }}</td></tr>\n            <tr><td>{{ t(`authConfig.${ NAME }.table.clientId`) }}: </td><td>{{ value.clientId }}</td></tr>\n          </template>\n        </AuthBanner>\n\n        <hr>\n\n        <AllowedPrincipals\n          provider=\"github\"\n          :auth-config=\"model\"\n          :mode=\"mode\"\n        />\n      </template>\n\n      <template v-else>\n        <Banner\n          v-if=\"!model.enabled\"\n          :label=\"t('authConfig.stateBanner.disabled', tArgs)\"\n          color=\"warning\"\n        />\n\n        <h3 v-t=\"`authConfig.${NAME}.target.label`\" />\n        <RadioGroup\n          v-model=\"targetType\"\n          name=\"targetType\"\n          data-testid=\"authConfig-gitHub\"\n          :options=\"['public','private']\"\n          :mode=\"mode\"\n          :labels=\"[ t(`authConfig.${NAME}.target.public`), t(`authConfig.${NAME}.target.private`)]\"\n        />\n\n        <div class=\"row mb-20\">\n          <div class=\"col span-6\">\n            <LabeledInput\n              v-if=\"!isPublic\"\n              v-model=\"targetUrl\"\n              :label-key=\"`authConfig.${NAME}.host.label`\"\n              :placeholder=\"t(`authConfig.${NAME}.host.placeholder`)\"\n              :required=\"true\"\n              :mode=\"mode\"\n              @input=\"updateHost($event.selected, $event.text)\"\n            />\n          </div>\n        </div>\n\n        <InfoBox\n          :step=\"1\"\n          class=\"step-box\"\n        >\n          <ul class=\"step-list\">\n            <li v-clean-html=\"t(`authConfig.${NAME}.form.prefix.1`, tArgs, true)\" />\n            <li v-clean-html=\"t(`authConfig.${NAME}.form.prefix.2`, tArgs, true)\" />\n            <li v-clean-html=\"t(`authConfig.${NAME}.form.prefix.3`, tArgs, true)\" />\n          </ul>\n        </InfoBox>\n        <InfoBox\n          :step=\"2\"\n          class=\"step-box\"\n        >\n          <ul class=\"step-list\">\n            <li>\n              {{ t(`authConfig.${NAME}.form.instruction`, tArgs, true) }}\n              <ul class=\"mt-10\">\n                <li><b>{{ t(`authConfig.${NAME}.form.app.label`) }}</b>: <span v-clean-html=\"t(`authConfig.${NAME}.form.app.value`, tArgs, true)\" /></li>\n                <li>\n                  <b>{{ t(`authConfig.${NAME}.form.homepage.label`) }}</b>: {{ serverUrl }} <CopyToClipboard\n                    label-as=\"tooltip\"\n                    :text=\"serverUrl\"\n                    class=\"icon-btn\"\n                    action-color=\"bg-transparent\"\n                  />\n                </li>\n                <li><b>{{ t(`authConfig.${NAME}.form.description.label`) }}</b>: <span v-clean-html=\"t(`authConfig.${NAME}.form.description.value`, tArgs, true)\" /></li>\n                <li>\n                  <b>{{ t(`authConfig.${NAME}.form.callback.label`) }}</b>: {{ serverUrl }} <CopyToClipboard\n                    :text=\"serverUrl\"\n                    label-as=\"tooltip\"\n                    class=\"icon-btn\"\n                    action-color=\"bg-transparent\"\n                  />\n                </li>\n              </ul>\n            </li>\n          </ul>\n        </InfoBox>\n        <InfoBox\n          :step=\"3\"\n          class=\"mb-20\"\n        >\n          <ul class=\"step-list\">\n            <li v-clean-html=\"t(`authConfig.${NAME}.form.suffix.1`, tArgs, true)\" />\n            <li v-clean-html=\"t(`authConfig.${NAME}.form.suffix.2`, tArgs, true)\" />\n          </ul>\n        </InfoBox>\n\n        <div class=\"row mb-20\">\n          <div class=\"col span-6\">\n            <LabeledInput\n              v-model=\"model.clientId\"\n              :label=\"t(`authConfig.${NAME}.clientId.label`)\"\n              :mode=\"mode\"\n            />\n          </div>\n          <div class=\"col span-6\">\n            <LabeledInput\n              v-model=\"model.clientSecret\"\n              type=\"password\"\n              :label=\"t(`authConfig.${NAME}.clientSecret.label`)\"\n              :mode=\"mode\"\n            />\n          </div>\n        </div>\n        <div\n          v-if=\"!model.enabled\"\n          class=\"row\"\n        >\n          <div class=\"col span-12\">\n            <Banner\n              v-clean-html=\"t('authConfig.associatedWarning', tArgs, true)\"\n              color=\"info\"\n            />\n          </div>\n        </div>\n      </template>\n    </CruResource>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n  .step-list li:not(:last-child) {\n    margin-bottom: 8px;\n  }\n  .banner {\n    display: block;\n\n    &::v-deep code {\n      padding: 0 3px;\n      margin: 0 3px;\n    }\n  }\n</style>\n"]}]}