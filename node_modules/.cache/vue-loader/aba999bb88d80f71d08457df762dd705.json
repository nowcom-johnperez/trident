{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/detail/node.vue?vue&type=style&index=0&id=22546dec&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/detail/node.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5yZXNvdXJjZXMgewogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IHJvdzsKICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CgogICYgPiAqIHsKICAgIHdpZHRoOiAzMCU7CiAgfQp9Cg=="},{"version":3,"sources":["node.vue"],"names":[],"mappings":";AAoVA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"node.vue","sourceRoot":"node_modules/@rancher/shell/detail","sourcesContent":["<script>\nimport ConsumptionGauge from '@shell/components/ConsumptionGauge';\nimport Alert from '@shell/components/Alert';\nimport ResourceTable from '@shell/components/ResourceTable';\nimport Tab from '@shell/components/Tabbed/Tab';\nimport {\n  EFFECT,\n  IMAGE_SIZE,\n  KEY,\n  SIMPLE_NAME,\n  VALUE\n} from '@shell/config/table-headers';\nimport ResourceTabs from '@shell/components/form/ResourceTabs';\nimport EmberPage from '@shell/components/EmberPage';\nimport { METRIC, POD } from '@shell/config/types';\nimport createEditView from '@shell/mixins/create-edit-view';\nimport { formatSi, exponentNeeded, UNITS } from '@shell/utils/units';\nimport DashboardMetrics from '@shell/components/DashboardMetrics';\nimport { mapGetters } from 'vuex';\nimport { allDashboardsExist } from '@shell/utils/grafana';\nimport Loading from '@shell/components/Loading';\nimport metricPoller from '@shell/mixins/metric-poller';\nimport { haveV1Monitoring } from '@shell/utils/monitoring';\n\nconst NODE_METRICS_DETAIL_URL = '/api/v1/namespaces/cattle-monitoring-system/services/http:rancher-monitoring-grafana:80/proxy/d/rancher-node-detail-1/rancher-node-detail?orgId=1';\nconst NODE_METRICS_SUMMARY_URL = '/api/v1/namespaces/cattle-monitoring-system/services/http:rancher-monitoring-grafana:80/proxy/d/rancher-node-1/rancher-node?orgId=1';\n\nexport default {\n  name: 'DetailNode',\n\n  components: {\n    Alert,\n    ConsumptionGauge,\n    DashboardMetrics,\n    Loading,\n    ResourceTabs,\n    Tab,\n    ResourceTable,\n    EmberPage,\n  },\n\n  mixins: [createEditView, metricPoller],\n\n  props: {\n    value: {\n      type:     Object,\n      required: true,\n    },\n  },\n\n  async fetch() {\n    this.showMetrics = await allDashboardsExist(this.$store, this.currentCluster.id, [NODE_METRICS_DETAIL_URL, NODE_METRICS_SUMMARY_URL]);\n\n    if (haveV1Monitoring(this.$store.getters)) {\n      const v3Nodes = await this.$store.dispatch('rancher/request', {\n        url:    '/v3/nodes',\n        method: 'get'\n      });\n\n      this.v3Nodes = v3Nodes;\n    }\n\n    return this.$store.dispatch('cluster/findAll', { type: POD });\n  },\n\n  data() {\n    const podSchema = this.$store.getters['cluster/schemaFor'](POD);\n\n    return {\n      v3Nodes:          null,\n      metrics:          { cpu: 0, memory: 0 },\n      infoTableHeaders: [\n        {\n          ...KEY,\n          label: '',\n          width: 200\n        },\n        {\n          ...VALUE,\n          label:       '',\n          dashIfEmpty: true,\n        }\n      ],\n      imageTableHeaders: [\n        { ...SIMPLE_NAME, width: null },\n        { ...IMAGE_SIZE, width: 100 } // Ensure one header has a size, all other columns will scale\n      ],\n      taintTableHeaders: [\n        KEY,\n        VALUE,\n        EFFECT\n      ],\n      podTableHeaders: this.$store.getters['type-map/headersFor'](podSchema),\n      NODE_METRICS_DETAIL_URL,\n      NODE_METRICS_SUMMARY_URL,\n      showMetrics:     false\n    };\n  },\n\n  computed: {\n    ...mapGetters(['currentCluster']),\n    v1MonitoringUrl() {\n      if (this.v3Nodes && this.v3Nodes.data) {\n        const node = this.v3Nodes.data.find((n) => {\n          return n.nodeName === this.value.metadata?.name;\n        });\n\n        if (node) {\n          // Custom page just with node metrics graphs\n          const id = this.currentCluster.id;\n\n          return `/k/${ id }/monitoring/${ node.id }/metrics`;\n        }\n      }\n\n      return null;\n    },\n    memoryUnits() {\n      const exponent = exponentNeeded(this.value.ramReserved, 1024);\n\n      return `${ UNITS[exponent] }iB`;\n    },\n\n    pidPressureStatus() {\n      return this.mapToStatus(this.value.isPidPressureOk);\n    },\n\n    diskPressureStatus() {\n      return this.mapToStatus(this.value.isDiskPressureOk);\n    },\n\n    memoryPressureStatus() {\n      return this.mapToStatus(this.value.isMemoryPressureOk);\n    },\n\n    kubeletStatus() {\n      return this.mapToStatus(this.value.isKubeletOk);\n    },\n\n    infoTableRows() {\n      return Object.keys(this.value.status.nodeInfo)\n        .map((key) => ({\n          key:   this.t(`node.detail.tab.info.key.${ key }`),\n          value: this.value.status.nodeInfo[key]\n        }));\n    },\n\n    imageTableRows() {\n      const images = this.value.status.images || [];\n\n      return images.map((image) => ({\n        // image.names[1] typically has the user friendly name but on occasion there's only one name and we should use that\n        name:      image.names ? (image.names[1] || image.names[0]) : '---',\n        sizeBytes: image.sizeBytes\n      }));\n    },\n\n    taintTableRows() {\n      return this.value.spec.taints || [];\n    },\n\n    graphVars() {\n      return { instance: `${ this.value.internalIp }:9796` };\n    }\n  },\n\n  methods: {\n    memoryFormatter(value) {\n      const formatOptions = {\n        addSuffix: false,\n        increment: 1024,\n      };\n\n      return formatSi(value, formatOptions);\n    },\n\n    mapToStatus(isOk) {\n      return isOk ? 'success' : 'error';\n    },\n\n    async loadMetrics() {\n      const schema = this.$store.getters['cluster/schemaFor'](METRIC.NODE);\n\n      if (schema) {\n        await this.$store.dispatch('cluster/find', {\n          type: METRIC.NODE,\n          id:   this.value.id,\n          opt:  { force: true }\n        });\n\n        this.$forceUpdate();\n      }\n    }\n  }\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n  <div\n    v-else\n    class=\"node\"\n  >\n    <div class=\"spacer\" />\n    <div class=\"alerts\">\n      <Alert\n        class=\"mr-10\"\n        :status=\"pidPressureStatus\"\n        :message=\"t('node.detail.glance.pidPressure')\"\n      />\n      <Alert\n        class=\"mr-10\"\n        :status=\"diskPressureStatus\"\n        :message=\"t('node.detail.glance.diskPressure')\"\n      />\n      <Alert\n        class=\"mr-10\"\n        :status=\"memoryPressureStatus\"\n        :message=\"t('node.detail.glance.memoryPressure')\"\n      />\n      <Alert\n        :status=\"kubeletStatus\"\n        :message=\"t('node.detail.glance.kubelet')\"\n      />\n    </div>\n    <div class=\"mt-20 resources\">\n      <ConsumptionGauge\n        :resource-name=\"t('node.detail.glance.consumptionGauge.cpu')\"\n        :capacity=\"value.cpuCapacity\"\n        :used=\"value.cpuUsage\"\n      />\n      <ConsumptionGauge\n        :resource-name=\"t('node.detail.glance.consumptionGauge.memory')\"\n        :capacity=\"value.ramReserved\"\n        :used=\"value.ramUsage\"\n        :units=\"memoryUnits\"\n        :number-formatter=\"memoryFormatter\"\n      />\n      <ConsumptionGauge\n        :resource-name=\"t('node.detail.glance.consumptionGauge.pods')\"\n        :capacity=\"value.podCapacity\"\n        :used=\"value.podConsumed\"\n      />\n    </div>\n    <div class=\"spacer\" />\n    <ResourceTabs\n      v-model=\"value\"\n      :mode=\"mode\"\n    >\n      <Tab\n        name=\"pods\"\n        :label=\"t('node.detail.tab.pods')\"\n        :weight=\"4\"\n      >\n        <ResourceTable\n          key-field=\"_key\"\n          :headers=\"podTableHeaders\"\n          :rows=\"value.pods\"\n          :row-actions=\"false\"\n          :table-actions=\"false\"\n          :search=\"false\"\n        />\n      </Tab>\n      <Tab\n        v-if=\"showMetrics\"\n        :label=\"t('node.detail.tab.metrics')\"\n        name=\"node-metrics\"\n        :weight=\"3\"\n      >\n        <template #default=\"props\">\n          <DashboardMetrics\n            v-if=\"props.active\"\n            :detail-url=\"NODE_METRICS_DETAIL_URL\"\n            :summary-url=\"NODE_METRICS_SUMMARY_URL\"\n            :vars=\"graphVars\"\n            graph-height=\"825px\"\n          />\n        </template>\n      </Tab>\n      <Tab\n        name=\"info\"\n        :label=\"t('node.detail.tab.info.label')\"\n        class=\"bordered-table\"\n        :weight=\"2\"\n      >\n        <ResourceTable\n          key-field=\"_key\"\n          :headers=\"infoTableHeaders\"\n          :rows=\"infoTableRows\"\n          :row-actions=\"false\"\n          :table-actions=\"false\"\n          :show-headers=\"false\"\n          :search=\"false\"\n        />\n      </Tab>\n      <Tab\n        name=\"images\"\n        :label=\"t('node.detail.tab.images')\"\n        :weight=\"1\"\n      >\n        <ResourceTable\n          key-field=\"_key\"\n          :headers=\"imageTableHeaders\"\n          :rows=\"imageTableRows\"\n          :row-actions=\"false\"\n          :table-actions=\"false\"\n        />\n      </Tab>\n      <Tab\n        name=\"taints\"\n        :label=\"t('node.detail.tab.taints')\"\n        :weight=\"0\"\n      >\n        <ResourceTable\n          key-field=\"_key\"\n          :headers=\"taintTableHeaders\"\n          :rows=\"taintTableRows\"\n          :row-actions=\"false\"\n          :table-actions=\"false\"\n          :search=\"false\"\n        />\n      </Tab>\n      <Tab\n        v-if=\"v1MonitoringUrl\"\n        name=\"v1Metrics\"\n        :label=\"t('node.detail.tab.metrics')\"\n        :weight=\"0\"\n      >\n        <div id=\"ember-anchor\">\n          <EmberPage\n            inline=\"ember-anchor\"\n            :src=\"v1MonitoringUrl\"\n          />\n        </div>\n      </Tab>\n    </ResourceTabs>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.resources {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n\n  & > * {\n    width: 30%;\n  }\n}\n</style>\n"]}]}