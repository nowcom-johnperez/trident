{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/dialog/GenericPrompt.vue?vue&type=style&index=0&id=fe754e4c&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/dialog/GenericPrompt.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5wcm9tcHQtcmVzdG9yZSB7CiAgbWFyZ2luOiAwOwp9Ci5ib3R0b20gewogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICBmbGV4OiAxOwogIC5iYW5uZXIgewogICAgbWFyZ2luLXRvcDogMAogIH0KICAuYnV0dG9ucyB7CiAgICBkaXNwbGF5OiBmbGV4OwogICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDsKICAgIHdpZHRoOiAxMDAlOwogIH0KfQoK"},{"version":3,"sources":["GenericPrompt.vue"],"names":[],"mappings":";AAwIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"GenericPrompt.vue","sourceRoot":"node_modules/@rancher/shell/dialog","sourcesContent":["<script>\nimport AsyncButton from '@shell/components/AsyncButton';\nimport { Card } from '@components/Card';\nimport { Banner } from '@components/Banner';\nimport { exceptionToErrorsArray } from '@shell/utils/error';\nimport { decodeHtml } from '@shell/utils/string';\n\nexport default {\n  components: {\n    Card,\n    AsyncButton,\n    Banner,\n  },\n  props: {\n    applyAction: {\n      type:    Function,\n      default: () => {}\n    },\n    applyMode: {\n      type:    String,\n      default: 'create'\n    },\n    title: {\n      type:    String,\n      default: ''\n    },\n    body: {\n      type:    String,\n      default: ''\n    },\n\n    /**\n     * Callback to identify response of the prompt\n     */\n    confirm: {\n      type:    Function,\n      default: () => { }\n    },\n  },\n  data() {\n    return { errors: [] };\n  },\n\n  methods: {\n    decodeHtml,\n    close() {\n      this.confirm(false);\n      this.$emit('close', false);\n    },\n\n    async apply(buttonDone) {\n      try {\n        await this.applyAction(buttonDone);\n        this.confirm(true);\n        this.$emit('close', true);\n      } catch (err) {\n        console.error(err); // eslint-disable-line\n        this.errors = exceptionToErrorsArray(err);\n        buttonDone(false);\n      }\n    }\n  },\n};\n</script>\n\n<template>\n  <Card\n    class=\"prompt-restore\"\n    :show-highlight-border=\"false\"\n  >\n    <template slot=\"title\">\n      <slot name=\"title\">\n        <h4\n          slot=\"title\"\n          v-clean-html=\"title\"\n          class=\"text-default-text\"\n        />\n      </slot>\n    </template>\n\n    <template slot=\"body\">\n      <slot name=\"body\">\n        <div\n          v-clean-html=\"decodeHtml(body)\"\n          class=\"pl-10 pr-10\"\n          style=\"min-height: 50px; display: flex;\"\n        />\n      </slot>\n    </template>\n\n    <div\n      slot=\"actions\"\n      class=\"bottom\"\n    >\n      <Banner\n        v-for=\"(err, i) in errors\"\n        :key=\"i\"\n        color=\"error\"\n        :label=\"err\"\n      />\n      <div class=\"buttons\">\n        <button\n          class=\"btn role-secondary mr-10\"\n          @click=\"close\"\n        >\n          {{ t('generic.cancel') }}\n        </button>\n\n        <AsyncButton\n          :mode=\"applyMode\"\n          @click=\"apply\"\n        />\n      </div>\n    </div>\n  </Card>\n</template>\n<style lang='scss' scoped>\n  .prompt-restore {\n    margin: 0;\n  }\n  .bottom {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    .banner {\n      margin-top: 0\n    }\n    .buttons {\n      display: flex;\n      justify-content: flex-end;\n      width: 100%;\n    }\n  }\n\n</style>\n"]}]}