{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/PercentageBar.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/PercentageBar.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBCYXIgZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvZ3JhcGgvQmFyJzsKaW1wb3J0IHsgZm9ybWF0UGVyY2VudCB9IGZyb20gJ0BzaGVsbC91dGlscy9zdHJpbmcnOwoKZXhwb3J0IGNvbnN0IFByZWZlcnJlZERpcmVjdGlvbiA9IHsKICBMRVNTOiAnTEVTUycsCiAgTU9SRTogJ01PUkUnCn07CgovKioKICogQSBwZXJjZW50YWdlIGJhciB3aGljaCBjYW4gYmUgdXNlZCB0byBkaXNwbGF5IGhvdyBtdWNoIGEgcmVzb3VyY2UgaXMgYmVpbmcgY29uc3VtZWQuCiAqLwpleHBvcnQgZGVmYXVsdCB7CiAgY29tcG9uZW50czogeyBCYXIgfSwKICBwcm9wczogICAgICB7CiAgICAvKioKICAgICAqIEEgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBwZXJjZW50YWdlIHRvIGJlIGRpc3BsYXllZC4gKk11c3QgYmUgYSB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDEwMCouCiAgICAgKi8KICAgIHZhbHVlOiB7CiAgICAgIHR5cGU6ICAgICBOdW1iZXIsCiAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICB2YWxpZGF0b3IodmFsdWUpIHsKICAgICAgICByZXR1cm4gdmFsdWUgPj0gMDsKICAgICAgfQogICAgfSwKCiAgICAvKioKICAgICAqIEEgdmFsdWUgd2hpY2ggaW5kaWNhdGVzIHdoaWNoIGRpcmVjdGlvbiBpcyBiZXR0ZXIgc28gd2UgY2FuIGNoYW5nZSB0aGUgY29sb3IgYXBwcm9wcmlhdGVseSAoVmFsaWQgdmFsdWVzOiAnTEVTUycgb3IgJ01PUkUnKQogICAgICovCiAgICBwcmVmZXJyZWREaXJlY3Rpb246IHsKICAgICAgdHlwZTogICAgU3RyaW5nLAogICAgICBkZWZhdWx0OiBQcmVmZXJyZWREaXJlY3Rpb24uTEVTUwogICAgfSwKCiAgICAvKioKICAgICAqIERldGVybWluZXMgd2hldGhlciB3ZSBkaXNwbGF5IHRoZSBudW1lcmljYWwgcGVyY2VudGFnZSB2YWx1ZSB0byB0aGUgcmlnaHQgb2YgdGhlIGJhci4KICAgICAqLwogICAgc2hvd1BlcmNlbnRhZ2U6IHsKICAgICAgdHlwZTogICAgQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZmFsc2UKICAgIH0sCgogICAgLyoqCiAgICAgKiBPcHRpb25hbCBtYXAgb2YgcGVyY2VudGFnZTpjb2xvciBjbGFzcyBzdG9wcyB0byBhcHBseSB0byBiYXIKICAgICAqLwoKICAgIGNvbG9yU3RvcHM6IHsKICAgICAgdHlwZTogICAgT2JqZWN0LAogICAgICBkZWZhdWx0OiBudWxsCiAgICB9LAoKICAgIC8qKgogICAgICogU2hvdyB2ZXJ0aWNhbCBsaW5lcyB0byBkZW5vdGUgd2hlcmUgbXVsdGlwbGUgc291cmNlcyB0aGF0IGFyZSBjb250cmlidXRpbmcgdG8gdGhpcyBwZXJjZW50YWdlIGVuZAogICAgICovCiAgICBzbGljZXM6IHsKICAgICAgdHlwZTogICAgQXJyYXksCiAgICAgIGRlZmF1bHQ6ICgpID0+IFtdCiAgICB9CiAgfSwKCiAgY29tcHV0ZWQ6IHsKICAgIHByaW1hcnlDb2xvcigpIHsKICAgICAgY29uc3QgaXNMZXNzID0gdGhpcy5wcmVmZXJyZWREaXJlY3Rpb24gPT09IFByZWZlcnJlZERpcmVjdGlvbi5MRVNTOwoKICAgICAgaWYgKHRoaXMuY29sb3JTdG9wcykgewogICAgICAgIGNvbnN0IHRocmVzaG9sZHMgPSBPYmplY3Qua2V5cyh0aGlzLmNvbG9yU3RvcHMpLnNvcnQoKTsKCiAgICAgICAgaWYgKGlzTGVzcykgewogICAgICAgICAgbGV0IGkgPSB0aHJlc2hvbGRzLmxlbmd0aCAtIDE7CgogICAgICAgICAgd2hpbGUgKHRoaXMudmFsdWUgPCB0aHJlc2hvbGRzW2ldKSB7CiAgICAgICAgICAgIGktLTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gdGhpcy5jb2xvclN0b3BzW3RocmVzaG9sZHNbaV1dOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBsZXQgaSA9IDA7CgogICAgICAgICAgd2hpbGUgKHRoaXMudmFsdWUgPiB0aHJlc2hvbGRzW2ldKSB7CiAgICAgICAgICAgIGkrKzsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gdGhpcy5jb2xvclN0b3BzW3RocmVzaG9sZHNbaV1dOwogICAgICAgIH0KICAgICAgfQogICAgICBjb25zdCB0aHJlc2hvbGQgPSBpc0xlc3MgPyA4MCA6IDIwOwoKICAgICAgY29uc3QgbGVmdCA9IGlzTGVzcyA/IHRoaXMudmFsdWUgOiB0aHJlc2hvbGQ7CiAgICAgIGNvbnN0IHJpZ2h0ID0gaXNMZXNzID8gdGhyZXNob2xkIDogdGhpcy52YWx1ZTsKCiAgICAgIGlmIChsZWZ0IDw9IHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuICctLXByaW1hcnknOwogICAgICB9CgogICAgICByZXR1cm4gJy0tZXJyb3InOwogICAgfSwKICAgIGZvcm1hdHRlZFBlcmNlbnRhZ2UoKSB7CiAgICAgIHJldHVybiBmb3JtYXRQZXJjZW50KHRoaXMudmFsdWUpOwogICAgfQogIH0sCn07Cg=="},{"version":3,"sources":["PercentageBar.vue"],"names":[],"mappings":";AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PercentageBar.vue","sourceRoot":"node_modules/@rancher/shell/components","sourcesContent":["<script>\nimport Bar from '@shell/components/graph/Bar';\nimport { formatPercent } from '@shell/utils/string';\n\nexport const PreferredDirection = {\n  LESS: 'LESS',\n  MORE: 'MORE'\n};\n\n/**\n * A percentage bar which can be used to display how much a resource is being consumed.\n */\nexport default {\n  components: { Bar },\n  props:      {\n    /**\n     * A value representing the percentage to be displayed. *Must be a value between 0 and 100*.\n     */\n    value: {\n      type:     Number,\n      required: true,\n      validator(value) {\n        return value >= 0;\n      }\n    },\n\n    /**\n     * A value which indicates which direction is better so we can change the color appropriately (Valid values: 'LESS' or 'MORE')\n     */\n    preferredDirection: {\n      type:    String,\n      default: PreferredDirection.LESS\n    },\n\n    /**\n     * Determines whether we display the numerical percentage value to the right of the bar.\n     */\n    showPercentage: {\n      type:    Boolean,\n      default: false\n    },\n\n    /**\n     * Optional map of percentage:color class stops to apply to bar\n     */\n\n    colorStops: {\n      type:    Object,\n      default: null\n    },\n\n    /**\n     * Show vertical lines to denote where multiple sources that are contributing to this percentage end\n     */\n    slices: {\n      type:    Array,\n      default: () => []\n    }\n  },\n\n  computed: {\n    primaryColor() {\n      const isLess = this.preferredDirection === PreferredDirection.LESS;\n\n      if (this.colorStops) {\n        const thresholds = Object.keys(this.colorStops).sort();\n\n        if (isLess) {\n          let i = thresholds.length - 1;\n\n          while (this.value < thresholds[i]) {\n            i--;\n          }\n\n          return this.colorStops[thresholds[i]];\n        } else {\n          let i = 0;\n\n          while (this.value > thresholds[i]) {\n            i++;\n          }\n\n          return this.colorStops[thresholds[i]];\n        }\n      }\n      const threshold = isLess ? 80 : 20;\n\n      const left = isLess ? this.value : threshold;\n      const right = isLess ? threshold : this.value;\n\n      if (left <= right) {\n        return '--primary';\n      }\n\n      return '--error';\n    },\n    formattedPercentage() {\n      return formatPercent(this.value);\n    }\n  },\n};\n</script>\n\n<template>\n  <span class=\"percentage-bar\">\n    <Bar\n      :percentage=\"value\"\n      :primary-color=\"primaryColor\"\n      :slices=\"slices\"\n    />\n    <span\n      v-if=\"showPercentage\"\n      class=\"ml-5 percentage-value\"\n    >{{ formattedPercentage }}</span>\n  </span>\n</template>\n\n<style lang=\"scss\" scoped>\n.percentage-bar {\n  display: flex;\n  flex-direction: row;\n\n  .percentage-value {\n    word-break: keep-all;\n  }\n}\n</style>\n"]}]}