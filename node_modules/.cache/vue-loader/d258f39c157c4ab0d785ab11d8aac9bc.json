{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/detail/workload/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/detail/workload/index.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappingsfile":"index.vue","sourceRoot":"node_modules/@rancher/shell/detail/workload","sourcesContent":["<script>\nimport CreateEditView from '@shell/mixins/create-edit-view';\nimport { NAMESPACE as NAMESPACE_COL } from '@shell/config/table-headers';\nimport {\n  POD, WORKLOAD_TYPES, SCALABLE_WORKLOAD_TYPES, SERVICE, INGRESS, NODE, NAMESPACE,\n} from '@shell/config/types';\nimport ResourceTable from '@shell/components/ResourceTable';\nimport Tab from '@shell/components/Tabbed/Tab';\nimport Loading from '@shell/components/Loading';\nimport ResourceTabs from '@shell/components/form/ResourceTabs';\nimport CountGauge from '@shell/components/CountGauge';\nimport { allHash } from '@shell/utils/promise';\nimport DashboardMetrics from '@shell/components/DashboardMetrics';\nimport V1WorkloadMetrics from '@shell/mixins/v1-workload-metrics';\nimport { mapGetters } from 'vuex';\nimport { allDashboardsExist } from '@shell/utils/grafana';\nimport PlusMinus from '@shell/components/form/PlusMinus';\nimport { matches } from '@shell/utils/selector';\nimport { PROJECT } from '@shell/config/labels-annotations';\n\nconst SCALABLE_TYPES = Object.values(SCALABLE_WORKLOAD_TYPES);\nconst WORKLOAD_METRICS_DETAIL_URL = '/api/v1/namespaces/cattle-monitoring-system/services/http:rancher-monitoring-grafana:80/proxy/d/rancher-workload-pods-1/rancher-workload-pods?orgId=1';\nconst WORKLOAD_METRICS_SUMMARY_URL = '/api/v1/namespaces/cattle-monitoring-system/services/http:rancher-monitoring-grafana:80/proxy/d/rancher-workload-1/rancher-workload?orgId=1';\n\nexport const WORKLOAD_TYPE_TO_KIND_MAPPING = {\n  // Each deployment creates a replicaset and the metrics are published for a replicaset.\n  [WORKLOAD_TYPES.DEPLOYMENT]:             'ReplicaSet',\n  [WORKLOAD_TYPES.CRON_JOB]:               'CronJob',\n  [WORKLOAD_TYPES.DAEMON_SET]:             'DaemonSet',\n  [WORKLOAD_TYPES.JOB]:                    'Job',\n  [WORKLOAD_TYPES.STATEFUL_SET]:           'StatefulSet',\n  [WORKLOAD_TYPES.REPLICA_SET]:            'ReplicaSet',\n  [WORKLOAD_TYPES.REPLICATION_CONTROLLER]: 'ReplicationController',\n};\n\nconst METRICS_SUPPORTED_KINDS = [\n  WORKLOAD_TYPES.DAEMON_SET,\n  WORKLOAD_TYPES.REPLICA_SET,\n  WORKLOAD_TYPES.STATEFUL_SET,\n  WORKLOAD_TYPES.DEPLOYMENT\n];\n\nexport default {\n  components: {\n    DashboardMetrics,\n    Tab,\n    Loading,\n    ResourceTabs,\n    CountGauge,\n    ResourceTable,\n    PlusMinus\n  },\n\n  mixins: [CreateEditView, V1WorkloadMetrics],\n\n  async fetch() {\n    let hasNodes = false;\n\n    try {\n      const inStore = this.$store.getters['currentStore']();\n      const schema = this.$store.getters[`${ inStore }/schemaFor`](NODE);\n\n      if (schema) {\n        hasNodes = true;\n      }\n    } catch {}\n\n    const hash = {\n      allPods:      this.$store.dispatch('cluster/findAll', { type: POD }),\n      allServices:  this.$store.dispatch('cluster/findAll', { type: SERVICE }),\n      allIngresses: this.$store.dispatch('cluster/findAll', { type: INGRESS }),\n      // Nodes should be fetched because they may be referenced in the target\n      // column of a service list item.\n      allNodes:     hasNodes ? this.$store.dispatch('cluster/findAll', { type: NODE }) : []\n    };\n\n    if (this.value.type === WORKLOAD_TYPES.CRON_JOB) {\n      hash.allJobs = this.$store.dispatch('cluster/findAll', { type: WORKLOAD_TYPES.JOB });\n    }\n    const res = await allHash(hash);\n\n    for ( const k in res ) {\n      this[k] = res[k];\n    }\n\n    const isMetricsSupportedKind = METRICS_SUPPORTED_KINDS.includes(this.value.type);\n\n    this.showMetrics = isMetricsSupportedKind && await allDashboardsExist(this.$store, this.currentCluster.id, [WORKLOAD_METRICS_DETAIL_URL, WORKLOAD_METRICS_SUMMARY_URL]);\n    if (!this.showMetrics) {\n      const namespace = await this.$store.dispatch('cluster/find', { type: NAMESPACE, id: this.value.metadata.namespace });\n\n      const projectId = namespace?.metadata?.labels[PROJECT];\n\n      if (projectId) {\n        this.WORKLOAD_PROJECT_METRICS_DETAIL_URL = `/api/v1/namespaces/cattle-project-${ projectId }-monitoring/services/http:cattle-project-${ projectId }-monitoring-grafana:80/proxy/d/rancher-pod-containers-1/rancher-workload-pods?orgId=1'`;\n        this.WORKLOAD_PROJECT_METRICS_SUMMARY_URL = `/api/v1/namespaces/cattle-project-${ projectId }-monitoring/services/http:cattle-project-${ projectId }-monitoring-grafana:80/proxy/d/rancher-pod-1/rancher-workload?orgId=1`;\n\n        this.showProjectMetrics = await allDashboardsExist(this.$store, this.currentCluster.id, [this.WORKLOAD_PROJECT_METRICS_DETAIL_URL, this.WORKLOAD_PROJECT_METRICS_SUMMARY_URL], 'cluster', projectId);\n      }\n    }\n    this.findMatchingServices();\n    this.findMatchingIngresses();\n  },\n\n  data() {\n    return {\n      allPods:                         [],\n      allServices:                     [],\n      allIngresses:                    [],\n      matchingServices:                [],\n      matchingIngresses:               [],\n      allJobs:                         [],\n      allNodes:                        [],\n      WORKLOAD_METRICS_DETAIL_URL,\n      WORKLOAD_METRICS_SUMMARY_URL,\n      POD_PROJECT_METRICS_DETAIL_URL:  '',\n      POD_PROJECT_METRICS_SUMMARY_URL: '',\n      showMetrics:                     false,\n      showProjectMetrics:              false,\n    };\n  },\n\n  computed: {\n    ...mapGetters(['currentCluster']),\n\n    isScalable() {\n      return this.value?.canUpdate;\n    },\n\n    isJob() {\n      return this.value.type === WORKLOAD_TYPES.JOB;\n    },\n\n    isCronJob() {\n      return this.value.type === WORKLOAD_TYPES.CRON_JOB;\n    },\n\n    isPod() {\n      return this.value.type === POD;\n    },\n\n    podSchema() {\n      return this.$store.getters['cluster/schemaFor'](POD);\n    },\n\n    ingressSchema() {\n      return this.$store.getters['cluster/schemaFor'](INGRESS);\n    },\n\n    serviceSchema() {\n      return this.$store.getters['cluster/schemaFor'](SERVICE);\n    },\n\n    podTemplateSpec() {\n      if ( this.value.type === WORKLOAD_TYPES.CRON_JOB ) {\n        return this.value.spec.jobTemplate.spec.template.spec;\n      }\n\n      // This is for viewing\n      if ( this.value.type === POD ) {\n        return this.value;\n      }\n\n      return this.value.spec?.template?.spec;\n    },\n\n    container() {\n      return this.podTemplateSpec?.containers[0];\n    },\n\n    jobSchema() {\n      return this.$store.getters['cluster/schemaFor'](WORKLOAD_TYPES.JOB);\n    },\n\n    jobHeaders() {\n      return this.$store.getters['type-map/headersFor'](this.jobSchema);\n    },\n    ingressHeaders() {\n      return this.$store.getters['type-map/headersFor'](this.ingressSchema);\n    },\n    serviceHeaders() {\n      return this.$store.getters['type-map/headersFor'](this.serviceSchema);\n    },\n\n    totalRuns() {\n      if (!this.value.jobs) {\n        return;\n      }\n\n      return this.value.jobs.reduce((total, job) => {\n        const { status = {} } = job;\n\n        total += (status.active || 0);\n        total += (status.succeeded || 0);\n        total += (status.failed || 0);\n\n        return total;\n      }, 0);\n    },\n\n    podRestarts() {\n      return this.value.pods.reduce((total, pod) => {\n        const { status:{ containerStatuses = [] } } = pod;\n\n        if (containerStatuses.length) {\n          total += containerStatuses.reduce((tot, container) => {\n            tot += container.restartCount;\n\n            return tot;\n          }, 0);\n        }\n\n        return total;\n      }, 0);\n    },\n\n    podHeaders() {\n      return this.$store.getters['type-map/headersFor'](this.podSchema).filter((h) => h !== NAMESPACE_COL);\n    },\n\n    graphVarsWorkload() {\n      return this.value.type === WORKLOAD_TYPES.DEPLOYMENT ? this.value.replicaSetId : this.value.shortId;\n    },\n\n    graphVars() {\n      return {\n        namespace: this.value.namespace,\n        kind:      WORKLOAD_TYPE_TO_KIND_MAPPING[this.value.type],\n        workload:  this.graphVarsWorkload\n      };\n    },\n\n    showPodGaugeCircles() {\n      const podGauges = Object.values(this.value.podGauges);\n      const total = this.value.pods.length;\n\n      return !podGauges.find((pg) => pg.count === total);\n    },\n\n    showJobGaugeCircles() {\n      const jobGauges = Object.values(this.value.jobGauges);\n      const total = this.isCronJob ? this.totalRuns : this.value.pods.length;\n\n      return !jobGauges.find((jg) => jg.count === total);\n    },\n\n    canScale() {\n      return !!SCALABLE_TYPES.includes(this.value.type) && this.value.canUpdate;\n    },\n  },\n  methods: {\n    async scale(isUp) {\n      try {\n        if (isUp) {\n          await this.value.scaleUp();\n        } else {\n          await this.value.scaleDown();\n        }\n      } catch (err) {\n        this.$store.dispatch('growl/fromError', {\n          title: this.t('workload.list.errorCannotScale', { direction: isUp ? 'up' : 'down', workloadName: this.value.name }),\n          err\n        },\n        { root: true });\n      }\n    },\n    async scaleDown() {\n      await this.scale(false);\n    },\n    async scaleUp() {\n      await this.scale(true);\n    },\n    findMatchingServices() {\n      if (!this.serviceSchema) {\n        return [];\n      }\n      const matchingPods = this.value.pods;\n\n      // Find Services that have selectors that match this\n      // workload's Pod(s).\n      const matchingServices = this.allServices.filter((service) => {\n        const selector = service.spec.selector;\n\n        for (let i = 0; i < matchingPods.length; i++) {\n          const pod = matchingPods[i];\n\n          if (service.metadata?.namespace === this.value.metadata?.namespace && matches(pod, selector)) {\n            return true;\n          }\n        }\n\n        return false;\n      });\n\n      this.matchingServices = matchingServices;\n    },\n    findMatchingIngresses() {\n      if (!this.ingressSchema) {\n        return [];\n      }\n\n      // Find Ingresses that forward traffic to Services\n      // that select this workload.\n      const matchingIngresses = this.allIngresses.filter((ingress) => {\n        const rules = ingress.spec.rules;\n\n        if (rules) {\n          for (let i = 0; i < rules.length; i++) {\n            const rule = rules[i];\n\n            const paths = rule.http.paths;\n\n            if (paths) {\n              // For each Ingress, check if any Services that match\n              // this workload are also target backends for the Ingress.\n              for (let j = 0; j < paths.length; j++) {\n                const pathData = paths[j];\n                const targetServiceName = pathData.backend.service.name;\n\n                for (let k = 0; k < this.matchingServices.length; k++) {\n                  const service = this.matchingServices[k];\n                  const matchingServiceName = service.metadata?.name;\n\n                  if (ingress.metadata?.namespace === this.value.metadata?.namespace && matchingServiceName === targetServiceName) {\n                    return true;\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        return false;\n      });\n\n      this.matchingIngresses = matchingIngresses;\n    }\n  }\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n  <div v-else>\n    <div\n      v-if=\"canScale\"\n      class=\"right-align flex\"\n    >\n      <PlusMinus\n        class=\"text-right\"\n        :label=\"t('tableHeaders.scale')\"\n        :value=\"value.spec.replicas\"\n        :disabled=\"!isScalable\"\n        @minus=\"scaleDown\"\n        @plus=\"scaleUp\"\n      />\n    </div>\n    <h3>\n      {{ isJob || isCronJob ? t('workload.detailTop.runs') :t('workload.detailTop.pods') }}\n    </h3>\n    <div\n      v-if=\"value.pods || value.jobGauges\"\n      class=\"gauges mb-20\"\n      :class=\"{'gauges__pods': !!value.pods}\"\n    >\n      <template v-if=\"value.jobGauges\">\n        <CountGauge\n          v-for=\"(group, key) in value.jobGauges\"\n          :key=\"key\"\n          :total=\"isCronJob? totalRuns : value.pods.length\"\n          :useful=\"group.count || 0\"\n          :graphical=\"showJobGaugeCircles\"\n          :primary-color-var=\"`--sizzle-${group.color}`\"\n          :name=\"t(`workload.gaugeStates.${key}`)\"\n        />\n      </template>\n      <template v-else>\n        <CountGauge\n          v-for=\"(group, key) in value.podGauges\"\n          :key=\"key\"\n          :total=\"value.pods.length\"\n          :useful=\"group.count || 0\"\n          :graphical=\"showPodGaugeCircles\"\n          :primary-color-var=\"`--sizzle-${group.color}`\"\n          :name=\"key\"\n        />\n      </template>\n    </div>\n    <ResourceTabs\n      :value=\"value\"\n    >\n      <Tab\n        v-if=\"isCronJob\"\n        name=\"jobs\"\n        :label=\"t('tableHeaders.jobs')\"\n        :weight=\"4\"\n      >\n        <ResourceTable\n          :rows=\"value.jobs\"\n          :headers=\"jobHeaders\"\n          key-field=\"id\"\n          :schema=\"jobSchema\"\n          :groupable=\"false\"\n          :search=\"false\"\n        />\n      </Tab>\n      <Tab\n        v-else\n        name=\"pods\"\n        :label=\"t('tableHeaders.pods')\"\n        :weight=\"4\"\n      >\n        <ResourceTable\n          v-if=\"value.pods\"\n          :rows=\"value.pods\"\n          :headers=\"podHeaders\"\n          key-field=\"id\"\n          :schema=\"podSchema\"\n          :groupable=\"false\"\n          :search=\"false\"\n        />\n      </Tab>\n      <Tab\n        v-if=\"showMetrics\"\n        :label=\"t('workload.container.titles.metrics')\"\n        name=\"workload-metrics\"\n        :weight=\"3\"\n      >\n        <template #default=\"props\">\n          <DashboardMetrics\n            v-if=\"props.active\"\n            :detail-url=\"WORKLOAD_METRICS_DETAIL_URL\"\n            :summary-url=\"WORKLOAD_METRICS_SUMMARY_URL\"\n            :vars=\"graphVars\"\n            graph-height=\"550px\"\n          />\n        </template>\n      </Tab>\n      <Tab\n        v-if=\"showProjectMetrics\"\n        :label=\"t('workload.container.titles.metrics')\"\n        name=\"workload-metrics\"\n        :weight=\"3\"\n      >\n        <template #default=\"props\">\n          <DashboardMetrics\n            v-if=\"props.active\"\n            :detail-url=\"WORKLOAD_PROJECT_METRICS_DETAIL_URL\"\n            :summary-url=\"WORKLOAD_PROJECT_METRICS_SUMMARY_URL\"\n            :vars=\"graphVars\"\n            graph-height=\"550px\"\n          />\n        </template>\n      </Tab>\n      <Tab\n        v-if=\"v1MonitoringUrl\"\n        name=\"v1Metrics\"\n        :label=\"t('node.detail.tab.metrics')\"\n        :weight=\"10\"\n      >\n        <div id=\"ember-anchor\">\n          <EmberPage\n            inline=\"ember-anchor\"\n            :src=\"v1MonitoringUrl\"\n          />\n        </div>\n      </Tab>\n      <Tab\n        v-if=\"!isJob && !isCronJob\"\n        name=\"services\"\n        :label=\"t('workload.detail.services')\"\n        :weight=\"3\"\n      >\n        <p\n          v-if=\"!serviceSchema\"\n          class=\"caption\"\n        >\n          {{ t('workload.detail.cannotViewServices') }}\n        </p>\n        <p\n          v-else-if=\"matchingServices.length === 0\"\n          class=\"caption\"\n        >\n          {{ t('workload.detail.cannotFindServices') }}\n        </p>\n        <p\n          v-else\n          class=\"caption\"\n        >\n          {{ t('workload.detail.serviceListCaption') }}\n        </p>\n        <ResourceTable\n          v-if=\"serviceSchema && matchingServices.length > 0\"\n          :rows=\"matchingServices\"\n          :headers=\"serviceHeaders\"\n          key-field=\"id\"\n          :schema=\"serviceSchema\"\n          :groupable=\"false\"\n          :search=\"false\"\n          :table-actions=\"false\"\n        />\n      </Tab>\n      <Tab\n        v-if=\"!isJob && !isCronJob\"\n        name=\"ingresses\"\n        :label=\"t('workload.detail.ingresses')\"\n        :weight=\"2\"\n      >\n        <p\n          v-if=\"!serviceSchema\"\n          class=\"caption\"\n        >\n          {{ t('workload.detail.cannotViewIngressesBecauseCannotViewServices') }}\n        </p>\n        <p\n          v-else-if=\"!ingressSchema\"\n          class=\"caption\"\n        >\n          {{ t('workload.detail.cannotViewIngresses') }}\n        </p>\n        <p\n          v-else-if=\"matchingIngresses.length === 0\"\n          class=\"caption\"\n        >\n          {{ t('workload.detail.cannotFindIngresses') }}\n        </p>\n        <p\n          v-else\n          class=\"caption\"\n        >\n          {{ t('workload.detail.ingressListCaption') }}\n        </p>\n        <ResourceTable\n          v-if=\"ingressSchema && matchingIngresses.length > 0\"\n          :rows=\"matchingIngresses\"\n          :headers=\"ingressHeaders\"\n          key-field=\"id\"\n          :schema=\"ingressSchema\"\n          :groupable=\"false\"\n          :search=\"false\"\n          :table-actions=\"false\"\n        />\n      </Tab>\n    </ResourceTabs>\n  </div>\n</template>\n\n<style lang='scss' scoped>\n.right-align {\n  float: right;\n}\n.gauges {\n  display: flex;\n  justify-content: space-around;\n  &>*{\n    flex: 1;\n    margin-right: $column-gutter;\n  }\n  &__pods {\n    flex-wrap: wrap;\n    justify-content: left;\n    .count-gauge {\n      width: 23%;\n      margin-bottom: 10px;\n      flex: initial;\n    }\n  }\n}\n.caption {\n  margin-bottom: .5em;\n}\n</style>\n"]}]}