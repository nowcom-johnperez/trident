{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/Inactivity.vue?vue&type=style&index=0&id=ef080212&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/Inactivity.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jYXJkLWFjdGlvbnMgewogICAgZGlzcGxheTogZmxleDsKICAgIHdpZHRoOiAxMDAlOwogICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDsKfQo="},{"version":3,"sources":["Inactivity.vue"],"names":[],"mappings":";AA0OA;AACA;AACA;AACA;AACA","file":"Inactivity.vue","sourceRoot":"node_modules/@rancher/shell/components","sourcesContent":["<script>\nimport ModalWithCard from '@shell/components/ModalWithCard';\nimport { Banner } from '@components/Banner';\nimport PercentageBar from '@shell/components/PercentageBar.vue';\nimport throttle from 'lodash/throttle';\nimport { MANAGEMENT } from '@shell/config/types';\nimport { DEFAULT_PERF_SETTING, SETTING } from '@shell/config/settings';\n\nlet globalId;\n\nexport default {\n  name:       'Inactivity',\n  components: {\n    ModalWithCard, Banner, PercentageBar\n  },\n  data() {\n    return {\n      enabled:             null,\n      isOpen:              false,\n      isInactive:          false,\n      showModalAfter:      null,\n      inactivityTimeoutId: null,\n      courtesyTimer:       null,\n      courtesyTimerId:     null,\n      courtesyCountdown:   null,\n      trackInactivity:     throttle(this._trackInactivity, 1000),\n      id:                  null,\n    };\n  },\n  async mounted() {\n    // Info: normally, this is done in the fetch hook but for some reasons while awaiting for things that will take a while, it won't be ready by the time mounted() is called, pending for investigation.\n    let settings;\n\n    try {\n      const settingsString = await this.$store.dispatch('management/find', { type: MANAGEMENT.SETTING, id: SETTING.UI_PERFORMANCE });\n\n      settings = settingsString?.value ? JSON.parse(settingsString.value) : DEFAULT_PERF_SETTING;\n    } catch { }\n\n    if (!settings || !settings?.inactivity || !settings?.inactivity.enabled) {\n      return;\n    }\n\n    this.enabled = settings?.inactivity?.enabled || false;\n\n    // Total amount of time before the user's session is lost\n    const thresholdToSeconds = settings?.inactivity?.threshold * 60;\n\n    // Amount of time the user sees the inactivity warning\n    this.courtesyTimer = Math.floor(thresholdToSeconds * 0.1);\n    this.courtesyTimer = Math.min(this.courtesyTimer, 60 * 5); // Never show the modal more than 5 minutes\n    // Amount of time before the user sees the inactivity warning\n    // Note - time before warning is shown + time warning is shown = settings threshold (total amount of time)\n    this.showModalAfter = thresholdToSeconds - this.courtesyTimer;\n\n    console.debug(`Inactivity modal will show after ${ this.showModalAfter / 60 }(m) and be shown for ${ this.courtesyTimer / 60 }(m)`); // eslint-disable-line no-console\n\n    this.courtesyCountdown = this.courtesyTimer;\n\n    if (settings?.inactivity.enabled) {\n      this.trackInactivity();\n      this.addIdleListeners();\n    }\n  },\n  beforeDestroy() {\n    this.removeEventListener();\n    this.clearAllTimeouts();\n  },\n  methods: {\n    _trackInactivity() {\n      if (this.isInactive || this.isOpen || !this.showModalAfter) {\n        return;\n      }\n\n      this.clearAllTimeouts();\n      const endTime = Date.now() + this.showModalAfter * 1000;\n\n      this.id = endTime;\n      globalId = endTime;\n\n      const checkInactivityTimer = () => {\n        const now = Date.now();\n\n        if (this.id !== globalId) {\n          return;\n        }\n\n        if (now >= endTime) {\n          this.isOpen = true;\n          this.startCountdown();\n\n          this.$modal.show('inactivityModal');\n        } else {\n          this.inactivityTimeoutId = setTimeout(checkInactivityTimer, 1000);\n        }\n      };\n\n      checkInactivityTimer();\n    },\n    startCountdown() {\n      const endTime = Date.now() + (this.courtesyCountdown * 1000);\n\n      const checkCountdown = () => {\n        const now = Date.now();\n\n        if (now >= endTime) {\n          this.isInactive = true;\n          this.unsubscribe();\n          this.clearAllTimeouts();\n        } else {\n          this.courtesyCountdown = Math.floor((endTime - now) / 1000);\n          this.courtesyTimerId = setTimeout(checkCountdown, 1000);\n        }\n      };\n\n      checkCountdown();\n    },\n    addIdleListeners() {\n      document.addEventListener('mousemove', this.trackInactivity);\n      document.addEventListener('mousedown', this.trackInactivity);\n      document.addEventListener('keypress', this.trackInactivity);\n      document.addEventListener('touchmove', this.trackInactivity);\n      document.addEventListener('visibilitychange', this.trackInactivity);\n    },\n    removeEventListener() {\n      document.removeEventListener('mousemove', this.trackInactivity);\n      document.removeEventListener('mousedown', this.trackInactivity);\n      document.removeEventListener('keypress', this.trackInactivity);\n      document.removeEventListener('touchmove', this.trackInactivity);\n      document.removeEventListener('visibilitychange', this.trackInactivity);\n    },\n\n    resume() {\n      this.isInactive = false;\n      this.isOpen = false;\n      this.courtesyCountdown = this.courtesyTimer;\n      this.clearAllTimeouts();\n\n      this.$modal.hide('inactivityModal');\n    },\n\n    refresh() {\n      window.location.reload();\n    },\n\n    unsubscribe() {\n      console.debug('Unsubscribing from all websocket events'); // eslint-disable-line no-console\n      this.$store.dispatch('unsubscribe');\n    },\n    clearAllTimeouts() {\n      clearTimeout(this.inactivityTimeoutId);\n      clearTimeout(this.courtesyTimerId);\n    }\n\n  },\n  computed: {\n    isInactiveTexts() {\n      return this.isInactive ? {\n        title:   this.t('inactivity.titleExpired'),\n        banner:  this.t('inactivity.bannerExpired'),\n        content: this.t('inactivity.contentExpired'),\n      } : {\n        title:   this.t('inactivity.title'),\n        banner:  this.t('inactivity.banner'),\n        content: this.t('inactivity.content'),\n      };\n    },\n    timerPercentageLeft() {\n      return Math.floor((this.courtesyCountdown / this.courtesyTimer ) * 100);\n    },\n    colorStops() {\n      return {\n        0: '--info', 30: '--info', 70: '--info'\n      };\n    },\n  }\n};\n</script>\n\n<template>\n  <ModalWithCard\n    ref=\"inactivityModal\"\n    name=\"inactivityModal\"\n    save-text=\"Continue\"\n    :v-if=\"isOpen\"\n    @finish=\"resume\"\n  >\n    <template #title>\n      {{ isInactiveTexts.title }}\n    </template>\n    <span>{{ courtesyCountdown }}</span>\n\n    <template #content>\n      <Banner color=\"info\">\n        {{ isInactiveTexts.banner }}\n      </Banner>\n\n      <p>\n        {{ isInactiveTexts.content }}\n      </p>\n\n      <PercentageBar\n        v-if=\"!isInactive\"\n        class=\"mt-20\"\n        :value=\"timerPercentageLeft\"\n        :color-stops=\"colorStops\"\n      />\n    </template>\n\n    <template\n      #footer\n    >\n      <div class=\"card-actions\">\n        <button\n          v-if=\"!isInactive\"\n          class=\"btn role-tertiary bg-primary\"\n          @click.prevent=\"resume\"\n        >\n          <t k=\"inactivity.cta\" />\n        </button>\n\n        <button\n          v-if=\"isInactive\"\n          class=\"btn role-tertiary bg-primary\"\n          @click.prevent=\"refresh\"\n        >\n          <t k=\"inactivity.ctaExpired\" />\n        </button>\n      </div>\n    </template>\n  </ModalWithCard>\n</template>\n\n<style lang=\"scss\" scoped>\n.card-actions {\n    display: flex;\n    width: 100%;\n    justify-content: flex-end;\n}\n</style>\n"]}]}