{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/machine-config/azure.vue?vue&type=style&index=0&id=569532a4&scoped=true&lang=css","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/machine-config/azure.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5pbmxpbmUtYmFubmVyLWNvbnRhaW5lcnsKICBwb3NpdGlvbjogcmVsYXRpdmU7Cn0KLmlubGluZS1lcnJvci1iYW5uZXIgewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB3aWR0aDoxMDAlCn0K"},{"version":3,"sources":["azure.vue"],"names":[],"mappings":";AA02BA;AACA;AACA;AACA;AACA;AACA;AACA","file":"azure.vue","sourceRoot":"node_modules/@rancher/shell/machine-config","sourcesContent":["<script>\nimport Loading from '@shell/components/Loading';\nimport CreateEditView from '@shell/mixins/create-edit-view';\nimport FormValidation from '@shell/mixins/form-validation';\nimport { stringify, exceptionToErrorsArray } from '@shell/utils/error';\nimport { Banner } from '@components/Banner';\nimport merge from 'lodash/merge';\nimport isEmpty from 'lodash/isEmpty';\nimport LabeledSelect from '@shell/components/form/LabeledSelect';\nimport { LabeledInput } from '@components/Form/LabeledInput';\nimport { Checkbox } from '@components/Form/Checkbox';\nimport ArrayList from '@shell/components/form/ArrayList';\nimport { randomStr } from '@shell/utils/string';\nimport { addParam, addParams } from '@shell/utils/url';\nimport KeyValue from '@shell/components/form/KeyValue';\nimport { RadioGroup } from '@components/Form/Radio';\nimport { _CREATE, _EDIT } from '@shell/config/query-params';\n\nexport const azureEnvironments = [\n  { value: 'AzurePublicCloud' },\n  { value: 'AzureGermanCloud' },\n  { value: 'AzureChinaCloud' },\n  { value: 'AzureUSGovernmentCloud' },\n];\n\nconst defaultConfig = {\n  acceleratedNetworking: false,\n  availabilitySet:       'docker-machine',\n  clientId:              '',\n  clientSecret:          '',\n  customData:            '',\n  diskSize:              '30',\n  dns:                   '',\n  environment:           'AzurePublicCloud',\n  faultDomainCount:      '3',\n  image:                 'canonical:UbuntuServer:18.04-LTS:latest',\n  location:              'westus',\n  managedDisks:          false,\n  noPublicIp:            false,\n  nsg:                   null,\n  privateIpAddress:      null,\n  resourceGroup:         'docker-machine',\n  size:                  'Standard_D2_v2',\n  sshUser:               'docker-user',\n  staticPublicIp:        false,\n  storageType:           'Standard_LRS',\n  subnet:                'docker-machine',\n  subnetPrefix:          '192.168.0.0/16',\n  subscriptionId:        '',\n  tenantId:              '',\n  updateDomainCount:     '5',\n  usePrivateIp:          false,\n  vnet:                  'docker-machine-vnet',\n  openPort:              [\n    '6443/tcp',\n    '2379/tcp',\n    '2380/tcp',\n    '8472/udp',\n    '4789/udp',\n    '9796/tcp',\n    '10256/tcp',\n    '10250/tcp',\n    '10251/tcp',\n    '10252/tcp',\n  ],\n  tags: null\n};\n\nconst storageTypes = [\n  {\n    name:  'Standard LRS',\n    value: 'Standard_LRS',\n  },\n  {\n    name:  'Standard ZRS',\n    value: 'Standard_ZRS',\n  },\n  {\n    name:  'Standard GRS',\n    value: 'Standard_GRS',\n  },\n  {\n    name:  'Standard RAGRS',\n    value: 'Standard_RAGRS',\n  },\n  {\n    name:  'Premium LRS',\n    value: 'Premium_LRS',\n  },\n  {\n    name:  'Standard SSD LRS',\n    value: 'StandardSSD_LRS'\n  }\n];\nconst DEFAULT_REGION = 'westus';\n\nexport default {\n  components: {\n    ArrayList,\n    Banner,\n    Checkbox,\n    KeyValue,\n    LabeledInput,\n    LabeledSelect,\n    Loading,\n    RadioGroup\n  },\n\n  mixins: [CreateEditView, FormValidation],\n\n  props: {\n    credentialId: {\n      type:     String,\n      required: true,\n    },\n    mode: {\n      type:    String,\n      default: 'create',\n    },\n    uuid: {\n      type:     String,\n      required: true,\n    },\n    disabled: {\n      type:    Boolean,\n      default: false\n    },\n  },\n\n  async fetch() {\n    this.errors = [];\n    this.initTags();\n\n    try {\n      const {\n        clientId,\n        clientSecret,\n        environment,\n        subscriptionId,\n        tenantId,\n      } = (this.credential?.decodedData || {});\n\n      if (!isEmpty(clientId)) {\n        this.value.clientId = clientId;\n      }\n      if (!isEmpty(clientSecret)) {\n        this.value.clientSecret = clientSecret;\n      }\n      if (!isEmpty(environment)) {\n        this.value.environment = environment;\n      }\n      if (!isEmpty(subscriptionId)) {\n        this.value.subscriptionId = subscriptionId;\n      }\n      if (!isEmpty(tenantId)) {\n        this.value.tenantId = tenantId;\n      }\n\n      this.locationOptions = await this.$store.dispatch('management/request', {\n        url:    addParam('/meta/aksLocations', 'cloudCredentialId', this.credentialId),\n        method: 'GET',\n      });\n\n      if (this.mode === _CREATE) {\n        this.value.location = DEFAULT_REGION;\n\n      // when you edit an Azure cluster and add a new machine pool (edit)\n      // the location field doesn't come populated which causes the vmSizes request\n      // to return 200 but with a null response (also a bunch of other fields are undefined...)\n      // so let's prefill them with the defaults\n      } else if (this.mode === _EDIT && !this.value?.location) {\n        for (const key in this.defaultConfig) {\n          if (this.value[key] === undefined) {\n            this.$set(this.value, key, this.defaultConfig[key]);\n          }\n        }\n      }\n\n      this.vmSizes = await this.$store.dispatch('management/request', {\n        url: addParams('/meta/aksVMSizesV2', {\n          cloudCredentialId: this.credentialId,\n          region:            this.value.location\n        }),\n        method: 'GET',\n      });\n\n      // set correct option for useAvailabilitySet (will consider correct state for UI form based on availabilitySet)\n      if (this.mode === _CREATE) {\n        this.useAvailabilitySet = true;\n      } else {\n        this.useAvailabilitySet = !!this.value.availabilitySet;\n      }\n    } catch (e) {\n      this.errors = exceptionToErrorsArray(e);\n    }\n  },\n\n  data() {\n    return {\n      azureEnvironments,\n      defaultConfig,\n      storageTypes,\n      credential:         null,\n      locationOptions:    [],\n      loading:            false,\n      useAvailabilitySet: false,\n      vmSizes:            [],\n      valueCopy:          this.value,\n    };\n  },\n\n  watch: {\n    credentialId() {\n      this.$fetch();\n    },\n\n    'value.availabilityZone'(neu) {\n      if (neu && (!this.value.managedDisks || !this.value.enablePublicIpStandardSku || !this.value.staticPublicIp)) {\n        this.$emit('expandAdvanced');\n      }\n    }\n  },\n\n  computed: {\n    locationOptionsInDropdown() {\n      const locationOptionsCopy = [...this.locationOptions];\n\n      return locationOptionsCopy.sort((a, b) => {\n        // Hopefully it's easier to find a region if the list is in\n        // alphabetical order.\n        if (a.name > b.name) {\n          return 1;\n        }\n        if (a.name < b.name) {\n          return -1;\n        }\n\n        return 0;\n      } )\n        .map((option) => {\n          return {\n            displayName: `${ option.displayName } (${ option.name })`,\n            name:        option.name,\n          };\n        });\n    },\n    vmsWithAcceleratedNetworking() {\n      return this.vmSizes.filter((vmData) => {\n        return vmData.AcceleratedNetworkingSupported;\n      });\n    },\n    vmsWithoutAcceleratedNetworking() {\n      return this.vmSizes.filter((vmData) => {\n        return !vmData.AcceleratedNetworkingSupported;\n      });\n    },\n    selectedVmSizeSupportsAN() {\n      const selectedSizeIsValid = !!this.vmsWithAcceleratedNetworking.find((vmData) => {\n        return this.value.size === vmData.Name;\n      });\n\n      return selectedSizeIsValid;\n    },\n    vmSizeAcceleratedNetworkingWarning() {\n      if (!this.selectedVmSizeSupportsAN && this.value.acceleratedNetworking) {\n        return this.t('cluster.machineConfig.azure.size.selectedSizeAcceleratedNetworkingWarning');\n      }\n\n      return '';\n    },\n    vmsWithAvailabilityZones() {\n      return this.vmSizes.filter((vmData) => {\n        return vmData.AvailabilityZones.length > 0;\n      });\n    },\n    vmSizeAvailabilityWarning() {\n      const selectedVmIsAvailableInSelectedRegion = this.vmSizes.filter((vmData) => {\n        return vmData.Name === this.value.size;\n      }).length > 0;\n\n      if (!selectedVmIsAvailableInSelectedRegion) {\n        return this.t('cluster.machineConfig.azure.size.availabilityWarning');\n      }\n\n      return '';\n    },\n    selectedVmSizeHasZones() {\n      const dataForSelectedSize = this.vmsWithAvailabilityZones.filter((vmData) => {\n        const { Name } = vmData;\n\n        return Name === this.value.size;\n      });\n\n      if (dataForSelectedSize.length > 0) {\n        return dataForSelectedSize[0].AvailabilityZones.length > 0;\n      }\n\n      return false;\n    },\n    vmAvailabilityZoneWarning() {\n      if (this.useAvailabilitySet) {\n        return '';\n      }\n      if (this.vmsWithAvailabilityZones.length === 0) {\n        /**\n         * Show UI warning: Availability zones are not supported in the selected\n         * region. Please select a different region or use an\n         * availability set instead.\n         */\n        return this.t('cluster.machineConfig.azure.size.regionDoesNotSupportAzs');\n      }\n\n      if (this.vmsWithAvailabilityZones.length > 0 && !this.selectedVmSizeHasZones) {\n        /**\n         * Show UI warning: The selected region does not support availability\n         * zones for the selected VM size. Please select a\n         * different region or VM size.\n         */\n        return this.t('cluster.machineConfig.azure.size.regionSupportsAzsButNotThisSize');\n      }\n\n      return '';\n    },\n    vmSizeOptionsForDropdown() {\n      // example vmSize option from backend:\n      // {\n      //   AcceleratedNetworkingSupported: false,\n      //   AvailabilityZones: [],\n      //   Name: \"Basic_A0\"\n      // }\n\n      const out = [\n        { kind: 'group', label: this.t('cluster.machineConfig.azure.size.supportsAcceleratedNetworking') },\n        ...this.vmsWithAcceleratedNetworking,\n        { kind: 'group', label: this.t('cluster.machineConfig.azure.size.doesNotSupportAcceleratedNetworking') },\n        ...this.vmsWithoutAcceleratedNetworking,\n      ];\n\n      if (!this.selectedVmSizeExistsInSelectedRegion) {\n        out.push({\n          Name:     this.value.size,\n          disabled: true\n        });\n      }\n\n      return out.map((vmData) => {\n        const { Name } = vmData;\n\n        if (vmData.kind === 'group') {\n          return vmData;\n        }\n\n        return {\n          label:    Name,\n          value:    Name,\n          disabled: vmData.disabled || false,\n        };\n      });\n    },\n    selectedVmSizeExistsInSelectedRegion() {\n      // If the user selects a region and then a VM size\n      // that does not exist in the region, the list of VM\n      // sizes will update, causing the selected VM size\n      // to disappear. A disappearing VM size seems like a\n      // bad UX, so this value allows the value to be\n      // added to the VM size dropdown, while an error message\n      // indicates that the size is invalid.\n      if (this.vmSizes.find((size) => {\n        return size.Name === this.value.size;\n      })) {\n        return true;\n      }\n\n      return false;\n    },\n    availableZones() {\n      const data = this.vmSizes.filter((vmData) => {\n        return vmData.Name === this.value.size;\n      });\n\n      if (data.length > 0) {\n        return data[0].AvailabilityZones.sort((a, b) => {\n          return a - b;\n        });\n      }\n\n      return [];\n    },\n  },\n\n  created() {\n    if (this.mode === 'create') {\n      for (const key in this.defaultConfig) {\n        if (this.value[key] === undefined) {\n          this.$set(this.value, key, this.defaultConfig[key]);\n        }\n      }\n      merge(this.value, this.defaultConfig);\n\n      this.value.nsg = `rancher-managed-${ randomStr(8) }`;\n    }\n  },\n\n  methods: {\n    getVmSizeOptionLabel(vmData) {\n      return vmData.label;\n    },\n    handleVmSizeInput($event) {\n      if (this.vmSizeAcceleratedNetworkingWarning) {\n        this.$emit('error', this.vmSizeAcceleratedNetworkingWarning);\n      }\n    },\n    stringify,\n    async getVmSizes() {\n      this.loading = true;\n      // The list of VM sizes should update when the\n      // selected region is changed because different\n      // VMs are supported in different regions.\n\n      // Example vmSize option from backend:\n      // {\n      //   AcceleratedNetworkingSupported: false,\n      //   AvailabilityZones: [],\n      //   Name: \"Basic_A0\"\n      // }\n      try {\n        this.vmSizes = await this.$store.dispatch('management/request', {\n          url: addParams('/meta/aksVMSizesV2', {\n            cloudCredentialId: this.credentialId,\n            region:            this.value.location\n          }),\n          method: 'GET',\n        });\n      } catch (e) {\n        this.errors = exceptionToErrorsArray(e);\n      }\n      this.loading = false;\n    },\n    setLocation(location) {\n      this.value.location = location?.name;\n      this.getVmSizes();\n    },\n    initTags() {\n      const parts = (this.value.tags || '').split(/,/);\n      const out = {};\n\n      let i = 0;\n\n      while ( i + 1 < parts.length ) {\n        const key = `${ parts[i] }`.trim();\n        const value = `${ parts[i + 1] }`.trim();\n\n        if ( key ) {\n          out[key] = value;\n        }\n\n        i += 2;\n      }\n\n      this.tags = out;\n    },\n\n    updateTags(tags) {\n      const ary = [];\n\n      for ( const k in tags ) {\n        ary.push(k, tags[k]);\n      }\n\n      this.$set(this.value, 'tags', ary.join(','));\n    },\n    handleAzChange() {\n      if (this.value.availabilitySet) {\n      // If an availability set exists, clear it out when\n      // an availability zone is selected. Otherwise the\n      // set will take precedent and the zone will not be saved.\n        this.value.availabilitySet = null;\n      }\n    }\n  },\n};\n</script>\n\n<template>\n  <Loading\n    v-if=\"$fetchState.pending\"\n    :delayed=\"true\"\n  />\n  <div v-else-if=\"errors.length\">\n    <div\n      v-for=\"(err, idx) in errors\"\n      :key=\"idx\"\n    >\n      <Banner\n        color=\"error\"\n        :label=\"stringify(err)\"\n      />\n    </div>\n  </div>\n  <div v-else>\n    <div class=\"row mt-20\">\n      <div class=\"col span-6\">\n        <LabeledSelect\n          v-model=\"value.environment\"\n          :mode=\"mode\"\n          :options=\"azureEnvironments\"\n          option-key=\"value\"\n          option-label=\"value\"\n          :searchable=\"false\"\n          :required=\"true\"\n          :label=\"t('cluster.machineConfig.azure.environment.label')\"\n          :disabled=\"disabled\"\n        />\n      </div>\n      <div class=\"col span-6\">\n        <LabeledSelect\n          :value=\"value.location\"\n          :mode=\"mode\"\n          :options=\"locationOptionsInDropdown\"\n          option-key=\"name\"\n          option-label=\"displayName\"\n          :searchable=\"true\"\n          :required=\"true\"\n          :label=\"t('cluster.machineConfig.azure.location.label')\"\n          :disabled=\"disabled\"\n          @input=\"setLocation\"\n        />\n      </div>\n    </div>\n    <div class=\"row mt-20\">\n      <div class=\"col span-4\">\n        <LabeledInput\n          v-model=\"value.resourceGroup\"\n          :mode=\"mode\"\n          :label=\"t('cluster.machineConfig.azure.resourceGroup.label')\"\n          :disabled=\"disabled\"\n        />\n      </div>\n\n      <div\n        v-if=\"useAvailabilitySet\"\n        class=\"col span-4\"\n      >\n        <LabeledInput\n          v-model=\"value.availabilitySet\"\n          :mode=\"mode\"\n          :label=\"t('cluster.machineConfig.azure.availabilitySet.label')\"\n          :tooltip=\"t('cluster.machineConfig.azure.availabilitySet.description')\"\n          :disabled=\"disabled\"\n        />\n      </div>\n      <div\n        v-if=\"!useAvailabilitySet\"\n        class=\"col span-4\"\n      >\n        <i\n          v-if=\"loading\"\n          class=\"icon icon-spinner delayed-loader\"\n        />\n        <LabeledSelect\n          v-else\n          v-model=\"value.availabilityZone\"\n          :mode=\"mode\"\n          :options=\"availableZones\"\n          :label=\"t('cluster.machineConfig.azure.availabilityZone.label')\"\n          :tooltip=\"t('cluster.machineConfig.azure.availabilityZone.description')\"\n          :disabled=\"disabled || !!vmAvailabilityZoneWarning\"\n          @input=\"handleAzChange\"\n        />\n        <Banner\n          v-if=\"vmAvailabilityZoneWarning\"\n          color=\"error\"\n          :label=\"vmAvailabilityZoneWarning\"\n        />\n      </div>\n      <div class=\"col span-4\">\n        <RadioGroup\n          v-model=\"useAvailabilitySet\"\n          name=\"etcd-s3\"\n          :options=\"[true, false]\"\n          :labels=\"[t('cluster.machineConfig.azure.availabilitySet.label'),t('cluster.machineConfig.azure.availabilityZone.label')]\"\n          :mode=\"mode\"\n        />\n      </div>\n    </div>\n    <hr class=\"mt-20\">\n    <div class=\"row mt-20\">\n      <div class=\"col span-6\">\n        <LabeledInput\n          v-model=\"value.image\"\n          :mode=\"mode\"\n          :label=\"t('cluster.machineConfig.azure.image.label')\"\n          :tooltip=\"t('cluster.machineConfig.azure.image.help')\"\n          :disabled=\"disabled\"\n        />\n      </div>\n      <div class=\"col span-6\">\n        <i\n          v-if=\"loading\"\n          class=\"icon icon-spinner delayed-loader\"\n        />\n        <LabeledSelect\n          v-else\n          v-model=\"value.size\"\n          :mode=\"mode\"\n          :options=\"vmSizeOptionsForDropdown\"\n          :get-option-label=\"getVmSizeOptionLabel\"\n          :searchable=\"true\"\n          :required=\"true\"\n          :label=\"t('cluster.machineConfig.azure.size.label')\"\n          :tooltip=\"value.acceleratedNetworking ? t('cluster.machineConfig.azure.size.tooltip') : ''\"\n          :disabled=\"disabled\"\n          @selecting=\"handleVmSizeInput\"\n        />\n        <Banner\n          v-if=\"vmSizeAcceleratedNetworkingWarning\"\n          color=\"error\"\n          :label=\"vmSizeAcceleratedNetworkingWarning\"\n        />\n        <Banner\n          v-else-if=\"vmSizeAvailabilityWarning\"\n          color=\"error\"\n          :label=\"vmSizeAvailabilityWarning\"\n        />\n      </div>\n    </div>\n\n    <portal :to=\"'advanced-' + uuid\">\n      <div v-if=\"useAvailabilitySet\">\n        <h2>{{ t('cluster.machineConfig.azure.sections.availabilitySetConfiguration') }}</h2>\n        <div class=\"row mt-20\">\n          <div class=\"col span-6\">\n            <LabeledInput\n              v-model=\"value.faultDomainCount\"\n              :mode=\"mode\"\n              :label=\"t('cluster.machineConfig.azure.faultDomainCount.label')\"\n              :tooltip=\"t('cluster.machineConfig.azure.faultDomainCount.help')\"\n              :disabled=\"disabled\"\n            />\n          </div>\n          <div class=\"col span-6\">\n            <LabeledInput\n              v-model=\"value.updateDomainCount\"\n              :mode=\"mode\"\n              :label=\"t('cluster.machineConfig.azure.updateDomainCount.label')\"\n              :tooltip=\"t('cluster.machineConfig.azure.updateDomainCount.help')\"\n              :disabled=\"disabled\"\n            />\n          </div>\n        </div>\n      </div>\n      <hr class=\"mt-20 mb-20\">\n      <h2>{{ t('cluster.machineConfig.azure.sections.purchasePlan') }}</h2>\n      <div class=\"row mt-20\">\n        <div class=\"col span-6\">\n          <LabeledInput\n            v-model=\"value.plan\"\n            :mode=\"mode\"\n            :label=\"t('cluster.machineConfig.azure.plan.label')\"\n            :placeholder=\"t('cluster.machineConfig.azure.plan.placeholder')\"\n            :disabled=\"disabled\"\n          />\n        </div>\n      </div>\n      <hr class=\"mt-20\">\n      <h2>{{ t('cluster.machineConfig.azure.sections.network') }}</h2>\n      <div class=\"row mt-20 mb-20\">\n        <div class=\"col span-6\">\n          <LabeledInput\n            v-model=\"value.subnet\"\n            :mode=\"mode\"\n            :label=\"t('cluster.machineConfig.azure.subnet.label')\"\n            :disabled=\"disabled\"\n          />\n        </div>\n        <div class=\"col span-6\">\n          <LabeledInput\n            v-model=\"value.subnetPrefix\"\n            :mode=\"mode\"\n            :label=\"t('cluster.machineConfig.azure.subnetPrefix.label')\"\n            :disabled=\"disabled\"\n          />\n        </div>\n      </div>\n      <div class=\"row mt-20\">\n        <div class=\"col span-6\">\n          <Checkbox\n            v-model=\"value.acceleratedNetworking\"\n            :disabled=\"(!value.acceleratedNetworking && !selectedVmSizeSupportsAN)\"\n            :mode=\"mode\"\n            :label=\"t('cluster.machineConfig.azure.acceleratedNetworking.label')\"\n          />\n          <Banner\n            v-if=\"!selectedVmSizeSupportsAN && value.acceleratedNetworking\"\n            color=\"error\"\n            :label=\"t('cluster.machineConfig.azure.size.selectedSizeAcceleratedNetworkingWarning')\"\n          />\n        </div>\n      </div>\n      <div class=\"row mt-20\">\n        <div class=\"col span-6\">\n          <LabeledInput\n            v-model=\"value.vnet\"\n            :mode=\"mode\"\n            :label=\"t('cluster.machineConfig.azure.vnet.label')\"\n            :placeholder=\"t('cluster.machineConfig.azure.vnet.placeholder')\"\n            :disabled=\"disabled\"\n          />\n        </div>\n        <div class=\"col span-6 inline-banner-container\">\n          <h3><t k=\"cluster.machineConfig.azure.publicIpOptions.header\" /></h3>\n          <Checkbox\n            v-model=\"value.noPublicIp\"\n            :mode=\"mode\"\n            :label=\"t('cluster.machineConfig.azure.publicIpOptions.noPublic.label')\"\n          />\n          <Checkbox\n            v-model=\"value.staticPublicIp\"\n            :mode=\"mode\"\n            :label=\"t('cluster.machineConfig.azure.publicIpOptions.staticPublicIp.label')\"\n          />\n          <Checkbox\n            v-model=\"value.enablePublicIpStandardSku\"\n            :mode=\"mode\"\n            :label=\"t('cluster.machineConfig.azure.publicIpOptions.standardSKU.label')\"\n          />\n          <div\n            v-if=\"value.availabilityZone && (!value.staticPublicIp || !value.enablePublicIpStandardSku)\"\n            class=\"inline-error-banner\"\n          >\n            <Banner\n              v-if=\"!value.staticPublicIp && !value.enablePublicIpStandardSku\"\n              color=\"error\"\n              :label=\"t('cluster.machineConfig.azure.availabilityZone.publicIpAndSKUWarning')\"\n            />\n            <Banner\n              v-else-if=\"!value.staticPublicIp\"\n              color=\"error\"\n              :label=\"t('cluster.machineConfig.azure.availabilityZone.publicIpWarning')\"\n            />\n            <Banner\n              v-else\n              color=\"error\"\n              :label=\"t('cluster.machineConfig.azure.availabilityZone.standardSKUWarning')\"\n            />\n          </div>\n        </div>\n      </div>\n      <div class=\"row mt-20\">\n        <div class=\"col span-6\">\n          <Checkbox\n            v-model=\"value.usePrivateIp\"\n            :mode=\"mode\"\n            :label=\"t('cluster.machineConfig.azure.usePrivateIp.label')\"\n          />\n          <LabeledInput\n            v-model=\"value.privateIpAddress\"\n            :mode=\"mode\"\n            class=\"mt-10\"\n            :label=\"t('cluster.machineConfig.azure.privateIp.label')\"\n            :disabled=\"!value.usePrivateIp\"\n          />\n        </div>\n      </div>\n      <div class=\"row mt-20\">\n        <div class=\"col span-6\">\n          <LabeledInput\n            v-model=\"value.nsg\"\n            :mode=\"mode\"\n            class=\"mt-10\"\n            :label=\"t('cluster.machineConfig.azure.nsg.label')\"\n            :tooltip=\"t('cluster.machineConfig.azure.nsg.help')\"\n            :disabled=\"disabled\"\n          />\n        </div>\n        <div class=\"col span-6\">\n          <LabeledInput\n            v-model=\"value.dns\"\n            :mode=\"mode\"\n            class=\"mt-10\"\n            :label=\"t('cluster.machineConfig.azure.dns.label')\"\n            :tooltip=\"t('cluster.machineConfig.azure.dns.help')\"\n            :disabled=\"disabled\"\n          />\n        </div>\n      </div>\n      <hr class=\"mt-20 mb-20\">\n      <h2>{{ t('cluster.machineConfig.azure.sections.disks') }}</h2>\n      <div class=\"row mt-20 mb-20\">\n        <div class=\"col span-6\">\n          <LabeledSelect\n            v-model=\"value.storageType\"\n            :mode=\"mode\"\n            :options=\"storageTypes\"\n            :searchable=\"false\"\n            :required=\"true\"\n            :label=\"t('cluster.machineConfig.azure.storageType.label')\"\n            :disabled=\"disabled\"\n            option-key=\"value\"\n            option-label=\"name\"\n          />\n          <Banner\n            v-if=\"value.storageType === 'StandardSSD_LRS' && !value.managedDisks\"\n            color=\"error\"\n            :label=\"t('cluster.machineConfig.azure.storageType.warning')\"\n          />\n        </div>\n        <div class=\"col span-6 inline-banner-container\">\n          <Checkbox\n            v-model=\"value.managedDisks\"\n            :mode=\"mode\"\n            :label=\"t('cluster.machineConfig.azure.managedDisks.label')\"\n            :disabled=\"disabled\"\n          />\n          <Banner\n            v-if=\"value.availabilityZone && !value.managedDisks\"\n            color=\"error\"\n            :label=\"t('cluster.machineConfig.azure.availabilityZone.managedDisksWarning')\"\n          />\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col span-6\">\n          <LabeledInput\n            v-model=\"value.diskSize\"\n            :mode=\"mode\"\n            :label=\"t('cluster.machineConfig.azure.managedDisksSize.label')\"\n            :disabled=\"disabled\"\n          />\n        </div>\n        <div class=\"col span-6\">\n          <LabeledInput\n            v-model=\"value.sshUser\"\n            :mode=\"mode\"\n            :label=\"t('cluster.machineConfig.azure.sshUser.label')\"\n            :disabled=\"disabled\"\n          />\n        </div>\n      </div>\n      <div class=\"row mt-20\">\n        <div class=\"col span-6\">\n          <ArrayList\n            v-model=\"value.openPort\"\n            table-class=\"fixed\"\n            :mode=\"mode\"\n            :title=\"t('cluster.machineConfig.azure.openPort.label')\"\n            :add-label=\"t('cluster.machineConfig.azure.openPort.add')\"\n            :show-protip=\"true\"\n            :protip=\"t('cluster.machineConfig.azure.openPort.help')\"\n            :disabled=\"disabled\"\n          />\n        </div>\n      </div>\n\n      <div class=\"row mt-20\">\n        <div class=\"col span-12\">\n          <h3><t k=\"cluster.machineConfig.azure.tags.label\" /></h3>\n          <KeyValue\n            :value=\"tags\"\n            :mode=\"mode\"\n            :read-allowed=\"false\"\n            :label=\"t('cluster.machineConfig.amazonEc2.tagTitle')\"\n            :add-label=\"t('labels.addTag')\"\n            :initial-empty-row=\"true\"\n            :disabled=\"disabled\"\n            @input=\"updateTags\"\n          />\n        </div>\n      </div>\n    </portal>\n  </div>\n</template>\n\n<style scoped>\n.inline-banner-container{\n  position: relative;\n}\n.inline-error-banner {\n  position: absolute;\n  width:100%\n}\n</style>\n"]}]}