{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/monitoring.coreos.com.alertmanagerconfig/receiverConfig.vue?vue&type=style&index=0&id=61654c7c&lang=scss","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/monitoring.coreos.com.alertmanagerconfig/receiverConfig.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5yZWNlaXZlciB7CiAgJG1hcmdpbjogMTBweDsKICAkbG9nbzogNjBweDsKCiAgLmJveC1jb250YWluZXIuY3JlYXRlLXJlc291cmNlLWNvbnRhaW5lciB7CiAgICBkaXNwbGF5OiBmbGV4OwogICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOwogICAgZmxleC13cmFwOiB3cmFwOwogICAgbWFyZ2luOiAwIC0xKiRtYXJnaW47CgogICAgLnN1YnR5cGUtYmFubmVyewogICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7CiAgICB9CiAgfQoKICAucmlnaHQgewogICAgcGFkZGluZzogMzBweDsKICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgdmFyKC0tYm9yZGVyKTsKICB9CgogIC5sb2dvIHsKICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgIHdpZHRoOiAkbG9nbzsKICAgIGhlaWdodDogJGxvZ287CiAgICBib3JkZXItcmFkaXVzOiBjYWxjKDIgKiB2YXIoLS1ib3JkZXItcmFkaXVzKSk7CiAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7CiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOwoKICAgIGltZyB7CiAgICAgIHdpZHRoOiAkbG9nbyAtIDRweDsKICAgICAgaGVpZ2h0OiAkbG9nbyAtIDRweDsKICAgICAgb2JqZWN0LWZpdDogY29udGFpbjsKICAgICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgICB0b3A6IDJweDsKICAgIH0KICB9CgogIC5uYW1lIHsKICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7CiAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7CiAgICBtYXJnaW4tYm90dG9tOiAwOwogICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsKICB9Cn0K"},{"version":3,"sources":["receiverConfig.vue"],"names":[],"mappings":";AAiaA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"receiverConfig.vue","sourceRoot":"node_modules/@rancher/shell/edit/monitoring.coreos.com.alertmanagerconfig","sourcesContent":["<script>\nimport { MONITORING } from '@shell/config/types';\nimport ArrayListGrouped from '@shell/components/form/ArrayListGrouped';\nimport Loading from '@shell/components/Loading';\nimport { Banner } from '@components/Banner';\nimport CruResource from '@shell/components/CruResource';\nimport { LabeledInput } from '@components/Form/LabeledInput';\nimport Tabbed from '@shell/components/Tabbed';\nimport Tab from '@shell/components/Tabbed/Tab';\nimport YamlEditor, { EDITOR_MODES } from '@shell/components/YamlEditor';\nimport CreateEditView from '@shell/mixins/create-edit-view';\nimport jsyaml from 'js-yaml';\nimport ButtonDropdown from '@shell/components/ButtonDropdown';\nimport { _CREATE, _VIEW } from '@shell/config/query-params';\nimport FormValidation from '@shell/mixins/form-validation';\n\nexport const RECEIVERS_TYPES = [\n  {\n    name:  'slack',\n    label: 'monitoringReceiver.slack.label',\n    title: 'monitoringReceiver.slack.title',\n    info:  'monitoringReceiver.slack.info',\n    key:   'slackConfigs',\n    logo:  require(`@shell/assets/images/vendor/slack.svg`)\n  },\n  {\n    name:  'email',\n    label: 'monitoringReceiver.email.label',\n    title: 'monitoringReceiver.email.title',\n    key:   'emailConfigs',\n    logo:  require(`@shell/assets/images/vendor/email.svg`)\n  },\n  {\n    name:  'pagerduty',\n    label: 'monitoringReceiver.pagerduty.label',\n    title: 'monitoringReceiver.pagerduty.title',\n    info:  'monitoringReceiver.pagerduty.info',\n    key:   'pagerdutyConfigs',\n    logo:  require(`@shell/assets/images/vendor/pagerduty.svg`)\n  },\n  {\n    name:  'opsgenie',\n    label: 'monitoringReceiver.opsgenie.label',\n    title: 'monitoringReceiver.opsgenie.title',\n    key:   'opsgenieConfigs',\n    logo:  require(`@shell/assets/images/vendor/email.svg`)\n  },\n  {\n    name:  'webhook',\n    label: 'monitoringReceiver.webhook.label',\n    title: 'monitoringReceiver.webhook.title',\n    key:   'webhookConfigs',\n    logo:  require(`@shell/assets/images/vendor/webhook.svg`),\n  },\n  {\n    name:  'custom',\n    label: 'monitoringReceiver.custom.label',\n    title: 'monitoringReceiver.custom.title',\n    info:  'monitoringReceiver.custom.info',\n    key:   'webhookConfigs',\n    logo:  require(`@shell/assets/images/vendor/custom.svg`)\n  },\n];\n\nexport default {\n  components: {\n    ArrayListGrouped,\n    Banner,\n    ButtonDropdown,\n    CruResource,\n    LabeledInput,\n    Loading,\n    Tabbed,\n    Tab,\n    YamlEditor\n  },\n\n  props: {\n\n    value: {\n      type:    Object,\n      default: () => {\n        return {};\n      }\n    },\n    mode: {\n      type:    String,\n      default: ''\n    },\n    alertmanagerConfigResource: {\n      type:     Object,\n      required: true\n    },\n    alertmanagerConfigId: {\n      type:     String,\n      required: true\n    },\n    saveOverride: {\n      type:     Function,\n      required: true\n    },\n  },\n\n  mixins: [CreateEditView, FormValidation],\n\n  data(props) {\n    const currentReceiver = {};\n    const mode = this.$route.query.mode;\n\n    if (mode === _CREATE) {\n      RECEIVERS_TYPES.forEach((receiverType) => {\n        this.$set(currentReceiver, receiverType.key, currentReceiver[receiverType.key] || []);\n      });\n    }\n\n    /**\n     * example receiver value:\n     * {\n     *   name: 'name',\n     *   slackConfigs: [...]\n     * }\n     */\n    const receiverSchema = this.$store.getters['cluster/schemaFor'](MONITORING.SPOOFED.ALERTMANAGERCONFIG_RECEIVER_SPEC);\n\n    if (!receiverSchema) {\n      throw new Error(\"Can't render the form because the AlertmanagerConfig schema is not loaded yet.\");\n    }\n\n    const expectedFields = Object.keys(receiverSchema.resourceFields);\n\n    const suffix = {};\n\n    Object.keys(this.value).forEach((key) => {\n      if (!expectedFields.includes(key)) {\n        suffix[key] = this.value[key];\n      }\n    });\n\n    let suffixYaml = jsyaml.dump(suffix);\n\n    if (suffixYaml.trim() === '{}') {\n      suffixYaml = '';\n    }\n\n    return {\n      create:         _CREATE,\n      EDITOR_MODES,\n      expectedFields,\n      fileFound:      false,\n      receiverTypes:  RECEIVERS_TYPES,\n      suffixYaml,\n      view:           _VIEW,\n      yamlError:      '',\n      fvFormRuleSets: [\n        { path: 'name', rules: ['required', 'duplicateName'] }\n      ],\n      fvReportedValidationPaths: ['value']\n    };\n  },\n\n  mounted() {\n    if (this.mode === this.create) {\n      if (!this.alertmanagerConfigResource.spec.receivers) {\n        this.alertmanagerConfigResource.spec.receivers = [];\n      }\n      this.alertmanagerConfigResource.spec.receivers.push(this.value);\n    }\n  },\n\n  computed: {\n    editorMode() {\n      if ( this.$route.query.mode === _VIEW ) {\n        return EDITOR_MODES.VIEW_CODE;\n      }\n\n      return EDITOR_MODES.EDIT_CODE;\n    },\n    alertmanagerConfigNamespace() {\n      return this.alertmanagerConfigResource?.metadata?.namespace || '';\n    },\n    receiverNameDisabled() {\n      return this.$route.query.mode === _VIEW;\n    },\n    fvExtraRules() {\n      return {\n        duplicateName: () => {\n          const receiversArray = this.alertmanagerConfigResource.spec.receivers;\n          const receiverNamesArray = receiversArray.map((R) => R.name);\n          const receiversSet = new Set(receiverNamesArray);\n\n          if (receiversArray.length !== receiversSet.size) {\n            return this.$store.getters['i18n/t']('monitoring.alerting.validation.duplicatedReceiverName', { name: this.value.name });\n          }\n        }\n      };\n    }\n  },\n\n  watch: {\n    suffixYaml(value) {\n      try {\n        // We need this step so we don't just keep adding new keys when modifying the custom field\n        Object.keys(this.value).forEach((key) => {\n          if (!this.expectedFields.includes(key)) {\n            this.$delete(this.value, key);\n          }\n        });\n\n        const suffix = jsyaml.load(value);\n\n        Object.assign(this.value, suffix);\n        this.yamlError = '';\n      } catch (ex) {\n        this.yamlError = `There was a problem parsing the Custom Config: ${ ex }`;\n      }\n    },\n  },\n\n  methods: {\n    getComponent(name) {\n      return require(`./types/${ name }`).default;\n    },\n\n    navigateTo(receiverType) {\n      this.$refs.tabbed.select(receiverType.name);\n    },\n\n    getCount(receiverType) {\n      const found = this.value?.[receiverType.key] || [];\n\n      return found.length;\n    },\n\n    tabChanged({ tab }) {\n      window.scrollTop = 0;\n      if ( tab.name === 'custom' ) {\n        this.$nextTick(() => {\n          if ( this.$refs.customEditor ) {\n            this.$refs.customEditor[0].refresh();\n            this.$refs.customEditor[0].focus();\n          }\n        });\n      }\n    },\n\n    redirectAfterCancel() {\n      this.$router.push(this.alertmanagerConfigResource._detailLocation);\n    },\n\n    createAddOptions(receiverType) {\n      return receiverType.addOptions.map();\n    },\n\n    setError(err) {\n      if (!err) {\n        this.errors = [];\n      } else {\n        this.errors = [err];\n      }\n    }\n  }\n};\n</script>\n\n<template>\n  <CruResource\n    class=\"receiver\"\n    :done-route=\"alertmanagerConfigResource._detailLocation\"\n    :mode=\"mode\"\n    :resource=\"alertmanagerConfigResource\"\n    :subtypes=\"[]\"\n    :can-yaml=\"true\"\n    :errors=\"errors\"\n    :cancel-event=\"true\"\n    :validation-passed=\"fvFormIsValid\"\n    @error=\"e=>errors = e\"\n    @finish=\"saveOverride\"\n    @cancel=\"redirectAfterCancel\"\n  >\n    <div class=\"row mb-10\">\n      <div class=\"col span-6\">\n        <LabeledInput\n          v-model=\"value.name\"\n          :is-disabled=\"receiverNameDisabled\"\n          :label=\"t('generic.name')\"\n          :required=\"true\"\n          :mode=\"mode\"\n          :rules=\"fvGetAndReportPathRules('name')\"\n        />\n      </div>\n    </div>\n    <Tabbed\n      ref=\"tabbed\"\n      :side-tabs=\"true\"\n      default-tab=\"overview\"\n      @changed=\"tabChanged\"\n    >\n      <Tab\n        :label=\"t('generic.overview')\"\n        :weight=\"receiverTypes.length\"\n        name=\"overview\"\n      >\n        <div class=\"box-container create-resource-container \">\n          <div\n            v-for=\"(receiverType, i) in receiverTypes\"\n            :key=\"i\"\n            class=\"mb-10 subtype-banner\"\n            primary-color-var=\"--primary-color\"\n            @click=\"navigateTo(receiverType)\"\n          >\n            <div class=\"left\">\n              <div class=\"logo\">\n                <img :src=\"receiverType.logo\">\n              </div>\n              <h4 class=\"name ml-10\">\n                <t :k=\"receiverType.label\" />\n              </h4>\n            </div>\n            <div\n              v-if=\"receiverType.name !== 'custom'\"\n              class=\"right\"\n            >\n              {{ getCount(receiverType) }}\n            </div>\n          </div>\n        </div>\n      </Tab>\n      <Tab\n        v-for=\"(receiverType, i) in receiverTypes\"\n        :key=\"i\"\n        :label=\"t(receiverType.label)\"\n        :name=\"receiverType.name\"\n        :weight=\"receiverTypes.length - i\"\n      >\n        <YamlEditor\n          v-if=\"receiverType.name === 'custom'\"\n          ref=\"customEditor\"\n          v-model=\"suffixYaml\"\n          :scrolling=\"false\"\n          :editor-mode=\"editorMode\"\n        />\n        <div v-else>\n          <ArrayListGrouped\n            v-model=\"value[receiverType.key]\"\n            class=\"namespace-list\"\n            :mode=\"mode\"\n            :default-add-value=\"{}\"\n            :add-label=\"t('monitoringReceiver.addButton', { type: t(receiverType.label) })\"\n          >\n            <template #default=\"props\">\n              <component\n                :is=\"getComponent(receiverType.name)\"\n                :value=\"props.row.value\"\n                :mode=\"mode\"\n                :namespace=\"alertmanagerConfigNamespace\"\n              />\n            </template>\n          </ArrayListGrouped>\n        </div>\n      </Tab>\n    </Tabbed>\n  </CruResource>\n</template>\n\n<style lang=\"scss\">\n  .receiver {\n    $margin: 10px;\n    $logo: 60px;\n\n    .box-container.create-resource-container {\n      display: flex;\n      justify-content: space-between;\n      flex-wrap: wrap;\n      margin: 0 -1*$margin;\n\n      .subtype-banner{\n        justify-content: space-between;\n        align-items: center;\n        flex-direction: row;\n      }\n    }\n\n    .right {\n      padding: 30px;\n      border-left: 1px solid var(--border);\n    }\n\n    .logo {\n      text-align: center;\n      width: $logo;\n      height: $logo;\n      border-radius: calc(2 * var(--border-radius));\n      overflow: hidden;\n      background-color: white;\n      display: inline-block;\n      vertical-align: middle;\n\n      img {\n        width: $logo - 4px;\n        height: $logo - 4px;\n        object-fit: contain;\n        position: relative;\n        top: 2px;\n      }\n    }\n\n    .name {\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      margin-bottom: 0;\n      display: inline-block;\n      vertical-align: middle;\n    }\n  }\n</style>\n"]}]}