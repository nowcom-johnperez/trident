{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/logging-flow/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/logging-flow/index.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappingsfile":"index.vue","sourceRoot":"node_modules/@rancher/shell/edit/logging-flow","sourcesContent":["<script>\nimport { Banner } from '@components/Banner';\nimport CreateEditView from '@shell/mixins/create-edit-view';\nimport CruResource from '@shell/components/CruResource';\nimport Loading from '@shell/components/Loading';\nimport NameNsDescription from '@shell/components/form/NameNsDescription';\nimport Tabbed from '@shell/components/Tabbed';\nimport Tab from '@shell/components/Tabbed/Tab';\nimport {\n  LOGGING, NAMESPACE, NODE, POD, SCHEMA\n} from '@shell/config/types';\nimport jsyaml from 'js-yaml';\nimport { createYaml } from '@shell/utils/create-yaml';\nimport YamlEditor, { EDITOR_MODES } from '@shell/components/YamlEditor';\nimport { allHash } from '@shell/utils/promise';\nimport { isArray, uniq } from '@shell/utils/array';\nimport { matchRuleIsPopulated } from '@shell/models/logging.banzaicloud.io.flow';\nimport LabeledSelect from '@shell/components/form/LabeledSelect';\nimport { clone, set } from '@shell/utils/object';\nimport isEmpty from 'lodash/isEmpty';\nimport ArrayListGrouped from '@shell/components/form/ArrayListGrouped';\nimport { exceptionToErrorsArray } from '@shell/utils/error';\nimport Match from './Match';\n\nfunction emptyMatch(include = true) {\n  const rule = {\n    select:          !!include,\n    exclude:         !include,\n    labels:          {},\n    hosts:           [],\n    container_names: []\n  };\n\n  return rule;\n}\n\nexport default {\n  components: {\n    Banner,\n    CruResource,\n    LabeledSelect,\n    Loading,\n    NameNsDescription,\n    Tab,\n    Tabbed,\n    YamlEditor,\n    Match,\n    ArrayListGrouped\n  },\n\n  mixins: [CreateEditView],\n\n  async fetch() {\n    const hasAccessToClusterOutputs = this.$store.getters[`cluster/schemaFor`](LOGGING.CLUSTER_OUTPUT);\n    const hasAccessToOutputs = this.$store.getters[`cluster/schemaFor`](LOGGING.OUTPUT);\n    const hasAccessToNamespaces = this.$store.getters[`cluster/schemaFor`](NAMESPACE);\n    const hasAccessToNodes = this.$store.getters[`cluster/schemaFor`](NODE);\n    const hasAccessToPods = this.$store.getters[`cluster/schemaFor`](POD);\n    const isFlow = this.value.type === LOGGING.FLOW;\n\n    const getAllOrDefault = (type, hasAccess) => {\n      return hasAccess ? this.$store.dispatch('cluster/findAll', { type }) : Promise.resolve([]);\n    };\n\n    const hash = await allHash({\n      allOutputs:        getAllOrDefault(LOGGING.OUTPUT, isFlow && hasAccessToOutputs),\n      allClusterOutputs: getAllOrDefault(LOGGING.CLUSTER_OUTPUT, hasAccessToClusterOutputs),\n      allNamespaces:     getAllOrDefault(NAMESPACE, hasAccessToNamespaces),\n      allNodes:          getAllOrDefault(NODE, hasAccessToNodes),\n      allPods:           getAllOrDefault(POD, hasAccessToPods),\n    });\n\n    for ( const k of Object.keys(hash) ) {\n      this[k] = hash[k] || [];\n    }\n  },\n\n  data() {\n    const schemas = this.$store.getters['cluster/all'](SCHEMA);\n    let filtersYaml;\n\n    set(this.value, 'spec', this.value.spec || {});\n\n    if ( this.value.spec.filters?.length ) {\n      filtersYaml = jsyaml.dump(this.value.spec.filters);\n    } else {\n      filtersYaml = createYaml(schemas, LOGGING.SPOOFED.FILTERS, []);\n      // createYaml doesn't support passing reference types (array, map) as the first type. As such\n      // I'm manipulating the output since I'm not sure it's something we want to actually support\n      // seeing as it's really createResourceYaml and this here is a gray area between spoofed types\n      // and just a field within a spec.\n      filtersYaml = filtersYaml.substring(filtersYaml.indexOf('\\n') + 1).replaceAll('#  ', '#');\n    }\n\n    const matches = [];\n    let formSupported = !this.value.id || this.value.canCustomEdit;\n\n    if ( this.value.spec.match?.length ) {\n      for ( const match of this.value.spec.match ) {\n        if ( matchRuleIsPopulated(match.select) && matchRuleIsPopulated(match.exclude) ) {\n          formSupported = false;\n        } else if ( matchRuleIsPopulated(match.select) ) {\n          matches.push({ select: true, ...match.select });\n        } else if ( matchRuleIsPopulated(match.exclude) ) {\n          matches.push({ exclude: true, ...match.exclude });\n        }\n      }\n    } else {\n      matches.push(emptyMatch(true));\n    }\n\n    const globalOutputRefs = (this.value.spec.globalOutputRefs || []).map((ref) => ({ label: ref, value: ref }));\n    const localOutputRefs = (this.value.spec.localOutputRefs || []).map((ref) => ({ label: ref, value: ref }));\n\n    return {\n      formSupported,\n      matches,\n      allOutputs:         null,\n      allClusterOutputs:  null,\n      allNamespaces:      null,\n      allNodes:           null,\n      allPods:            null,\n      filtersYaml,\n      initialFiltersYaml: filtersYaml,\n      globalOutputRefs,\n      localOutputRefs\n    };\n  },\n\n  computed: {\n    EDITOR_MODES() {\n      return EDITOR_MODES;\n    },\n\n    LOGGING() {\n      return LOGGING;\n    },\n\n    outputChoices() {\n      if (!this.allOutputs) {\n        // Handle the case where the user doesn't have permission\n        // to see Outputs\n        return [];\n      }\n\n      // Yes cluster outputs are still namespaced because reasons...\n      return this.allOutputs.filter((output) => {\n        if ( !output.namespace) {\n          return true;\n        }\n\n        return output.namespace === this.value.namespace;\n      }).map((x) => {\n        return { label: x.metadata.name, value: x.metadata.name };\n      });\n    },\n\n    clusterOutputChoices() {\n      if (!this.allClusterOutputs) {\n        // Handle the case where the user doesn't have permission\n        // to see ClusterOutputs\n        return [];\n      }\n\n      return this.allClusterOutputs\n        .filter((clusterOutput) => {\n          return clusterOutput.namespace === 'cattle-logging-system';\n        })\n        .map((clusterOutput) => {\n          return { label: clusterOutput.metadata.name, value: clusterOutput.metadata.name };\n        });\n    },\n\n    namespaceChoices() {\n      if (!this.allNamespaces) {\n        // Handle the case where the user doesn't have permission\n        // to see namespaces\n        return [];\n      }\n      const out = this.allNamespaces.map((namespace) => {\n        return {\n          label: namespace.nameDisplay,\n          value: namespace.metadata.name\n        };\n      });\n\n      return out;\n    },\n\n    nodeChoices() {\n      if (!this.allNodes) {\n        // Handle the case where the user doesn't have permission\n        // to see nodes\n        return [];\n      }\n      const out = this.allNodes.map((node) => {\n        return {\n          label: node.nameDisplay,\n          value: node.metadata.name\n        };\n      });\n\n      return out;\n    },\n\n    containerChoices() {\n      const out = [];\n\n      for ( const pod of this.allPods ) {\n        for ( const c of (pod.spec?.containers || []) ) {\n          out.push(c.name);\n        }\n      }\n\n      return uniq(out).sort();\n    },\n  },\n\n  watch: {\n    matches: {\n      deep: true,\n      handler() {\n        const matches = this.matches.map((match) => {\n          const copy = clone(match);\n\n          delete copy.exclude;\n          delete copy.select;\n\n          if ( match.exclude ) {\n            return { exclude: copy };\n          } else {\n            return { select: copy };\n          }\n        });\n\n        set(this.value.spec, 'match', matches);\n      }\n    },\n    filtersYaml: {\n      deep: true,\n      handler() {\n        try {\n          const filterJson = jsyaml.load(this.filtersYaml);\n\n          if ( isArray(filterJson) ) {\n            set(this.value.spec, 'filters', filterJson);\n          } else {\n            set(this.value.spec, 'filters', undefined);\n          }\n        } catch (e) {\n          this.errors = exceptionToErrorsArray(e);\n        }\n      }\n    },\n    globalOutputRefs: {\n      deep: true,\n      handler() {\n        set(this.value.spec, 'globalOutputRefs', this.globalOutputRefs);\n      }\n    },\n    localOutputRefs: {\n      deep: true,\n      handler() {\n        set(this.value.spec, 'localOutputRefs', this.localOutputRefs);\n      }\n    }\n  },\n\n  created() {\n    if (this.isCreate && this.value.type === LOGGING.CLUSTER_FLOW) {\n      this.value.metadata.namespace = 'cattle-logging-system';\n    }\n\n    this.registerBeforeHook(this.willSave, 'willSave');\n  },\n\n  methods: {\n    addMatch(include) {\n      this.matches.push(emptyMatch(include));\n    },\n\n    removeMatch(idx) {\n      this.matches.splice(idx, 1);\n    },\n\n    updateMatch(neu, idx) {\n      this.$set(this.matches, idx, neu);\n    },\n\n    tabChanged({ tab }) {\n      if ( tab.name === 'filters' ) {\n        this.$nextTick(() => {\n          if ( this.$refs.yaml ) {\n            this.$refs.yaml.refresh();\n            this.$refs.yaml.focus();\n          }\n        });\n      }\n    },\n    isMatchEmpty(matches) {\n      if (isEmpty(matches)) {\n        return true;\n      }\n\n      return matches.every((match) => {\n        if (isEmpty(match.select) && isEmpty(match.exclude)) {\n          return true;\n        }\n\n        const select = match.select || {};\n        const exclude = match.exclude || {};\n        const allValuesAreEmpty = (o) => Object.values(o).every(isEmpty);\n\n        return allValuesAreEmpty(select) && allValuesAreEmpty(exclude);\n      });\n    },\n    willSave() {\n      if (this.value.spec.filters && isEmpty(this.value.spec.filters)) {\n        this.$delete(this.value.spec, 'filters');\n      }\n\n      if (this.value.spec.match && this.isMatchEmpty(this.value.spec.match)) {\n        this.$delete(this.value.spec, 'match');\n      }\n    },\n    onYamlEditorReady(cm) {\n      cm.getMode().fold = 'yamlcomments';\n      cm.execCommand('foldAll');\n      cm.execCommand('unfold');\n    },\n    isTag(options, option) {\n      return !options.find((o) => o.value === option.value);\n    }\n  }\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n  <CruResource\n    v-else-if=\"formSupported\"\n    class=\"flow\"\n    :done-route=\"doneRoute\"\n    :mode=\"mode\"\n    :resource=\"value\"\n    :subtypes=\"[]\"\n    :validation-passed=\"true\"\n    :errors=\"errors\"\n    :apply-hooks=\"applyHooks\"\n    @error=\"e=>errors = e\"\n    @finish=\"save\"\n    @cancel=\"done\"\n  >\n    <NameNsDescription\n      v-if=\"!isView\"\n      v-model=\"value\"\n      :mode=\"mode\"\n      :namespaced=\"value.type !== LOGGING.CLUSTER_FLOW\"\n    />\n\n    <Tabbed\n      :side-tabs=\"true\"\n      @changed=\"tabChanged($event)\"\n    >\n      <Tab\n        name=\"match\"\n        :label=\"t('logging.flow.matches.label')\"\n        :weight=\"3\"\n      >\n        <Banner\n          color=\"info\"\n          class=\"mt-0\"\n          :label=\"t('logging.flow.matches.banner')\"\n        />\n        <ArrayListGrouped\n          v-model=\"matches\"\n          :add-label=\"t('ingress.rules.addRule')\"\n          :default-add-value=\"{}\"\n          :mode=\"mode\"\n        >\n          <template #default=\"props\">\n            <Match\n              class=\"rule mb-20\"\n              :value=\"props.row.value\"\n              :mode=\"mode\"\n              :namespaces=\"namespaceChoices\"\n              :nodes=\"nodeChoices\"\n              :containers=\"containerChoices\"\n              :is-cluster-flow=\"value.type === LOGGING.CLUSTER_FLOW\"\n              @remove=\"e=>removeMatch(props.row.i)\"\n              @input=\"e=>updateMatch(e,props.row.i)\"\n            />\n          </template>\n          <template #add>\n            <button\n              class=\"btn role-tertiary add\"\n              type=\"button\"\n              @click=\"addMatch(true)\"\n            >\n              {{ t('logging.flow.matches.addSelect') }}\n            </button>\n            <button\n              class=\"btn role-tertiary add\"\n              type=\"button\"\n              @click=\"addMatch(false)\"\n            >\n              {{ t('logging.flow.matches.addExclude') }}\n            </button>\n          </template>\n        </ArrayListGrouped>\n      </Tab>\n\n      <Tab\n        name=\"outputs\"\n        :label=\"t('logging.flow.outputs.label')\"\n        :weight=\"2\"\n      >\n        <Banner\n          v-if=\"value.type !== LOGGING.CLUSTER_FLOW\"\n          :label=\"t('logging.flow.outputs.sameNamespaceError')\"\n          color=\"info\"\n        />\n        <LabeledSelect\n          v-model=\"globalOutputRefs\"\n          :label=\"t('logging.flow.clusterOutputs.label')\"\n          :options=\"clusterOutputChoices\"\n          :multiple=\"true\"\n          :taggable=\"true\"\n          :clearable=\"true\"\n          :close-on-select=\"false\"\n          :reduce=\"opt=>opt.value\"\n        >\n          <template #selected-option=\"option\">\n            <i\n              v-if=\"isTag(clusterOutputChoices, option)\"\n              v-clean-tooltip=\"t('logging.flow.clusterOutputs.doesntExistTooltip')\"\n              class=\"icon icon-info status-icon text-warning\"\n            />\n            {{ option.label }}\n          </template>\n        </LabeledSelect>\n        <LabeledSelect\n          v-if=\"value.type === LOGGING.FLOW\"\n          v-model=\"localOutputRefs\"\n          :label=\"t('logging.flow.outputs.label')\"\n          class=\"mt-10\"\n          :options=\"outputChoices\"\n          :multiple=\"true\"\n          :taggable=\"true\"\n          :clearable=\"true\"\n          :close-on-select=\"false\"\n          :reduce=\"opt=>opt.value\"\n        >\n          <template #selected-option=\"option\">\n            <i\n              v-if=\"isTag(outputChoices, option)\"\n              v-clean-tooltip=\"t('logging.flow.outputs.doesntExistTooltip')\"\n              class=\"icon icon-info status-icon text-warning\"\n            />\n            {{ option.label }}\n          </template>\n        </LabeledSelect>\n      </Tab>\n\n      <Tab\n        name=\"filters\"\n        :label=\"t('logging.flow.filters.label')\"\n        :weight=\"1\"\n      >\n        <YamlEditor\n          ref=\"yaml\"\n          v-model=\"filtersYaml\"\n          :scrolling=\"false\"\n          :initial-yaml-values=\"initialFiltersYaml\"\n          :editor-mode=\"isView ? EDITOR_MODES.VIEW_CODE : EDITOR_MODES.EDIT_CODE\"\n          @onReady=\"onYamlEditorReady\"\n        />\n      </Tab>\n    </Tabbed>\n  </CruResource>\n  <Banner\n    v-else\n    :label=\"t('logging.flow.matches.unsupportedConfig')\"\n    color=\"error\"\n  />\n</template>\n\n<style lang=\"scss\" scoped>\n::v-deep {\n  .icon-info {\n    margin-top: -3px;\n    margin-right: 4px;\n  }\n}\n</style>\n"]}]}