{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/pages/c/_cluster/settings/banners.vue?vue&type=style&index=0&id=585037c2&scoped=true&lang=scss","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/pages/c/_cluster/settings/banners.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5vdmVybGF5IHsKICB3aWR0aDogMTAwJTsKICBoZWlnaHQ6IDEwMCU7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogMDsKICBsZWZ0OiAwOwogIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW92ZXJsYXktYmcpOwogIHotaW5kZXg6IDE7Cn0K"},{"version":3,"sources":["banners.vue"],"names":[],"mappings":";AAqRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"banners.vue","sourceRoot":"node_modules/@rancher/shell/pages/c/_cluster/settings","sourcesContent":["<script>\nimport isEmpty from 'lodash/isEmpty';\n\nimport { Checkbox } from '@components/Form/Checkbox';\nimport Loading from '@shell/components/Loading';\nimport AsyncButton from '@shell/components/AsyncButton';\nimport { Banner } from '@components/Banner';\nimport BannerSettings from '@shell/components/form/BannerSettings';\nimport { allHash } from '@shell/utils/promise';\nimport { MANAGEMENT } from '@shell/config/types';\nimport { getVendor } from '@shell/config/private-label';\nimport { SETTING } from '@shell/config/settings';\nimport { clone } from '@shell/utils/object';\nimport { _EDIT, _VIEW } from '@shell/config/query-params';\nimport NotificationSettings from '@shell/components/form/NotificationSettings.vue';\n\nconst DEFAULT_BANNER_SETTING = {\n  loginError:   { message: '', showMessage: 'false' },\n  bannerHeader: {\n    background:     null,\n    color:          null,\n    textAlignment:  'center',\n    fontWeight:     null,\n    fontStyle:      null,\n    fontSize:       '14px',\n    textDecoration: null,\n    text:           null,\n  },\n  bannerFooter: {\n    background:     null,\n    color:          null,\n    textAlignment:  'center',\n    fontWeight:     null,\n    fontStyle:      null,\n    fontSize:       '14px',\n    textDecoration: null,\n    text:           null\n  },\n  bannerConsent: {\n    background:     null,\n    color:          null,\n    textAlignment:  'center',\n    fontWeight:     null,\n    fontStyle:      null,\n    fontSize:       '14px',\n    textDecoration: null,\n    text:           null,\n    button:         null,\n  },\n  showHeader:  'false',\n  showFooter:  'false',\n  showConsent: 'false'\n};\n\nexport default {\n  layout: 'authenticated',\n\n  components: {\n    Checkbox,\n    Loading,\n    AsyncButton,\n    Banner,\n    BannerSettings,\n    NotificationSettings\n  },\n\n  async fetch() {\n    const hash = await allHash({ uiBannerSetting: this.$store.dispatch('management/find', { type: MANAGEMENT.SETTING, id: SETTING.BANNERS }) });\n\n    Object.assign(this, hash);\n  },\n\n  data() {\n    return {\n      vendor: getVendor(),\n\n      uiBannerSetting: null,\n      bannerVal:       {},\n\n      errors: [],\n\n    };\n  },\n\n  computed: {\n    mode() {\n      const schema = this.$store.getters[`management/schemaFor`](MANAGEMENT.SETTING);\n\n      return schema?.resourceMethods?.includes('PUT') ? _EDIT : _VIEW;\n    },\n\n    headerMode() {\n      return this.bannerVal?.showHeader === 'true' ? _EDIT : _VIEW;\n    },\n    footerMode() {\n      return this.bannerVal?.showFooter === 'true' ? _EDIT : _VIEW;\n    },\n    consentMode() {\n      return this.bannerVal?.showConsent === 'true' ? _EDIT : _VIEW;\n    }\n  },\n\n  watch: {\n    uiBannerSetting(neu) {\n      if (neu?.value && neu.value !== '') {\n        try {\n          const parsedBanner = JSON.parse(neu.value);\n\n          this.bannerVal = this.checkOrUpdateLegacyUIBannerSetting(parsedBanner);\n        } catch {}\n      }\n    }\n  },\n\n  methods: {\n    checkOrUpdateLegacyUIBannerSetting(parsedBanner) {\n      const {\n        bannerHeader, bannerFooter, bannerConsent, banner, loginError\n      } = parsedBanner;\n\n      if (isEmpty(bannerHeader) && isEmpty(bannerFooter) && isEmpty(bannerConsent)) {\n        let neu = DEFAULT_BANNER_SETTING;\n\n        if (!isEmpty(banner)) {\n          const cloned = clone(( banner ?? {} ));\n\n          if (cloned?.textColor) {\n            cloned['color'] = cloned.textColor;\n            delete cloned.textColor;\n          }\n\n          neu = {\n            bannerHeader:  { ...cloned },\n            bannerFooter:  { ...cloned },\n            loginError:    { ...DEFAULT_BANNER_SETTING.loginError, loginError: loginError?.showMessage === 'false' ? 'false' : 'true' },\n            bannerConsent: { ...DEFAULT_BANNER_SETTING.bannerConsent },\n            showHeader:    parsedBanner?.showHeader === 'true' ? 'true' : 'false',\n            showFooter:    parsedBanner?.showFooter === 'true' ? 'true' : 'false',\n            showConsent:   parsedBanner?.showConsent === 'true' ? 'true' : 'false'\n          };\n        }\n\n        return neu;\n      }\n\n      // If user has existing banners, they may not have consent banner - use default value\n      if (isEmpty(bannerConsent)) {\n        parsedBanner.bannerConsent = { ...DEFAULT_BANNER_SETTING.bannerConsent };\n      }\n\n      if (isEmpty(loginError)) {\n        parsedBanner.loginError = { ...DEFAULT_BANNER_SETTING.loginError };\n      }\n\n      return parsedBanner;\n    },\n\n    async save(btnCB) {\n      this.uiBannerSetting.value = JSON.stringify(this.bannerVal);\n\n      this.errors = [];\n\n      try {\n        await Promise.all([\n          this.uiBannerSetting.save()\n        ]);\n        btnCB(true);\n      } catch (err) {\n        this.errors.push(err);\n        btnCB(false);\n      }\n    },\n  }\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n  <div v-else>\n    <h1 class=\"mb-20\">\n      {{ t('banner.label') }}\n    </h1>\n    <div>\n      <label class=\"text-label\">\n        {{ t(`advancedSettings.descriptions.${ 'ui-banners' }`, {}, true) }}\n      </label>\n\n      <template>\n        <!-- Header Settings -->\n        <h2 class=\"mt-40 mb-40\">\n          {{ t('banner.headerBanner') }}\n        </h2>\n        <div class=\"row mb-20\">\n          <div class=\"col span-6\">\n            <Checkbox\n              :value=\"bannerVal.showHeader === 'true'\"\n              :label=\"t('banner.showHeader')\"\n              :mode=\"mode\"\n              @input=\"e=>$set(bannerVal, 'showHeader', e.toString())\"\n            />\n          </div>\n        </div>\n        <BannerSettings\n          v-model=\"bannerVal\"\n          banner-type=\"bannerHeader\"\n          :mode=\"headerMode\"\n        />\n\n        <!-- Footer settings -->\n        <h2 class=\"mt-40 mb-40\">\n          {{ t('banner.footerBanner') }}\n        </h2>\n        <div class=\"row mt-40 mb-20\">\n          <div class=\"col span-6\">\n            <Checkbox\n              :value=\"bannerVal.showFooter === 'true'\"\n              :label=\"t('banner.showFooter')\"\n              :mode=\"mode\"\n              @input=\"e=>$set(bannerVal, 'showFooter', e.toString())\"\n            />\n          </div>\n        </div>\n        <BannerSettings\n          v-model=\"bannerVal\"\n          banner-type=\"bannerFooter\"\n          :mode=\"footerMode\"\n        />\n      </template>\n\n      <!-- Consent settings -->\n      <h2 class=\"mt-40 mb-40\">\n        {{ t('banner.loginScreenBanner') }}\n      </h2>\n      <template>\n        <div class=\"row mt-40 mb-20\">\n          <div class=\"col span-6\">\n            <Checkbox\n              :value=\"bannerVal.showConsent === 'true'\"\n              :label=\"t('banner.showConsent')\"\n              :mode=\"mode\"\n              @input=\"e => $set(bannerVal, 'showConsent', e.toString())\"\n            />\n          </div>\n        </div>\n        <BannerSettings\n          v-model=\"bannerVal\"\n          banner-type=\"bannerConsent\"\n          :mode=\"consentMode\"\n        />\n      </template>\n      <h2 class=\"mt-40 mb-40\">\n        {{ t('notifications.loginError.header') }}\n      </h2>\n      <NotificationSettings\n        v-model=\"bannerVal.loginError\"\n        :mode=\"mode\"\n        :label=\"t('notifications.loginError.messageLabel')\"\n      />\n    </div>\n    <template v-for=\"err in errors\">\n      <Banner\n        :key=\"err\"\n        color=\"error\"\n        :label=\"err\"\n      />\n    </template>\n    <div v-if=\"mode === 'edit'\">\n      <AsyncButton\n        class=\"pull-right mt-20\"\n        mode=\"apply\"\n        @click=\"save\"\n      />\n    </div>\n  </div>\n</template>\n\n<style scoped lang='scss'>\n.overlay {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  background-color: var(--overlay-bg);\n  z-index: 1;\n}\n</style>\n"]}]}