{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/networking.k8s.io.ingress/Rules.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/networking.k8s.io.ingress/Rules.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCB7IFdPUktMT0FEX1RZUEVTIH0gZnJvbSAnQHNoZWxsL2NvbmZpZy90eXBlcyc7CmltcG9ydCBMb2FkaW5nIGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL0xvYWRpbmcnOwppbXBvcnQgU29ydGFibGVUYWJsZSBmcm9tICdAc2hlbGwvY29tcG9uZW50cy9Tb3J0YWJsZVRhYmxlJzsKaW1wb3J0IHsgX1ZJRVcgfSBmcm9tICdAc2hlbGwvY29uZmlnL3F1ZXJ5LXBhcmFtcyc7CmltcG9ydCBBcnJheUxpc3RHcm91cGVkIGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL2Zvcm0vQXJyYXlMaXN0R3JvdXBlZCc7CmltcG9ydCB7IHJhbmRvbTMyIH0gZnJvbSAnQHNoZWxsL3V0aWxzL3N0cmluZyc7CmltcG9ydCBSdWxlIGZyb20gJy4vUnVsZSc7CgpleHBvcnQgZGVmYXVsdCB7CiAgY29tcG9uZW50czogewogICAgQXJyYXlMaXN0R3JvdXBlZCwgTG9hZGluZywgUnVsZSwgU29ydGFibGVUYWJsZQogIH0sCgogIHByb3BzOiB7CiAgICB2YWx1ZTogewogICAgICB0eXBlOiAgICBPYmplY3QsCiAgICAgIGRlZmF1bHQ6ICgpID0+IHt9CiAgICB9LAoKICAgIG1vZGU6IHsKICAgICAgdHlwZTogICAgU3RyaW5nLAogICAgICBkZWZhdWx0OiAnZWRpdCcKICAgIH0sCgogICAgY2VydGlmaWNhdGVzOiB7CiAgICAgIHR5cGU6ICAgIEFycmF5LAogICAgICBkZWZhdWx0OiAoKSA9PiBbXQogICAgfSwKCiAgICBzZXJ2aWNlVGFyZ2V0czogewogICAgICB0eXBlOiAgICBBcnJheSwKICAgICAgZGVmYXVsdDogKCkgPT4gW10KICAgIH0sCgogICAgcnVsZXM6IHsKICAgICAgZGVmYXVsdDogKCkgPT4gKHsKICAgICAgICByZXF1ZXN0SG9zdDogW10sCiAgICAgICAgcGF0aDogICAgICAgIFtdLAogICAgICAgIHBvcnQ6ICAgICAgICBbXSwKICAgICAgICB0YXJnZXQ6ICAgICAgW10KICAgICAgfSksCiAgICAgIHR5cGU6IE9iamVjdCwKICAgIH0KICB9LAoKICBhc3luYyBmZXRjaCgpIHsKICAgIGF3YWl0IFByb21pc2UuYWxsKE9iamVjdC52YWx1ZXMoV09SS0xPQURfVFlQRVMpLm1hcCgodHlwZSkgPT4gdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2NsdXN0ZXIvZmluZEFsbCcsIHsgdHlwZSB9KSkpOwogIH0sCgogIGJlZm9yZVVwZGF0ZSgpIHsKICAgIGZvciAoY29uc3QgcnVsZSBvZiB0aGlzLnZhbHVlLnNwZWMucnVsZXMpIHsKICAgICAgaWYgKCFydWxlLnZLZXkpIHsKICAgICAgICB0aGlzLiRzZXQocnVsZSwgJ3ZLZXknLCByYW5kb20zMigxKSk7CiAgICAgIH0KICAgIH0KICB9LAoKICBjb21wdXRlZDogewogICAgd29ya2xvYWRzKCkgewogICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhXT1JLTE9BRF9UWVBFUykuZmxhdE1hcCgodHlwZSkgPT4gdGhpcy4kc3RvcmUuZ2V0dGVyc1snY2x1c3Rlci9hbGwnXSh0eXBlKSk7CiAgICB9LAogICAgaXNWaWV3KCkgewogICAgICByZXR1cm4gdGhpcy5tb2RlID09PSBfVklFVzsKICAgIH0sCiAgICBydWxlSGVhZGVycygpIHsKICAgICAgY29uc3QgaGVhZGVycyA9IFsKICAgICAgICB7CiAgICAgICAgICBuYW1lOiAgICAgICdmdWxsUGF0aCcsCiAgICAgICAgICBsYWJlbDogICAgIHRoaXMudCgnaW5ncmVzcy5ydWxlcy5oZWFkZXJzLnBhdGgnKSwKICAgICAgICAgIHZhbHVlOiAgICAgJycsCiAgICAgICAgICBmb3JtYXR0ZXI6ICdJbmdyZXNzRnVsbFBhdGgnCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBuYW1lOiAgICAgICAgICAndGFyZ2V0JywKICAgICAgICAgIGxhYmVsOiAgICAgICAgIHRoaXMudCgnaW5ncmVzcy5ydWxlcy5oZWFkZXJzLnRhcmdldCcpLAogICAgICAgICAgZm9ybWF0dGVyOiAgICAgJ0xpbmsnLAogICAgICAgICAgZm9ybWF0dGVyT3B0czogeyBvcHRpb25zOiB7IGludGVybmFsOiB0cnVlIH0sIHVybEtleTogJ3RhcmdldExpbmsudG8nIH0sCiAgICAgICAgICB2YWx1ZTogICAgICAgICAndGFyZ2V0TGluaycsCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBuYW1lOiAgJ3BvcnQnLAogICAgICAgICAgbGFiZWw6IHRoaXMudCgnaW5ncmVzcy5ydWxlcy5oZWFkZXJzLnBvcnQnKSwKICAgICAgICAgIHZhbHVlOiAncG9ydCcsCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBuYW1lOiAgICAgICdjZXJ0cycsCiAgICAgICAgICBsYWJlbDogICAgIHRoaXMudCgnaW5ncmVzcy5ydWxlcy5oZWFkZXJzLmNlcnRpZmljYXRlcycpLAogICAgICAgICAgdmFsdWU6ICAgICAnY2VydHMnLAogICAgICAgICAgZm9ybWF0dGVyOiAnTGlzdExpbmsnLAogICAgICAgIH0sCiAgICAgIF07CgogICAgICBpZiAodGhpcy52YWx1ZS5zaG93UGF0aFR5cGUpIHsKICAgICAgICBoZWFkZXJzLnVuc2hpZnQoewogICAgICAgICAgbmFtZTogICdwYXRoVHlwZScsCiAgICAgICAgICBsYWJlbDogdGhpcy50KCdpbmdyZXNzLnJ1bGVzLmhlYWRlcnMucGF0aFR5cGUnKSwKICAgICAgICAgIHZhbHVlOiAncGF0aFR5cGUnLAogICAgICAgIH0pOwogICAgICB9CgogICAgICByZXR1cm4gaGVhZGVyczsKICAgIH0sCiAgICByb3dzKCkgewogICAgICByZXR1cm4gdGhpcy52YWx1ZS5jcmVhdGVSdWxlc0Zvckxpc3RQYWdlKHRoaXMud29ya2xvYWRzLCB0aGlzLmNlcnRpZmljYXRlcyk7CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBvbkFkZCgpIHsKICAgICAgaWYgKHRoaXMuJHJlZnMubGFzdFJ1bGU/LmZvY3VzKSB7CiAgICAgICAgdGhpcy4kcmVmcy5sYXN0UnVsZS5mb2N1cygpOwogICAgICB9CiAgICB9CiAgfQp9Owo="},{"version":3,"sources":["Rules.vue"],"names":[],"mappingsfile":"Rules.vue","sourceRoot":"node_modules/@rancher/shell/edit/networking.k8s.io.ingress","sourcesContent":["<script>\nimport { WORKLOAD_TYPES } from '@shell/config/types';\nimport Loading from '@shell/components/Loading';\nimport SortableTable from '@shell/components/SortableTable';\nimport { _VIEW } from '@shell/config/query-params';\nimport ArrayListGrouped from '@shell/components/form/ArrayListGrouped';\nimport { random32 } from '@shell/utils/string';\nimport Rule from './Rule';\n\nexport default {\n  components: {\n    ArrayListGrouped, Loading, Rule, SortableTable\n  },\n\n  props: {\n    value: {\n      type:    Object,\n      default: () => {}\n    },\n\n    mode: {\n      type:    String,\n      default: 'edit'\n    },\n\n    certificates: {\n      type:    Array,\n      default: () => []\n    },\n\n    serviceTargets: {\n      type:    Array,\n      default: () => []\n    },\n\n    rules: {\n      default: () => ({\n        requestHost: [],\n        path:        [],\n        port:        [],\n        target:      []\n      }),\n      type: Object,\n    }\n  },\n\n  async fetch() {\n    await Promise.all(Object.values(WORKLOAD_TYPES).map((type) => this.$store.dispatch('cluster/findAll', { type })));\n  },\n\n  beforeUpdate() {\n    for (const rule of this.value.spec.rules) {\n      if (!rule.vKey) {\n        this.$set(rule, 'vKey', random32(1));\n      }\n    }\n  },\n\n  computed: {\n    workloads() {\n      return Object.values(WORKLOAD_TYPES).flatMap((type) => this.$store.getters['cluster/all'](type));\n    },\n    isView() {\n      return this.mode === _VIEW;\n    },\n    ruleHeaders() {\n      const headers = [\n        {\n          name:      'fullPath',\n          label:     this.t('ingress.rules.headers.path'),\n          value:     '',\n          formatter: 'IngressFullPath'\n        },\n        {\n          name:          'target',\n          label:         this.t('ingress.rules.headers.target'),\n          formatter:     'Link',\n          formatterOpts: { options: { internal: true }, urlKey: 'targetLink.to' },\n          value:         'targetLink',\n        },\n        {\n          name:  'port',\n          label: this.t('ingress.rules.headers.port'),\n          value: 'port',\n        },\n        {\n          name:      'certs',\n          label:     this.t('ingress.rules.headers.certificates'),\n          value:     'certs',\n          formatter: 'ListLink',\n        },\n      ];\n\n      if (this.value.showPathType) {\n        headers.unshift({\n          name:  'pathType',\n          label: this.t('ingress.rules.headers.pathType'),\n          value: 'pathType',\n        });\n      }\n\n      return headers;\n    },\n    rows() {\n      return this.value.createRulesForListPage(this.workloads, this.certificates);\n    }\n  },\n  methods: {\n    onAdd() {\n      if (this.$refs.lastRule?.focus) {\n        this.$refs.lastRule.focus();\n      }\n    }\n  }\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n  <div v-else-if=\"isView\">\n    <SortableTable\n      :rows=\"rows\"\n      :headers=\"ruleHeaders\"\n      key-field=\"_key\"\n      :search=\"false\"\n      :table-actions=\"false\"\n      :row-actions=\"false\"\n    />\n  </div>\n  <div v-else>\n    <ArrayListGrouped\n      v-model=\"value.spec.rules\"\n      :add-label=\"t('ingress.rules.addRule')\"\n      :default-add-value=\"{}\"\n      :mode=\"mode\"\n      @add=\"onAdd\"\n    >\n      <template #default=\"props\">\n        <Rule\n          ref=\"lastRule\"\n          :key=\"props.row.value.vKey\"\n          v-model=\"props.row.value\"\n          :service-targets=\"serviceTargets\"\n          :ingress=\"value\"\n          :rules=\"rules\"\n        />\n      </template>\n    </ArrayListGrouped>\n  </div>\n</template>\n"]}]}