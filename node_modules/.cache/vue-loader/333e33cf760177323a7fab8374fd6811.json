{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/form/ArrayListGrouped.vue?vue&type=style&index=0&id=32af8c7f&lang=scss","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/form/ArrayListGrouped.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5hcnJheS1saXN0LWdyb3VwZWQgewogICAgJiA+IC5ib3ggewogICAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICAgIGRpc3BsYXk6IGJsb2NrOwoKICAgICAgJiA+IC5yZW1vdmUgewogICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKCiAgICAgICAgdG9wOiAwOwogICAgICAgIHJpZ2h0OiAwOwogICAgICB9CgogICAgICAmID4gLmluZm8tYm94IHsKICAgICAgICBtYXJnaW4tYm90dG9tOiAwOwogICAgICAgIHBhZGRpbmctcmlnaHQ6IDI1cHg7CiAgICAgIH0KICAgIH0KfQoK"},{"version":3,"sources":["ArrayListGrouped.vue"],"names":[],"mappings":";AA4GA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"ArrayListGrouped.vue","sourceRoot":"node_modules/@rancher/shell/components/form","sourcesContent":["<script>\nimport ArrayList from '@shell/components/form/ArrayList';\nimport InfoBox from '@shell/components/InfoBox';\nimport { _EDIT, _VIEW } from '@shell/config/query-params';\n\nexport default {\n  name:       'ArrayListGrouped',\n  components: { ArrayList, InfoBox },\n  props:      {\n    /**\n     * Allow to remove items by value or computation\n     */\n    canRemove: {\n      type:    [Boolean, Function],\n      default: true,\n    },\n\n    /**\n     * Allow to extend list\n     */\n    canAdd: {\n      type:    Boolean,\n      default: true,\n    },\n    /**\n     * Start with empty row\n     */\n    initialEmptyRow: {\n      type:    Boolean,\n      default: false,\n    },\n\n    /**\n     * Form mode for the component\n     */\n    mode: {\n      type:    String,\n      default: _EDIT,\n    },\n  },\n\n  computed: {\n    isView() {\n      return this.mode === _VIEW;\n    }\n  },\n\n  methods: {\n    /**\n     * Verify if row can be removed by mode, function and declaration\n     */\n    canRemoveRow(row, idx) {\n      if ( this.isView ) {\n        return false;\n      }\n\n      if ( typeof this.canRemove === 'function' ) {\n        return this.canRemove(row, idx);\n      }\n\n      return this.canRemove;\n    },\n  }\n};\n</script>\n\n<template>\n  <ArrayList\n    class=\"array-list-grouped\"\n    v-bind=\"$attrs\"\n    :add-allowed=\"canAdd && !isView\"\n    :mode=\"mode\"\n    :initial-empty-row=\"initialEmptyRow\"\n    @input=\"$emit('input', $event)\"\n    @add=\"$emit('add')\"\n    @remove=\"$emit('remove', $event)\"\n  >\n    <template v-slot:columns=\"scope\">\n      <InfoBox>\n        <slot v-bind=\"scope\" />\n      </InfoBox>\n    </template>\n    <template v-slot:remove-button=\"scope\">\n      <button\n        v-if=\"canRemoveRow(scope.row, scope.i)\"\n        type=\"button\"\n        class=\"btn role-link close btn-sm\"\n        :data-testid=\"`remove-item-${scope.i}`\"\n        @click=\"scope.remove\"\n      >\n        <i class=\"icon icon-x\" />\n      </button>\n      <span v-else />\n    </template>\n    <!-- Pass down templates provided by the caller -->\n    <template\n      v-for=\"(_, slot) of $scopedSlots\"\n      v-slot:[slot]=\"scope\"\n    >\n      <slot\n        :name=\"slot\"\n        v-bind=\"scope\"\n      />\n    </template>\n  </ArrayList>\n</template>\n\n<style lang=\"scss\">\n.array-list-grouped {\n    & > .box {\n      position: relative;\n      display: block;\n\n      & > .remove {\n        position: absolute;\n\n        top: 0;\n        right: 0;\n      }\n\n      & > .info-box {\n        margin-bottom: 0;\n        padding-right: 25px;\n      }\n    }\n}\n\n</style>\n"]}]}