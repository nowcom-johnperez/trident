{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/PromptModal.vue?vue&type=style&index=0&id=436d0ff6&lang=scss","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/PromptModal.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5wcm9tcHRNb2RhbC1tb2RhbCB7CiAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cyk7CiAgb3ZlcmZsb3c6IHNjcm9sbDsKICBtYXgtaGVpZ2h0OiAxMDB2aDsKICAmIDo6LXdlYmtpdC1zY3JvbGxiYXItY29ybmVyIHsKICAgIGJhY2tncm91bmQ6IHJnYmEoMCwwLDAsMCk7CiAgfQogICYgLnYtLW1vZGFsLWJveC52LS1tb2RhbCB7CiAgICB3aWR0aDogdmFyKC0tcHJvbXB0LW1vZGFsLXdpZHRoKSAhaW1wb3J0YW50OwogICAgbGVmdDogdW5zZXQgIWltcG9ydGFudDsKICAgIG1hcmdpbjogYXV0byAhaW1wb3J0YW50OwogIH0KfQo="},{"version":3,"sources":["PromptModal.vue"],"names":[],"mappings":";AAwHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PromptModal.vue","sourceRoot":"node_modules/@rancher/shell/components","sourcesContent":["<script>\nimport { mapState } from 'vuex';\nimport { isArray } from '@shell/utils/array';\n\n/**\n * @name PromptModal\n * @description Modal component.\n */\nexport default {\n  name: 'PromptModal',\n\n  data() {\n    return { opened: false, backgroundClosing: null };\n  },\n\n  computed: {\n    ...mapState('action-menu', ['showModal', 'modalData']),\n\n    resources() {\n      let resources = this.modalData?.resources;\n\n      if (!isArray(resources)) {\n        resources = [resources];\n      }\n\n      return resources || [];\n    },\n\n    modalWidth() {\n      // property set from workload.js to overwrite modal default width of 600px, with fallback value as well\n      return this.modalData?.modalWidth || '600px';\n    },\n    component() {\n      // Looks for a dialog component by looking up in plugins and @shell/dialog/${name}.\n      return this.$store.getters['type-map/importDialog'](this.modalData?.component);\n    },\n    cssProps() {\n      // this computed property lets us generate a scss var that we can use in the style\n      return `--prompt-modal-width: ${ this.modalWidth }`;\n    },\n    stickyProps() {\n      const isSticky = !!this.modalData?.modalSticky;\n\n      return !isSticky ? '' : 'display: flex; flex-direction: column; ';\n    },\n    closeOnClickOutside() {\n      return this.modalData?.closeOnClickOutside;\n    }\n  },\n\n  watch: {\n    showModal(show) {\n      if (show) {\n        this.opened = true;\n        this.$modal.show('promptModal');\n      } else {\n        this.opened = false;\n        this.$modal.hide('promptModal');\n      }\n    },\n  },\n\n  methods: {\n    close() {\n      if (!this.opened) {\n        return;\n      }\n\n      this.errors = [];\n      this.$store.commit('action-menu/togglePromptModal');\n      if (this.backgroundClosing) {\n        this.backgroundClosing();\n      }\n    },\n\n    // We're using register instead of just making use of $refs because the $refs is always undefined when referencing the component\n    registerBackgroundClosing(fn) {\n      this.$set(this, 'backgroundClosing', fn);\n    }\n  },\n};\n</script>\n\n<template>\n  <modal\n    class=\"promptModal-modal\"\n    name=\"promptModal\"\n    :styles=\"`background-color: var(--nav-bg); border-radius: var(--border-radius); ${stickyProps} max-height: 95vh; ${cssProps}`\"\n    height=\"auto\"\n    :scrollable=\"true\"\n    :click-to-close=\"closeOnClickOutside\"\n    @closed=\"close()\"\n  >\n    <component\n      v-bind=\"modalData.componentProps || {}\"\n      :is=\"component\"\n      v-if=\"opened && component\"\n      :resources=\"resources\"\n      :register-background-closing=\"registerBackgroundClosing\"\n      @close=\"close()\"\n    />\n  </modal>\n</template>\n\n<style lang='scss'>\n  .promptModal-modal {\n    border-radius: var(--border-radius);\n    overflow: scroll;\n    max-height: 100vh;\n    & ::-webkit-scrollbar-corner {\n      background: rgba(0,0,0,0);\n    }\n    & .v--modal-box.v--modal {\n      width: var(--prompt-modal-width) !important;\n      left: unset !important;\n      margin: auto !important;\n    }\n  }\n</style>\n"]}]}