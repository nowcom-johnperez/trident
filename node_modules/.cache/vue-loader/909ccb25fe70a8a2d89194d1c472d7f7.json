{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/pkg/nowcom/pages/listnetwork.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/pkg/nowcom/pages/listnetwork.vue","mtime":1716430386795},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["listnetwork.vue"],"names":[],"mappings":";AA6EA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"listnetwork.vue","sourceRoot":"pkg/nowcom/pages","sourcesContent":["<!-- eslint-disable no-console -->\n<template>\n  <div class=\"base\">\n    <h1 class=\"text-label\">Virtual Network</h1>\n    <div class=\"mt-10 mb-10\" v-if=\"apiResponse\">\n      <Alert :variant=\"apiResponse\" @close=\"apiResponse = null\">{{ apiResponseMessage }}</Alert>\n    </div>\n    <GroupButtons :list=\"vnetButtons\" @action=\"actionHandler\"/>\n    <div class=\"form-row mt-10\">\n      <div class=\"form-column\">\n        <SortableTable :headers=\"networkHeader\" :rows=\"networks\" :paging=\"true\" :rowActionsWidth=\"10\" :rows-per-page=\"5\" keyField=\"longName\" :loading=\"loading\">\n          <template #cell:name=\"{row}\">\n            <a href=\"#\" @click.prevent=\"openSidebar(row)\">{{ row.name }}</a>\n          </template>\n          <template #row-actions=\"row\">\n            <cButton class=\"cbtn btn-primary\" @click=\"openModal(row.row)\" :disabled=\"loading\">\n              <span class=\"fa fa-trash fa-lg mr-5\"></span> Delete\n            </cButton>\n          </template>\n        </SortableTable>\n        </br> </br>\n      </div>\n    </div>\n\n    <SideBar type=\"main\" :sidebar-visible=\"sidebarVisible\" @close=\"closeSidebar\">\n      <h2 class=\"text-label\">{{ selectedNetwork ? selectedNetwork.name : 'No Network Selected' }}</h2>\n        <div class=\"form-row\">\n          <div class=\"form-column\" align=\"left\">\n            <cButton class=\"cbtn btn-light\" @click=\"addSubnetSidebar\">\n              <i class=\"fa fa-plus fa-lg mr-5\"></i> Add Subnet\n            </cButton> \n          </div>\n        </div>\n        <div class=\"mt-10 mb-10\" v-if=\"subnetResponse\">\n          <Alert :variant=\"subnetResponse\" @close=\"subnetResponse = null\">{{ subnetResponseMessage }}</Alert>\n        </div>\n        <SortableTable v-if=\"selectedNetwork\" :headers=\"subnetworkHeader\" :rows=\"selectedNetwork.subnets\" :paging=\"true\" :rowActionsWidth=\"10\" :rows-per-page=\"5\" keyField=\"name\" :loading=\"loading\">\n          <template #row-actions=\"row\">\n            <cButton class=\"cbtn btn-primary\" @click=\"openModalAction(row.row)\" :disabled=\"loading\">\n              <span class=\"fa fa-trash fa-lg mr-5\"></span> Delete\n            </cButton>\n          </template>  \n        </SortableTable>\n    </SideBar>\n\n    <SideBar type=\"sub\" :sidebar-visible=\"addSubnetSidebarVisible\" @close=\"closeSubnetSidebar\">\n      <AddSubnet v-if=\"selectedNetwork\" :is-open=\"addSubnetSidebarVisible\" :current-network=\"selectedNetwork\" @success=\"subnetAddedHandler\" />\n    </SideBar>\n\n    <!-- Modal -->\n    <Modal v-if=\"isModalOpen\">\n      <template v-slot:content>\n        <h2>Delete?</h2>\n        <p>Are you sure that you want to delete VLAN \"{{ selectedVnetName }}\"?</p>\n      </template>\n\n      <template v-slot:footer>\n        <cButton class=\"cbtn btn-danger\" @click=\"deleteNetwork\" :disabled=\"loading\" label=\"Yes\" />\n        <cButton class=\"cbtn btn-light\" @click=\"closeModal\" :disabled=\"loading\" label=\"No\" />\n      </template>\n    </Modal>\n\n    <Modal v-if=\"isModalSubnetOpen\">\n      <template v-slot:content>\n        <h2>Are you sure that you want to delete:</h2>\n        <p>Subnet \"{{ subnet_name }}\" under VNET \"{{ vnet_name }}\"?</p>\n      </template>\n\n      <template v-slot:footer>\n        <cButton class=\"cbtn btn-danger\" @click=\"deleteSubnet\" :disabled=\"loading\" label=\"Yes\" />\n        <cButton class=\"cbtn btn-light\" @click=\"closeModalSubnet\" :disabled=\"loading\" label=\"No\" />\n      </template>\n    </Modal>\n  </div>\n</template>\n\n<script>\nimport { SORTABLE_SUB_NETWORK_HEADERS, SORTABLE_NETWORK_HEADERS } from '../config/table'\nimport { VNET_BUTTONS } from '../config/buttons'\nimport { mapGetters } from 'vuex'\nimport SortableTable from '@shell/components/ResourceTable.vue'\n\nimport cButton from '../components/common/Button'\nimport SideBar from '../components/Sidebar'\nimport GroupButtons from '../components/common/GroupButtons'\nimport Modal from '../components/common/Modal'\nimport Alert from '../components/common/Alert'\nimport AddSubnet from '../components/forms/AddSubnet'\n\nimport { PRODUCT_NAME, CREATE_NETWORK, BLANK_CLUSTER } from '../config/constants'\n\nexport default {\n  name: 'ListNetwork',\n  components: {\n    SortableTable,\n    cButton,\n    SideBar,\n    GroupButtons,\n    Modal,\n    Alert,\n    AddSubnet\n  },\n  // layout: 'home',\n  data() {\n    return {\n      selectedName:            '', // Dropdown for network name\n      selectedVnetName:        '',\n      selectedSubnetName:      '',\n      selectedVnetSubnets:     '10.55.0.0',\n      loading:                 false,\n      isModalOpen:             false,\n      apiResponse:             null,\n      subnetResponse:          null,\n      isModalSubnetOpen:       false,\n      vnet_name:               '',\n      subnet_name:             '',\n      subnet_address:          '',\n      subnet_prefix_len:       '',\n      subnet_id:               '',\n      selectedNetwork:         null,\n      sidebarVisible:          false,\n      addSubnetSidebarVisible: false,\n      apiError:                null,\n      apiResponseMessage:      '',\n      filters:                 { name: { value: '', keys: ['longName'] } },\n      currentPage:             1,\n      totalPages:              0,\n      networkHeader: [],\n      subnetworkHeader: [],\n      vnetButtons: [],\n    };\n  },\n  computed: {\n    ...mapGetters(PRODUCT_NAME, {\n      networks: 'items',\n    })\n  },\n  methods: {\n    actionHandler (action) {\n      if (action === 'create') {\n        this.$router.push(`/${ PRODUCT_NAME }/c/${ BLANK_CLUSTER }/${ CREATE_NETWORK }`);\n      } else if (action === 'refresh') {\n        this.fetchNetworks();\n      }\n    },\n    async getSubnetByName (networkName) {\n      // const subnetRes = await vNetService.getSubnetByName(networkName);\n\n      this.selectedNetwork = null;\n\n      // this.selectedNetwork.subnets = subnetRes.data.spec.subnets.map(subnet => ({\n      //   address:    subnet.address,\n      //   formattedAddress:    `${subnet.address}/${subnet.prefixLength}`,\n      //   name:       stripStrings(subnet.name),\n      //   longName:   subnet.name,\n      //   prefix_len: subnet.prefixLength,\n      //   translatedAddress: subnet.addressTranslation?.outside\n      // }));\n\n      // console.log(`subnetRes`, this.selectedNetwork.subnets)\n      await this.fetchNetworks();\n\n      this.selectedNetwork = this.networks.find((network) => network.name === networkName);\n    },\n    async subnetAddedHandler() {\n      this.subnetResponse = 'success';\n      this.subnetResponseMessage = 'Successfully added subnet!';\n      this.addSubnetSidebarVisible = false;\n      await this.getSubnetByName(this.selectedNetwork.name);\n    },\n    addSubnetSidebar() {\n      this.selectedSubnetName = null;\n      this.addSubnetSidebarVisible = true;\n    },\n    closeSubnetSidebar() {\n      this.addSubnetSidebarVisible = false;\n    },\n    openSidebar(item) {\n      // Update the item with the fetched data\n      this.subnetResponse = null;\n      this.selectedNetwork = item;\n      this.sidebarVisible = true;\n    },\n    closeSidebar() {\n      this.selectedNetwork = null;\n      this.sidebarVisible = false;\n    },\n    openModal(vnetRow) {\n      const { name } = vnetRow;\n      // Set the selected VLAN name\n      this.selectedVnetName = name;\n      this.subnetResponse = null;\n      // Open the modal\n      this.isModalOpen = true;\n    },\n    closeModal() {\n      this.isModalOpen = false;\n    },\n\n    openModalAction(subnetRow) {\n      const { name, address, prefix_len } = subnetRow;\n      // Set the selected VLAN name\n      console.log(name, address, prefix_len);\n      this.vnet_name = this.selectedNetwork.name;\n      this.subnet_name = name;\n      this.subnet_address = address;\n      this.subnet_prefix_len = prefix_len;\n\n      // Open the modal\n      this.isModalSubnetOpen = true;\n    },\n\n    closeModalSubnet() {\n      this.isModalSubnetOpen = false;\n    },\n\n    async fetchNetworks() {\n      console.log('fetching networks');\n      // Fetch the network list from your API\n      try {\n        await this.$store.dispatch(`${PRODUCT_NAME}/findAll`)\n      } catch (error) {\n        console.error('Error fetching Network List:', error);\n      }\n    },\n    async deleteNetwork() {\n      try {\n        console.log(`Delete Network Endpoint, ${ this.selectedVnetName }`);\n        this.loading = true;\n        // Close the modal before deletion\n        this.closeModal();\n        await this.$store.dispatch(`${PRODUCT_NAME}/deleteNetwork`, this.selectedVnetName);\n        this.loading = false;\n\n        // defines what kind of component should the notification show\n        this.apiResponse = 'error';\n        // Set the API response data in the component\n        this.apiResponseMessage = `You have successfully deleted VNET: ${this.selectedVnetName}`;\n        this.apiError = null; // Reset error state\n\n        await this.fetchNetworks();\n      } catch (error) {\n        // Handle any errors here\n        console.error('Error deleting network:', error);\n        this.loading = false;\n        this.isModalOpen = true;\n        this.apiResponseMessage = 'Error';\n        // Set the API error in the component\n        this.apiError = error.response ? error.response.data : error.message;\n        this.apiResponse = 1; // Reset response state\n      } finally {\n        \n      }\n    },\n\n    async deleteSubnet() {\n      try {\n        console.log(\n          `Delete Subnet Endpoint, ${ this.vnet_name }, ${ this.subnet_name }, ${ this.subnet_id }`\n        );\n        this.selectedNetwork.subnets = this.selectedNetwork.subnets.filter(subnet => subnet.name !== this.subnet_name);\n        console.log('new subnet', this.selectedNetwork.subnet);\n\n        const vnet_data = {\n          apiVersion: 'packetlifter.dev/v1',\n          kind:       'Vnet',\n          // vnet_vlan: this.selectedVnetVlan,\n          metadata:   {\n            name:      this.vnet_name.toLowerCase(),\n            namespace: 'default'\n          },\n          spec: {\n            name:    this.vnet_name.toLowerCase(),\n            subnets: this.selectedNetwork.subnets,\n          }\n        };\n\n        this.loading = true;\n        // Close the modal before deletion\n        this.closeModalSubnet();\n        await this.$store.dispatch(`${PRODUCT_NAME}/deleteSubnet`, {\n          vnetName: this.vnet_name,\n          vnetData: vnet_data\n        })\n        this.loading = false;\n\n        // defines what kind of component should the notification show\n        this.subnetResponse = 'error';\n        this.subnetResponseMessage = `Successfully deleted subnet: ${this.subnet_name}`;\n\n        await this.getSubnetByName(this.vnet_name);\n\n        // Update the selectedNetwork with the selected vnet_name\n        this.selectedNetwork.vnet_name = this.vnet_name;\n        \n      } catch (error) {\n        // Handle any errors here\n        console.error('Error deleting network:', error);\n        this.loading = false;\n        this.isModalSubnetOpen = true;\n        // Set the API error in the component\n        this.subnetResponseMessage = error.response ? error.response.data : error.message;\n        this.subnetResponse = 'error';\n      }\n    },\n  },\n  created() {\n    this.networkHeader = SORTABLE_NETWORK_HEADERS;\n    this.subnetworkHeader = SORTABLE_SUB_NETWORK_HEADERS;\n    this.vnetButtons = VNET_BUTTONS;\n  },\n  mounted() {\n    // Fetch the VLAN list and network list when the component is mounted\n    this.fetchNetworks();\n    // this.fetchHarvesterNetworks();\n  },\n};\n</script>\n\n<style scoped>\n/* notif */\n/* Your existing style code */\n.notification {\n  position: fixed;\n  top: 10px;\n  right: 10px;\n  padding: 10px;\n  border-radius: 5px;\n  color: #fff;\n  font-weight: bold;\n}\n</style>\n"]}]}