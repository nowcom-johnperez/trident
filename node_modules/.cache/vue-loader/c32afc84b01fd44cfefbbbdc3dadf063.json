{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/dialog/ScaleMachineDownDialog.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/dialog/ScaleMachineDownDialog.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCB7IENBUEkgYXMgQ0FQSV9MQUJFTFMgfSBmcm9tICdAc2hlbGwvY29uZmlnL2xhYmVscy1hbm5vdGF0aW9ucyc7CmltcG9ydCB7IENBUEkgfSBmcm9tICdAc2hlbGwvY29uZmlnL3R5cGVzJzsKaW1wb3J0IEdlbmVyaWNQcm9tcHQgZnJvbSAnLi9HZW5lcmljUHJvbXB0JzsKCmV4cG9ydCBkZWZhdWx0IHsKICBjb21wb25lbnRzOiB7IEdlbmVyaWNQcm9tcHQgfSwKCiAgcHJvcHM6IHsKICAgIHJlc291cmNlczogewogICAgICB0eXBlOiAgICAgQXJyYXksCiAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9CiAgfSwKCiAgYXN5bmMgZmV0Y2goKSB7CiAgICBhd2FpdCBQcm9taXNlLmFsbChbCiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdtYW5hZ2VtZW50L2ZpbmRBbGwnLCB7IHR5cGU6IENBUEkuTUFDSElORV9ERVBMT1lNRU5UIH0pLAogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnbWFuYWdlbWVudC9maW5kQWxsJywgeyB0eXBlOiBDQVBJLk1BQ0hJTkUgfSkKICAgIF0pOwogIH0sCgogIGRhdGEoKSB7CiAgICBjb25zdCBhbGxUb0RlbGV0ZSA9IEFycmF5LmlzQXJyYXkodGhpcy5yZXNvdXJjZXMpID8gdGhpcy5yZXNvdXJjZXMgOiBbdGhpcy5yZXNvdXJjZXNdOwogICAgY29uc3QgY2x1c3RlciA9IGFsbFRvRGVsZXRlWzBdLmNsdXN0ZXI7CgogICAgLy8gTm90IGFsbCBtYWNoaW5lcyBjYW4gYmUgZGVsZXRlZCwgdGhlcmUgbXVzdCBhbHdheXMgYmUgYXQgbGVhc3Qgb25lIGxlZnQgZm9yIHJvbGVzIGNvbnRyb2wgcGxhbmUgYW5kIGV0Y2QKICAgIC8vIEZpcnN0IGVuc3VyZSB0aGF0IGF0IGxlYXN0IG9uZSBjb250cm9sIHBsYW5lIGV4aXN0cy4uLiBhbmQgdGhlbiBjaGVjayBmcm9tIHRoZSByZW1haW5pbmcgbWFjaGluZXMgdGhhdCBhdCBsZWFzdCBvbmUgZXRjZCBleGlzdHMKICAgIC8vIFRoaXMgaXNuJ3Qgb3B0aW1pc2llZCwgdGhlcmUgbWF5IGJlIGNhc2VzIHRoYXQgcmV0YWluaW5nIGEgc2luZ2xlIG1hY2hpbmUgd2l0aCBib3RoIHJvbGVzIHdvdWxkIGJlIGJldHRlciB0aGFuIHJldGFpbmluZyB0d28gd2l0aCBzaW5nbGUgcm9sZXMKICAgIGNvbnN0IFtpZ25vcmVkQ29udHJvbFBsYW5lLCBzYWZlQ29udHJvbGVQbGFuZU1hY2hpbmVzVG9EZWxldGVdID0gdGhpcy5kZWxldGVUeXBlKCdpc0NvbnRyb2xQbGFuZScsIGFsbFRvRGVsZXRlLCBjbHVzdGVyKTsKICAgIGNvbnN0IFtpZ25vcmVkRXRjZCwgc2FmZU1hY2hpbmVzVG9EZWxldGVdID0gdGhpcy5kZWxldGVUeXBlKCdpc0V0Y2QnLCBzYWZlQ29udHJvbGVQbGFuZU1hY2hpbmVzVG9EZWxldGUsIGNsdXN0ZXIpOwogICAgY29uc3QgaWdub3JlZCA9IFtpZ25vcmVkQ29udHJvbFBsYW5lLCBpZ25vcmVkRXRjZF0uZmlsdGVyKChpKSA9PiAhIWkpOwoKICAgIHJldHVybiB7CiAgICAgIGNsdXN0ZXIsCiAgICAgIGFsbFRvRGVsZXRlLAogICAgICBzYWZlTWFjaGluZXNUb0RlbGV0ZSwKICAgICAgaWdub3JlZCwKICAgICAgdHlwZTogICB0aGlzLiRzdG9yZS5nZXR0ZXJzWyd0eXBlLW1hcC9sYWJlbEZvciddKGFsbFRvRGVsZXRlWzBdLnNjaGVtYSwgYWxsVG9EZWxldGUubGVuZ3RoKSwKICAgICAgY29uZmlnOiB7CiAgICAgICAgdGl0bGU6ICAgICAgIHRoaXMudCgncHJvbXB0UmVtb3ZlLnRpdGxlJyksCiAgICAgICAgYXBwbHlNb2RlOiAgICdkZWxldGUnLAogICAgICAgIGFwcGx5QWN0aW9uOiB0aGlzLnJlbW92ZSwKICAgICAgfQogICAgfTsKICB9LAoKICBtZXRob2RzOiB7CiAgICBkZWxldGVUeXBlKHR5cGUsIGFsbFRvRGVsZXRlLCBjbHVzdGVyKSB7CiAgICAgIGNvbnN0IGFsbFRvRGVsZXRlQnlUeXBlID0gYWxsVG9EZWxldGUucmVkdWNlKChyZXMsIG0pID0+IHsKICAgICAgICBpZiAobVt0eXBlXSkgewogICAgICAgICAgcmVzLnR5cGVkLnB1c2gobSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlcy5vdGhlcnMucHVzaChtKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiByZXM7CiAgICAgIH0sIHsgdHlwZWQ6IFtdLCBvdGhlcnM6IFtdIH0pOwoKICAgICAgY29uc3QgdG90YWxUeXBlcyA9IGNsdXN0ZXIubWFjaGluZXMuZmlsdGVyKChtKSA9PiBtW3R5cGVdKS5sZW5ndGg7CiAgICAgIGNvbnN0IHR5cGVzVG9EZWxldGUgPSBhbGxUb0RlbGV0ZUJ5VHlwZS50eXBlZC5sZW5ndGg7CiAgICAgIC8vIElmIHdlJ3JlIGF0dGVtcHRpbmcgdG8gcmVtb3ZlIGFsbCBjb250cm9sIHBsYW4gbWFjaGluZXMuLi4uIGlnbm9yZSBvbmUKICAgICAgY29uc3QgaWdub3JlZFR5cGUgPSB0b3RhbFR5cGVzIC0gdHlwZXNUb0RlbGV0ZSA9PT0gMCA/IGFsbFRvRGVsZXRlQnlUeXBlLnR5cGVkLnBvcCgpIDogdW5kZWZpbmVkOwogICAgICBjb25zdCBzYWZlTWFjaGluZXNUb0RlbGV0ZSA9IFsuLi5hbGxUb0RlbGV0ZUJ5VHlwZS50eXBlZCwgLi4uYWxsVG9EZWxldGVCeVR5cGUub3RoZXJzXTsKCiAgICAgIHJldHVybiBbaWdub3JlZFR5cGUsIHNhZmVNYWNoaW5lc1RvRGVsZXRlXTsKICAgIH0sCgogICAgYXN5bmMgcmVtb3ZlKCkgewogICAgICAvLyBHcm91cCBtYWNoaW5lcyBpbnRvIHBvb2xzCiAgICAgIGNvbnN0IHBvb2xJbmZvID0gdGhpcy5zYWZlTWFjaGluZXNUb0RlbGV0ZS5yZWR1Y2UoKHJlcywgbSkgPT4gewogICAgICAgIHJlcy5zZXQobS5wb29sLCByZXMuZ2V0KG0ucG9vbCkgfHwgW10pOwogICAgICAgIHJlcy5nZXQobS5wb29sKS5wdXNoKG0pOwoKICAgICAgICByZXR1cm4gcmVzOwogICAgICB9LCBuZXcgTWFwKCkpOwoKICAgICAgLy8gTWFyayBhbGwgbWFjaGluZXMgZm9yIGRlbGV0aW9uIGFuZCB0aGVuIHNjYWxlIGRvd24gdGhlaXIgcG9vbCB0byB0aGUgbmV3IHNpemUKICAgICAgY29uc3QgZmxhdEFycmF5ID0gQXJyYXkuZnJvbShwb29sSW5mby5lbnRyaWVzKCkpOwoKICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoZmxhdEFycmF5Lm1hcCgoW3Bvb2wsIG1hY2hpbmVzXSkgPT4gewogICAgICAgIHJldHVybiBQcm9taXNlCiAgICAgICAgICAuYWxsKG1hY2hpbmVzLm1hcCgobSkgPT4gewogICAgICAgICAgICBtLnNldEFubm90YXRpb24oQ0FQSV9MQUJFTFMuREVMRVRFX01BQ0hJTkUsICd0cnVlJyk7CgogICAgICAgICAgICByZXR1cm4gbS5zYXZlKCk7CiAgICAgICAgICB9KSkKICAgICAgICAgIC50aGVuKCgpID0+IHBvb2wuc2NhbGVQb29sKC1tYWNoaW5lcy5sZW5ndGgsIGZhbHNlKSk7CiAgICAgIH0pKTsKCiAgICAgIC8vIFBvb2wgc2NhbGUgaW5mbyBpcyBrZXB0IGluIHRoZSBjbHVzdGVyIGl0c2VsZiwgc28gbm93IHdlJ3ZlIG1hZGUgdGhlIGNoYW5nZXMgd2UgY2FuIHNhdmUgdGhlbQogICAgICBhd2FpdCB0aGlzLmNsdXN0ZXIuc2F2ZSgpOwogICAgfQogIH0KfTsK"},{"version":3,"sources":["ScaleMachineDownDialog.vue"],"names":[],"mappings":";AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"ScaleMachineDownDialog.vue","sourceRoot":"node_modules/@rancher/shell/dialog","sourcesContent":["<script>\nimport { CAPI as CAPI_LABELS } from '@shell/config/labels-annotations';\nimport { CAPI } from '@shell/config/types';\nimport GenericPrompt from './GenericPrompt';\n\nexport default {\n  components: { GenericPrompt },\n\n  props: {\n    resources: {\n      type:     Array,\n      required: true\n    }\n  },\n\n  async fetch() {\n    await Promise.all([\n      this.$store.dispatch('management/findAll', { type: CAPI.MACHINE_DEPLOYMENT }),\n      this.$store.dispatch('management/findAll', { type: CAPI.MACHINE })\n    ]);\n  },\n\n  data() {\n    const allToDelete = Array.isArray(this.resources) ? this.resources : [this.resources];\n    const cluster = allToDelete[0].cluster;\n\n    // Not all machines can be deleted, there must always be at least one left for roles control plane and etcd\n    // First ensure that at least one control plane exists... and then check from the remaining machines that at least one etcd exists\n    // This isn't optimisied, there may be cases that retaining a single machine with both roles would be better than retaining two with single roles\n    const [ignoredControlPlane, safeControlePlaneMachinesToDelete] = this.deleteType('isControlPlane', allToDelete, cluster);\n    const [ignoredEtcd, safeMachinesToDelete] = this.deleteType('isEtcd', safeControlePlaneMachinesToDelete, cluster);\n    const ignored = [ignoredControlPlane, ignoredEtcd].filter((i) => !!i);\n\n    return {\n      cluster,\n      allToDelete,\n      safeMachinesToDelete,\n      ignored,\n      type:   this.$store.getters['type-map/labelFor'](allToDelete[0].schema, allToDelete.length),\n      config: {\n        title:       this.t('promptRemove.title'),\n        applyMode:   'delete',\n        applyAction: this.remove,\n      }\n    };\n  },\n\n  methods: {\n    deleteType(type, allToDelete, cluster) {\n      const allToDeleteByType = allToDelete.reduce((res, m) => {\n        if (m[type]) {\n          res.typed.push(m);\n        } else {\n          res.others.push(m);\n        }\n\n        return res;\n      }, { typed: [], others: [] });\n\n      const totalTypes = cluster.machines.filter((m) => m[type]).length;\n      const typesToDelete = allToDeleteByType.typed.length;\n      // If we're attempting to remove all control plan machines.... ignore one\n      const ignoredType = totalTypes - typesToDelete === 0 ? allToDeleteByType.typed.pop() : undefined;\n      const safeMachinesToDelete = [...allToDeleteByType.typed, ...allToDeleteByType.others];\n\n      return [ignoredType, safeMachinesToDelete];\n    },\n\n    async remove() {\n      // Group machines into pools\n      const poolInfo = this.safeMachinesToDelete.reduce((res, m) => {\n        res.set(m.pool, res.get(m.pool) || []);\n        res.get(m.pool).push(m);\n\n        return res;\n      }, new Map());\n\n      // Mark all machines for deletion and then scale down their pool to the new size\n      const flatArray = Array.from(poolInfo.entries());\n\n      await Promise.all(flatArray.map(([pool, machines]) => {\n        return Promise\n          .all(machines.map((m) => {\n            m.setAnnotation(CAPI_LABELS.DELETE_MACHINE, 'true');\n\n            return m.save();\n          }))\n          .then(() => pool.scalePool(-machines.length, false));\n      }));\n\n      // Pool scale info is kept in the cluster itself, so now we've made the changes we can save them\n      await this.cluster.save();\n    }\n  }\n};\n</script>\n\n<template>\n  <GenericPrompt\n    v-bind=\"config\"\n    @close=\"$emit('close')\"\n  >\n    <template slot=\"body\">\n      <div class=\"pl-10 pr-10 mt-20 mb-20 body\">\n        <div v-if=\"allToDelete.length === 1\">\n          {{ t('promptRemove.attemptingToRemove', { type }) }} <b>{{ safeMachinesToDelete[0].name }}</b>\n        </div>\n        <div v-else>\n          {{ t('promptScaleMachineDown.attemptingToRemove', { type, count: allToDelete.length }, true) }}\n        </div>\n        <div\n          v-if=\"ignored.length\"\n          class=\"retained-machine\"\n        >\n          <span class=\"mb-20\">{{ t('promptScaleMachineDown.retainedMachine1') }}</span>\n          <span\n            v-for=\"i in ignored\"\n            :key=\"i.name\"\n            v-clean-html=\"t('promptScaleMachineDown.retainedMachine2', { name: i.name }, true)\"\n          />\n        </div>\n      </div>\n    </template>\n  </GenericPrompt>\n</template>\n\n<style lang='scss' scoped>\n  .body {\n    div:not(:last-of-type) {\n      padding-bottom: 15px;\n    }\n    .retained-machine {\n      display: flex;\n      flex-direction: column;\n    }\n  }\n</style>\n"]}]}