{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/machine-config/amazonec2.vue?vue&type=style&index=0&id=58661a22&scoped=true&lang=scss","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/machine-config/amazonec2.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci52cGMsIC52cGMtc3VibmV0IHsKICBkaXNwbGF5OiBmbGV4OwogIGxpbmUtaGVpZ2h0OiAzMHB4OwoKICAudnBjLW5hbWUgewogICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICBmbGV4OiAxOwogIH0KCiAgLnZwYy1pbmZvIHsKICAgIGZvbnQtc2l6ZTogMTJweDsKICAgIG9wYWNpdHk6IDAuNzsKICB9Cn0KCi52cGMtc3VibmV0IC52cGMtbmFtZSB7CiAgZm9udC13ZWlnaHQ6IG5vcm1hbDsKICBwYWRkaW5nLWxlZnQ6IDE1cHg7Cn0K"},{"version":3,"sources":["amazonec2.vue"],"names":[],"mappings":";AA8rBA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"amazonec2.vue","sourceRoot":"node_modules/@rancher/shell/machine-config","sourcesContent":["<script>\nimport Loading from '@shell/components/Loading';\nimport { Banner } from '@components/Banner';\nimport CreateEditView from '@shell/mixins/create-edit-view';\nimport LabeledSelect from '@shell/components/form/LabeledSelect';\nimport { LabeledInput } from '@components/Form/LabeledInput';\nimport KeyValue from '@shell/components/form/KeyValue';\nimport UnitInput from '@shell/components/form/UnitInput';\nimport { RadioGroup } from '@components/Form/Radio';\nimport { Checkbox } from '@components/Form/Checkbox';\nimport { NORMAN } from '@shell/config/types';\nimport { allHash } from '@shell/utils/promise';\nimport { addObject, addObjects, findBy } from '@shell/utils/array';\nimport { sortBy } from '@shell/utils/sort';\nimport { stringify, exceptionToErrorsArray } from '@shell/utils/error';\n\nconst DEFAULT_GROUP = 'rancher-nodes';\n\nexport default {\n  components: {\n    Banner, Loading, LabeledInput, LabeledSelect, Checkbox, RadioGroup, UnitInput, KeyValue\n  },\n\n  mixins: [CreateEditView],\n\n  props: {\n    uuid: {\n      type:     String,\n      required: true,\n    },\n\n    cluster: {\n      type:    Object,\n      default: () => ({})\n    },\n\n    credentialId: {\n      type:     String,\n      required: true,\n    },\n\n    disabled: {\n      type:    Boolean,\n      default: false\n    },\n  },\n\n  async fetch() {\n    this.errors = [];\n    if ( !this.credentialId ) {\n      return;\n    }\n\n    try {\n      if ( this.credential?.id !== this.credentialId ) {\n        this.credential = await this.$store.dispatch('rancher/find', { type: NORMAN.CLOUD_CREDENTIAL, id: this.credentialId });\n      }\n    } catch (e) {\n      this.credential = null;\n    }\n\n    try {\n      const region = this.value.region || this.credential?.decodedData.defaultRegion || this.$store.getters['aws/defaultRegion'];\n\n      if ( !this.value.region ) {\n        this.$set(this.value, 'region', region);\n      }\n\n      this.ec2Client = await this.$store.dispatch('aws/ec2', { region, cloudCredentialId: this.credentialId });\n      this.kmsClient = await this.$store.dispatch('aws/kms', { region, cloudCredentialId: this.credentialId });\n\n      if ( !this.instanceInfo ) {\n        this.instanceInfo = await this.$store.dispatch('aws/instanceInfo', { client: this.ec2Client } );\n      }\n\n      const hash = {};\n\n      if ( !this.regionInfo ) {\n        hash.regionInfo = this.ec2Client.describeRegions({});\n      }\n\n      if ( this.loadedRegionalFor !== region ) {\n        hash.zoneInfo = await this.ec2Client.describeAvailabilityZones({});\n        hash.vpcInfo = await this.ec2Client.describeVpcs({});\n        hash.subnetInfo = await this.ec2Client.describeSubnets({});\n        hash.securityGroupInfo = await this.ec2Client.describeSecurityGroups({});\n      }\n\n      const res = await allHash(hash);\n\n      for ( const k in res ) {\n        this[k] = res[k];\n      }\n\n      try {\n        this.kmsInfo = await this.kmsClient.listKeys({});\n        this.canReadKms = true;\n      } catch (e) {\n        this.canReadKms = false;\n      }\n\n      if ( !this.value.zone ) {\n        this.$set(this.value, 'zone', 'a');\n      }\n\n      if ( !this.value.instanceType ) {\n        this.$set(this.value, 'instanceType', this.$store.getters['aws/defaultInstanceType']);\n      }\n\n      this.initNetwork();\n      this.initTags();\n\n      if ( !this.value.securityGroup?.length ) {\n        this.$set(this.value, 'securityGroup', [DEFAULT_GROUP]);\n      }\n\n      if ( this.value.securityGroup?.length === 1 && this.value.securityGroup[0] === DEFAULT_GROUP ) {\n        this.securityGroupMode = 'default';\n      } else {\n        this.securityGroupMode = 'custom';\n      }\n\n      this.loadedRegionalFor = region;\n    } catch (e) {\n      this.errors = exceptionToErrorsArray(e);\n    }\n  },\n\n  data() {\n    return {\n      ec2Client:         null,\n      kmsClient:         null,\n      credential:        null,\n      instanceInfo:      null,\n      regionInfo:        null,\n      canReadKms:        null,\n      kmsInfo:           null,\n      tags:              null,\n      loadedRegionalFor: null,\n      zoneInfo:          null,\n      vpcInfo:           null,\n      subnetInfo:        null,\n      securityGroupInfo: null,\n      selectedNetwork:   null,\n      securityGroupMode: null,\n    };\n  },\n\n  computed: {\n    securityGroupLabels() {\n      return [\n        this.t('cluster.machineConfig.amazonEc2.securityGroup.mode.default', { defaultGroup: DEFAULT_GROUP }),\n        this.t('cluster.machineConfig.amazonEc2.securityGroup.mode.custom')\n      ];\n    },\n\n    isIamInstanceProfileNameRequired() {\n      return this.cluster?.cloudProvider === 'aws';\n    },\n\n    instanceOptions() {\n      let lastGroup;\n\n      const out = [];\n\n      for ( const row of this.instanceInfo ) {\n        if ( row.groupLabel !== lastGroup ) {\n          out.push({\n            kind:     'group',\n            disabled: true,\n            label:    row.groupLabel\n          });\n\n          lastGroup = row.groupLabel;\n        }\n\n        out.push({\n          label: row['label'],\n          value: row['apiName'],\n        });\n      }\n\n      return out;\n    },\n\n    regionOptions() {\n      if ( !this.regionInfo ) {\n        return [];\n      }\n\n      return this.regionInfo.Regions.map((obj) => {\n        return obj.RegionName;\n      }).sort();\n    },\n\n    zoneOptions() {\n      if ( !this.zoneInfo ) {\n        return [];\n      }\n\n      return this.zoneInfo.AvailabilityZones.map((obj) => {\n        return obj.ZoneName.substr(-1);\n      }).sort();\n    },\n\n    networkOptions() {\n      if ( !this.vpcInfo || !this.subnetInfo ) {\n        return [];\n      }\n\n      let vpcs = [];\n      const subnetsByVpc = {};\n\n      for ( const obj of this.vpcInfo.Vpcs ) {\n        const name = obj.Tags && obj.Tags?.length ? obj.Tags.find((t) => t.Key === 'Name')?.Value : null;\n\n        vpcs.push({\n          label:     name || obj.VpcId,\n          subLabel:  name ? obj.VpcId : obj.CidrBlock,\n          isDefault: obj.IsDefault || false,\n          kind:      'vpc',\n          value:     obj.VpcId,\n        });\n      }\n\n      vpcs = sortBy(vpcs, ['isDefault:desc', 'label']);\n\n      for ( const obj of this.subnetInfo.Subnets ) {\n        if ( obj.AvailabilityZone !== `${ this.value.region }${ this.value.zone }` ) {\n          continue;\n        }\n\n        let entry = subnetsByVpc[obj.VpcId];\n\n        if ( !entry ) {\n          entry = [];\n          subnetsByVpc[obj.VpcId] = entry;\n        }\n\n        const name = obj.Tags && obj.Tags?.length ? obj.Tags.find((t) => t.Key === 'Name')?.Value : null;\n\n        entry.push({\n          label:     name || obj.SubnetId,\n          subLabel:  name ? obj.SubnetId : obj.CidrBlock,\n          kind:      'subnet',\n          isDefault: obj.DefaultForAz || false,\n          value:     obj.SubnetId,\n          vpcId:     obj.VpcId,\n        });\n      }\n\n      const out = [];\n\n      for ( const obj of vpcs ) {\n        addObject(out, obj);\n\n        if ( subnetsByVpc[obj.value] ) {\n          addObjects(out, sortBy(subnetsByVpc[obj.value], ['isDefault:desc', 'label']));\n        }\n      }\n\n      return out;\n    },\n\n    securityGroupOptions() {\n      if ( !this.securityGroupInfo ) {\n        return [];\n      }\n\n      const out = this.securityGroupInfo.SecurityGroups.filter((obj) => {\n        return obj.VpcId === this.value.vpcId;\n      }).map((obj) => {\n        return {\n          label:       obj.GroupName,\n          description: obj.GroupDescription,\n          value:       obj.GroupName\n        };\n      });\n\n      return sortBy(out, 'label');\n    },\n\n    kmsOptions() {\n      if ( !this.kmsInfo ) {\n        return [];\n      }\n\n      const out = this.kmsInfo.Keys.map((obj) => {\n        return obj.KeyArn;\n      }).sort();\n\n      return out;\n    },\n\n    DEFAULT_GROUP() {\n      return DEFAULT_GROUP;\n    }\n  },\n\n  watch: {\n    'credentialId'() {\n      this.$fetch();\n    },\n\n    'value.region'() {\n      this.updateNetwork();\n      this.$fetch();\n    },\n\n    'value.zone'() {\n      this.$fetch();\n    },\n\n    'securityGroupMode'(val) {\n      this.value.securityGroupReadonly = ( val !== 'default' );\n    },\n  },\n\n  methods: {\n    stringify,\n\n    initNetwork() {\n      const id = this.value.subnetId || this.value.vpcId;\n\n      this.selectedNetwork = id;\n    },\n\n    updateNetwork(value) {\n      let obj;\n\n      if ( value ) {\n        obj = findBy(this.networkOptions, 'value', value);\n      }\n\n      if ( obj?.kind === 'subnet' ) {\n        this.value.subnetId = value;\n        this.value.vpcId = obj.vpcId;\n        this.selectedNetwork = value;\n      } else if ( obj ) {\n        this.value.subnetId = null;\n        this.value.vpcId = value;\n        this.selectedNetwork = value;\n      } else {\n        this.value.subnetId = null;\n        this.value.vpcId = null;\n        this.selectedNetwork = null;\n      }\n    },\n\n    initTags() {\n      const parts = (this.value.tags || '').split(/,/);\n      const out = {};\n\n      let i = 0;\n\n      while ( i + 1 < parts.length ) {\n        const key = `${ parts[i] }`.trim();\n        const value = `${ parts[i + 1] }`.trim();\n\n        if ( key ) {\n          out[key] = value;\n        }\n\n        i += 2;\n      }\n\n      this.tags = out;\n    },\n\n    updateTags(tags) {\n      const ary = [];\n\n      for ( const k in tags ) {\n        ary.push(k, tags[k]);\n      }\n\n      this.$set(this.value, 'tags', ary.join(','));\n    },\n\n    test() {\n      const errors = [];\n\n      if (!this.selectedNetwork) {\n        errors.push(this.t('validation.required', { key: 'VPC/Subnet' }, true));\n      }\n\n      return { errors };\n    },\n  },\n};\n</script>\n\n<template>\n  <div>\n    <Loading v-if=\"$fetchState.pending\" />\n    <template v-else>\n      <div v-if=\"errors.length\">\n        <div\n          v-for=\"(err, idx) in errors\"\n          :key=\"idx\"\n        >\n          <Banner\n            color=\"error\"\n            :label=\"stringify(err)\"\n          />\n        </div>\n      </div>\n\n      <div v-if=\"loadedRegionalFor\">\n        <div class=\"row mb-20\">\n          <div class=\"col span-6\">\n            <LabeledSelect\n              v-model=\"value.region\"\n              :mode=\"mode\"\n              :options=\"regionOptions\"\n              :required=\"true\"\n              :searchable=\"true\"\n              :disabled=\"disabled\"\n              :label=\"t('cluster.machineConfig.amazonEc2.region')\"\n            />\n          </div>\n          <div class=\"col span-6\">\n            <LabeledSelect\n              v-model=\"value.zone\"\n              :mode=\"mode\"\n              :options=\"zoneOptions\"\n              :required=\"true\"\n              :disabled=\"disabled\"\n              :label=\"t('cluster.machineConfig.amazonEc2.zone')\"\n            />\n          </div>\n        </div>\n        <div class=\"row mb-20\">\n          <div class=\"col span-9\">\n            <LabeledSelect\n              v-model=\"value.instanceType\"\n              :mode=\"mode\"\n              :options=\"instanceOptions\"\n              :required=\"true\"\n              :selectable=\"option => !option.disabled\"\n              :searchable=\"true\"\n              :disabled=\"disabled\"\n              :label=\"t('cluster.machineConfig.amazonEc2.instanceType')\"\n            >\n              <template v-slot:option=\"opt\">\n                <template v-if=\"opt.kind === 'group'\">\n                  <b>{{ opt.label }}</b>\n                </template>\n                <template v-else>\n                  <span class=\"pl-10\">{{ opt.label }}</span>\n                </template>\n              </template>\n            </LabeledSelect>\n          </div>\n          <div class=\"col span-3\">\n            <UnitInput\n              v-model=\"value.rootSize\"\n              output-as=\"string\"\n              :mode=\"mode\"\n              :disabled=\"disabled\"\n              :placeholder=\"t('cluster.machineConfig.amazonEc2.rootSize.placeholder')\"\n              :label=\"t('cluster.machineConfig.amazonEc2.rootSize.label')\"\n              :suffix=\"t('cluster.machineConfig.amazonEc2.rootSize.suffix')\"\n            />\n          </div>\n        </div>\n        <div class=\"row mt-20 mb-20\">\n          <div class=\"col span-6\">\n            <LabeledSelect\n              :mode=\"mode\"\n              :value=\"selectedNetwork\"\n              :options=\"networkOptions\"\n              :searchable=\"true\"\n              :required=\"true\"\n              :disabled=\"disabled\"\n              :placeholder=\"t('cluster.machineConfig.amazonEc2.selectedNetwork.placeholder')\"\n              :label=\"t('cluster.machineConfig.amazonEc2.selectedNetwork.label')\"\n              option-key=\"value\"\n              @input=\"updateNetwork($event)\"\n            >\n              <template v-slot:option=\"opt\">\n                <div :class=\"{'vpc': opt.kind === 'vpc', 'vpc-subnet': opt.kind !== 'vpc'}\">\n                  <span class=\"vpc-name\">{{ opt.label }}</span><span class=\"vpc-info\">{{ opt.subLabel }}</span>\n                </div>\n              </template>\n            </LabeledSelect>\n          </div>\n          <div class=\"col span-6\">\n            <LabeledInput\n              v-model=\"value.iamInstanceProfile\"\n              :mode=\"mode\"\n              :disabled=\"disabled\"\n              :required=\"isIamInstanceProfileNameRequired\"\n              :tooltip=\"t('cluster.machineConfig.amazonEc2.iamInstanceProfile.tooltip')\"\n              :label=\"t('cluster.machineConfig.amazonEc2.iamInstanceProfile.label')\"\n            />\n          </div>\n        </div>\n\n        <portal :to=\"'advanced-'+uuid\">\n          <div class=\"row mt-20\">\n            <div class=\"col span-6\">\n              <LabeledInput\n                v-model=\"value.ami\"\n                :mode=\"mode\"\n                :disabled=\"disabled\"\n                :placeholder=\"t('cluster.machineConfig.amazonEc2.ami.placeholder')\"\n                :label=\"t('cluster.machineConfig.amazonEc2.ami.label')\"\n              />\n            </div>\n            <div class=\"col span-6\">\n              <LabeledInput\n                v-model=\"value.sshUser\"\n                :mode=\"mode\"\n                :label=\"t('cluster.machineConfig.amazonEc2.sshUser.label')\"\n                :disabled=\"!value.ami || disabled\"\n                :tooltip=\"t('cluster.machineConfig.amazonEc2.sshUser.tooltip')\"\n                :placeholder=\"t('cluster.machineConfig.amazonEc2.sshUser.placeholder')\"\n              />\n            </div>\n          </div>\n\n          <div class=\"row mt-20\">\n            <div class=\"col span-12\">\n              <h3>\n                {{ t('cluster.machineConfig.amazonEc2.securityGroup.title') }}\n                <span\n                  v-if=\"!value.vpcId\"\n                  class=\"text-muted text-small\"\n                >\n                  {{ t('cluster.machineConfig.amazonEc2.securityGroup.vpcId') }}\n                </span>\n              </h3>\n              <RadioGroup\n                v-model=\"securityGroupMode\"\n                name=\"securityGroupMode\"\n                :mode=\"mode\"\n                :disabled=\"!value.vpcId || disabled\"\n                :labels=\"securityGroupLabels\"\n                :options=\"['default','custom']\"\n              />\n              <LabeledSelect\n                v-if=\"value.vpcId && securityGroupMode === 'custom'\"\n                v-model=\"value.securityGroup\"\n                :mode=\"mode\"\n                :disabled=\"!value.vpcId || disabled\"\n                :options=\"securityGroupOptions\"\n                :searchable=\"true\"\n                :multiple=\"true\"\n                :taggable=\"true\"\n              />\n            </div>\n          </div>\n\n          <div class=\"row mt-20\">\n            <div class=\"col span-6\">\n              <LabeledInput\n                v-model=\"value.volumeType\"\n                :mode=\"mode\"\n                :disabled=\"disabled\"\n                :label=\"t('cluster.machineConfig.amazonEc2.volumeType.label')\"\n                :placeholder=\"t('cluster.machineConfig.amazonEc2.volumeType.placeholder')\"\n              />\n            </div>\n          </div>\n\n          <div class=\"row mt-20\">\n            <div class=\"col span-12\">\n              <Checkbox\n                v-model=\"value.encryptEbsVolume\"\n                :mode=\"mode\"\n                :label=\"t('cluster.machineConfig.amazonEc2.encryptEbsVolume')\"\n              />\n              <div\n                v-if=\"value.encryptEbsVolume\"\n                class=\"mt-10\"\n              >\n                <LabeledSelect\n                  v-if=\"canReadKms\"\n                  v-model=\"value.kmsKey\"\n                  :mode=\"mode\"\n                  :options=\"kmsOptions\"\n                  :disabled=\"disabled\"\n                  :label=\"t('cluster.machineConfig.amazonEc2.kmsKey.label')\"\n                />\n                <template v-else>\n                  <LabeledInput\n                    v-model=\"value.kmsKey\"\n                    :mode=\"mode\"\n                    :disabled=\"disabled\"\n                    :label=\"t('cluster.machineConfig.amazonEc2.kmsKey.label')\"\n                  />\n                  <p class=\"text-muted\">\n                    {{ t('cluster.machineConfig.amazonEc2.kmsKey.text') }}\n                  </p>\n                </template>\n              </div>\n            </div>\n          </div>\n          <div class=\"row mt-20\">\n            <div class=\"col span-6\">\n              <Checkbox\n                v-model=\"value.requestSpotInstance\"\n                :mode=\"mode\"\n                :label=\"t('cluster.machineConfig.amazonEc2.requestSpotInstance')\"\n              />\n              <div\n                v-if=\"value.requestSpotInstance\"\n                class=\"mt-10\"\n              >\n                <UnitInput\n                  v-model=\"value.spotPrice\"\n                  output-as=\"string\"\n                  :mode=\"mode\"\n                  :disabled=\"disabled\"\n                  :placeholder=\"t('cluster.machineConfig.amazonEc2.spotPrice.placeholder')\"\n                  :label=\"t('cluster.machineConfig.amazonEc2.spotPrice.label')\"\n                  :suffix=\"t('cluster.machineConfig.amazonEc2.spotPrice.suffix')\"\n                />\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row mt-20\">\n            <div class=\"col span-12\">\n              <div>\n                <Checkbox\n                  v-model=\"value.privateAddressOnly\"\n                  :mode=\"mode\"\n                  :disabled=\"disabled\"\n                  :label=\"t('cluster.machineConfig.amazonEc2.privateAddressOnly')\"\n                />\n              </div>\n              <div>\n                <Checkbox\n                  v-model=\"value.useEbsOptimizedInstance\"\n                  :mode=\"mode\"\n                  :disabled=\"disabled\"\n                  :label=\"t('cluster.machineConfig.amazonEc2.useEbsOptimizedInstance')\"\n                />\n              </div>\n              <div>\n                <Checkbox\n                  v-model=\"value.httpEndpoint\"\n                  value-when-true=\"enabled\"\n                  :mode=\"mode\"\n                  :disabled=\"disabled\"\n                  :label=\"t('cluster.machineConfig.amazonEc2.httpEndpoint')\"\n                />\n              </div>\n              <div>\n                <Checkbox\n                  v-model=\"value.httpTokens\"\n                  value-when-true=\"required\"\n                  :mode=\"mode\"\n                  :disabled=\"!value.httpEndpoint || disabled\"\n                  :label=\"t('cluster.machineConfig.amazonEc2.httpTokens')\"\n                />\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row mt-20\">\n            <div class=\"col span-12\">\n              <KeyValue\n                :value=\"tags\"\n                :mode=\"mode\"\n                :read-allowed=\"false\"\n                :label=\"t('cluster.machineConfig.amazonEc2.tagTitle')\"\n                :add-label=\"t('labels.addTag')\"\n                :disabled=\"disabled\"\n                @input=\"updateTags\"\n              />\n            </div>\n          </div>\n        </portal>\n      </div>\n    </template>\n  </div>\n</template>\n<style scoped lang=\"scss\">\n  .vpc, .vpc-subnet {\n    display: flex;\n    line-height: 30px;\n\n    .vpc-name {\n      font-weight: bold;\n      flex: 1;\n    }\n\n    .vpc-info {\n      font-size: 12px;\n      opacity: 0.7;\n    }\n  }\n\n  .vpc-subnet .vpc-name {\n    font-weight: normal;\n    padding-left: 15px;\n  }\n</style>\n"]}]}