{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/form/WorkloadPorts.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/form/WorkloadPorts.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCB7IG1hcEdldHRlcnMgfSBmcm9tICd2dWV4JzsKaW1wb3J0IGRlYm91bmNlIGZyb20gJ2xvZGFzaC9kZWJvdW5jZSc7CmltcG9ydCB7IF9FRElULCBfVklFVyB9IGZyb20gJ0BzaGVsbC9jb25maWcvcXVlcnktcGFyYW1zJzsKaW1wb3J0IHsgcmVtb3ZlQXQsIGZpbmRCeSB9IGZyb20gJ0BzaGVsbC91dGlscy9hcnJheSc7CmltcG9ydCB7IGNsb25lIH0gZnJvbSAnQHNoZWxsL3V0aWxzL29iamVjdCc7CmltcG9ydCB7IExhYmVsZWRJbnB1dCB9IGZyb20gJ0Bjb21wb25lbnRzL0Zvcm0vTGFiZWxlZElucHV0JzsKaW1wb3J0IExhYmVsZWRTZWxlY3QgZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvZm9ybS9MYWJlbGVkU2VsZWN0JzsKaW1wb3J0IHsgSENJIGFzIEhDSV9MQUJFTFNfQU5OT1RBVElPTlMgfSBmcm9tICdAc2hlbGwvY29uZmlnL2xhYmVscy1hbm5vdGF0aW9ucyc7CmltcG9ydCB7IGlzSGFydmVzdGVyU2F0aXNmaWVzVmVyc2lvbiB9IGZyb20gJ0BzaGVsbC91dGlscy9jbHVzdGVyJzsKaW1wb3J0IHsgSEFSVkVTVEVSX05BTUUgYXMgSEFSVkVTVEVSIH0gZnJvbSAnQHNoZWxsL2NvbmZpZy9mZWF0dXJlcyc7CmltcG9ydCB7IENBUEksIFNFUlZJQ0UgfSBmcm9tICdAc2hlbGwvY29uZmlnL3R5cGVzJzsKCmV4cG9ydCBkZWZhdWx0IHsKICBjb21wb25lbnRzOiB7CiAgICBMYWJlbGVkSW5wdXQsCiAgICBMYWJlbGVkU2VsZWN0LAogIH0sCgogIHByb3BzOiB7CiAgICB2YWx1ZTogewogICAgICB0eXBlOiAgICBBcnJheSwKICAgICAgZGVmYXVsdDogbnVsbCwKICAgIH0sCgogICAgbW9kZTogewogICAgICB0eXBlOiAgICBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6IF9FRElULAogICAgfSwKCiAgICAvLyBhcnJheSBvZiBzZXJ2aWNlcyBhdXRvLWNyZWF0ZWQgcHJldmlvdXNseSAob25seSByZWxldmVudCB3aGVuIG1vZGUgIT09IGNyZWF0ZSkKICAgIHNlcnZpY2VzOiB7CiAgICAgIHR5cGU6ICAgIEFycmF5LAogICAgICBkZWZhdWx0OiAoKSA9PiBbXQogICAgfSwKCiAgICAvLyB3b3JrbG9hZCBuYW1lCiAgICBuYW1lOiB7CiAgICAgIHR5cGU6ICAgIFN0cmluZywKICAgICAgZGVmYXVsdDogJycKICAgIH0KICB9LAoKICBkYXRhKCkgewogICAgY29uc3Qgcm93cyA9IGNsb25lKHRoaXMudmFsdWUgfHwgW10pLm1hcCgocm93KSA9PiB7CiAgICAgIHJvdy5fc2hvd0hvc3QgPSBmYWxzZTsKICAgICAgcm93Ll9zZXJ2aWNlVHlwZSA9IHJvdy5fc2VydmljZVR5cGUgfHwgJyc7CiAgICAgIHJvdy5fbmFtZSA9IHJvdy5uYW1lID8gYCR7IHJvdy5uYW1lIH1gIDogYCR7IHJvdy5jb250YWluZXJQb3J0IH0keyByb3cucHJvdG9jb2wudG9Mb3dlckNhc2UoKSB9JHsgcm93Lmhvc3RQb3J0IHx8IHJvdy5fbGlzdGVuaW5nUG9ydCB8fCAnJyB9YDsKICAgICAgaWYgKHJvdy5ob3N0UG9ydCB8fCByb3cuaG9zdElQKSB7CiAgICAgICAgcm93Ll9zaG93SG9zdCA9IHRydWU7CiAgICAgIH0KCiAgICAgIHJvdy5faXBhbSA9ICcnOwoKICAgICAgcmV0dXJuIHJvdzsKICAgIH0pOwoKICAgIC8vIHNob3cgaG9zdCBwb3J0IGNvbHVtbiBpZiBleGlzdGluZyBwb3J0IGRhdGEgaGFzIGFueSBob3N0IHBvcnRzIGRlZmluZWQKICAgIGNvbnN0IHNob3dIb3N0UG9ydHMgPSAhIXJvd3Muc29tZSgocm93KSA9PiAhIXJvdy5ob3N0UG9ydCk7CgogICAgcmV0dXJuIHsKICAgICAgcm93cywKICAgICAgc2hvd0hvc3RQb3J0cywKICAgICAgd29ya2xvYWRQb3J0T3B0aW9uczogWydUQ1AnLCAnVURQJ10KICAgIH07CiAgfSwKCiAgY29tcHV0ZWQ6IHsKICAgIC4uLm1hcEdldHRlcnMoWydjdXJyZW50Q2x1c3RlciddKSwKCiAgICBjYW5Ob3RBY2Nlc3NTZXJ2aWNlKCkgewogICAgICByZXR1cm4gIXRoaXMuJHN0b3JlLmdldHRlcnNbJ2NsdXN0ZXIvc2NoZW1hRm9yJ10oU0VSVklDRSk7CiAgICB9LAoKICAgIHNlcnZpY2VUeXBlVG9vbHRpcCgpIHsKICAgICAgcmV0dXJuIHRoaXMuY2FuTm90QWNjZXNzU2VydmljZSA/IHRoaXMudCgnd29ya2xvYWQuY29udGFpbmVyLm5vU2VydmljZUFjY2VzcycpIDogdW5kZWZpbmVkOwogICAgfSwKCiAgICBpc1ZpZXcoKSB7CiAgICAgIHJldHVybiB0aGlzLm1vZGUgPT09IF9WSUVXOwogICAgfSwKCiAgICBzaG93QWRkKCkgewogICAgICByZXR1cm4gIXRoaXMuaXNWaWV3OwogICAgfSwKCiAgICBzaG93UmVtb3ZlKCkgewogICAgICByZXR1cm4gIXRoaXMuaXNWaWV3OwogICAgfSwKCiAgICBzZXJ2aWNlVHlwZXMoKSB7CiAgICAgIHJldHVybiBbCiAgICAgICAgewogICAgICAgICAgbGFiZWw6IHRoaXMudCgnd29ya2xvYWQuY29udGFpbmVyLnBvcnRzLm5vQ3JlYXRlU2VydmljZScpLAogICAgICAgICAgdmFsdWU6ICcnCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBsYWJlbDogdGhpcy50KCdzZXJ2aWNlVHlwZXMuY2x1c3RlcmlwJyksCiAgICAgICAgICB2YWx1ZTogJ0NsdXN0ZXJJUCcKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIGxhYmVsOiB0aGlzLnQoJ3NlcnZpY2VUeXBlcy5ub2RlcG9ydCcpLAogICAgICAgICAgdmFsdWU6ICdOb2RlUG9ydCcKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIGxhYmVsOiB0aGlzLnQoJ3NlcnZpY2VUeXBlcy5sb2FkYmFsYW5jZXInKSwKICAgICAgICAgIHZhbHVlOiAnTG9hZEJhbGFuY2VyJwogICAgICAgIH0sCiAgICAgIF07CiAgICB9LAoKICAgIGNsdXN0ZXJJUFNlcnZpY2VQb3J0cygpIHsKICAgICAgcmV0dXJuICgodGhpcy5zZXJ2aWNlcy5maWx0ZXIoKHN2YykgPT4gc3ZjLnNwZWMudHlwZSA9PT0gJ0NsdXN0ZXJJUCcpIHx8IFtdKVswXSB8fCB7fSk/LnNwZWM/LnBvcnRzOwogICAgfSwKCiAgICBsb2FkQmFsYW5jZXJTZXJ2aWNlUG9ydHMoKSB7CiAgICAgIHJldHVybiAoKHRoaXMuc2VydmljZXMuZmlsdGVyKChzdmMpID0+IHN2Yy5zcGVjLnR5cGUgPT09ICdMb2FkQmFsYW5jZXInKSB8fCBbXSlbMF0gfHwge30pPy5zcGVjPy5wb3J0czsKICAgIH0sCgogICAgbm9kZVBvcnRTZXJ2aWNlUG9ydHMoKSB7CiAgICAgIHJldHVybiAoKHRoaXMuc2VydmljZXMuZmlsdGVyKChzdmMpID0+IHN2Yy5zcGVjLnR5cGUgPT09ICdOb2RlUG9ydCcpIHx8IFtdKVswXSB8fCB7fSk/LnNwZWM/LnBvcnRzOwogICAgfSwKCiAgICBpcGFtT3B0aW9ucygpIHsKICAgICAgcmV0dXJuIFt7CiAgICAgICAgbGFiZWw6ICdESENQJywKICAgICAgICB2YWx1ZTogJ2RoY3AnLAogICAgICB9LCB7CiAgICAgICAgbGFiZWw6ICdQb29sJywKICAgICAgICB2YWx1ZTogJ3Bvb2wnLAogICAgICB9XTsKICAgIH0sCgogICAgaXBhbUluZGV4KCkgewogICAgICByZXR1cm4gdGhpcy5yb3dzLmZpbmRJbmRleCgocm93KSA9PiByb3cuX3NlcnZpY2VUeXBlID09PSAnTG9hZEJhbGFuY2VyJyAmJiByb3cucHJvdG9jb2wgPT09ICdUQ1AnKTsKICAgIH0sCgogICAgc2VydmljZVdpdGhJcGFtKCkgewogICAgICByZXR1cm4gdGhpcy5zZXJ2aWNlcy5maW5kKChzKSA9PiBzPy5tZXRhZGF0YT8uYW5ub3RhdGlvbnNbSENJX0xBQkVMU19BTk5PVEFUSU9OUy5DTE9VRF9QUk9WSURFUl9JUEFNXSk7CiAgICB9LAoKICAgIHNob3dJcGFtKCkgewogICAgICBsZXQgY2xvdWRQcm92aWRlcjsKICAgICAgY29uc3QgdmVyc2lvbiA9IHRoaXMucHJvdmlzaW9uaW5nQ2x1c3Rlcj8ua3ViZXJuZXRlc1ZlcnNpb247CgogICAgICBpZiAodGhpcy5wcm92aXNpb25pbmdDbHVzdGVyPy5pc1JrZTIpIHsKICAgICAgICBjb25zdCBtYWNoaW5lU2VsZWN0b3JDb25maWcgPSB0aGlzLnByb3Zpc2lvbmluZ0NsdXN0ZXI/LnNwZWM/LnJrZUNvbmZpZz8ubWFjaGluZVNlbGVjdG9yQ29uZmlnIHx8IHt9OwogICAgICAgIGNvbnN0IGFnZW50Q29uZmlnID0gKG1hY2hpbmVTZWxlY3RvckNvbmZpZ1swXSB8fCB7fSkuY29uZmlnOwoKICAgICAgICBjbG91ZFByb3ZpZGVyID0gYWdlbnRDb25maWc/LlsnY2xvdWQtcHJvdmlkZXItbmFtZSddOwogICAgICB9IGVsc2UgaWYgKHRoaXMucHJvdmlzaW9uaW5nQ2x1c3Rlcj8uaXNSa2UxKSB7CiAgICAgICAgY29uc3QgY3VycmVudENsdXN0ZXIgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzWydjdXJyZW50Q2x1c3RlciddOwoKICAgICAgICBjbG91ZFByb3ZpZGVyID0gY3VycmVudENsdXN0ZXI/LnNwZWM/LnJhbmNoZXJLdWJlcm5ldGVzRW5naW5lQ29uZmlnPy5jbG91ZFByb3ZpZGVyPy5uYW1lOwogICAgICB9CgogICAgICByZXR1cm4gY2xvdWRQcm92aWRlciA9PT0gSEFSVkVTVEVSICYmCiAgICAgICAgICAgICAgaXNIYXJ2ZXN0ZXJTYXRpc2ZpZXNWZXJzaW9uKHZlcnNpb24pOwogICAgfSwKCiAgICBwcm92aXNpb25pbmdDbHVzdGVyKCkgewogICAgICBjb25zdCBvdXQgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzWydtYW5hZ2VtZW50L2FsbCddKENBUEkuUkFOQ0hFUl9DTFVTVEVSKS5maW5kKChjKSA9PiBjPy5zdGF0dXM/LmNsdXN0ZXJOYW1lID09PSB0aGlzLmN1cnJlbnRDbHVzdGVyLm1ldGFkYXRhLm5hbWUpOwoKICAgICAgcmV0dXJuIG91dDsKICAgIH0sCiAgfSwKCiAgY3JlYXRlZCgpIHsKICAgIHRoaXMucXVldWVVcGRhdGUgPSBkZWJvdW5jZSh0aGlzLnVwZGF0ZSwgNTAwKTsKICAgIHRoaXMucm93cy5tYXAoKHJvdykgPT4gewogICAgICB0aGlzLnNldFNlcnZpY2VUeXBlKHJvdyk7CiAgICAgIHRoaXMuc2V0SXBhbShyb3cpOwogICAgfSk7CiAgfSwKCiAgbWV0aG9kczogewogICAgYWRkKCkgewogICAgICB0aGlzLnJvd3MucHVzaCh7CiAgICAgICAgbmFtZTogICAgICAgICAgJycsCiAgICAgICAgZXhwb3NlOiAgICAgICAgdHJ1ZSwKICAgICAgICBwcm90b2NvbDogICAgICAnVENQJywKICAgICAgICBjb250YWluZXJQb3J0OiBudWxsLAogICAgICAgIGhvc3RQb3J0OiAgICAgIG51bGwsCiAgICAgICAgaG9zdElQOiAgICAgICAgbnVsbCwKICAgICAgICBfc2hvd0hvc3Q6ICAgICBmYWxzZSwKICAgICAgICBfc2VydmljZVR5cGU6ICAnJywKICAgICAgICBfaXBhbTogICAgICAgICAnZGhjcCcsCiAgICAgIH0pOwoKICAgICAgdGhpcy5xdWV1ZVVwZGF0ZSgpOwoKICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gewogICAgICAgIGNvbnN0IGlucHV0cyA9IHRoaXMuJHJlZnMubmFtZTsKCiAgICAgICAgaW5wdXRzW2lucHV0cy5sZW5ndGggLSAxXS5mb2N1cygpOwogICAgICB9KTsKICAgIH0sCgogICAgcmVtb3ZlKGlkeCkgewogICAgICByZW1vdmVBdCh0aGlzLnJvd3MsIGlkeCk7CiAgICAgIHRoaXMucXVldWVVcGRhdGUoKTsKICAgIH0sCgogICAgdXBkYXRlKCkgewogICAgICBpZiAoIHRoaXMuaXNWaWV3ICkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBjb25zdCBvdXQgPSBbXTsKCiAgICAgIGZvciAoIGNvbnN0IHJvdyBvZiB0aGlzLnJvd3MgKSB7CiAgICAgICAgY29uc3QgdmFsdWUgPSBjbG9uZShyb3cpOwoKICAgICAgICBkZWxldGUgdmFsdWUuX3Nob3dIb3N0OwogICAgICAgIG91dC5wdXNoKHZhbHVlKTsKICAgICAgfQogICAgICB0aGlzLiRlbWl0KCdpbnB1dCcsIG91dCk7CiAgICB9LAoKICAgIHNldFNlcnZpY2VUeXBlKHJvdykgewogICAgICBjb25zdCB7IF9uYW1lIH0gPSByb3c7CgogICAgICBpZiAodGhpcy5sb2FkQmFsYW5jZXJTZXJ2aWNlUG9ydHMpIHsKICAgICAgICBjb25zdCBwb3J0U3BlYyA9IGZpbmRCeSh0aGlzLmxvYWRCYWxhbmNlclNlcnZpY2VQb3J0cywgJ25hbWUnLCBfbmFtZSk7CgogICAgICAgIGlmIChwb3J0U3BlYykgewogICAgICAgICAgdGhpcy4kc2V0KHJvdywgJ19saXN0ZW5pbmdQb3J0JywgcG9ydFNwZWMucG9ydCk7CgogICAgICAgICAgcm93Ll9zZXJ2aWNlVHlwZSA9ICdMb2FkQmFsYW5jZXInOwoKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgIH0gaWYgKHRoaXMubm9kZVBvcnRTZXJ2aWNlUG9ydHMpIHsKICAgICAgICBjb25zdCBwb3J0U3BlYyA9IGZpbmRCeSh0aGlzLm5vZGVQb3J0U2VydmljZVBvcnRzLCAnbmFtZScsIF9uYW1lKTsKCiAgICAgICAgaWYgKHBvcnRTcGVjKSB7CiAgICAgICAgICB0aGlzLiRzZXQocm93LCAnX2xpc3RlbmluZ1BvcnQnLCBwb3J0U3BlYy5ub2RlUG9ydCk7CgogICAgICAgICAgcm93Ll9zZXJ2aWNlVHlwZSA9ICdOb2RlUG9ydCc7CgogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgfSBpZiAodGhpcy5jbHVzdGVySVBTZXJ2aWNlUG9ydHMpIHsKICAgICAgICBpZiAoZmluZEJ5KHRoaXMuY2x1c3RlcklQU2VydmljZVBvcnRzLCAnbmFtZScsIF9uYW1lKSkgewogICAgICAgICAgcm93Ll9zZXJ2aWNlVHlwZSA9ICdDbHVzdGVySVAnOwoKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiAnJzsKICAgIH0sCgogICAgc2V0SXBhbShyb3cpIHsKICAgICAgaWYgKHRoaXMuc2VydmljZVdpdGhJcGFtICYmIHJvdy5fc2VydmljZVR5cGUgPT09ICdMb2FkQmFsYW5jZXInICYmIHJvdy5wcm90b2NvbCA9PT0gJ1RDUCcpIHsKICAgICAgICByb3cuX2lwYW0gPSB0aGlzLnNlcnZpY2VXaXRoSXBhbT8ubWV0YWRhdGE/LmFubm90YXRpb25zW0hDSV9MQUJFTFNfQU5OT1RBVElPTlMuQ0xPVURfUFJPVklERVJfSVBBTV07CiAgICAgIH0KICAgIH0sCiAgfSwKfTsK"},{"version":3,"sources":["WorkloadPorts.vue"],"names":[],"mappingsfile":"WorkloadPorts.vue","sourceRoot":"node_modules/@rancher/shell/components/form","sourcesContent":["<script>\nimport { mapGetters } from 'vuex';\nimport debounce from 'lodash/debounce';\nimport { _EDIT, _VIEW } from '@shell/config/query-params';\nimport { removeAt, findBy } from '@shell/utils/array';\nimport { clone } from '@shell/utils/object';\nimport { LabeledInput } from '@components/Form/LabeledInput';\nimport LabeledSelect from '@shell/components/form/LabeledSelect';\nimport { HCI as HCI_LABELS_ANNOTATIONS } from '@shell/config/labels-annotations';\nimport { isHarvesterSatisfiesVersion } from '@shell/utils/cluster';\nimport { HARVESTER_NAME as HARVESTER } from '@shell/config/features';\nimport { CAPI, SERVICE } from '@shell/config/types';\n\nexport default {\n  components: {\n    LabeledInput,\n    LabeledSelect,\n  },\n\n  props: {\n    value: {\n      type:    Array,\n      default: null,\n    },\n\n    mode: {\n      type:    String,\n      default: _EDIT,\n    },\n\n    // array of services auto-created previously (only relevent when mode !== create)\n    services: {\n      type:    Array,\n      default: () => []\n    },\n\n    // workload name\n    name: {\n      type:    String,\n      default: ''\n    }\n  },\n\n  data() {\n    const rows = clone(this.value || []).map((row) => {\n      row._showHost = false;\n      row._serviceType = row._serviceType || '';\n      row._name = row.name ? `${ row.name }` : `${ row.containerPort }${ row.protocol.toLowerCase() }${ row.hostPort || row._listeningPort || '' }`;\n      if (row.hostPort || row.hostIP) {\n        row._showHost = true;\n      }\n\n      row._ipam = '';\n\n      return row;\n    });\n\n    // show host port column if existing port data has any host ports defined\n    const showHostPorts = !!rows.some((row) => !!row.hostPort);\n\n    return {\n      rows,\n      showHostPorts,\n      workloadPortOptions: ['TCP', 'UDP']\n    };\n  },\n\n  computed: {\n    ...mapGetters(['currentCluster']),\n\n    canNotAccessService() {\n      return !this.$store.getters['cluster/schemaFor'](SERVICE);\n    },\n\n    serviceTypeTooltip() {\n      return this.canNotAccessService ? this.t('workload.container.noServiceAccess') : undefined;\n    },\n\n    isView() {\n      return this.mode === _VIEW;\n    },\n\n    showAdd() {\n      return !this.isView;\n    },\n\n    showRemove() {\n      return !this.isView;\n    },\n\n    serviceTypes() {\n      return [\n        {\n          label: this.t('workload.container.ports.noCreateService'),\n          value: ''\n        },\n        {\n          label: this.t('serviceTypes.clusterip'),\n          value: 'ClusterIP'\n        },\n        {\n          label: this.t('serviceTypes.nodeport'),\n          value: 'NodePort'\n        },\n        {\n          label: this.t('serviceTypes.loadbalancer'),\n          value: 'LoadBalancer'\n        },\n      ];\n    },\n\n    clusterIPServicePorts() {\n      return ((this.services.filter((svc) => svc.spec.type === 'ClusterIP') || [])[0] || {})?.spec?.ports;\n    },\n\n    loadBalancerServicePorts() {\n      return ((this.services.filter((svc) => svc.spec.type === 'LoadBalancer') || [])[0] || {})?.spec?.ports;\n    },\n\n    nodePortServicePorts() {\n      return ((this.services.filter((svc) => svc.spec.type === 'NodePort') || [])[0] || {})?.spec?.ports;\n    },\n\n    ipamOptions() {\n      return [{\n        label: 'DHCP',\n        value: 'dhcp',\n      }, {\n        label: 'Pool',\n        value: 'pool',\n      }];\n    },\n\n    ipamIndex() {\n      return this.rows.findIndex((row) => row._serviceType === 'LoadBalancer' && row.protocol === 'TCP');\n    },\n\n    serviceWithIpam() {\n      return this.services.find((s) => s?.metadata?.annotations[HCI_LABELS_ANNOTATIONS.CLOUD_PROVIDER_IPAM]);\n    },\n\n    showIpam() {\n      let cloudProvider;\n      const version = this.provisioningCluster?.kubernetesVersion;\n\n      if (this.provisioningCluster?.isRke2) {\n        const machineSelectorConfig = this.provisioningCluster?.spec?.rkeConfig?.machineSelectorConfig || {};\n        const agentConfig = (machineSelectorConfig[0] || {}).config;\n\n        cloudProvider = agentConfig?.['cloud-provider-name'];\n      } else if (this.provisioningCluster?.isRke1) {\n        const currentCluster = this.$store.getters['currentCluster'];\n\n        cloudProvider = currentCluster?.spec?.rancherKubernetesEngineConfig?.cloudProvider?.name;\n      }\n\n      return cloudProvider === HARVESTER &&\n              isHarvesterSatisfiesVersion(version);\n    },\n\n    provisioningCluster() {\n      const out = this.$store.getters['management/all'](CAPI.RANCHER_CLUSTER).find((c) => c?.status?.clusterName === this.currentCluster.metadata.name);\n\n      return out;\n    },\n  },\n\n  created() {\n    this.queueUpdate = debounce(this.update, 500);\n    this.rows.map((row) => {\n      this.setServiceType(row);\n      this.setIpam(row);\n    });\n  },\n\n  methods: {\n    add() {\n      this.rows.push({\n        name:          '',\n        expose:        true,\n        protocol:      'TCP',\n        containerPort: null,\n        hostPort:      null,\n        hostIP:        null,\n        _showHost:     false,\n        _serviceType:  '',\n        _ipam:         'dhcp',\n      });\n\n      this.queueUpdate();\n\n      this.$nextTick(() => {\n        const inputs = this.$refs.name;\n\n        inputs[inputs.length - 1].focus();\n      });\n    },\n\n    remove(idx) {\n      removeAt(this.rows, idx);\n      this.queueUpdate();\n    },\n\n    update() {\n      if ( this.isView ) {\n        return;\n      }\n      const out = [];\n\n      for ( const row of this.rows ) {\n        const value = clone(row);\n\n        delete value._showHost;\n        out.push(value);\n      }\n      this.$emit('input', out);\n    },\n\n    setServiceType(row) {\n      const { _name } = row;\n\n      if (this.loadBalancerServicePorts) {\n        const portSpec = findBy(this.loadBalancerServicePorts, 'name', _name);\n\n        if (portSpec) {\n          this.$set(row, '_listeningPort', portSpec.port);\n\n          row._serviceType = 'LoadBalancer';\n\n          return;\n        }\n      } if (this.nodePortServicePorts) {\n        const portSpec = findBy(this.nodePortServicePorts, 'name', _name);\n\n        if (portSpec) {\n          this.$set(row, '_listeningPort', portSpec.nodePort);\n\n          row._serviceType = 'NodePort';\n\n          return;\n        }\n      } if (this.clusterIPServicePorts) {\n        if (findBy(this.clusterIPServicePorts, 'name', _name)) {\n          row._serviceType = 'ClusterIP';\n\n          return;\n        }\n      }\n\n      return '';\n    },\n\n    setIpam(row) {\n      if (this.serviceWithIpam && row._serviceType === 'LoadBalancer' && row.protocol === 'TCP') {\n        row._ipam = this.serviceWithIpam?.metadata?.annotations[HCI_LABELS_ANNOTATIONS.CLOUD_PROVIDER_IPAM];\n      }\n    },\n  },\n};\n</script>\n\n<template>\n  <div :style=\"{'width':'100%'}\">\n    <p\n      v-if=\"rows.length > 0\"\n      class=\"padded\"\n    >\n      {{ t('workload.container.ports.detailedDescription') }}\n    </p>\n    <div\n      v-for=\"(row, idx) in rows\"\n      :key=\"idx\"\n      class=\"ports-row\"\n      :class=\"{\n        'show-host':row._showHost,\n        'loadBalancer': row._serviceType === 'LoadBalancer',\n        'tcp': row.protocol === 'TCP',\n        'show-ipam': showIpam,\n      }\"\n    >\n      <div class=\"service-type\">\n        <LabeledSelect\n          v-model=\"row._serviceType\"\n          :mode=\"mode\"\n          :label=\"t('workload.container.ports.createService')\"\n          :options=\"serviceTypes\"\n          :disabled=\"canNotAccessService\"\n          :tooltip=\"serviceTypeTooltip\"\n          @input=\"queueUpdate\"\n        />\n      </div>\n\n      <div class=\"portName\">\n        <LabeledInput\n          ref=\"name\"\n          v-model=\"row.name\"\n          :mode=\"mode\"\n          :label=\"t('workload.container.ports.name')\"\n          @input=\"queueUpdate\"\n        />\n      </div>\n\n      <div class=\"port\">\n        <LabeledInput\n          v-model.number=\"row.containerPort\"\n          :mode=\"mode\"\n          type=\"number\"\n          min=\"1\"\n          max=\"65535\"\n          placeholder=\"e.g. 8080\"\n          :label=\"t('workload.container.ports.containerPort')\"\n          :required=\"row._serviceType === 'LoadBalancer' \"\n          @input=\"queueUpdate\"\n        />\n      </div>\n\n      <div class=\"protocol col\">\n        <LabeledSelect\n          v-model=\"row.protocol\"\n          :mode=\"mode\"\n          :options=\"workloadPortOptions\"\n          :multiple=\"false\"\n          :label=\"t('workload.container.ports.protocol')\"\n          @input=\"queueUpdate\"\n        />\n      </div>\n\n      <div\n        v-if=\"row._showHost\"\n        class=\"targetPort\"\n      >\n        <LabeledInput\n          ref=\"port\"\n          v-model.number=\"row.hostPort\"\n          :mode=\"mode\"\n          type=\"number\"\n          min=\"1\"\n          max=\"65535\"\n          placeholder=\"e.g. 80\"\n          :label=\"t('workload.container.ports.hostPort')\"\n          @input=\"queueUpdate\"\n        />\n      </div>\n\n      <div\n        v-if=\"row._showHost\"\n        class=\"hostip\"\n      >\n        <LabeledInput\n          ref=\"port\"\n          v-model=\"row.hostIP\"\n          :mode=\"mode\"\n          placeholder=\"e.g. 1.1.1.1\"\n          :label=\"t('workload.container.ports.hostIP')\"\n          @input=\"queueUpdate\"\n        />\n      </div>\n\n      <div\n        v-if=\"!row._showHost && row._serviceType !== 'LoadBalancer' && row._serviceType !== 'NodePort'\"\n        class=\"add-host\"\n      >\n        <button\n          :disabled=\"mode==='view'\"\n          type=\"button\"\n          class=\"btn btn-sm role-tertiary\"\n          @click=\"row._showHost = true\"\n        >\n          {{ t('workloadPorts.addHost') }}\n        </button>\n      </div>\n\n      <div v-if=\"row._serviceType === 'LoadBalancer' || row._serviceType === 'NodePort'\">\n        <LabeledInput\n          ref=\"port\"\n          v-model.number=\"row._listeningPort\"\n          type=\"number\"\n          :mode=\"mode\"\n          :label=\"t('workload.container.ports.listeningPort')\"\n          :required=\"row._serviceType === 'LoadBalancer' \"\n          @input=\"queueUpdate\"\n        />\n      </div>\n\n      <div v-if=\"showIpam && row._serviceType === 'LoadBalancer' && row.protocol === 'TCP'\">\n        <div v-if=\"idx === ipamIndex\">\n          <LabeledSelect\n            v-model=\"row._ipam\"\n            :mode=\"mode\"\n            :options=\"ipamOptions\"\n            :label=\"t('servicesPage.harvester.ipam.label')\"\n            :disabled=\"mode === 'edit'\"\n            @input=\"queueUpdate\"\n          />\n        </div>\n        <div v-else>\n          <LabeledSelect\n            v-model=\"rows[ipamIndex]._ipam\"\n            :mode=\"mode\"\n            :options=\"ipamOptions\"\n            :label=\"t('servicesPage.harvester.ipam.label')\"\n            :disabled=\"true\"\n            @input=\"queueUpdate\"\n          />\n        </div>\n      </div>\n\n      <div\n        v-if=\"showRemove\"\n        class=\"remove\"\n      >\n        <button\n          type=\"button\"\n          class=\"btn role-link\"\n          @click=\"remove(idx)\"\n        >\n          {{ t('workloadPorts.remove') }}\n        </button>\n      </div>\n    </div>\n    <div\n      v-if=\"showAdd\"\n      class=\"footer\"\n    >\n      <button\n        type=\"button\"\n        class=\"btn role-tertiary add\"\n        @click=\"add()\"\n      >\n        {{ t('workloadPorts.addPort') }}\n      </button>\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n$remove: 75;\n$checkbox: 75;\n\n.title {\n  margin-bottom: 10px;\n\n  .read-from-file {\n    float: right;\n  }\n}\n.ports-headers, .ports-row{\n  display: grid;\n  grid-template-columns: 28% 28% 15% 10% 75px 0.5fr;\n  grid-column-gap: $column-gutter;\n  margin-bottom: 10px;\n  align-items: center;\n  & .port{\n    display: flex;\n    justify-content: space-between;\n  }\n\n  &.show-host{\n    grid-template-columns: 20% 20% 145px 90px 140px .5fr .5fr;\n  }\n\n  &.show-ipam.loadBalancer.tcp{\n    grid-template-columns: 20% 20% 145px 90px .5fr 140px .5fr;\n  }\n\n  &.show-ipam.show-host.loadBalancer{\n    grid-template-columns: 20% 10% 135px 90px 105px .5fr .5fr .5fr;\n  }\n\n  &.show-ipam.show-host.loadBalancer.tcp{\n    grid-template-columns: 12% 10% 135px 90px 105px .5fr .5fr 100px .5fr;\n  }\n}\n\n.add-host {\n  justify-self: center;\n}\n\n.protocol {\n  height: 100%;\n}\n\n.ports-headers {\n  color: var(--input-label);\n}\n\n.toggle-host-ports {\n  color: var(--primary);\n}\n\n.remove BUTTON {\n  padding: 0px;\n}\n\n.ports-row INPUT {\n  height: 50px;\n}\n\n.footer {\n  .protip {\n    float: right;\n    padding: 5px 0;\n  }\n}\n.ports-row .protocol ::v-deep .unlabeled-select,\n.ports-row .protocol ::v-deep .unlabeled-select .v-select {\n  height: 100%;\n}\n.ports-row .protocol ::v-deep .unlabeled-select .vs__dropdown-toggle {\n  padding-top: 12px;\n}\n</style>\n"]}]}