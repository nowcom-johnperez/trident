{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/formatter/ClusterProvider.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/formatter/ClusterProvider.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmV4cG9ydCBkZWZhdWx0IHsKICBwcm9wczogewogICAgcm93OiB7CiAgICAgIHR5cGU6ICAgICBPYmplY3QsCiAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9LAogIH0sCiAgZGF0YShwcm9wcykgewogICAgY29uc3QgbWdtdCA9IHByb3BzLnJvdz8ubWdtdDsKCiAgICByZXR1cm4gewogICAgICAvLyBUaGUgaXNJbXBvcnRlZCBnZXR0ZXIgb24gdGhlIHByb3Zpc2lvbmluZyBjbHVzdGVyCiAgICAgIC8vIG1vZGVsIGRvZXNuJ3Qgd29yayBmb3IgaW1wb3J0ZWQgSzNzIGNsdXN0ZXJzLCBpbgogICAgICAvLyB3aGljaCBjYXNlIGl0IHJldHVybnMgJ2szcycgaW5zdGVhZCBvZiAnaW1wb3J0ZWQuJwogICAgICAvLyBUaGlzIGlzIHRoZSB3b3JrYXJvdW5kLgogICAgICBpc0ltcG9ydGVkOiBtZ210Py5wcm92aWRlckZvckVtYmVyUGFyYW0gPT09ICdpbXBvcnQnIHx8CiAgICAgICAgLy8gd2hlbiBpbXBvcnRlZCBjbHVzdGVyIGlzIEdLRQogICAgICAgICEhbWdtdD8uc3BlYz8uZ2tlQ29uZmlnPy5pbXBvcnRlZCB8fAogICAgICAgIC8vIG9yIEFLUwogICAgICAgICEhbWdtdD8uc3BlYz8uYWtzQ29uZmlnPy5pbXBvcnRlZCB8fAogICAgICAgIC8vIG9yIEVLUwogICAgICAgICEhbWdtdD8uc3BlYz8uZWtzQ29uZmlnPy5pbXBvcnRlZAogICAgfTsKICB9LAp9Owo="},{"version":3,"sources":["ClusterProvider.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ClusterProvider.vue","sourceRoot":"node_modules/@rancher/shell/components/formatter","sourcesContent":["<script>\nexport default {\n  props: {\n    row: {\n      type:     Object,\n      required: true\n    },\n  },\n  data(props) {\n    const mgmt = props.row?.mgmt;\n\n    return {\n      // The isImported getter on the provisioning cluster\n      // model doesn't work for imported K3s clusters, in\n      // which case it returns 'k3s' instead of 'imported.'\n      // This is the workaround.\n      isImported: mgmt?.providerForEmberParam === 'import' ||\n        // when imported cluster is GKE\n        !!mgmt?.spec?.gkeConfig?.imported ||\n        // or AKS\n        !!mgmt?.spec?.aksConfig?.imported ||\n        // or EKS\n        !!mgmt?.spec?.eksConfig?.imported\n    };\n  },\n};\n</script>\n\n<template>\n  <div>\n    <template v-if=\"row.machineProvider\">\n      <span v-if=\"row.isHarvester && row.mgmt && row.mgmt.isReady && !row.hasError\">\n        <a\n          v-if=\"row.mgmt.isReady && !row.hasError\"\n          role=\"button\"\n          @click=\"row.goToHarvesterCluster()\"\n        >\n          {{ row.machineProviderDisplay }}\n        </a>\n      </span>\n      <span v-else>\n        {{ row.machineProviderDisplay }}\n      </span>\n    </template>\n    <template v-else-if=\"row.isCustom\">\n      {{ t('cluster.provider.custom') }}\n    </template>\n    <template v-else-if=\"isImported\">\n      {{ t('cluster.provider.imported') }}\n    </template>\n    <div class=\"text-muted\">\n      {{ row.provisionerDisplay }}\n    </div>\n  </div>\n</template>\n"]}]}