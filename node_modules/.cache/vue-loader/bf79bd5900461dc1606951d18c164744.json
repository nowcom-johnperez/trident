{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/pkg/nowcom/pages/list-natgateway.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/pkg/nowcom/pages/list-natgateway.vue","mtime":1716430386795},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["list-natgateway.vue"],"names":[],"mappings":";AAkfile":"list-natgateway.vue","sourceRoot":"pkg/nowcom/pages","sourcesContent":["<template>\n    <div class=\"base\">\n        <h1>NAT Gateway</h1>\n        <!-- Notification container -->\n        <div class=\"message-row\">\n            <div class=\"message-column\"></div>\n            <div class=\"message-column\">\n                <!-- Display API response data -->\n                <div v-if=\"apiResponse\">\n                    <h2 align=\"center\">{{ apiResponseMessage }}</h2>\n                    <pre align=\"center\" v-if=\"!apiError\">Deleted VNET: {{ apiResponse.vnet_name }}</pre>\n                    <pre align=\"center\" v-if=\"apiError\">{{ apiError.error }} : {{ selectedName }}</pre>\n                </div>\n            </div>\n        </div>\n        <GroupButtons :list=\"natGatewayButtons\" @action=\"actionHandler\"/>\n        <div class=\"form-row mt-10\">\n            <div class=\"form-column\">\n                <UniversalTable :headers=\"vnetHeaders\" :filters=\"filters\" :items=\"networks\" @action-click=\"openModal\" />\n            </div>\n        </div>\n\n        <SideBar type=\"main\" :sidebar-visible=\"sidebarVisible\">\n            <h2>{{ selectedNetwork ? selectedNetwork.vnet_name : 'No Network Selected' }}</h2>\n            <div class=\"form-row\">\n                <div class=\"form-column\" align=\"left\">\n                    <cButton class=\"custom-button\" @click=\"addSubnetSidebar\">\n                        <i class=\"fa fa-plus\"></i> Add Subnet\n                    </cButton>\n                </div>\n            </div>\n            <UniversalTable v-if=\"selectedNetwork\" :headers=\"subVnetHeaders\" :items=\"selectedNetwork.subnets\" @action-click=\"openModalSubnet\" />\n            <UniversalTable v-if=\"selectedNetwork\" :headers=\"subnetworkHeader\" :items=\"selectedNetwork.subnets\" @action-click=\"openModalSubnet\" />\n            </br>\n            <div v-if=\"subnetResponse\">\n                <h2 align=\"center\">{{ subnetResponseMessage }}</h2>\n                <pre align=\"center\" v-if=\"!apiError\">SUBNET: {{ subnet_name }}</pre>\n                <pre align=\"center\" v-if=\"apiError\">{{ apiError.error }} : {{ selectedName }}</pre>\n            </div>\n\n            <cButton class=\"btn-x\" @click=\"closeSidebar\">\n                <i class=\"x-icon fa fa-close fa-lg\"></i>\n            </cButton>\n        </SideBar>\n\n        <SideBar type=\"sub\" :sidebar-visible=\"addSubnetSidebarVisible\">\n            <h2>Add Subnet</h2>\n            <!-- ... your content for adding subnet -->\n            <div class=\"add-form-row\">\n                <input v-model=\"selectedSubnetName\" type=\"text\" placeholder=\"Subnet Name\" title=\"Subnet Name\" />\n            </div>\n            <div class=\"add-form-row\">\n                <input\n                v-model=\"selectedVnetSubnets\"\n                type=\"text\"\n                placeholder=\"Enter subnet (e.g., 10.0.0.0)\"\n                pattern=\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\"\n                title=\"Please enter a valid IP address\"\n                />\n            </div>\n            <div class=\"add-form-row\">\n                <cButton class=\"cbtn btn-light\" :disabled=\"isAddSubnetDisabled\" @click=\"addSubnet\">\n                    <i class=\"fa fa-plus fa-lg mr-5\"></i> Add Subnet\n                </cButton> \n            </div>\n\n            <cButton class=\"btn-x\" @click=\"closeSubnetSidebar\">\n                <i class=\"x-icon fa fa-close fa-lg\"></i>\n            </cButton>\n        </SideBar>\n\n        <Modal v-if=\"isModalOpen\">\n            <template v-slot:content>\n                <h2>Delete?</h2>\n                <p>Are you sure that you want to delete VLAN \"{{ selectedVnetName }}\"?</p>\n            </template>\n\n            <template v-slot:footer>\n                <cButton class=\"delete-button\" @click=\"deleteNetwork\" label=\"Yes\" />\n                <cButton class=\"ok-button\" @click=\"closeModal\" label=\"No\" />\n            </template>\n        </Modal>\n\n        <Modal v-if=\"isModalSubnetOpen\">\n            <template v-slot:content>\n                <h2>Are you sure that you want to delete:</h2>\n                <p>Subnet \"{{ subnet_name }}\" under VNET \"{{ vnet_name }}\"?</p>\n            </template>\n\n            <template v-slot:footer>\n                <cButton class=\"delete-button\" @click=\"deleteSubnet\" label=\"Yes\" />\n                <cButton class=\"ok-button\" @click=\"closeModalSubnet\" label=\"No\" />\n            </template>\n        </Modal>\n    </div>\n</template>\n\n<script>\nimport UniversalTable from '../components/UniversalTable'\nimport cButton from '../components/common/Button'\nimport SideBar from '../components/Sidebar'\nimport GroupButtons from '../components/common/GroupButtons'\nimport Modal from '../components/common/Modal'\nimport { NAT_BUTTONS } from '../config/buttons'\nimport { VNET_HEADERS, SUB_VNET_HEADERS } from '../config/table'\nimport { natService } from '../services/api/nat';\n\nconst PRODUCT_NAME = \"Network\";\nconst LIST_NAT_GATEWAY = \"nat.gateway\";\nconst CREATE_NAT_GATEWAY = \"create.nat.gateway\";\nconst BLANK_CLUSTER = \"_\";\n\nexport default {\n    name: \"ListNatGateway\",\n    components: {\n        UniversalTable,\n        cButton,\n        SideBar,\n        GroupButtons,\n        Modal\n    },\n    // layout: 'home',\n    data() {\n        return {\n            selectedName: \"\", // Dropdown for network name\n            selectedVnetName: \"\",\n            selectedSubnetName: \"\",\n            selectedVnetSubnets: \"10.55.0.0\",\n            networks: [], // This will be populated with data from the API\n            loading: false,\n            isModalOpen: false,\n            apiResponse: null,\n            subnetResponse: null,\n            isModalSubnetOpen: false,\n            vnet_name: \"\",\n            subnet_name: \"\",\n            subnet_id: \"\",\n            selectedNetwork: null,\n            sidebarVisible: false,\n            addSubnetSidebarVisible: false,\n            apiError: null,\n            apiResponseMessage: \"\",\n            network: [],\n            users: [\n                {\n                    name: \"francis\",\n                    age: 17,\n                    email: \"fvictoriano@nowcom.com\",\n                    address: {\n                        street: \"1152 S Ardmore\",\n                        city: \"Los Angeles\",\n                        state: \"California\"\n                    }\n                },\n                {\n                    name: \"Andy\",\n                    age: 17,\n                    email: \"andy@nowcom.com\",\n                    address: {\n                        street: \"1152 S Ardmore\",\n                        city: \"Los Angeles\",\n                        state: \"California\"\n                    }\n                },\n                {\n                    name: \"george\",\n                    age: 17,\n                    email: \"george@nowcom.com\",\n                    address: {\n                        street: \"1152 S Ardmore\",\n                        city: \"Los Angeles\",\n                        state: \"California\"\n                    }\n                },\n                {\n                    name: \"kate\",\n                    age: 17,\n                    email: \"kate@nowcom.com\",\n                    address: {\n                        street: \"1152 S Ardmore\",\n                        city: \"Los Angeles\",\n                        state: \"California\"\n                    }\n                },\n                {\n                    name: \"carlo\",\n                    age: 17,\n                    email: \"carlo@nowcom.com\",\n                    address: {\n                        street: \"1152 S Ardmore\",\n                        city: \"Los Angeles\",\n                        state: \"California\"\n                    }\n                },\n                {\n                    name: \"mohenne\",\n                    age: 17,\n                    email: \"mohenne@nowcom.com\",\n                    address: {\n                        street: \"1152 S Ardmore\",\n                        city: \"Los Angeles\",\n                        state: \"California\"\n                    }\n                }\n\n            ],\n            filters: {\n                name: { value: '', keys: ['vnet_name'] }\n            },\n            currentPage: 1,\n            totalPages: 0,\n            natGatewayButtons: [],\n            vnetHeaders: [],\n            subVnetHeaders: []\n        };\n    },\n    computed: {\n        isAddSubnetDisabled() {\n            // Check conditions to disable the button\n            return !this.selectedSubnetName || !this.selectedVnetSubnets;\n        },\n    },\n    methods: {\n        actionHandler (action) {\n            if (action === 'create') {\n                this.routeCreateNetwork()\n            } else if (action === 'refresh') {\n                this.fetchNetworks()\n            }\n        },\n        async addSubnet() {\n            //v0.2\n            const subnet_data = {\n                subnet_name: this.selectedSubnetName.toLowerCase(),\n                network: this.selectedVnetSubnets,\n            };\n\n            let vnet = this.selectedNetwork.id\n\n            console.log(\"send to API\", subnet_data);\n            console.log(\"log\", this.selectedNetwork);\n\n            try {\n                const response = await natService.createSubnet(vnet, subnet_data);\n                console.log(\"Subnet Network created:\", response.data);\n                this.loading = false;\n\n                //use results from response\n                let newSubnetFromResponse = response.data;\n                this.subnet_name = response.data.subnet_name;\n                this.fetchNetworks();\n                this.selectedNetwork.subnets.push(newSubnetFromResponse);\n\n                // Set the API response data in the component\n                this.subnetResponse = response.data;\n                this.apiError = null; // Reset error state\n                this.subnetResponseMessage = \"Subnet Added Successfully\";\n\n                this.addSubnetSidebarVisible = false;\n            } catch (error) {\n                console.log(error.response)\n                this.loading = false;\n                alert(error.response.data.detail)\n                this.subnetResponseMessage = \"Error\";\n                // Set the API error in the component\n                this.apiError = \"Error creating Subnet\";\n            }\n        },\n        addSubnetSidebar() {\n            this.selectedSubnetName = null;\n            this.addSubnetSidebarVisible = true;\n        },\n        closeSubnetSidebar() {\n            this.addSubnetSidebarVisible = false;\n        },\n        async openSidebar(item) {\n            // Update the item with the fetched data\n            this.subnetResponse = false;\n            this.selectedNetwork = item;\n            this.sidebarVisible = true;\n        },\n        closeSidebar() {\n            this.selectedNetwork = null;\n            this.sidebarVisible = false;\n        },\n        // Method to route to the Create Network page\n        routeCreateNetwork() {\n            this.$router.push(`/${PRODUCT_NAME}/c/${BLANK_CLUSTER}/${CREATE_NAT_GATEWAY}`); // Assuming '/create-network' is the route for the Create Network page\n        },\n        openModal(row) {\n            const { vnetId, vnetName } = row;\n            // Set the selected VLAN name\n            this.selectedVnetId = vnetId;\n            this.selectedVnetName = vnetName;\n            this.subnetResponse = false;\n            // Open the modal\n            this.isModalOpen = true;\n        },\n        closeModal() {\n            this.isModalOpen = false;\n        },\n\n        openModalSubnet(row) {\n            // Set the selected VLAN name\n            const { subnet_name, id } = row\n             \n            this.vnet_id = this.selectedNetwork.id;\n            this.vnet_name = this.selectedNetwork.vnet_name;\n            this.subnet_name = subnet_name;\n            this.subnet_id = id;\n\n            // Open the modal\n            this.isModalSubnetOpen = true;\n        },\n\n        closeModalSubnet() {\n            this.isModalSubnetOpen = false;\n        },\n\n        async fetchNetworks() {\n            try {\n                const networks = await natService.getAllVnets()\n                this.networks = networks.map((network) => {\n                    return {\n                        ...network,\n                        attachments: 'local',\n                        subnetLength: \"Total Subnet: \" + network.subnets.length\n                    }\n                })\n            } catch (error) {\n                console.error(\"Error fetching Network List:\", error);\n            }\n        },\n        async deleteNetwork() {\n            console.log(`Delete Network Endpoint, ${this.selectedVnetName},${this.selectedVnetId} `);\n            try {\n                const response = await natService.deleteNetwork(this.selectedVnetId);\n                this.loading = false;\n                this.apiResponse = response.data;\n                // Set the API response data in the component\n                this.apiResponseMessage = \"VNET Successfully Deleted\";\n                this.apiError = null; // Reset error state\n                //this.fetchHarvesterNetworks();\n                this.fetchNetworks();\n\n                // Close the modal after deletion\n                this.closeModal();\n            } catch (error) {\n                console.error(\"Error deleting network:\", error);\n                this.loading = false;\n                this.apiResponseMessage = \"Error\";\n                // Set the API error in the component\n                this.apiError = error.response ? error.response.data : error.message;\n                this.apiResponse = 1; // Reset response state\n            }\n        },\n\n        async getlAllSubnets (subnetId) {\n            try {\n                const response = await natService.getAllSubnets(subnetId);\n                this.selectedNetwork.subnets = response.data;\n            } catch (error) {\n                this.subnetResponseMessage = \"Error\";\n            }\n        },\n\n        async deleteSubnet() {\n            console.log(\n                `Delete Subnet Endpoint, ${this.vnet_id}, ${this.vnet_name}, ${this.subnet_name}, ${this.subnet_id}`\n            );\n            // Make an Axios DELETE request to delete the network with the selected VLAN name\n\n            try {\n                const response = await natService.deleteSubNet(this.subnet_id);\n                console.log(\"Network deleted:\", response.data);\n                this.loading = false;\n\n                this.subnetResponse = response.data;\n                // Set the API response data in the component\n                this.subnetResponseMessage = \"Subnet Successfully Deleted\";\n                this.apiError = null; // Reset error state\n\n                //call of subnets\n                await this.getlAllSubnets();\n                // Update the selectedNetwork with the selected vnet_name\n                this.selectedNetwork.vnet_name = this.vnet_name;\n                console.log(\"Selected Network:\", this.selectedNetwork);\n                // Close the modal after deletion\n                this.closeModalSubnet();\n            } catch (error) {\n                // Handle any errors here\n                console.error(\"Error deleting network:\", error);\n                this.loading = false;\n                this.subnetResponseMessage = \"Error\";\n                // Set the API error in the component\n                this.apiError = error.response ? error.response.data : error.message;\n                this.subnetResponse = 1; // Reset response state\n            }\n        },\n    },\n    created() {\n        this.natGatewayButtons = NAT_BUTTONS;\n        this.vnetHeaders = VNET_HEADERS;\n        this.subVnetHeaders = SUB_VNET_HEADERS;\n    },\n    mounted() {\n        // Fetch the VLAN list and network list when the component is mounted\n        this.fetchNetworks();\n        //this.fetchHarvesterNetworks();\n    },\n};\n</script>\n  \n<style scoped>\n</style>\n  "]}]}