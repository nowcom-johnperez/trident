{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/formatter/KeyValue.vue?vue&type=style&index=0&id=1dea413a&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/formatter/KeyValue.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CnRkLmNvbC1rZXktdmFsdWUgewogIC5mb3JtYXR0ZXIta2V5LXZhbHVlLWl0ZW0gewogICAgcGFkZGluZzogM3B4IDA7CiAgICAmOmZpcnN0LWNoaWxkIHsKICAgICAgbWFyZ2luLXRvcDogMTBweDsKICAgIH0KICAgICY6bGFzdC1jaGlsZCB7CiAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7CiAgICB9CiAgICBpbnB1dCwgdGV4dGFyZWEgewogICAgICBtYXJnaW4tYm90dG9tOiAxMHB4OwogICAgfQogIH0KfQo="},{"version":3,"sources":["KeyValue.vue"],"names":[],"mappings":";AA+EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"KeyValue.vue","sourceRoot":"node_modules/@rancher/shell/components/formatter","sourcesContent":["<script>\nexport default {\n  props: {\n    /**\n     * When used in headers the value can come in as a string or object (e.g. $.metadata.fields[6] returns an array of csv of key=value pairs)\n     * @model\n     */\n    value: {\n      type:    [String, Object],\n      default: '',\n    },\n  },\n\n  computed: {\n    parsed() {\n      const { value } = this;\n      let rv = value;\n\n      try {\n        rv = this.parseObject(value);\n      } catch {\n        if (typeof value === 'string') {\n          try {\n            const objectValues = JSON.parse(value.slice());\n\n            rv = this.parseObject(objectValues);\n          } catch (e) {\n            console.error('Formatter KeyValue: Unable to parse object from string', e); // eslint-disable-line no-console\n          }\n        }\n      }\n\n      return rv;\n    }\n  },\n  methods: {\n    parseObject(obj) {\n      const valueKeys = Object.keys(obj);\n      const out = [];\n\n      for (let i = 0; i < valueKeys.length; i++) {\n        out.push(`${ valueKeys[i] }=${ obj[valueKeys[i]] }`);\n      }\n\n      return out;\n    }\n  }\n};\n</script>\n\n<template>\n  <div class=\"formatter-key-value-container\">\n    <div\n      v-for=\"( kv, index ) in parsed\"\n      :key=\"index\"\n      class=\"formatter-key-value-item\"\n    >\n      {{ kv }}\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n  td.col-key-value {\n    .formatter-key-value-item {\n      padding: 3px 0;\n      &:first-child {\n        margin-top: 10px;\n      }\n      &:last-child {\n        margin-bottom: 10px;\n      }\n      input, textarea {\n        margin-bottom: 10px;\n      }\n    }\n  }\n</style>\n"]}]}