{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/formatter/ReceiverIcons.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/formatter/ReceiverIcons.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCB7IFJFQ0VJVkVSU19UWVBFUyB9IGZyb20gJ0BzaGVsbC9lZGl0L21vbml0b3JpbmcuY29yZW9zLmNvbS5hbGVydG1hbmFnZXJjb25maWcvcmVjZWl2ZXJDb25maWcudnVlJzsKaW1wb3J0IHsgTU9OSVRPUklORyB9IGZyb20gJ0BzaGVsbC9jb25maWcvdHlwZXMnOwpleHBvcnQgZGVmYXVsdCB7CiAgcHJvcHM6IHsKICAgIHZhbHVlOiB7CiAgICAgIHR5cGU6ICAgIFN0cmluZywKICAgICAgZGVmYXVsdDogJycKICAgIH0sCiAgICByb3c6IHsKICAgICAgdHlwZTogICAgIE9iamVjdCwKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIH0KICB9LAogIGNvbXB1dGVkOiB7CgogICAgdHlwZXMoKSB7CiAgICAvLyBnZXQgY291bnQgYW5kIGxvZ28gZm9yIGFsbCBjb25maWd1cmVkIHR5cGVzIGluIGV2ZXJ5IHJlY2VpdmVyIGluIHRoZSBhbGVydG1hbmFnZXJjb25maWcKICAgICAgaWYgKHRoaXMucm93Py50eXBlID09PSBNT05JVE9SSU5HLkFMRVJUTUFOQUdFUkNPTkZJRykgewogICAgICAgIGNvbnN0IHJlY2VpdmVycyA9IHRoaXMucm93Py5zcGVjPy5yZWNlaXZlcnM7CgogICAgICAgIGlmIChyZWNlaXZlcnMgJiYgcmVjZWl2ZXJzLmxlbmd0aCA+IDApIHsKICAgICAgICAgIHJldHVybiByZWNlaXZlcnMucmVkdWNlKCh0b3RhbHMsIHJlY2VpdmVyKSA9PiB7CiAgICAgICAgICAgIGNvbnN0IGNvdW50cyA9IHRoaXMuZ2V0UmVjZWl2ZXJUeXBlcyhyZWNlaXZlcik7CgogICAgICAgICAgICBPYmplY3Qua2V5cyhjb3VudHMpLmZvckVhY2goKHR5cGUpID0+IHsKICAgICAgICAgICAgICBpZiAoIXRvdGFsc1t0eXBlXSkgewogICAgICAgICAgICAgICAgdG90YWxzW3R5cGVdID0gewogICAgICAgICAgICAgICAgICBjb3VudDogY291bnRzW3R5cGVdLmNvdW50LAogICAgICAgICAgICAgICAgICBsb2dvOiAgY291bnRzW3R5cGVdLmxvZ28KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRvdGFsc1t0eXBlXS5jb3VudCArPSBjb3VudHNbdHlwZV0uY291bnQ7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIHJldHVybiB0b3RhbHM7CiAgICAgICAgICB9LCB7fSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyBpZiBub3QgYWxlcnRtYW5hZ2VyY29uZmlnLCB0aGlzIGlzIGFuIGluZGl2aWR1YWwgcmVjZWl2ZXIKICAgICAgICByZXR1cm4gdGhpcy5nZXRSZWNlaXZlclR5cGVzKHRoaXMucm93KTsKICAgICAgfQogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgLy8gZ2V0IGNvdW50IGFuZCBsb2dvIGZvciBlYWNoIHR5cGUgY29uZmlndXJlZCBpbiBhIGdpdmVuIHJlY2VpdmVyCiAgICBnZXRSZWNlaXZlclR5cGVzKHJlY2VpdmVyKSB7CiAgICAgIC8vIGl0ZXJhdGUgdGhyb3VnaCBwcmVkZWZpbmVkIHR5cGVzIGFuZCBzdW0gdGhlIG51bWJlciBjb25maWd1cmVkIGluIHRoaXMgcmVjZWl2ZXIKICAgICAgY29uc3QgdHlwZXMgPSBSRUNFSVZFUlNfVFlQRVMKICAgICAgICAucmVkdWNlKCh0eXBlcywgdHlwZSkgPT4gewogICAgICAgICAgaWYgKHR5cGUubmFtZSAhPT0gJ2N1c3RvbScgJiYgcmVjZWl2ZXI/Llt0eXBlLmtleV0/Lmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgdHlwZXNbdGhpcy50KHR5cGUubGFiZWwpXSA9IHsgY291bnQ6IHJlY2VpdmVyPy5bdHlwZS5rZXldPy5sZW5ndGgsIGxvZ286IHR5cGUubG9nbyB9OwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiB0eXBlczsKICAgICAgICB9LCB7fSk7CgogICAgICAvLyBpZiB0aGVyZSBhcmUga2V5cyBvdGhlciB0aGFuIHRob3NlIGRlZmluZWQgaW4gUkVDRUlWRVJTX1RZUEVTIGFuZCAnbmFtZScsIGFzc3VtZSB0aGV5J3JlIGN1c3RvbSB0eXBlcyBhbmQgc3VtIHRoZW0gdW5kZXIgImN1c3RvbSIKICAgICAgY29uc3QgZXhwZWN0ZWRLZXlzID0gUkVDRUlWRVJTX1RZUEVTLm1hcCgodHlwZSkgPT4gdHlwZS5rZXkpLmZpbHRlcigoa2V5KSA9PiBrZXkgIT09ICdjdXN0b20nKTsKCiAgICAgIGV4cGVjdGVkS2V5cy5wdXNoKCduYW1lJyk7CiAgICAgIGNvbnN0IGN1c3RvbUtleXMgPSBPYmplY3Qua2V5cyhyZWNlaXZlcikKICAgICAgICAuZmlsdGVyKChrZXkpID0+ICFleHBlY3RlZEtleXMuaW5jbHVkZXMoa2V5KSk7CgogICAgICBpZiAoY3VzdG9tS2V5cy5sZW5ndGggPiAwKSB7CiAgICAgICAgY29uc3QgY3VzdG9tVHlwZSA9IFJFQ0VJVkVSU19UWVBFUy5maW5kKCh0eXBlKSA9PiB0eXBlLm5hbWUgPT09ICdjdXN0b20nKTsKICAgICAgICBjb25zdCBjdXN0b21MYWJlbCA9IHRoaXMudChjdXN0b21UeXBlLmxhYmVsKTsKCiAgICAgICAgdHlwZXNbY3VzdG9tTGFiZWxdID0geyBjb3VudDogY3VzdG9tS2V5cy5sZW5ndGgsIGxvZ286IGN1c3RvbVR5cGUubG9nbyB9OwogICAgICB9CgogICAgICByZXR1cm4gdHlwZXM7CiAgICB9LAoKICAgIGNvdW50RGlzcGxheSh0eXBlLCBjb3VudCkgewogICAgICBpZiAoY291bnQgPiAxKSB7CiAgICAgICAgcmV0dXJuIGAkeyB0eXBlIH0oeCR7IGNvdW50IH0pYDsKICAgICAgfQoKICAgICAgcmV0dXJuIHR5cGU7CiAgICB9CiAgfQp9Owo="},{"version":3,"sources":["ReceiverIcons.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"ReceiverIcons.vue","sourceRoot":"node_modules/@rancher/shell/components/formatter","sourcesContent":["<script>\nimport { RECEIVERS_TYPES } from '@shell/edit/monitoring.coreos.com.alertmanagerconfig/receiverConfig.vue';\nimport { MONITORING } from '@shell/config/types';\nexport default {\n  props: {\n    value: {\n      type:    String,\n      default: ''\n    },\n    row: {\n      type:     Object,\n      required: true\n    }\n  },\n  computed: {\n\n    types() {\n    // get count and logo for all configured types in every receiver in the alertmanagerconfig\n      if (this.row?.type === MONITORING.ALERTMANAGERCONFIG) {\n        const receivers = this.row?.spec?.receivers;\n\n        if (receivers && receivers.length > 0) {\n          return receivers.reduce((totals, receiver) => {\n            const counts = this.getReceiverTypes(receiver);\n\n            Object.keys(counts).forEach((type) => {\n              if (!totals[type]) {\n                totals[type] = {\n                  count: counts[type].count,\n                  logo:  counts[type].logo\n                };\n              } else {\n                totals[type].count += counts[type].count;\n              }\n            });\n\n            return totals;\n          }, {});\n        }\n\n        return null;\n      } else {\n        // if not alertmanagerconfig, this is an individual receiver\n        return this.getReceiverTypes(this.row);\n      }\n    }\n  },\n  methods: {\n    // get count and logo for each type configured in a given receiver\n    getReceiverTypes(receiver) {\n      // iterate through predefined types and sum the number configured in this receiver\n      const types = RECEIVERS_TYPES\n        .reduce((types, type) => {\n          if (type.name !== 'custom' && receiver?.[type.key]?.length > 0) {\n            types[this.t(type.label)] = { count: receiver?.[type.key]?.length, logo: type.logo };\n          }\n\n          return types;\n        }, {});\n\n      // if there are keys other than those defined in RECEIVERS_TYPES and 'name', assume they're custom types and sum them under \"custom\"\n      const expectedKeys = RECEIVERS_TYPES.map((type) => type.key).filter((key) => key !== 'custom');\n\n      expectedKeys.push('name');\n      const customKeys = Object.keys(receiver)\n        .filter((key) => !expectedKeys.includes(key));\n\n      if (customKeys.length > 0) {\n        const customType = RECEIVERS_TYPES.find((type) => type.name === 'custom');\n        const customLabel = this.t(customType.label);\n\n        types[customLabel] = { count: customKeys.length, logo: customType.logo };\n      }\n\n      return types;\n    },\n\n    countDisplay(type, count) {\n      if (count > 1) {\n        return `${ type }(x${ count })`;\n      }\n\n      return type;\n    }\n  }\n};\n</script>\n\n<template>\n  <span class=\"name-container\">\n    <template v-for=\"(type, key, i) in types\">\n      <div\n        :key=\"key\"\n        class=\"logo\"\n      >\n        <img :src=\"type.logo\">\n      </div>\n      <span :key=\"key+i\">\n        <span\n          v-if=\"i<Object.keys(types).length-1\"\n          class=\"comma\"\n        >\n          {{ `${countDisplay(key, type.count)}, ` }}\n        </span>\n        <span v-else>\n          {{ countDisplay(key, type.count) }}\n        </span>\n      </span>\n\n    </template>\n  </span>\n</template>\n\n<style scoped lang='scss'>\n  .logo{\n    display: inline;\n    height: 1.3em;\n\n    img{\n      height: 1.3em;\n    }\n  }\n  .name-container{\n    display: flex;\n    align-items: center;\n  }\n  .comma{\n    margin-right: 2px;\n  }\n</style>\n"]}]}