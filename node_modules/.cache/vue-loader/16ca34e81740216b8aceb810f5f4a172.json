{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/networking.k8s.io.ingress/Certificate.vue?vue&type=style&index=0&id=7aadf990&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/networking.k8s.io.ingress/Certificate.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jbG9zZSB7CiAgdG9wOiAxMHB4OwogIHJpZ2h0OiAxMHB4OwogIHBhZGRpbmc6MDsKICBwb3NpdGlvbjogYWJzb2x1dGU7Cn0KCi5jZXJ0IHsKICBwb3NpdGlvbjogcmVsYXRpdmU7CgogIC5zZWNyZXQtbmFtZSB7CiAgICBoZWlnaHQ6ICRpbnB1dC1oZWlnaHQ7CiAgfQoKICAmOm5vdCg6bGFzdC1vZi10eXBlKSB7CiAgICBwYWRkaW5nLWJvdHRvbTogMTBweDsKICAgIG1hcmdpbi1ib3R0b206IDMwcHg7CiAgfQp9Cg=="},{"version":3,"sources":["Certificate.vue"],"names":[],"mappings":";AAgHA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Certificate.vue","sourceRoot":"node_modules/@rancher/shell/edit/networking.k8s.io.ingress","sourcesContent":["<script>\nimport LabeledSelect from '@shell/components/form/LabeledSelect';\nimport ArrayList from '@shell/components/form/ArrayList';\n\nconst DEFAULT_CERT_VALUE = '__[[DEFAULT_CERT]]__';\n\nexport default {\n  components: { ArrayList, LabeledSelect },\n  props:      {\n    value: {\n      type:    Object,\n      default: () => {\n        return {};\n      },\n    },\n    certs: {\n      type:    Array,\n      default: () => [],\n    },\n    rules: {\n      default: () => ({ host: [] }),\n      type:    Object,\n    }\n  },\n  data() {\n    const defaultCert = {\n      label: this.t('ingress.certificates.defaultCertLabel'),\n      value: DEFAULT_CERT_VALUE,\n    };\n    const { hosts = [''], secretName = defaultCert.value } = this.value;\n\n    return {\n      defaultCert,\n      hosts,\n      secretName,\n    };\n  },\n  computed: {\n    certsWithDefault() {\n      return [this.defaultCert, ...this.certs.map((c) => ({ label: c, value: c }))];\n    },\n    certificateStatus() {\n      const isValueAnOption = !this.secretName || this.certsWithDefault.find((cert) => this.secretName === cert.value);\n\n      return isValueAnOption ? null : 'warning';\n    },\n    certificateTooltip() {\n      return this.certificateStatus === 'warning' ? this.t('ingress.certificates.certificate.doesntExist') : null;\n    },\n  },\n  methods: {\n    addHost(ev) {\n      ev.preventDefault();\n      this.hosts.push('');\n      this.update();\n    },\n    update() {\n      const out = { hosts: this.hosts };\n\n      out.secretName = this.secretName;\n\n      if (out.secretName === DEFAULT_CERT_VALUE) {\n        out.secretName = null;\n      }\n\n      this.$emit('input', out);\n    },\n    onSecretInput(e) {\n      this.secretName = e && typeof e === 'object' ? e.label : e;\n      this.update();\n    },\n    onHostsInput(e) {\n      this.hosts = e;\n      this.update();\n    }\n  },\n};\n</script>\n\n<template>\n  <div\n    class=\"cert row\"\n    @input=\"update\"\n  >\n    <div class=\"col span-6\">\n      <LabeledSelect\n        v-model=\"secretName\"\n        class=\"secret-name\"\n        :options=\"certsWithDefault\"\n        :label=\"t('ingress.certificates.certificate.label')\"\n        required\n        :status=\"certificateStatus\"\n        :taggable=\"true\"\n        :tooltip=\"certificateTooltip\"\n        :hover-tooltip=\"true\"\n        :searchable=\"true\"\n        @input=\"onSecretInput\"\n      />\n    </div>\n    <div class=\"col span-6\">\n      <ArrayList\n        :value=\"hosts\"\n        :add-label=\"t('ingress.certificates.addHost')\"\n        :rules=\"rules.host\"\n        :initial-empty-row=\"true\"\n        @input=\"onHostsInput\"\n      />\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.close {\n  top: 10px;\n  right: 10px;\n  padding:0;\n  position: absolute;\n}\n\n.cert {\n  position: relative;\n\n  .secret-name {\n    height: $input-height;\n  }\n\n  &:not(:last-of-type) {\n    padding-bottom: 10px;\n    margin-bottom: 30px;\n  }\n}\n</style>\n"]}]}