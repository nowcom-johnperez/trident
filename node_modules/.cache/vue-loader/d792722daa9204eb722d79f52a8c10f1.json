{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/provisioning.cattle.io.cluster/MachinePool.vue?vue&type=style&index=0&id=5fc8966b&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/provisioning.cattle.io.cluster/MachinePool.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5hZHZhbmNlZCA6OnYtZGVlcCA+LnZ1ZS1wb3J0YWwtdGFyZ2V0OmVtcHR5LAouYWR2YW5jZWQgOjp2LWRlZXAgPi52dWUtcG9ydGFsLXRhcmdldDplbXB0eSArIC5zcGFjZXIgewogIGRpc3BsYXk6IG5vbmU7Cn0K"},{"version":3,"sources":["MachinePool.vue"],"names":[],"mappings":";AA6WA;AACA;AACA;AACA","file":"MachinePool.vue","sourceRoot":"node_modules/@rancher/shell/edit/provisioning.cattle.io.cluster","sourcesContent":["<script>\nimport { LabeledInput } from '@components/Form/LabeledInput';\nimport { Checkbox } from '@components/Form/Checkbox';\nimport { _EDIT } from '@shell/config/query-params';\nimport Taints from '@shell/components/form/Taints.vue';\nimport KeyValue from '@shell/components/form/KeyValue.vue';\nimport AdvancedSection from '@shell/components/AdvancedSection.vue';\nimport { Banner } from '@components/Banner';\nimport UnitInput from '@shell/components/form/UnitInput.vue';\nimport { randomStr } from '@shell/utils/string';\n\nexport default {\n\n  name: 'MachinePool',\n\n  components: {\n    LabeledInput,\n    Checkbox,\n    Taints,\n    KeyValue,\n    AdvancedSection,\n    Banner,\n    UnitInput\n  },\n\n  props: {\n    value: {\n      type:     Object,\n      required: true,\n    },\n\n    cluster: {\n      type:    Object,\n      default: () => ({})\n    },\n\n    // no credentials are required for elemental machine pools\n    credentialId: {\n      type:    String,\n      default: null\n    },\n\n    mode: {\n      type:    String,\n      default: _EDIT,\n    },\n\n    provider: {\n      type:     String,\n      required: true,\n    },\n\n    idx: {\n      type:     Number,\n      required: true,\n    },\n\n    machinePools: {\n      type:    Array,\n      default: () => []\n    },\n\n    // Is the UI busy (e.g. during save)\n    busy: {\n      type:    Boolean,\n      default: false,\n    },\n\n    poolId: {\n      type:     String,\n      required: true,\n    }\n  },\n\n  data() {\n    const parseDuration = (duration) => {\n      // The back end stores the timeout in Duration format, for example, \"42d31h10m30s\".\n      // Here we convert that string to an integer and return the duration as seconds.\n      const splitStr = duration.split(/([a-z])/);\n\n      const durationsAsSeconds = splitStr.reduce((old, neu, idx) => {\n        const parsed = parseInt(neu);\n\n        if ( isNaN(parsed) ) {\n          return old;\n        }\n\n        const interval = splitStr[(idx + 1)];\n\n        switch (interval) {\n        case 'd':\n          old.push(parsed * 24 * 60 * 60);\n          break;\n        case 'h':\n          old.push(parsed * 60 * 60);\n          break;\n        case 'm':\n          old.push(parsed * 60);\n          break;\n        case 's':\n          old.push(parsed);\n          break;\n        default:\n          break;\n        }\n\n        return old;\n      }, []);\n\n      return durationsAsSeconds.reduce((old, neu) => old + neu);\n    };\n\n    return {\n      uuid: randomStr(),\n\n      unhealthyNodeTimeoutInteger: this.value.pool.unhealthyNodeTimeout ? parseDuration(this.value.pool.unhealthyNodeTimeout) : 0,\n    };\n  },\n\n  computed: {\n    configComponent() {\n      if (this.$store.getters['type-map/hasCustomMachineConfigComponent'](this.provider)) {\n        return this.$store.getters['type-map/importMachineConfig'](this.provider);\n      }\n\n      return this.$store.getters['type-map/importMachineConfig']('generic');\n    },\n\n    isWindows() {\n      return this.value?.config?.os === 'windows';\n    },\n  },\n\n  watch: {\n    isWindows(neu) {\n      if (neu) {\n        this.value.pool.etcdRole = false;\n        this.value.pool.controlPlaneRole = false;\n        this.value.pool.machineOS = 'windows';\n      } else {\n        this.value.pool.machineOS = 'linux';\n      }\n    }\n  },\n\n  /**\n   * On creation, ensure that the pool is marked valid - custom machine pools can emit further validation events\n   */\n  created() {\n    this.$emit('validationChanged', true);\n  },\n\n  beforeDestroy() {\n    // Ensure we emit validation event so parent can forget any validation for this Machine Pool when it is removed\n    this.$emit('validationChanged', undefined);\n  },\n\n  methods: {\n    emitError(e) {\n      this.$emit('error', e);\n    },\n    async test() {\n      if ( typeof this.$refs.configComponent?.test === 'function' ) {\n        let errors = [];\n\n        try {\n          const res = await this.$refs.configComponent.test();\n\n          if ( !res || res?.errors) {\n            if (res?.errors) {\n              errors = res.errors;\n            }\n          }\n        } catch (e) {\n          errors = [e];\n        }\n\n        return errors;\n      }\n    },\n    // handle emitted matched machine inventories on selector so that machine count\n    // on machine pool can be kept up to date\n    // (only used on Elemental because it comes from \"machineinventoryselectortemplate\" machine-config)\n    updateMachineCount(val) {\n      this.value.pool.quantity = val || 1;\n    },\n\n    expandAdvanced() {\n      const advancedComponent = this.$refs.advanced;\n\n      if (advancedComponent && !advancedComponent.show) {\n        advancedComponent.toggle();\n      }\n    },\n\n    // Propagate up validation status for this Machine Pool\n    validationChanged(val) {\n      this.$emit('validationChanged', val);\n    }\n  }\n};\n</script>\n\n<template>\n  <div>\n    <Banner\n      v-if=\"value.pool.hostnameLengthLimit\"\n      color=\"info\"\n    >\n      <div class=\"text\">\n        {{ t('cluster.machinePool.truncationPool', { limit: value.pool.hostnameLengthLimit }) }}\n      </div>\n    </Banner>\n    <div class=\"row\">\n      <div class=\"col span-4\">\n        <LabeledInput\n          v-model=\"value.pool.name\"\n          :mode=\"mode\"\n          :label=\"t('cluster.machinePool.name.label')\"\n          :required=\"true\"\n          :disabled=\"!value.config || !!value.config.id || busy\"\n        />\n      </div>\n      <div class=\"col span-4\">\n        <LabeledInput\n          v-model.number=\"value.pool.quantity\"\n          :mode=\"mode\"\n          :label=\"t('cluster.machinePool.quantity.label')\"\n          :disabled=\"busy\"\n          type=\"number\"\n          min=\"0\"\n          :required=\"true\"\n        />\n      </div>\n      <div class=\"col span-4 pt-5\">\n        <h3>\n          {{ t('cluster.machinePool.role.label') }}\n        </h3>\n        <Checkbox\n          v-model=\"value.pool.etcdRole\"\n          :mode=\"mode\"\n          :label=\"t('cluster.machinePool.role.etcd')\"\n          :disabled=\"isWindows || busy\"\n        />\n        <Checkbox\n          v-model=\"value.pool.controlPlaneRole\"\n          :mode=\"mode\"\n          :label=\"t('cluster.machinePool.role.controlPlane')\"\n          :disabled=\"isWindows || busy\"\n        />\n        <Checkbox\n          v-model=\"value.pool.workerRole\"\n          :mode=\"mode\"\n          :label=\"t('cluster.machinePool.role.worker')\"\n          :disabled=\"busy\"\n        />\n      </div>\n    </div>\n    <hr class=\"mt-10\">\n    <component\n      :is=\"configComponent\"\n      v-if=\"value.config && configComponent\"\n      ref=\"configComponent\"\n      :cluster=\"cluster\"\n      :uuid=\"uuid\"\n      :mode=\"mode\"\n      :value=\"value.config\"\n      :provider=\"provider\"\n      :credential-id=\"credentialId\"\n      :pool-index=\"idx\"\n      :pool-id=\"poolId\"\n      :machine-pools=\"machinePools\"\n      :busy=\"busy\"\n      @error=\"emitError\"\n      @updateMachineCount=\"updateMachineCount\"\n      @expandAdvanced=\"expandAdvanced\"\n      @validationChanged=\"validationChanged\"\n    />\n    <Banner\n      v-else-if=\"value.configMissing\"\n      color=\"error\"\n      label-key=\"cluster.machinePool.configNotFound\"\n    />\n    <Banner\n      v-else\n      color=\"info\"\n      label-key=\"cluster.machinePool.noAccessBanner\"\n    />\n\n    <AdvancedSection\n      ref=\"advanced\"\n      :mode=\"mode\"\n      class=\"advanced\"\n    >\n      <portal-target\n        :name=\"'advanced-' + uuid\"\n        multiple\n      />\n\n      <div class=\"spacer\" />\n      <div class=\"row\">\n        <div class=\"col span-4\">\n          <h3>\n            {{ t('cluster.machinePool.autoReplace.label') }}\n            <i\n              v-clean-tooltip=\"t('cluster.machinePool.autoReplace.toolTip')\"\n              class=\"icon icon-info icon-lg\"\n            />\n          </h3>\n          <UnitInput\n            v-model.number=\"unhealthyNodeTimeoutInteger\"\n            :hide-arrows=\"true\"\n            :placeholder=\"t('containerResourceLimit.cpuPlaceholder')\"\n            :mode=\"mode\"\n            :output-modifier=\"true\"\n            :base-unit=\"t('cluster.machinePool.autoReplace.unit')\"\n            :disabled=\"busy\"\n            @input=\"value.pool.unhealthyNodeTimeout = `${unhealthyNodeTimeoutInteger}s`\"\n          />\n        </div>\n        <div class=\"col span-4\">\n          <h3>\n            {{ t('cluster.machinePool.drain.header') }}\n          </h3>\n          <Checkbox\n            v-model=\"value.pool.drainBeforeDelete\"\n            :mode=\"mode\"\n            :label=\"t('cluster.machinePool.drain.label')\"\n            :disabled=\"busy\"\n          />\n        </div>\n      </div>\n      <div class=\"spacer\" />\n      <KeyValue\n        v-model=\"value.pool.labels\"\n        :add-label=\"t('labels.addLabel')\"\n        :disabled=\"busy\"\n        :title=\"t('cluster.machinePool.labels.label')\"\n        :read-allowed=\"false\"\n        :value-can-be-empty=\"true\"\n      />\n\n      <div class=\"spacer\" />\n\n      <Taints\n        v-model=\"value.pool.taints\"\n        :mode=\"mode\"\n        :disabled=\"busy\"\n      />\n\n      <portal-target\n        :name=\"'advanced-footer-' + uuid\"\n        multiple\n      />\n    </AdvancedSection>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n  .advanced ::v-deep >.vue-portal-target:empty,\n  .advanced ::v-deep >.vue-portal-target:empty + .spacer {\n    display: none;\n  }\n</style>\n"]}]}