{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/list/provisioning.cattle.io.cluster.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/list/provisioning.cattle.io.cluster.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCB7IEJhbm5lciB9IGZyb20gJ0Bjb21wb25lbnRzL0Jhbm5lcic7CmltcG9ydCBSZXNvdXJjZVRhYmxlIGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL1Jlc291cmNlVGFibGUnOwppbXBvcnQgTWFzdGhlYWQgZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvUmVzb3VyY2VMaXN0L01hc3RoZWFkJzsKaW1wb3J0IHsgYWxsSGFzaCB9IGZyb20gJ0BzaGVsbC91dGlscy9wcm9taXNlJzsKaW1wb3J0IHsgQ0FQSSwgTUFOQUdFTUVOVCwgU05BUFNIT1QsIE5PUk1BTiB9IGZyb20gJ0BzaGVsbC9jb25maWcvdHlwZXMnOwppbXBvcnQgeyBNT0RFLCBfSU1QT1JUIH0gZnJvbSAnQHNoZWxsL2NvbmZpZy9xdWVyeS1wYXJhbXMnOwppbXBvcnQgeyBmaWx0ZXJPbmx5S3ViZXJuZXRlc0NsdXN0ZXJzLCBmaWx0ZXJIaWRkZW5Mb2NhbENsdXN0ZXIgfSBmcm9tICdAc2hlbGwvdXRpbHMvY2x1c3Rlcic7CmltcG9ydCB7IG1hcEZlYXR1cmUsIEhBUlZFU1RFUiBhcyBIQVJWRVNURVJfRkVBVFVSRSB9IGZyb20gJ0BzaGVsbC9zdG9yZS9mZWF0dXJlcyc7CmltcG9ydCB7IE5BTUUgYXMgRVhQTE9SRVIgfSBmcm9tICdAc2hlbGwvY29uZmlnL3Byb2R1Y3QvZXhwbG9yZXInOwppbXBvcnQgUmVzb3VyY2VGZXRjaCBmcm9tICdAc2hlbGwvbWl4aW5zL3Jlc291cmNlLWZldGNoJzsKaW1wb3J0IHsgQmFkZ2VTdGF0ZSB9IGZyb20gJ0Bjb21wb25lbnRzL0JhZGdlU3RhdGUnOwoKZXhwb3J0IGRlZmF1bHQgewogIGNvbXBvbmVudHM6IHsKICAgIEJhbm5lciwgUmVzb3VyY2VUYWJsZSwgTWFzdGhlYWQsIEJhZGdlU3RhdGUKICB9LAogIG1peGluczogW1Jlc291cmNlRmV0Y2hdLAogIHByb3BzOiAgewogICAgbG9hZEluZGV0ZXJtaW5hdGU6IHsKICAgICAgdHlwZTogICAgQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZmFsc2UKICAgIH0sCgogICAgaW5jcmVtZW50YWxMb2FkaW5nSW5kaWNhdG9yOiB7CiAgICAgIHR5cGU6ICAgIEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAoKICAgIHVzZVF1ZXJ5UGFyYW1zRm9yU2ltcGxlRmlsdGVyaW5nOiB7CiAgICAgIHR5cGU6ICAgIEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9CiAgfSwKCiAgYXN5bmMgZmV0Y2goKSB7CiAgICB0aGlzLiRpbml0aWFsaXplRmV0Y2hEYXRhKENBUEkuUkFOQ0hFUl9DTFVTVEVSKTsKICAgIGNvbnN0IGhhc2ggPSB7CiAgICAgIHJhbmNoZXJDbHVzdGVyczogdGhpcy4kZmV0Y2hUeXBlKENBUEkuUkFOQ0hFUl9DTFVTVEVSKSwKICAgICAgbm9ybWFuQ2x1c3RlcnM6ICB0aGlzLiRmZXRjaFR5cGUoTk9STUFOLkNMVVNURVIsIFtdLCAncmFuY2hlcicpLAogICAgICBtZ210Q2x1c3RlcnM6ICAgIHRoaXMuJGZldGNoVHlwZShNQU5BR0VNRU5ULkNMVVNURVIpLAogICAgfTsKCiAgICBpZiAoIHRoaXMuJHN0b3JlLmdldHRlcnNbJ21hbmFnZW1lbnQvY2FuTGlzdCddKFNOQVBTSE9UKSApIHsKICAgICAgaGFzaC5ldGNkU25hcHNob3RzID0gdGhpcy4kZmV0Y2hUeXBlKFNOQVBTSE9UKTsKICAgIH0KCiAgICBpZiAoIHRoaXMuJHN0b3JlLmdldHRlcnNbJ21hbmFnZW1lbnQvY2FuTGlzdCddKENBUEkuTUFDSElORSkgKSB7CiAgICAgIGhhc2guY2FwaU1hY2hpbmVzID0gdGhpcy4kZmV0Y2hUeXBlKENBUEkuTUFDSElORSk7CiAgICB9CgogICAgaWYgKCB0aGlzLiRzdG9yZS5nZXR0ZXJzWydtYW5hZ2VtZW50L2Nhbkxpc3QnXShNQU5BR0VNRU5ULk5PREUpICkgewogICAgICBoYXNoLm1nbXROb2RlcyA9IHRoaXMuJGZldGNoVHlwZShNQU5BR0VNRU5ULk5PREUpOwogICAgfQoKICAgIGlmICggdGhpcy4kc3RvcmUuZ2V0dGVyc1snbWFuYWdlbWVudC9jYW5MaXN0J10oTUFOQUdFTUVOVC5OT0RFX1BPT0wpICkgewogICAgICBoYXNoLm1nbXRQb29scyA9IHRoaXMuJGZldGNoVHlwZShNQU5BR0VNRU5ULk5PREVfUE9PTCk7CiAgICB9CgogICAgaWYgKCB0aGlzLiRzdG9yZS5nZXR0ZXJzWydtYW5hZ2VtZW50L2Nhbkxpc3QnXShNQU5BR0VNRU5ULk5PREVfVEVNUExBVEUpICkgewogICAgICBoYXNoLm1nbXRUZW1wbGF0ZXMgPSB0aGlzLiRmZXRjaFR5cGUoTUFOQUdFTUVOVC5OT0RFX1RFTVBMQVRFKTsKICAgIH0KCiAgICBpZiAoIHRoaXMuJHN0b3JlLmdldHRlcnNbJ21hbmFnZW1lbnQvY2FuTGlzdCddKENBUEkuTUFDSElORV9ERVBMT1lNRU5UKSApIHsKICAgICAgaGFzaC5tYWNoaW5lRGVwbG95bWVudHMgPSB0aGlzLiRmZXRjaFR5cGUoQ0FQSS5NQUNISU5FX0RFUExPWU1FTlQpOwogICAgfQoKICAgIC8vIEZldGNoIFJLRSB0ZW1wbGF0ZSByZXZpc2lvbnMgc28gd2UgY2FuIHNob3cgd2hlbiBhbiB1cGRhdGVkIHRlbXBsYXRlIGlzIGF2YWlsYWJsZQogICAgLy8gVGhpcyByZXF1ZXN0IGRvZXMgbm90IG5lZWQgdG8gYmUgYmxvY2tpbmcKICAgIGlmICggdGhpcy4kc3RvcmUuZ2V0dGVyc1snbWFuYWdlbWVudC9jYW5MaXN0J10oTUFOQUdFTUVOVC5SS0VfVEVNUExBVEVfUkVWSVNJT04pICkgewogICAgICB0aGlzLiRmZXRjaFR5cGUoTUFOQUdFTUVOVC5SS0VfVEVNUExBVEVfUkVWSVNJT04pOwogICAgfQoKICAgIGNvbnN0IHJlcyA9IGF3YWl0IGFsbEhhc2goaGFzaCk7CgogICAgdGhpcy5tZ210Q2x1c3RlcnMgPSByZXMubWdtdENsdXN0ZXJzOwogIH0sCgogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICByZXNvdXJjZTogICAgIENBUEkuUkFOQ0hFUl9DTFVTVEVSLAogICAgICBzY2hlbWE6ICAgICAgIHRoaXMuJHN0b3JlLmdldHRlcnNbJ21hbmFnZW1lbnQvc2NoZW1hRm9yJ10oQ0FQSS5SQU5DSEVSX0NMVVNURVIpLAogICAgICBtZ210Q2x1c3RlcnM6IFtdLAogICAgfTsKICB9LAoKICBjb21wdXRlZDogewogICAgZmlsdGVyZWRSb3dzKCkgewogICAgICAvLyBJZiBIYXJ2ZXN0ZXIgZmVhdHVyZSBpcyBlbmFibGVkLCBoaWRlIEhhcnZlc3RlciBDbHVzdGVycwogICAgICBpZiAodGhpcy5oYXJ2ZXN0ZXJFbmFibGVkKSB7CiAgICAgICAgcmV0dXJuIGZpbHRlckhpZGRlbkxvY2FsQ2x1c3RlcihmaWx0ZXJPbmx5S3ViZXJuZXRlc0NsdXN0ZXJzKHRoaXMucm93cywgdGhpcy4kc3RvcmUpLCB0aGlzLiRzdG9yZSk7CiAgICAgIH0KCiAgICAgIC8vIE90aGVyd2lzZSwgc2hvdyBIYXJ2ZXN0ZXIgY2x1c3RlcnMgLSB0aGVzZSB3aWxsIGJlIHNob3duIHdpdGggYSB3YXJuaW5nCiAgICAgIHJldHVybiBmaWx0ZXJIaWRkZW5Mb2NhbENsdXN0ZXIodGhpcy5yb3dzLCB0aGlzLiRzdG9yZSk7CiAgICB9LAoKICAgIGhpZGRlbkhhcnZlc3RlckNvdW50KCkgewogICAgICBjb25zdCBwcm9kdWN0ID0gdGhpcy4kc3RvcmUuZ2V0dGVyc1snY3VycmVudFByb2R1Y3QnXTsKICAgICAgY29uc3QgaXNFeHBsb3JlciA9IHByb2R1Y3Q/Lm5hbWUgPT09IEVYUExPUkVSOwoKICAgICAgLy8gRG9uJ3Qgc2hvdyBIYXJ2ZXN0ZXIgYmFubmVyIG1lc3NhZ2Ugb24gdGhlIGNsdXN0ZXIgbWFuYWdlbWVudCBwYWdlIG9yIGlmIEhhcnZlc3RlciBpZiBub3QgZW5hYmxlZAogICAgICBpZiAoIWlzRXhwbG9yZXIgfHwgIXRoaXMuaGFydmVzdGVyRW5hYmxlZCkgewogICAgICAgIHJldHVybiAwOwogICAgICB9CgogICAgICByZXR1cm4gdGhpcy5yb3dzLmxlbmd0aCAtIGZpbHRlck9ubHlLdWJlcm5ldGVzQ2x1c3RlcnModGhpcy5yb3dzLCB0aGlzLiRzdG9yZSkubGVuZ3RoOwogICAgfSwKCiAgICBjcmVhdGVMb2NhdGlvbigpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBuYW1lOiAgICdjLWNsdXN0ZXItcHJvZHVjdC1yZXNvdXJjZS1jcmVhdGUnLAogICAgICAgIHBhcmFtczogewogICAgICAgICAgcHJvZHVjdDogIHRoaXMuJHN0b3JlLmdldHRlcnNbJ2N1cnJlbnRQcm9kdWN0J10ubmFtZSwKICAgICAgICAgIHJlc291cmNlOiB0aGlzLnJlc291cmNlCiAgICAgICAgfSwKICAgICAgfTsKICAgIH0sCgogICAgaW1wb3J0TG9jYXRpb24oKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgbmFtZTogICAnYy1jbHVzdGVyLXByb2R1Y3QtcmVzb3VyY2UtY3JlYXRlJywKICAgICAgICBwYXJhbXM6IHsKICAgICAgICAgIHByb2R1Y3Q6ICB0aGlzLiRzdG9yZS5nZXR0ZXJzWydjdXJyZW50UHJvZHVjdCddLm5hbWUsCiAgICAgICAgICByZXNvdXJjZTogdGhpcy5yZXNvdXJjZQogICAgICAgIH0sCiAgICAgICAgcXVlcnk6IHsgW01PREVdOiBfSU1QT1JUIH0KICAgICAgfTsKICAgIH0sCgogICAgY2FuSW1wb3J0KCkgewogICAgICBjb25zdCBzY2hlbWEgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzWydtYW5hZ2VtZW50L3NjaGVtYUZvciddKENBUEkuUkFOQ0hFUl9DTFVTVEVSKTsKCiAgICAgIHJldHVybiAhIXNjaGVtYT8uY29sbGVjdGlvbk1ldGhvZHMuZmluZCgoeCkgPT4geC50b0xvd2VyQ2FzZSgpID09PSAncG9zdCcpOwogICAgfSwKCiAgICBoYXJ2ZXN0ZXJFbmFibGVkOiBtYXBGZWF0dXJlKEhBUlZFU1RFUl9GRUFUVVJFKSwKCiAgICBub25TdGFuZGFyZE5hbWVzcGFjZXMoKSB7CiAgICAgIC8vIFNob3cgdGhlIG5hbWVzcGFjZSBncm91cGluZyBvcHRpb24gaWYgdGhlcmUncyBjbHVzdGVycyB3aXRoIG5hbWVzcGFjZXMgb3RoZXIgdGhhbiAnZmxlZXQtZGVmYXVsdCcgb3IgJ2ZsZWV0LWxvY2FsJwogICAgICAvLyBUaGlzIHdpbGwgYmUgdXNlZCB3aGVuIHRoZXJlJ3MgY2x1c3RlcnMgZnJvbSBleHRlbnNpb24gYmFzZWQgcHJvdmlzaW9uZXJzCiAgICAgIC8vIFdlIHNob3VsZCByZS12aXNpdCB0aGlzIGZvciBzY2FsaW5nIHJlYXNvbnMKICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyZWRSb3dzLnNvbWUoKGMpID0+IGMubWV0YWRhdGEubmFtZXNwYWNlICE9PSAnZmxlZXQtbG9jYWwnICYmIGMubWV0YWRhdGEubmFtZXNwYWNlICE9PSAnZmxlZXQtZGVmYXVsdCcpOwogICAgfQogIH0sCgogICRsb2FkaW5nUmVzb3VyY2VzKCkgewogICAgLy8gcmVzdWx0cyBhcmUgZmlsdGVyZWQgc28gd2Ugd291bGRuJ3QgZ2V0IHRoZSBjb3JyZWN0IGNvdW50IG9uIGluZGljYXRvci4uLgogICAgcmV0dXJuIHsgbG9hZEluZGV0ZXJtaW5hdGU6IHRydWUgfTsKICB9LAoKICBtb3VudGVkKCkgewogICAgd2luZG93LmMgPSB0aGlzOwogIH0sCn07Cg=="},{"version":3,"sources":["provisioning.cattle.io.cluster.vue"],"names":[],"mappingsfile":"provisioning.cattle.io.cluster.vue","sourceRoot":"node_modules/@rancher/shell/list","sourcesContent":["<script>\nimport { Banner } from '@components/Banner';\nimport ResourceTable from '@shell/components/ResourceTable';\nimport Masthead from '@shell/components/ResourceList/Masthead';\nimport { allHash } from '@shell/utils/promise';\nimport { CAPI, MANAGEMENT, SNAPSHOT, NORMAN } from '@shell/config/types';\nimport { MODE, _IMPORT } from '@shell/config/query-params';\nimport { filterOnlyKubernetesClusters, filterHiddenLocalCluster } from '@shell/utils/cluster';\nimport { mapFeature, HARVESTER as HARVESTER_FEATURE } from '@shell/store/features';\nimport { NAME as EXPLORER } from '@shell/config/product/explorer';\nimport ResourceFetch from '@shell/mixins/resource-fetch';\nimport { BadgeState } from '@components/BadgeState';\n\nexport default {\n  components: {\n    Banner, ResourceTable, Masthead, BadgeState\n  },\n  mixins: [ResourceFetch],\n  props:  {\n    loadIndeterminate: {\n      type:    Boolean,\n      default: false\n    },\n\n    incrementalLoadingIndicator: {\n      type:    Boolean,\n      default: false\n    },\n\n    useQueryParamsForSimpleFiltering: {\n      type:    Boolean,\n      default: false\n    }\n  },\n\n  async fetch() {\n    this.$initializeFetchData(CAPI.RANCHER_CLUSTER);\n    const hash = {\n      rancherClusters: this.$fetchType(CAPI.RANCHER_CLUSTER),\n      normanClusters:  this.$fetchType(NORMAN.CLUSTER, [], 'rancher'),\n      mgmtClusters:    this.$fetchType(MANAGEMENT.CLUSTER),\n    };\n\n    if ( this.$store.getters['management/canList'](SNAPSHOT) ) {\n      hash.etcdSnapshots = this.$fetchType(SNAPSHOT);\n    }\n\n    if ( this.$store.getters['management/canList'](CAPI.MACHINE) ) {\n      hash.capiMachines = this.$fetchType(CAPI.MACHINE);\n    }\n\n    if ( this.$store.getters['management/canList'](MANAGEMENT.NODE) ) {\n      hash.mgmtNodes = this.$fetchType(MANAGEMENT.NODE);\n    }\n\n    if ( this.$store.getters['management/canList'](MANAGEMENT.NODE_POOL) ) {\n      hash.mgmtPools = this.$fetchType(MANAGEMENT.NODE_POOL);\n    }\n\n    if ( this.$store.getters['management/canList'](MANAGEMENT.NODE_TEMPLATE) ) {\n      hash.mgmtTemplates = this.$fetchType(MANAGEMENT.NODE_TEMPLATE);\n    }\n\n    if ( this.$store.getters['management/canList'](CAPI.MACHINE_DEPLOYMENT) ) {\n      hash.machineDeployments = this.$fetchType(CAPI.MACHINE_DEPLOYMENT);\n    }\n\n    // Fetch RKE template revisions so we can show when an updated template is available\n    // This request does not need to be blocking\n    if ( this.$store.getters['management/canList'](MANAGEMENT.RKE_TEMPLATE_REVISION) ) {\n      this.$fetchType(MANAGEMENT.RKE_TEMPLATE_REVISION);\n    }\n\n    const res = await allHash(hash);\n\n    this.mgmtClusters = res.mgmtClusters;\n  },\n\n  data() {\n    return {\n      resource:     CAPI.RANCHER_CLUSTER,\n      schema:       this.$store.getters['management/schemaFor'](CAPI.RANCHER_CLUSTER),\n      mgmtClusters: [],\n    };\n  },\n\n  computed: {\n    filteredRows() {\n      // If Harvester feature is enabled, hide Harvester Clusters\n      if (this.harvesterEnabled) {\n        return filterHiddenLocalCluster(filterOnlyKubernetesClusters(this.rows, this.$store), this.$store);\n      }\n\n      // Otherwise, show Harvester clusters - these will be shown with a warning\n      return filterHiddenLocalCluster(this.rows, this.$store);\n    },\n\n    hiddenHarvesterCount() {\n      const product = this.$store.getters['currentProduct'];\n      const isExplorer = product?.name === EXPLORER;\n\n      // Don't show Harvester banner message on the cluster management page or if Harvester if not enabled\n      if (!isExplorer || !this.harvesterEnabled) {\n        return 0;\n      }\n\n      return this.rows.length - filterOnlyKubernetesClusters(this.rows, this.$store).length;\n    },\n\n    createLocation() {\n      return {\n        name:   'c-cluster-product-resource-create',\n        params: {\n          product:  this.$store.getters['currentProduct'].name,\n          resource: this.resource\n        },\n      };\n    },\n\n    importLocation() {\n      return {\n        name:   'c-cluster-product-resource-create',\n        params: {\n          product:  this.$store.getters['currentProduct'].name,\n          resource: this.resource\n        },\n        query: { [MODE]: _IMPORT }\n      };\n    },\n\n    canImport() {\n      const schema = this.$store.getters['management/schemaFor'](CAPI.RANCHER_CLUSTER);\n\n      return !!schema?.collectionMethods.find((x) => x.toLowerCase() === 'post');\n    },\n\n    harvesterEnabled: mapFeature(HARVESTER_FEATURE),\n\n    nonStandardNamespaces() {\n      // Show the namespace grouping option if there's clusters with namespaces other than 'fleet-default' or 'fleet-local'\n      // This will be used when there's clusters from extension based provisioners\n      // We should re-visit this for scaling reasons\n      return this.filteredRows.some((c) => c.metadata.namespace !== 'fleet-local' && c.metadata.namespace !== 'fleet-default');\n    }\n  },\n\n  $loadingResources() {\n    // results are filtered so we wouldn't get the correct count on indicator...\n    return { loadIndeterminate: true };\n  },\n\n  mounted() {\n    window.c = this;\n  },\n};\n</script>\n\n<template>\n  <div>\n    <Banner\n      v-if=\"hiddenHarvesterCount\"\n      color=\"info\"\n      :label=\"t('cluster.harvester.clusterWarning', {count: hiddenHarvesterCount} )\"\n    />\n\n    <Masthead\n      :schema=\"schema\"\n      :resource=\"resource\"\n      :create-location=\"createLocation\"\n      component-testid=\"cluster-manager-list\"\n      :show-incremental-loading-indicator=\"incrementalLoadingIndicator\"\n      :load-resources=\"loadResources\"\n      :load-indeterminate=\"loadIndeterminate\"\n    >\n      <template\n        v-if=\"canImport\"\n        slot=\"extraActions\"\n      >\n        <n-link\n          :to=\"importLocation\"\n          class=\"btn role-primary mr-10\"\n          data-testid=\"cluster-manager-list-import\"\n        >\n          {{ t('cluster.importAction') }}\n        </n-link>\n      </template>\n    </Masthead>\n\n    <ResourceTable\n      :schema=\"schema\"\n      :rows=\"filteredRows\"\n      :namespaced=\"nonStandardNamespaces\"\n      :loading=\"loading\"\n      :use-query-params-for-simple-filtering=\"useQueryParamsForSimpleFiltering\"\n      :data-testid=\"'cluster-list'\"\n      :force-update-live-and-delayed=\"forceUpdateLiveAndDelayed\"\n    >\n      <!-- Why are state column and subrow overwritten here? -->\n      <!-- for rke1 clusters, where they try to use the mgmt cluster stateObj instead of prov cluster stateObj,  -->\n      <!-- updates were getting lost. This isn't performant as normal columns, but the list shouldn't grow -->\n      <!-- big enough for the performance to matter -->\n      <template #cell:state=\"{row}\">\n        <BadgeState\n          :color=\"row.stateBackground\"\n          :label=\"row.stateDisplay\"\n        />\n      </template>\n      <template #sub-row=\"{fullColspan, row, keyField, componentTestid, i, onRowMouseEnter, onRowMouseLeave}\">\n        <tr\n          v-if=\"row.stateDescription\"\n          :key=\"row[keyField] + '-description'\"\n          :data-testid=\"componentTestid + '-' + i + '-row-description'\"\n          class=\"state-description sub-row\"\n          @mouseenter=\"onRowMouseEnter\"\n          @mouseleave=\"onRowMouseLeave\"\n        >\n          <td>&nbsp;</td>\n          <td\n            :colspan=\"fullColspan - 1\"\n            :class=\"{ 'text-error' : row.stateObj.error }\"\n          >\n            {{ row.stateDescription }}\n          </td>\n        </tr>\n      </template>\n      <template #cell:summary=\"{row}\">\n        <span v-if=\"!row.stateParts.length\">{{ row.nodes.length }}</span>\n      </template>\n      <template #cell:explorer=\"{row}\">\n        <n-link\n          v-if=\"row.mgmt && row.mgmt.isReady && !row.hasError\"\n          data-testid=\"cluster-manager-list-explore-management\"\n          class=\"btn btn-sm role-secondary\"\n          :to=\"{name: 'c-cluster', params: {cluster: row.mgmt.id}}\"\n        >\n          {{ t('cluster.explore') }}\n        </n-link>\n        <button\n          v-else\n          data-testid=\"cluster-manager-list-explore\"\n          :disabled=\"true\"\n          class=\"btn btn-sm role-secondary\"\n        >\n          {{ t('cluster.explore') }}\n        </button>\n      </template>\n    </ResourceTable>\n  </div>\n</template>\n"]}]}