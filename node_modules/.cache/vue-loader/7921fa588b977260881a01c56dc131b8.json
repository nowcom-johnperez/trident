{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/workload/VolumeClaimTemplate.vue?vue&type=style&index=0&id=0423fdda&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/workload/VolumeClaimTemplate.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5yZW1vdmUtYnRuewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0b3A6MHB4OwogIHJpZ2h0OjBweDsKfQo="},{"version":3,"sources":["VolumeClaimTemplate.vue"],"names":[],"mappings":";AAkIA;AACA;AACA;AACA;AACA","file":"VolumeClaimTemplate.vue","sourceRoot":"node_modules/@rancher/shell/edit/workload","sourcesContent":["<script>\nimport Mount from '@shell/edit/workload/storage/Mount';\nimport { mapGetters } from 'vuex';\nimport PersistentVolumeClaim from '@shell/edit/workload/storage/persistentVolumeClaim/persistentvolumeclaim.vue';\nimport { PVC } from '@shell/config/types';\nimport { _VIEW } from '@shell/config/query-params';\nimport ArrayListGrouped from '@shell/components/form/ArrayListGrouped';\n\nexport default {\n  components: {\n    ArrayListGrouped,\n    Mount,\n    PersistentVolumeClaim\n  },\n\n  props: {\n    mode: {\n      type:    String,\n      default: 'create'\n    },\n\n    namespace: {\n      type:    String,\n      default: null\n    },\n\n    value: {\n      type:    Object,\n      default: () => {\n        return {};\n      }\n    },\n  },\n\n  data() {\n    return { templates: this.value.volumeClaimTemplates, name: '' };\n  },\n\n  computed: {\n    isView() {\n      return this.mode === _VIEW;\n    },\n\n    ...mapGetters({ t: 'i18n/t' })\n  },\n\n  watch: {\n    namespace(neu) {\n      this.pvc.metadata.namespace = neu;\n    },\n  },\n\n  methods: {\n    update() {\n      this.$set(this.value, 'volumeClaimTemplates', this.templates);\n    },\n\n    updatePVC(pvc) {\n      const storage = pvc?.spec?.resources?.requests?.storage;\n\n      if (storage) {\n        if (!storage.toString().match(/[0-9]*[a-zA-Z]+$/)) {\n          pvc.spec.resources.requests.storage += 'Gi';\n        }\n      }\n      this.name = pvc?.metadata?.name;\n      this.update();\n    },\n\n    addPVC() {\n      if (!this.value.volumeClaimTemplates) {\n        this.$set(this.value, 'volumeClaimTemplates', []);\n      }\n      this.templates = this.value.volumeClaimTemplates;\n\n      const namespace = this.namespace || this.$store.getters['defaultNamespace'];\n\n      const data = { type: PVC };\n\n      data.metadata = { namespace };\n\n      this.$store.dispatch('cluster/create', data).then((pvc) => {\n        pvc.applyDefaults();\n        this.templates.push(pvc);\n        this.update();\n      });\n    },\n  }\n};\n</script>\n\n<template>\n  <div>\n    <div>\n      <ArrayListGrouped\n        v-model=\"templates\"\n        class=\"mb-20\"\n        @input=\"update()\"\n      >\n        <template #default=\"props\">\n          <div class=\"bordered-section\">\n            <PersistentVolumeClaim\n              v-if=\"props.row.value.metadata\"\n              :value=\"props.row.value\"\n              :mode=\"mode\"\n              @input=\"updatePVC(props.row.value)\"\n            />\n          </div>\n          <Mount\n            :name=\"props.row.value.metadata.name\"\n            :mode=\"mode\"\n            :container=\"value.template.spec.containers[0]\"\n          />\n        </template>\n        <template #add>\n          <button\n            v-if=\"!isView\"\n            type=\"button\"\n            class=\"btn role-tertiary add\"\n            @click=\"addPVC\"\n          >\n            {{ t('volumeClaimTemplate.add.label') }}\n          </button>\n        </template>\n      </ArrayListGrouped>\n    </div>\n  </div>\n</template>\n\n<style lang='scss' scoped>\n.remove-btn{\n  position: absolute;\n  top:0px;\n  right:0px;\n}\n</style>\n"]}]}