{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/networking.k8s.io.networkpolicy/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/networking.k8s.io.networkpolicy/index.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCB0aHJvdHRsZSBmcm9tICdsb2Rhc2gvdGhyb3R0bGUnOwppbXBvcnQgQ3JlYXRlRWRpdFZpZXcgZnJvbSAnQHNoZWxsL21peGlucy9jcmVhdGUtZWRpdC12aWV3JzsKaW1wb3J0IE5hbWVOc0Rlc2NyaXB0aW9uIGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL2Zvcm0vTmFtZU5zRGVzY3JpcHRpb24nOwppbXBvcnQgVGFiIGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL1RhYmJlZC9UYWInOwppbXBvcnQgVGFiYmVkIGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL1RhYmJlZCc7CmltcG9ydCBDcnVSZXNvdXJjZSBmcm9tICdAc2hlbGwvY29tcG9uZW50cy9DcnVSZXNvdXJjZSc7CmltcG9ydCB7IEJhbm5lciB9IGZyb20gJ0Bjb21wb25lbnRzL0Jhbm5lcic7CmltcG9ydCBMYWJlbHMgZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvZm9ybS9MYWJlbHMnOwppbXBvcnQgeyBOQU1FU1BBQ0UsIFBPRCB9IGZyb20gJ0BzaGVsbC9jb25maWcvdHlwZXMnOwppbXBvcnQgeyBjb252ZXJ0LCBtYXRjaGluZywgc2ltcGxpZnkgfSBmcm9tICdAc2hlbGwvdXRpbHMvc2VsZWN0b3InOwppbXBvcnQgeyBDaGVja2JveCB9IGZyb20gJ0Bjb21wb25lbnRzL0Zvcm0vQ2hlY2tib3gnOwppbXBvcnQgeyBhZGRPYmplY3QsIHJlbW92ZU9iamVjdCB9IGZyb20gJ0BzaGVsbC91dGlscy9hcnJheSc7CmltcG9ydCBNYXRjaEV4cHJlc3Npb25zIGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL2Zvcm0vTWF0Y2hFeHByZXNzaW9ucyc7CmltcG9ydCBQb2xpY3lSdWxlcyBmcm9tICdAc2hlbGwvZWRpdC9uZXR3b3JraW5nLms4cy5pby5uZXR3b3JrcG9saWN5L1BvbGljeVJ1bGVzJzsKaW1wb3J0IFJlc291cmNlVGFibGUgZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvUmVzb3VyY2VUYWJsZSc7CmltcG9ydCB7IGFsbEhhc2ggfSBmcm9tICdAc2hlbGwvdXRpbHMvcHJvbWlzZSc7Cgpjb25zdCBQT0xJQ1lfVFlQRVMgPSB7CiAgSU5HUkVTUzogJ0luZ3Jlc3MnLAogIEVHUkVTUzogICdFZ3Jlc3MnLAp9OwoKZXhwb3J0IGRlZmF1bHQgewogIC8vIFByb3BzIGFyZSBmb3VuZCBpbiBDcmVhdGVFZGl0VmlldwogIC8vIHByb3BzOiB7fSwKCiAgY29tcG9uZW50czogewogICAgQmFubmVyLAogICAgQ2hlY2tib3gsCiAgICBDcnVSZXNvdXJjZSwKICAgIExhYmVscywKICAgIE1hdGNoRXhwcmVzc2lvbnMsCiAgICBOYW1lTnNEZXNjcmlwdGlvbiwKICAgIFBvbGljeVJ1bGVzLAogICAgUmVzb3VyY2VUYWJsZSwKICAgIFRhYiwKICAgIFRhYmJlZCwKICB9LAoKICBtaXhpbnM6IFtDcmVhdGVFZGl0Vmlld10sCgogIGFzeW5jIGZldGNoKCkgewogICAgY29uc3QgaGFzaCA9IGF3YWl0IGFsbEhhc2goewogICAgICBhbGxQb2RzOiAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnY2x1c3Rlci9maW5kQWxsJywgeyB0eXBlOiBQT0QgfSksCiAgICAgIGFsbE5hbWVzcGFjZXM6IHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdjbHVzdGVyL2ZpbmRBbGwnLCB7IHR5cGU6IE5BTUVTUEFDRSB9KSwKICAgIH0pOwoKICAgIHRoaXMuYWxsUG9kcyA9IGhhc2guYWxsUG9kczsKICAgIHRoaXMuYWxsTmFtZXNwYWNlcyA9IGhhc2guYWxsTmFtZXNwYWNlczsKCiAgICB0aGlzLnVwZGF0ZU1hdGNoaW5nUG9kcygpOwogIH0sCgogIGRhdGEoKSB7CiAgICBpZiAoICF0aGlzLnZhbHVlLnNwZWMgKSB7CiAgICAgIHRoaXMuJHNldCh0aGlzLnZhbHVlLCAnc3BlYycsIHsKICAgICAgICBwb2xpY3lUeXBlczogW10sCiAgICAgICAgcG9kU2VsZWN0b3I6IHsKICAgICAgICAgIG1hdGNoRXhwcmVzc2lvbnM6IFtdLAogICAgICAgICAgbWF0Y2hMYWJlbHM6ICAgICAge30sCiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICBjb25zdCBtYXRjaGluZ1BvZHMgPSB7CiAgICAgIG1hdGNoZWQ6IDAsCiAgICAgIG1hdGNoZXM6IFtdLAogICAgICBub25lOiAgICB0cnVlLAogICAgICBzYW1wbGU6ICBudWxsLAogICAgICB0b3RhbDogICAwLAogICAgfTsKCiAgICByZXR1cm4gewogICAgICBQT0QsCiAgICAgIG1hdGNoaW5nUG9kcywKICAgICAgYWxsUG9kczogICAgICAgICBbXSwKICAgICAgYWxsTmFtZXNwYWNlczogICBbXSwKICAgICAgcG9kVGFibGVIZWFkZXJzOiB0aGlzLiRzdG9yZS5nZXR0ZXJzWyd0eXBlLW1hcC9oZWFkZXJzRm9yJ10oCiAgICAgICAgdGhpcy4kc3RvcmUuZ2V0dGVyc1snY2x1c3Rlci9zY2hlbWFGb3InXShQT0QpCiAgICAgICksCiAgICB9OwogIH0sCgogIGNvbXB1dGVkOiB7CiAgICBwb2RTY2hlbWEoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzWydjbHVzdGVyL3NjaGVtYUZvciddKFBPRCk7CiAgICB9LAogICAgaGFzSW5ncmVzc1BvbGljaWVzOiB7CiAgICAgIGdldCgpIHsKICAgICAgICByZXR1cm4gdGhpcy52YWx1ZS5zcGVjLnBvbGljeVR5cGVzLmluY2x1ZGVzKFBPTElDWV9UWVBFUy5JTkdSRVNTKTsKICAgICAgfSwKICAgICAgc2V0KGhhc0luZ3Jlc3NQb2xpY2llcykgewogICAgICAgIGxldCBwb2xpY3lUeXBlcyA9IHRoaXMudmFsdWUuc3BlYy5wb2xpY3lUeXBlczsKCiAgICAgICAgaWYgKGhhc0luZ3Jlc3NQb2xpY2llcykgewogICAgICAgICAgYWRkT2JqZWN0KHBvbGljeVR5cGVzLCBQT0xJQ1lfVFlQRVMuSU5HUkVTUyk7CiAgICAgICAgICBpZiAoIXRoaXMudmFsdWUuc3BlYy5pbmdyZXNzKSB7CiAgICAgICAgICAgIHRoaXMuJHNldCh0aGlzLnZhbHVlLnNwZWMsICdpbmdyZXNzJywgW10pOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBwb2xpY3lUeXBlcyA9IHJlbW92ZU9iamVjdChwb2xpY3lUeXBlcywgUE9MSUNZX1RZUEVTLklOR1JFU1MpOwogICAgICAgICAgdGhpcy4kZGVsZXRlKHRoaXMudmFsdWUuc3BlYywgJ2luZ3Jlc3MnKTsKICAgICAgICB9CgogICAgICAgIHRoaXMuJHNldCh0aGlzLnZhbHVlLnNwZWMsICdwb2xpY3lUeXBlcycsIHBvbGljeVR5cGVzKTsKICAgICAgfQogICAgfSwKICAgIGhhc0VncmVzc1BvbGljaWVzOiB7CiAgICAgIGdldCgpIHsKICAgICAgICByZXR1cm4gdGhpcy52YWx1ZS5zcGVjLnBvbGljeVR5cGVzLmluY2x1ZGVzKFBPTElDWV9UWVBFUy5FR1JFU1MpOwogICAgICB9LAogICAgICBzZXQoaGFzRWdyZXNzUG9saWNpZXMpIHsKICAgICAgICBsZXQgcG9saWN5VHlwZXMgPSB0aGlzLnZhbHVlLnNwZWMucG9saWN5VHlwZXM7CgogICAgICAgIGlmIChoYXNFZ3Jlc3NQb2xpY2llcykgewogICAgICAgICAgYWRkT2JqZWN0KHBvbGljeVR5cGVzLCBQT0xJQ1lfVFlQRVMuRUdSRVNTKTsKICAgICAgICAgIGlmICghdGhpcy52YWx1ZS5zcGVjLmVncmVzcykgewogICAgICAgICAgICB0aGlzLiRzZXQodGhpcy52YWx1ZS5zcGVjLCAnZWdyZXNzJywgW10pOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBwb2xpY3lUeXBlcyA9IHJlbW92ZU9iamVjdChwb2xpY3lUeXBlcywgUE9MSUNZX1RZUEVTLkVHUkVTUyk7CiAgICAgICAgICB0aGlzLiRkZWxldGUodGhpcy52YWx1ZS5zcGVjLCAnZWdyZXNzJyk7CiAgICAgICAgfQoKICAgICAgICB0aGlzLiRzZXQodGhpcy52YWx1ZS5zcGVjLCAncG9saWN5VHlwZXMnLCBwb2xpY3lUeXBlcyk7CiAgICAgIH0KICAgIH0sCiAgICBwb2RTZWxlY3RvckV4cHJlc3Npb25zOiB7CiAgICAgIGdldCgpIHsKICAgICAgICByZXR1cm4gY29udmVydCgKICAgICAgICAgIHRoaXMudmFsdWUuc3BlYy5wb2RTZWxlY3Rvci5tYXRjaExhYmVscyB8fCB7fSwKICAgICAgICAgIHRoaXMudmFsdWUuc3BlYy5wb2RTZWxlY3Rvci5tYXRjaEV4cHJlc3Npb25zIHx8IFtdCiAgICAgICAgKTsKICAgICAgfSwKICAgICAgc2V0KHBvZFNlbGVjdG9yRXhwcmVzc2lvbnMpIHsKICAgICAgICB0aGlzLiRzZXQodGhpcy52YWx1ZS5zcGVjLCAncG9kU2VsZWN0b3InLCBzaW1wbGlmeShwb2RTZWxlY3RvckV4cHJlc3Npb25zKSk7CiAgICAgIH0KICAgIH0sCiAgfSwKCiAgd2F0Y2g6IHsKICAgICd2YWx1ZS5tZXRhZGF0YS5uYW1lc3BhY2UnOiAndXBkYXRlTWF0Y2hpbmdQb2RzJywKICAgICd2YWx1ZS5zcGVjLnBvZFNlbGVjdG9yJzogICAndXBkYXRlTWF0Y2hpbmdQb2RzJywKICB9LAoKICBtZXRob2RzOiB7CiAgICB1cGRhdGVNYXRjaGluZ1BvZHM6IHRocm90dGxlKGZ1bmN0aW9uKCkgewogICAgICBjb25zdCBhbGxJbk5hbWVzcGFjZSA9IHRoaXMuYWxsUG9kcy5maWx0ZXIoKHBvZCkgPT4gcG9kLm1ldGFkYXRhLm5hbWVzcGFjZSA9PT0gdGhpcy52YWx1ZS5tZXRhZGF0YS5uYW1lc3BhY2UpOwogICAgICBjb25zdCBtYXRjaCA9IG1hdGNoaW5nKGFsbEluTmFtZXNwYWNlLCB0aGlzLnBvZFNlbGVjdG9yRXhwcmVzc2lvbnMpOwogICAgICBjb25zdCBtYXRjaGVkID0gbWF0Y2gubGVuZ3RoIHx8IDA7CiAgICAgIGNvbnN0IHNhbXBsZSA9IG1hdGNoWzBdPy5uYW1lRGlzcGxheTsKCiAgICAgIHRoaXMubWF0Y2hpbmdQb2RzID0gewogICAgICAgIG1hdGNoZWQsCiAgICAgICAgbWF0Y2hlczogbWF0Y2gsCiAgICAgICAgbm9uZTogICAgbWF0Y2hlZCA9PT0gMCwKICAgICAgICBzYW1wbGUsCiAgICAgICAgdG90YWw6ICAgYWxsSW5OYW1lc3BhY2UubGVuZ3RoLAogICAgICB9OwogICAgfSwgMjUwLCB7IGxlYWRpbmc6IHRydWUgfSksCiAgfSwKfTsK"},{"version":3,"sources":["index.vue"],"names":[],"mappingsfile":"index.vue","sourceRoot":"node_modules/@rancher/shell/edit/networking.k8s.io.networkpolicy","sourcesContent":["<script>\nimport throttle from 'lodash/throttle';\nimport CreateEditView from '@shell/mixins/create-edit-view';\nimport NameNsDescription from '@shell/components/form/NameNsDescription';\nimport Tab from '@shell/components/Tabbed/Tab';\nimport Tabbed from '@shell/components/Tabbed';\nimport CruResource from '@shell/components/CruResource';\nimport { Banner } from '@components/Banner';\nimport Labels from '@shell/components/form/Labels';\nimport { NAMESPACE, POD } from '@shell/config/types';\nimport { convert, matching, simplify } from '@shell/utils/selector';\nimport { Checkbox } from '@components/Form/Checkbox';\nimport { addObject, removeObject } from '@shell/utils/array';\nimport MatchExpressions from '@shell/components/form/MatchExpressions';\nimport PolicyRules from '@shell/edit/networking.k8s.io.networkpolicy/PolicyRules';\nimport ResourceTable from '@shell/components/ResourceTable';\nimport { allHash } from '@shell/utils/promise';\n\nconst POLICY_TYPES = {\n  INGRESS: 'Ingress',\n  EGRESS:  'Egress',\n};\n\nexport default {\n  // Props are found in CreateEditView\n  // props: {},\n\n  components: {\n    Banner,\n    Checkbox,\n    CruResource,\n    Labels,\n    MatchExpressions,\n    NameNsDescription,\n    PolicyRules,\n    ResourceTable,\n    Tab,\n    Tabbed,\n  },\n\n  mixins: [CreateEditView],\n\n  async fetch() {\n    const hash = await allHash({\n      allPods:       this.$store.dispatch('cluster/findAll', { type: POD }),\n      allNamespaces: this.$store.dispatch('cluster/findAll', { type: NAMESPACE }),\n    });\n\n    this.allPods = hash.allPods;\n    this.allNamespaces = hash.allNamespaces;\n\n    this.updateMatchingPods();\n  },\n\n  data() {\n    if ( !this.value.spec ) {\n      this.$set(this.value, 'spec', {\n        policyTypes: [],\n        podSelector: {\n          matchExpressions: [],\n          matchLabels:      {},\n        }\n      });\n    }\n\n    const matchingPods = {\n      matched: 0,\n      matches: [],\n      none:    true,\n      sample:  null,\n      total:   0,\n    };\n\n    return {\n      POD,\n      matchingPods,\n      allPods:         [],\n      allNamespaces:   [],\n      podTableHeaders: this.$store.getters['type-map/headersFor'](\n        this.$store.getters['cluster/schemaFor'](POD)\n      ),\n    };\n  },\n\n  computed: {\n    podSchema() {\n      return this.$store.getters['cluster/schemaFor'](POD);\n    },\n    hasIngressPolicies: {\n      get() {\n        return this.value.spec.policyTypes.includes(POLICY_TYPES.INGRESS);\n      },\n      set(hasIngressPolicies) {\n        let policyTypes = this.value.spec.policyTypes;\n\n        if (hasIngressPolicies) {\n          addObject(policyTypes, POLICY_TYPES.INGRESS);\n          if (!this.value.spec.ingress) {\n            this.$set(this.value.spec, 'ingress', []);\n          }\n        } else {\n          policyTypes = removeObject(policyTypes, POLICY_TYPES.INGRESS);\n          this.$delete(this.value.spec, 'ingress');\n        }\n\n        this.$set(this.value.spec, 'policyTypes', policyTypes);\n      }\n    },\n    hasEgressPolicies: {\n      get() {\n        return this.value.spec.policyTypes.includes(POLICY_TYPES.EGRESS);\n      },\n      set(hasEgressPolicies) {\n        let policyTypes = this.value.spec.policyTypes;\n\n        if (hasEgressPolicies) {\n          addObject(policyTypes, POLICY_TYPES.EGRESS);\n          if (!this.value.spec.egress) {\n            this.$set(this.value.spec, 'egress', []);\n          }\n        } else {\n          policyTypes = removeObject(policyTypes, POLICY_TYPES.EGRESS);\n          this.$delete(this.value.spec, 'egress');\n        }\n\n        this.$set(this.value.spec, 'policyTypes', policyTypes);\n      }\n    },\n    podSelectorExpressions: {\n      get() {\n        return convert(\n          this.value.spec.podSelector.matchLabels || {},\n          this.value.spec.podSelector.matchExpressions || []\n        );\n      },\n      set(podSelectorExpressions) {\n        this.$set(this.value.spec, 'podSelector', simplify(podSelectorExpressions));\n      }\n    },\n  },\n\n  watch: {\n    'value.metadata.namespace': 'updateMatchingPods',\n    'value.spec.podSelector':   'updateMatchingPods',\n  },\n\n  methods: {\n    updateMatchingPods: throttle(function() {\n      const allInNamespace = this.allPods.filter((pod) => pod.metadata.namespace === this.value.metadata.namespace);\n      const match = matching(allInNamespace, this.podSelectorExpressions);\n      const matched = match.length || 0;\n      const sample = match[0]?.nameDisplay;\n\n      this.matchingPods = {\n        matched,\n        matches: match,\n        none:    matched === 0,\n        sample,\n        total:   allInNamespace.length,\n      };\n    }, 250, { leading: true }),\n  },\n};\n</script>\n\n<template>\n  <CruResource\n    :done-route=\"doneRoute\"\n    :mode=\"mode\"\n    :resource=\"value\"\n    :subtypes=\"[]\"\n    :validation-passed=\"true\"\n    :errors=\"errors\"\n    @error=\"(e) => (errors = e)\"\n    @finish=\"save\"\n    @cancel=\"done\"\n  >\n    <NameNsDescription\n      v-if=\"!isView\"\n      :value=\"value\"\n      :mode=\"mode\"\n    />\n\n    <div class=\"row mb-40\">\n      <div class=\"col span-12\">\n        <Tabbed :side-tabs=\"true\">\n          <Tab\n            name=\"ingress\"\n            label-key=\"networkpolicy.ingress.label\"\n            :show-header=\"false\"\n            :weight=\"3\"\n          >\n            <h2 class=\"\">\n              {{ t('networkpolicy.ingress.label') }}\n            </h2>\n            <Checkbox\n              v-model=\"hasIngressPolicies\"\n              class=\"mt-20 mb-10\"\n              :mode=\"mode\"\n              :label=\"t('networkpolicy.ingress.enable')\"\n            />\n            <PolicyRules\n              v-if=\"hasIngressPolicies\"\n              v-model=\"value\"\n              type=\"ingress\"\n              :mode=\"mode\"\n              :all-namespaces=\"allNamespaces\"\n              :all-pods=\"allPods\"\n            />\n          </Tab>\n          <Tab\n            name=\"egress\"\n            label-key=\"networkpolicy.egress.label\"\n            :show-header=\"false\"\n            :weight=\"2\"\n          >\n            <h2>\n              {{ t('networkpolicy.egress.label') }}\n            </h2>\n            <Checkbox\n              v-model=\"hasEgressPolicies\"\n              class=\"mt-20 mb-10\"\n              :mode=\"mode\"\n              :label=\"t('networkpolicy.egress.enable')\"\n            />\n            <PolicyRules\n              v-if=\"hasEgressPolicies\"\n              v-model=\"value\"\n              type=\"egress\"\n              :mode=\"mode\"\n              :all-namespaces=\"allNamespaces\"\n              :all-pods=\"allPods\"\n            />\n          </Tab>\n          <Tab\n            name=\"selectors\"\n            label-key=\"networkpolicy.selectors.label\"\n            :show-header=\"false\"\n            :weight=\"1\"\n          >\n            <h2>\n              {{ t('networkpolicy.selectors.label') }}\n              <i\n                v-clean-tooltip=\"t('networkpolicy.selectors.hint')\"\n                class=\"icon icon-info\"\n              />\n            </h2>\n            <div class=\"row\">\n              <div class=\"col span-12\">\n                <MatchExpressions\n                  v-model=\"podSelectorExpressions\"\n                  :mode=\"mode\"\n                  :show-remove=\"false\"\n                  :type=\"POD\"\n                />\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col span-12\">\n                <Banner color=\"success\">\n                  <span v-clean-html=\"t('networkpolicy.selectors.matchingPods.matchesSome', matchingPods)\" />\n                </Banner>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col span-12\">\n                <ResourceTable\n                  :rows=\"matchingPods.matches\"\n                  :headers=\"podTableHeaders\"\n                  key-field=\"id\"\n                  :table-actions=\"false\"\n                  :schema=\"podSchema\"\n                  :groupable=\"false\"\n                  :search=\"false\"\n                />\n              </div>\n            </div>\n          </Tab>\n          <Tab\n            name=\"labels-and-annotations\"\n            :label=\"t('networkpolicy.labelsAnnotations.label', {}, true)\"\n            :weight=\"-1\"\n          >\n            <Labels\n              :default-container-class=\"'labels-and-annotations-container'\"\n              :value=\"value\"\n              :mode=\"mode\"\n              :display-side-by-side=\"false\"\n            />\n          </Tab>\n        </Tabbed>\n      </div>\n    </div>\n  </CruResource>\n</template>\n"]}]}