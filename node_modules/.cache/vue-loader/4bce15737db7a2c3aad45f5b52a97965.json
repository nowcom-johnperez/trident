{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/configmap.vue?vue&type=style&index=0&id=4ae19e7b&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/configmap.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5uby1iaW5hcnktZGF0YSB7CiAgb3BhY2l0eTogMC44Owp9Cg=="},{"version":3,"sources":["configmap.vue"],"names":[],"mappings":";AAwJA;AACA;AACA","file":"configmap.vue","sourceRoot":"node_modules/@rancher/shell/edit","sourcesContent":["<script>\nimport CreateEditView from '@shell/mixins/create-edit-view';\nimport CruResource from '@shell/components/CruResource';\nimport NameNsDescription from '@shell/components/form/NameNsDescription';\nimport KeyValue from '@shell/components/form/KeyValue';\nimport Labels from '@shell/components/form/Labels';\nimport Tab from '@shell/components/Tabbed/Tab';\nimport Tabbed from '@shell/components/Tabbed';\n\nexport default {\n  name: 'CruConfigMap',\n\n  components: {\n    CruResource,\n    NameNsDescription,\n    KeyValue,\n    Labels,\n    Tab,\n    Tabbed\n  },\n\n  mixins: [CreateEditView],\n  data() {\n    const { binaryData = {}, data = {} } = this.value;\n\n    return {\n      data,\n      binaryData\n    };\n  },\n  computed: {\n    hasBinaryData() {\n      return Object.keys(this.binaryData).length > 0;\n    },\n    /**\n     * Keep all newlines from end, see: https://yaml-multiline.info\n     * Apply to 'data' field\n     */\n    yamlModifiers() {\n      return {\n        data: Object.keys(this.data).reduce((acc, key) => ({\n          ...acc,\n          [key]: { chomping: '+' },\n        }), {}),\n      };\n    },\n\n    validationPassed() {\n      return !!this.value.name;\n    },\n  },\n\n  watch: {\n    data(neu) {\n      this.updateValue(neu, 'data');\n    },\n    binaryData(neu) {\n      this.updateValue(neu, 'binaryData');\n    },\n  },\n\n  methods: {\n    async saveConfigMap() {\n      const yaml = this.$refs.cru.createResourceYaml(this.yamlModifiers);\n\n      await this.value.saveYaml(yaml);\n      this.done();\n    },\n\n    updateValue(val, type) {\n      this.$set(this.value, type, {});\n\n      Object.keys(val).forEach((key) => {\n        this.$set(this.value[type], key, val[key]);\n      });\n    },\n  }\n};\n</script>\n\n<template>\n  <CruResource\n    ref=\"cru\"\n    :done-route=\"doneRoute\"\n    :mode=\"mode\"\n    :resource=\"value\"\n    :subtypes=\"[]\"\n    :validation-passed=\"validationPassed\"\n    :yaml-modifiers=\"yamlModifiers\"\n    :errors=\"errors\"\n    @error=\"e=>errors = e\"\n    @finish=\"saveConfigMap\"\n    @cancel=\"done\"\n  >\n    <NameNsDescription\n      :value=\"value\"\n      :mode=\"mode\"\n      :register-before-hook=\"registerBeforeHook\"\n    />\n\n    <Tabbed :side-tabs=\"true\">\n      <Tab\n        name=\"data\"\n        :label=\"t('configmap.tabs.data.label')\"\n        :weight=\"2\"\n      >\n        <KeyValue\n          key=\"data\"\n          v-model=\"data\"\n          :mode=\"mode\"\n          :protip=\"t('configmap.tabs.data.protip')\"\n          :initial-empty-row=\"true\"\n          :value-can-be-empty=\"true\"\n          :value-trim=\"false\"\n          :value-markdown-multiline=\"true\"\n          :read-multiple=\"true\"\n          :read-accept=\"'*'\"\n        />\n      </Tab>\n      <Tab\n        name=\"binary-data\"\n        :label=\"t('configmap.tabs.binaryData.label')\"\n        :weight=\"1\"\n      >\n        <KeyValue\n          key=\"binaryData\"\n          v-model=\"binaryData\"\n          :initial-empty-row=\"true\"\n          :handle-base64=\"true\"\n          :add-allowed=\"true\"\n          :read-allowed=\"true\"\n          :mode=\"mode\"\n          :protip=\"t('configmap.tabs.data.protip')\"\n        />\n      </Tab>\n      <Tab\n        name=\"labels-and-annotations\"\n        label-key=\"generic.labelsAndAnnotations\"\n        :weight=\"-1\"\n      >\n        <Labels\n          default-container-class=\"labels-and-annotations-container\"\n          :value=\"value\"\n          :mode=\"mode\"\n          :display-side-by-side=\"false\"\n        />\n      </Tab>\n    </Tabbed>\n  </CruResource>\n</template>\n\n<style lang=\"scss\" scoped>\n.no-binary-data {\n  opacity: 0.8;\n}\n</style>\n"]}]}