{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/detail/management.cattle.io.user.vue?vue&type=style&index=0&id=6f5e32a2&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/detail/management.cattle.io.user.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5zdWJ0ZXh0IHsKICBtYXJnaW4tYm90dG9tOiAxMHB4OwogIGZvbnQtc3R5bGU6IGl0YWxpYzsKfQouYWRtaW4gewogIGRpc3BsYXk6IGZsZXg7CiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgbWFyZ2luOiAzMHB4IDAgMTBweDsKICBmb250LXdlaWdodDogYm9sZDsKfQo="},{"version":3,"sources":["management.cattle.io.user.vue"],"names":[],"mappings":";AA0SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"management.cattle.io.user.vue","sourceRoot":"node_modules/@rancher/shell/detail","sourcesContent":["<script>\nimport CreateEditView from '@shell/mixins/create-edit-view';\nimport Tab from '@shell/components/Tabbed/Tab';\nimport ResourceTabs from '@shell/components/form/ResourceTabs';\nimport SortableTable from '@shell/components/SortableTable';\nimport { MANAGEMENT, NORMAN } from '@shell/config/types';\nimport Loading from '@shell/components/Loading';\nimport { NAME } from '@shell/config/table-headers';\n\nexport default {\n  components: {\n    Tab,\n    ResourceTabs,\n    SortableTable,\n    Loading\n  },\n  mixins: [\n    CreateEditView\n  ],\n  async fetch() {\n    const canSeeGlobalRoles = !!this.$store.getters[`management/canList`](MANAGEMENT.GLOBAL_ROLE);\n\n    if (canSeeGlobalRoles) {\n      this.globalBindings = await this.fetchGlobalRoleBindings(this.value.id);\n    }\n\n    this.canSeeRoleTemplates = !!this.$store.getters[`management/canList`](MANAGEMENT.ROLE_TEMPLATE);\n\n    if (this.canSeeRoleTemplates) {\n      // Upfront fetch, avoid async computes\n      await Promise.all([\n        await this.$store.dispatch('rancher/find', { type: NORMAN.USER, id: this.value.id }),\n        await this.$store.dispatch('management/findAll', { type: MANAGEMENT.ROLE_TEMPLATE }),\n        await this.$store.dispatch('management/findAll', { type: MANAGEMENT.CLUSTER_ROLE_TEMPLATE_BINDING }),\n        await this.$store.dispatch('management/findAll', { type: MANAGEMENT.PROJECT_ROLE_TEMPLATE_BINDING })\n      ]);\n    }\n  },\n  data() {\n    const role = {\n      name:     'role',\n      labelKey: 'user.detail.generic.tableHeaders.role',\n      value:    'roleTemplate.displayName',\n      sort:     'roleTemplate.displayName',\n    };\n    const since = {\n      name:          'since',\n      labelKey:      'user.detail.generic.tableHeaders.granted',\n      value:         'metadata.creationTimestamp',\n      sort:          'metadata.creationTimestamp:desc',\n      search:        false,\n      formatter:     'LiveDate',\n      formatterOpts: { addSuffix: true },\n      width:         '20%',\n    };\n\n    return {\n      headers: {\n        gp: [\n          {\n            name:      'permission',\n            labelKey:  'user.detail.globalPermissions.tableHeaders.permission',\n            value:     'hasBound',\n            sort:      ['hasBound:desc'],\n            formatter: 'Checked',\n            width:     75,\n            align:     'center'\n          },\n          NAME,\n          {\n            ...since,\n            value: 'bound',\n            sort:  'bound',\n          }\n        ],\n        cr: [\n          {\n            name:          'cluster',\n            labelKey:      'user.detail.clusterRoles.tableHeaders.cluster',\n            value:         'clusterDisplayName',\n            sort:          'clusterDisplayName',\n            formatter:     'LinkDetail',\n            formatterOpts: { reference: 'clusterDetailLocation' },\n          }, { ...role },\n          { ...since }\n        ],\n        pr: [\n          {\n            name:          'project',\n            labelKey:      'user.detail.projectRoles.tableHeaders.project',\n            value:         'projectDisplayName',\n            sort:          'projectDisplayName',\n            formatter:     'LinkDetail',\n            formatterOpts: { reference: 'projectDetailLocation' },\n          }, {\n            name:          'cluster',\n            labelKey:      'user.detail.clusterRoles.tableHeaders.cluster',\n            value:         'clusterDisplayName',\n            sort:          'clusterDisplayName',\n            formatter:     'LinkDetail',\n            formatterOpts: { reference: 'clusterDetailLocation' },\n          }, { ...role },\n          { ...since }\n        ]\n      },\n      globalBindings:      null,\n      canSeeRoleTemplates: false,\n      isAdmin:             false,\n    };\n  },\n  computed: {\n    clusterBindings() {\n      return this.canSeeRoleTemplates ? this.fetchClusterRoles(this.value.id) : null;\n    },\n    projectBindings() {\n      return this.canSeeRoleTemplates ? this.fetchProjectRoles(this.value.id) : null;\n    }\n\n  },\n  methods: {\n    async fetchGlobalRoleBindings(userId) {\n      try {\n        const roles = await this.$store.dispatch('management/findAll', { type: MANAGEMENT.GLOBAL_ROLE });\n\n        const out = await Promise.all(roles\n          .filter((r) => !r.isSpecial)\n          .map((r) => this.$store.dispatch(`rancher/clone`, { resource: r }))\n        );\n\n        out.forEach((r) => {\n          r.hasBound = false;\n        });\n\n        const globalRoleBindings = await this.$store.dispatch('management/findAll', { type: MANAGEMENT.GLOBAL_ROLE_BINDING });\n\n        globalRoleBindings\n          .filter((binding) => binding.userName === userId)\n          .forEach((binding) => {\n            const globalRole = roles.find((r) => r.id === binding.globalRoleName);\n\n            if (globalRole.id === 'admin') {\n              this.isAdmin = true;\n            }\n\n            if (globalRole.isSpecial) {\n              this.getEnabledRoles(globalRole, out).forEach((r) => {\n                r.hasBound = true;\n                r.bound = binding?.metadata.creationTimestamp;\n              });\n            } else {\n              const entry = out.find((o) => o.id === binding.globalRoleName);\n\n              if (entry) {\n                entry.hasBound = true;\n                entry.bound = binding?.metadata.creationTimestamp;\n              }\n            }\n          });\n\n        return out;\n      } catch (e) {\n        // Swallow the error. It's probably due to the user not having the correct permissions to read global roles\n        console.error('Failed to fetch global role bindings: ', e); // eslint-disable-line no-console\n      }\n    },\n\n    fetchClusterRoles(userId) {\n      const templateBindings = this.$store.getters['management/all'](MANAGEMENT.CLUSTER_ROLE_TEMPLATE_BINDING);\n      const userTemplateBindings = templateBindings.filter((binding) => binding.userName === userId);\n\n      // Upfront load clusters\n      userTemplateBindings.map((b) => this.$store.dispatch('management/find', { type: MANAGEMENT.CLUSTER, id: b.clusterName }));\n\n      return userTemplateBindings;\n    },\n\n    fetchProjectRoles(userId) {\n      const templateBindings = this.$store.getters['management/all'](MANAGEMENT.PROJECT_ROLE_TEMPLATE_BINDING );\n      const userTemplateBindings = templateBindings.filter((binding) => binding.userName === userId);\n\n      // Upfront load projects\n      userTemplateBindings.map((b) => this.$store.dispatch('management/find', { type: MANAGEMENT.PROJECT, id: b.projectId }));\n\n      return userTemplateBindings;\n    },\n\n    // Global Permissions Helpers (brought over from ember)\n    hasPermission(globalRoleRules, permission) {\n      return globalRoleRules.find((gRule) => {\n        return ((gRule.apiGroups || []).includes('*') || (gRule.apiGroups || []).includes(permission.apiGroup)) &&\n        ((gRule.resources || []).includes('*') || (gRule.resources || []).includes(permission.resource)) &&\n        ((gRule.verbs || []).includes('*') || (gRule.verbs || []).includes(permission.verb));\n      })\n      ;\n    },\n    containsRule(globalRoleRules, rule) {\n      const apiGroups = (rule.apiGroups || []);\n      const resources = (rule.resources || []);\n      const verbs = (rule.verbs || []);\n      const permissions = [];\n\n      apiGroups.forEach((apiGroup) => resources.forEach((resource) => verbs.forEach((verb) => permissions.push({\n        apiGroup,\n        resource,\n        verb\n      }))));\n\n      return permissions.every((permission) => this.hasPermission(globalRoleRules, permission));\n    },\n    getEnabledRoles(globalRole, out) {\n      const globalRoleRules = globalRole.rules || [];\n\n      return out.filter((r) => {\n        // If the global role doesn't contain any rules... don't show the user as having the role (confusing)\n        if (!r?.rules?.length) {\n          return false;\n        }\n\n        return r.rules.every((rule) => this.containsRule(globalRoleRules, rule));\n      });\n    },\n\n  }\n\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n  <div v-else>\n    <ResourceTabs\n      v-model=\"value\"\n      :mode=\"mode\"\n    >\n      <Tab\n        v-if=\"globalBindings\"\n        label-key=\"user.detail.globalPermissions.label\"\n        name=\"gp\"\n        :weight=\"3\"\n      >\n        <div class=\"subtext\">\n          {{ t(\"user.detail.globalPermissions.description\") }}\n        </div>\n        <div\n          v-if=\"isAdmin\"\n          class=\"admin\"\n        >\n          {{ t(\"user.detail.globalPermissions.adminMessage\") }}\n        </div>\n        <SortableTable\n          v-else\n          :rows=\"globalBindings\"\n          :headers=\"headers.gp\"\n          key-field=\"id\"\n          :table-actions=\"false\"\n          :row-actions=\"false\"\n          :search=\"false\"\n        />\n      </Tab>\n      <Tab\n        v-if=\"clusterBindings\"\n        label-key=\"user.detail.clusterRoles.label\"\n        name=\"cr\"\n        :weight=\"2\"\n      >\n        <div class=\"subtext\">\n          {{ t(\"user.detail.clusterRoles.description\") }}\n        </div>\n        <SortableTable\n          :rows=\"clusterBindings\"\n          :headers=\"headers.cr\"\n          key-field=\"id\"\n          :table-actions=\"false\"\n          :search=\"false\"\n        />\n      </Tab>\n      <Tab\n        v-if=\"projectBindings\"\n        label-key=\"user.detail.projectRoles.label\"\n        name=\"pr\"\n        :weight=\"1\"\n      >\n        <div class=\"subtext\">\n          {{ t(\"user.detail.projectRoles.description\") }}\n        </div>\n        <SortableTable\n          :rows=\"projectBindings\"\n          :headers=\"headers.pr\"\n          key-field=\"id\"\n          :table-actions=\"false\"\n          :search=\"false\"\n        />\n      </Tab>\n    </ResourceTabs>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.subtext {\n  margin-bottom: 10px;\n  font-style: italic;\n}\n.admin {\n  display: flex;\n  justify-content: center;\n  margin: 30px 0 10px;\n  font-weight: bold;\n}\n</style>\n"]}]}