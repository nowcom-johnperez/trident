{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/detail/pod.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/detail/pod.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["pod.vue"],"names":[],"mappingsfile":"pod.vue","sourceRoot":"node_modules/@rancher/shell/detail","sourcesContent":["<script>\nimport CreateEditView from '@shell/mixins/create-edit-view';\nimport Tab from '@shell/components/Tabbed/Tab';\nimport ResourceTabs from '@shell/components/form/ResourceTabs';\nimport SortableTable from '@shell/components/SortableTable';\nimport { STATE, SIMPLE_NAME, IMAGE_NAME } from '@shell/config/table-headers';\nimport { sortableNumericSuffix } from '@shell/utils/sort';\nimport { findBy } from '@shell/utils/array';\nimport DashboardMetrics from '@shell/components/DashboardMetrics';\nimport V1WorkloadMetrics from '@shell/mixins/v1-workload-metrics';\nimport { mapGetters } from 'vuex';\nimport { allDashboardsExist } from '@shell/utils/grafana';\nimport LabeledSelect from '@shell/components/form/LabeledSelect';\nimport day from 'dayjs';\nimport { DATE_FORMAT, TIME_FORMAT } from '@shell/store/prefs';\nimport { escapeHtml } from '@shell/utils/string';\nimport { NAMESPACE } from '@shell/config/types';\nimport { PROJECT } from '@shell/config/labels-annotations';\n\nconst POD_METRICS_DETAIL_URL = '/api/v1/namespaces/cattle-monitoring-system/services/http:rancher-monitoring-grafana:80/proxy/d/rancher-pod-containers-1/rancher-pod-containers?orgId=1';\nconst POD_METRICS_SUMMARY_URL = '/api/v1/namespaces/cattle-monitoring-system/services/http:rancher-monitoring-grafana:80/proxy/d/rancher-pod-1/rancher-pod?orgId=1';\n\nexport default {\n  name: 'PodDetail',\n\n  components: {\n    DashboardMetrics,\n    ResourceTabs,\n    Tab,\n    SortableTable,\n    LabeledSelect,\n  },\n\n  mixins: [CreateEditView, V1WorkloadMetrics],\n\n  async fetch() {\n    this.showMetrics = await allDashboardsExist(this.$store, this.currentCluster.id, [POD_METRICS_DETAIL_URL, POD_METRICS_SUMMARY_URL]);\n    if (!this.showMetrics) {\n      const namespace = await this.$store.dispatch('cluster/find', { type: NAMESPACE, id: this.value.metadata.namespace });\n\n      const projectId = namespace?.metadata?.labels[PROJECT];\n\n      if (projectId) {\n        this.POD_PROJECT_METRICS_DETAIL_URL = `/api/v1/namespaces/cattle-project-${ projectId }-monitoring/services/http:cattle-project-${ projectId }-monitoring-grafana:80/proxy/d/rancher-pod-containers-1/rancher-pod-containers?orgId=1'`;\n        this.POD_PROJECT_METRICS_SUMMARY_URL = `/api/v1/namespaces/cattle-project-${ projectId }-monitoring/services/http:cattle-project-${ projectId }-monitoring-grafana:80/proxy/d/rancher-pod-1/rancher-pod?orgId=1`;\n\n        this.showProjectMetrics = await allDashboardsExist(this.$store, this.currentCluster.id, [this.POD_PROJECT_METRICS_DETAIL_URL, this.POD_PROJECT_METRICS_SUMMARY_URL], 'cluster', projectId);\n      }\n    }\n  },\n\n  data() {\n    const t = this.$store.getters['i18n/t'];\n    const POD_OPTION = {\n      id:    '//POD//',\n      label: t('workload.metrics.pod'),\n    };\n\n    return {\n      POD_METRICS_DETAIL_URL,\n      POD_METRICS_SUMMARY_URL,\n      POD_PROJECT_METRICS_DETAIL_URL:  '',\n      POD_PROJECT_METRICS_SUMMARY_URL: '',\n      POD_OPTION,\n      showMetrics:                     false,\n      showProjectMetrics:              false,\n      selection:                       POD_OPTION,\n      metricsID:                       null,\n    };\n  },\n\n  computed: {\n    ...mapGetters(['currentCluster']),\n    containers() {\n      const containers = this.allContainers;\n      const statuses = this.allStatuses;\n\n      return (containers || []).map((container) => {\n        const status = findBy(statuses, 'name', container.name);\n        const state = status?.state || {};\n        const descriptions = [];\n\n        // There can be only one member of a `ContainerState`\n        const s = Object.values(state)[0] || {};\n        const reason = s.reason || '';\n        const message = s.message || '';\n        const showBracket = s.reason && s.message;\n        const description = `${ reason }${ showBracket ? ' (' : '' }${ message }${ showBracket ? ')' : '' }`;\n\n        if (description) {\n          descriptions.push(description);\n        }\n\n        // add lastState to show termination reason\n        if (status?.lastState?.terminated) {\n          const ls = status?.lastState?.terminated;\n          const lsReason = ls.reason || '';\n          const lsMessage = ls.message || '';\n          const lsExitCode = ls.exitCode || '';\n          const lsStartedAt = this.dateTimeFormat(ls.startedAt);\n          const lsFinishedAt = this.dateTimeFormat(ls.finishedAt);\n          const lsShowBracket = ls.reason && ls.message;\n          const lsDescription = `${ lsReason }${ lsShowBracket ? ' (' : '' }${ lsMessage }${ lsShowBracket ? ')' : '' }`;\n\n          descriptions.push(this.t('workload.container.terminationState', {\n            lsDescription, lsExitCode, lsStartedAt, lsFinishedAt\n          }));\n        }\n\n        return {\n          ...container,\n          status:           status || {},\n          stateDisplay:     status ? this.value.containerStateDisplay(status) : undefined,\n          stateBackground:  status ? this.value.containerStateColor(status).replace('text', 'bg') : undefined,\n          nameSort:         sortableNumericSuffix(container.name).toLowerCase(),\n          readyIcon:        status?.ready ? 'icon-checkmark text-success ml-5' : 'icon-x text-error ml-5',\n          availableActions: this.value.containerActions,\n          stateObj:         status, // Required if there's a description\n          stateDescription: descriptions.join(' | '), // Required to display the description\n          initIcon:         this.value.containerIsInit(container) ? 'icon-checkmark icon-2x text-success ml-5' : 'icon-minus icon-2x text-muted ml-5',\n\n          // Call openShell here so that opening the shell\n          // at the container level still has 'this' in scope.\n          openShell: () => this.value.openShell(container.name),\n          // Call openLogs here so that opening the logs\n          // at the container level still has 'this' in scope.\n          openLogs:  () => this.value.openLogs(container.name)\n        };\n      });\n    },\n\n    allContainers() {\n      const { containers = [], initContainers = [] } = this.value.spec;\n\n      return [...containers, ...initContainers];\n    },\n\n    allStatuses() {\n      const { containerStatuses = [], initContainerStatuses = [] } = this.value.status;\n\n      return [...containerStatuses, ...initContainerStatuses];\n    },\n\n    containerHeaders() {\n      return [\n        STATE,\n        {\n          name:          'ready',\n          labelKey:      'tableHeaders.ready',\n          formatter:     'IconText',\n          formatterOpts: { iconKey: 'readyIcon' },\n          align:         'left',\n          width:         75,\n          sort:          'readyIcon'\n        },\n        {\n          ...SIMPLE_NAME,\n          value: 'name'\n        },\n        IMAGE_NAME,\n        {\n          name:          'isInit',\n          labelKey:      'workload.container.init',\n          formatter:     'IconText',\n          formatterOpts: { iconKey: 'initIcon' },\n          align:         'left',\n          width:         75,\n          sort:          'initIcon'\n        },\n        {\n          name:     'restarts',\n          labelKey: 'tableHeaders.restarts',\n          value:    'status.restartCount',\n          align:    'right',\n          width:    75\n        },\n        {\n          name:          'age',\n          labelKey:      'tableHeaders.started',\n          value:         'status.state.running.startedAt',\n          sort:          'status.state.running.startedAt:desc',\n          search:        false,\n          formatter:     'LiveDate',\n          formatterOpts: { addSuffix: true },\n          align:         'right'\n        }\n      ];\n    },\n\n    graphVars() {\n      return {\n        namespace: this.value.namespace,\n        pod:       this.value.name\n      };\n    },\n\n    metricsOptions() {\n      const v = this.containers.map((c) => {\n        return {\n          id:    c.name,\n          label: c.name\n        };\n      });\n\n      v.unshift(this.POD_OPTION);\n\n      return v;\n    },\n\n    v1Metrics() {\n      if (!this.metricsID) {\n        return this.v1MonitoringUrl;\n      } else {\n        return `${ this.v1MonitoringContainerBaseUrl }/${ this.metricsID }`;\n      }\n    },\n\n    dateTimeFormatString() {\n      const dateFormat = escapeHtml( this.$store.getters['prefs/get'](DATE_FORMAT));\n      const timeFormat = escapeHtml( this.$store.getters['prefs/get'](TIME_FORMAT));\n\n      return `${ dateFormat } ${ timeFormat }`;\n    }\n  },\n\n  methods: {\n    selectionChanged(c) {\n      const id = c === this.POD_OPTION ? null : c.id;\n\n      this.metricsID = id;\n      this.selection = c;\n    },\n\n    dateTimeFormat(value) {\n      return value ? day(value).format(this.dateTimeFormatString) : '';\n    }\n  }\n};\n</script>\n\n<template>\n  <ResourceTabs\n    mode=\"view\"\n    class=\"mt-20\"\n    :value=\"value\"\n  >\n    <Tab\n      :label=\"t('workload.container.titles.containers')\"\n      name=\"containers\"\n      :weight=\"3\"\n    >\n      <SortableTable\n        :rows=\"containers\"\n        :headers=\"containerHeaders\"\n        :mode=\"mode\"\n        key-field=\"name\"\n        :search=\"false\"\n        :row-actions=\"true\"\n        :table-actions=\"false\"\n      />\n    </Tab>\n    <Tab\n      v-if=\"v1MonitoringUrl\"\n      name=\"v1Metrics\"\n      :label=\"t('node.detail.tab.metrics')\"\n      :weight=\"0\"\n    >\n      <LabeledSelect\n        class=\"pod-metrics-chooser\"\n        :value=\"selection\"\n        label-key=\"workload.metrics.metricsView\"\n        :options=\"metricsOptions\"\n        @input=\"selectionChanged($event)\"\n      />\n      <div id=\"ember-anchor\">\n        <EmberPage\n          inline=\"ember-anchor\"\n          :src=\"v1Metrics\"\n        />\n      </div>\n    </Tab>\n    <Tab\n      v-if=\"showMetrics\"\n      :label=\"t('workload.container.titles.metrics')\"\n      name=\"pod-metrics\"\n      :weight=\"2.5\"\n    >\n      <template #default=\"props\">\n        <DashboardMetrics\n          v-if=\"props.active\"\n          :detail-url=\"POD_METRICS_DETAIL_URL\"\n          :summary-url=\"POD_METRICS_SUMMARY_URL\"\n          :vars=\"graphVars\"\n          graph-height=\"550px\"\n        />\n      </template>\n    </Tab>\n    <Tab\n      v-if=\"showProjectMetrics\"\n      :label=\"t('workload.container.titles.metrics')\"\n      name=\"pod-metrics\"\n      :weight=\"2.5\"\n    >\n      <template #default=\"props\">\n        <DashboardMetrics\n          v-if=\"props.active\"\n          :detail-url=\"POD_PROJECT_METRICS_DETAIL_URL\"\n          :summary-url=\"POD_PROJECT_METRICS_SUMMARY_URL\"\n          :vars=\"graphVars\"\n          graph-height=\"550px\"\n        />\n      </template>\n    </Tab>\n  </ResourceTabs>\n</template>\n<style scoped>\n  .pod-metrics-chooser {\n    width: fit-content;\n    margin-bottom: 10px;\n    min-width: 300px;\n  }\n</style>\n"]}]}