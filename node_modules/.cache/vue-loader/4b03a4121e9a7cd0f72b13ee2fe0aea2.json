{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/provisioning.cattle.io.cluster/AgentConfiguration.vue?vue&type=style&index=0&id=6dbf7c8e&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/provisioning.cattle.io.cluster/AgentConfiguration.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5zZXBhcmF0b3IgewogIHdpZHRoOiAxMDAlOwogIGJvcmRlci10b3A6IDFweCBzb2xpZCB2YXIoLS1ib3JkZXIpOwp9Cg=="},{"version":3,"sources":["AgentConfiguration.vue"],"names":[],"mappings":";AAoSA;AACA;AACA;AACA","file":"AgentConfiguration.vue","sourceRoot":"node_modules/@rancher/shell/edit/provisioning.cattle.io.cluster","sourcesContent":["<script>\nimport { Banner } from '@components/Banner';\nimport GroupPanel from '@shell/components/GroupPanel';\nimport PodAffinity from '@shell/components/form/PodAffinity';\nimport NodeAffinity from '@shell/components/form/NodeAffinity';\nimport ContainerResourceLimit from '@shell/components/ContainerResourceLimit';\nimport Tolerations from '@shell/components/form/Tolerations';\nimport { cleanUp } from '@shell/utils/object';\nimport { fetchSetting } from '@shell/utils/settings';\nimport { RadioGroup } from '@components/Form/Radio';\n\n// Affinity radio button choices\nconst DEFAULT = 'default';\nconst CUSTOM = 'custom';\n\n// This is the form for Agent Configuration\n// Used for both Cluster Agent and Fleet Agent configuration\nexport default {\n  components: {\n    Banner,\n    ContainerResourceLimit,\n    GroupPanel,\n    PodAffinity,\n    NodeAffinity,\n    RadioGroup,\n    Tolerations,\n  },\n  props: {\n    value: {\n      type:    Object,\n      default: () => {},\n    },\n\n    mode: {\n      type:     String,\n      required: true,\n    },\n\n    type: {\n      type:     String,\n      required: true,\n    }\n  },\n\n  async fetch() {\n    // Default affinity\n    const settingId = `${ this.type }-agent-default-affinity`;\n    const setting = await fetchSetting(this.$store, settingId);\n\n    if (setting) {\n      try {\n        const parsed = JSON.parse(setting.value || setting.default);\n\n        this.defaultAffinity = parsed || {};\n      } catch (e) {\n        console.error('Could not parse agent default setting', e); // eslint-disable-line no-console\n        this.defaultAffinity = {};\n      }\n    }\n  },\n\n  data() {\n    const nodeAffinity = this.value?.overrideAffinity?.nodeAffinity;\n    const podAffinity = this.value?.overrideAffinity?.podAffinity;\n    const podAntiAffinity = this.value?.overrideAffinity?.podAntiAffinity;\n\n    let hasAffinityPopulated = false;\n\n    if ((nodeAffinity && Object.keys(nodeAffinity).length) ||\n      (podAffinity && Object.keys(podAffinity).length) ||\n      (podAntiAffinity && Object.keys(podAntiAffinity).length)) {\n      hasAffinityPopulated = true;\n    }\n\n    return {\n      defaultAffinity: {},\n      affinitySetting: hasAffinityPopulated ? CUSTOM : DEFAULT,\n      nodeAffinity:    {}\n    };\n  },\n\n  created() {\n    this.ensureValue();\n  },\n\n  computed: {\n    flatResources: {\n      get() {\n        const { limits = {}, requests = {} } = this.value.overrideResourceRequirements || {};\n        const {\n          cpu: limitsCpu,\n          memory: limitsMemory,\n        } = limits;\n        const { cpu: requestsCpu, memory: requestsMemory } = requests;\n\n        return {\n          limitsCpu,\n          limitsMemory,\n          requestsCpu,\n          requestsMemory,\n        };\n      },\n      set(neu) {\n        const {\n          limitsCpu,\n          limitsMemory,\n          requestsCpu,\n          requestsMemory,\n        } = neu;\n\n        const existing = this.value?.overrideResourceRequirements || {};\n\n        delete existing.requests;\n        delete existing.limits;\n\n        const out = {\n          ...existing,\n          requests: {\n            cpu:    requestsCpu,\n            memory: requestsMemory,\n          },\n          limits: {\n            cpu:    limitsCpu,\n            memory: limitsMemory,\n          },\n        };\n\n        this.$set(this.value, 'overrideResourceRequirements', cleanUp(out));\n      },\n    },\n\n    affinityOptions() {\n      return [{\n        label: this.t('cluster.agentConfig.affinity.default'),\n        value: DEFAULT,\n      }, {\n        label: this.t('cluster.agentConfig.affinity.custom'),\n        value: CUSTOM,\n      }];\n    },\n\n    canEditAffinity() {\n      return this.affinitySetting === CUSTOM;\n    }\n  },\n\n  watch: {\n    value() {\n      this.ensureValue();\n    }\n  },\n\n  methods: {\n    ensureValue() {\n      // Ensure we have the model structure needed for the form controls\n      if (this.value) {\n        this.value.overrideAffinity = this.value.overrideAffinity || {};\n        this.value.appendTolerations = this.value.appendTolerations || [];\n        this.value.overrideResourceRequirements = this.value.overrideResourceRequirements || {};\n\n        this.nodeAffinity = this.value?.overrideAffinity?.nodeAffinity || {};\n      }\n    },\n\n    affinitySettingChange() {\n      if (this.affinitySetting === CUSTOM) {\n        const parsedDefaultAffinites = JSON.parse(JSON.stringify(this.defaultAffinity));\n\n        // Copy the default so that the user can edit it\n        // this will cover the pod affinities\n        this.$set(this.value, 'overrideAffinity', parsedDefaultAffinites);\n\n        // in order not to break the node affinity component, let's go for a slightly different way of handling the logic here\n        if (parsedDefaultAffinites.nodeAffinity) {\n          this.nodeAffinity = parsedDefaultAffinites.nodeAffinity;\n        }\n      } else {\n        this.$set(this.value, 'overrideAffinity', {});\n      }\n    },\n    updateNodeAffinity(val) {\n      this.$set(this.value.overrideAffinity, 'nodeAffinity', val);\n    }\n  }\n};\n</script>\n\n<template>\n  <div>\n    <Banner\n      :closable=\"false\"\n      color=\"info\"\n      label-key=\"cluster.agentConfig.banners.advanced\"\n    />\n\n    <GroupPanel\n      label-key=\"cluster.agentConfig.groups.podRequestsAndLimits\"\n      class=\"mt-20\"\n    >\n      <Banner\n        :closable=\"false\"\n        color=\"info\"\n        label-key=\"cluster.agentConfig.banners.limits\"\n      />\n      <ContainerResourceLimit\n        v-model=\"flatResources\"\n        :mode=\"mode\"\n        :show-tip=\"false\"\n        :handle-gpu-limit=\"false\"\n        class=\"mt-10\"\n      />\n    </GroupPanel>\n\n    <GroupPanel\n      label-key=\"cluster.agentConfig.groups.podTolerations\"\n      class=\"mt-20\"\n    >\n      <Banner\n        :closable=\"false\"\n        color=\"info\"\n        label-key=\"cluster.agentConfig.banners.tolerations\"\n      />\n      <Tolerations\n        v-model=\"value.appendTolerations\"\n        :mode=\"mode\"\n        class=\"mt-10\"\n      />\n    </GroupPanel>\n\n    <GroupPanel\n      label-key=\"cluster.agentConfig.groups.podAffinity\"\n      class=\"mt-20\"\n    >\n      <RadioGroup\n        v-model=\"affinitySetting\"\n        name=\"affinity-override\"\n        :mode=\"mode\"\n        :options=\"affinityOptions\"\n        class=\"mt-10\"\n        data-testid=\"affinity-options\"\n        @input=\"affinitySettingChange\"\n      />\n\n      <Banner\n        v-if=\"canEditAffinity\"\n        :closable=\"false\"\n        color=\"warning\"\n      >\n        <p v-clean-html=\"t('cluster.agentConfig.banners.windowsCompatibility', {}, true)\" />\n      </Banner>\n\n      <h4 v-if=\"canEditAffinity\">\n        {{ t('cluster.agentConfig.subGroups.podAffinityAnti') }}\n      </h4>\n\n      <PodAffinity\n        v-if=\"canEditAffinity\"\n        v-model=\"value\"\n        field=\"overrideAffinity\"\n        :mode=\"mode\"\n        class=\"mt-0 mb-20\"\n        :all-namespaces-option-available=\"true\"\n        :force-input-namespace-selection=\"true\"\n        :remove-labeled-input-namespace-label=\"true\"\n        data-testid=\"pod-affinity\"\n      />\n\n      <div\n        v-if=\"canEditAffinity\"\n        class=\"separator\"\n      />\n      <h4\n        v-if=\"canEditAffinity\"\n        class=\"mt-20\"\n      >\n        {{ t('cluster.agentConfig.subGroups.nodeAffinity') }}\n      </h4>\n\n      <NodeAffinity\n        v-if=\"canEditAffinity\"\n        v-model=\"nodeAffinity\"\n        :matching-selector-display=\"true\"\n        :mode=\"mode\"\n        class=\"mt-0\"\n        data-testid=\"node-affinity\"\n        @input=\"updateNodeAffinity\"\n      />\n    </GroupPanel>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.separator {\n  width: 100%;\n  border-top: 1px solid var(--border);\n}\n</style>\n"]}]}