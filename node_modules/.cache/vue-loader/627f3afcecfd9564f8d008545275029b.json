{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/monitoring.coreos.com.prometheusrule/index.vue?vue&type=style&index=0&id=089c4b0a&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/monitoring.coreos.com.prometheusrule/index.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jb250YWluZXItZ3JvdXAgewogIHBvc2l0aW9uOiByZWxhdGl2ZTsKCiAgLnJlbW92ZSB7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICB0b3A6IC00MHB4OwogICAgcmlnaHQ6IDVweDsKICB9CgogIC5yb3c6bm90KDpmaXJzdC1jaGlsZCkgewogICAgbWFyZ2luLXRvcDogMjBweDsKICB9Cn0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AA0MA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/@rancher/shell/edit/monitoring.coreos.com.prometheusrule","sourcesContent":["<script>\nimport CreateEditView from '@shell/mixins/create-edit-view';\nimport FormValidation from '@shell/mixins/form-validation';\nimport { removeAt } from '@shell/utils/array';\nimport { Banner } from '@components/Banner';\nimport CruResource from '@shell/components/CruResource';\nimport { LabeledInput } from '@components/Form/LabeledInput';\nimport NameNsDescription from '@shell/components/form/NameNsDescription';\nimport Tab from '@shell/components/Tabbed/Tab';\nimport Tabbed from '@shell/components/Tabbed';\nimport UnitInput from '@shell/components/form/UnitInput';\nimport { _CREATE, _VIEW } from '@shell/config/query-params';\nimport isString from 'lodash/isString';\nimport isEmpty from 'lodash/isEmpty';\nimport GroupRules from './GroupRules';\nimport { toMilliseconds } from './duration.js';\n\nexport default {\n  components: {\n    Banner,\n    CruResource,\n    GroupRules,\n    LabeledInput,\n    NameNsDescription,\n    Tab,\n    Tabbed,\n    UnitInput,\n  },\n\n  mixins: [CreateEditView, FormValidation],\n\n  props: {\n    value: {\n      type:     Object,\n      required: true,\n    },\n\n    mode: {\n      type:    String,\n      default: 'create',\n    },\n  },\n\n  data() {\n    return {\n      fvFormRuleSets:      [{ path: 'metadata.name', rules: ['dnsLabel'] }],\n      closedErrorMessages: []\n    };\n  },\n\n  computed: {\n    filteredGroups() {\n      return this.value?.spec?.groups || [];\n    },\n    errorMessages() {\n      if (this.mode === _VIEW && (this.value?.metadata?.name || '').includes('.')) {\n        return [this.t('validation.prometheusRule.noEdit')];\n      }\n\n      return this.fvUnreportedValidationErrors.filter((e) => !this.closedErrorMessages.includes(e));\n    }\n  },\n\n  mounted() {\n    if (this.isCreate) {\n      this.$set(this.value, 'spec', { groups: [] });\n      this.addRuleGroup();\n    }\n  },\n\n  created() {\n    this.registerBeforeHook(this.willSave, 'willSave');\n\n    if (this.mode === _CREATE) {\n      this.$set(this.value.metadata, 'namespace', 'cattle-monitoring-system');\n    }\n  },\n\n  methods: {\n    addRuleGroup() {\n      this.value.spec.groups.push({\n        name:     '',\n        interval: null,\n        rules:    [],\n      });\n    },\n    removeGroupRule(idx) {\n      removeAt(this.value.spec.groups, idx);\n    },\n    ruleGroupLabel(idx) {\n      return this.t('prometheusRule.groups.groupRowLabel', { index: idx + 1 });\n    },\n    willSave() {\n      this.value.spec.groups.forEach((group) => {\n        if (isEmpty(group.interval)) {\n          delete group.interval;\n        } else {\n          const interval = group.interval;\n\n          if (isString(interval)) {\n            this.$set(group, 'interval', interval.includes('s') ? interval : `${ interval }s`);\n          } else {\n            this.$set(group, 'interval', `${ interval }s`);\n          }\n        }\n      });\n\n      this.closedErrorMessages = [];\n\n      return true;\n    },\n\n    updateGroupInterval(group, interval) {\n      this.$set(group, 'interval', [null, undefined].includes(interval) ? undefined : `${ interval }s`);\n    },\n\n    getGroupInterval(interval) {\n      if (![null, undefined].includes(interval)) {\n        return Math.floor(toMilliseconds(interval) / 1000);\n      }\n    }\n  },\n};\n</script>\n\n<template>\n  <CruResource\n    :done-route=\"doneRoute\"\n    :errors=\"errorMessages\"\n    :mode=\"mode\"\n    :resource=\"value\"\n    :validation-passed=\"fvFormIsValid\"\n    @error=\"(_, closedError) => closedErrorMessages.push(closedError)\"\n    @finish=\"save\"\n  >\n    <div class=\"row\">\n      <div class=\"col span-12\">\n        <NameNsDescription\n          v-if=\"!isView\"\n          :value=\"value\"\n          :mode=\"mode\"\n          :rules=\"{ name: fvGetAndReportPathRules('metadata.name'), namespace: [], description: [] }\"\n          @change=\"name = value.metadata.name\"\n        />\n      </div>\n    </div>\n    <div>\n      <Tabbed\n        v-if=\"filteredGroups.length > 0\"\n        :side-tabs=\"true\"\n        :show-tabs-add-remove=\"mode !== 'view'\"\n        @addTab=\"addRuleGroup\"\n        @removeTab=\"removeGroupRule\"\n      >\n        <Tab\n          v-for=\"(group, idx) in filteredGroups\"\n          :key=\"'filtered-group-' + idx\"\n          :name=\"'group-' + idx\"\n          :label=\"ruleGroupLabel(idx)\"\n          class=\"container-group\"\n        >\n          <div class=\"row\">\n            <div class=\"col span-6\">\n              <LabeledInput\n                v-model=\"group.name\"\n                :label=\"t('prometheusRule.groups.name')\"\n                :mode=\"mode\"\n                :required=\"true\"\n              />\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col span-6\">\n              <UnitInput\n                :value=\"getGroupInterval(group.interval)\"\n                :suffix=\"t('suffix.seconds', {count: group.interval})\"\n                :placeholder=\"\n                  t('prometheusRule.groups.groupInterval.placeholder')\n                \"\n                :label=\"t('prometheusRule.groups.groupInterval.label')\"\n                :mode=\"mode\"\n                @input=\"(e) => updateGroupInterval(filteredGroups[idx], e)\"\n              />\n            </div>\n          </div>\n          <GroupRules\n            v-model=\"group.rules\"\n            class=\"mb-20\"\n            :mode=\"mode\"\n          />\n        </Tab>\n      </Tabbed>\n      <Banner\n        v-else\n        color=\"warning\"\n        :label=\"t('prometheusRule.groups.none')\"\n      />\n    </div>\n  </CruResource>\n</template>\n\n<style lang=\"scss\" scoped>\n.container-group {\n  position: relative;\n\n  .remove {\n    position: absolute;\n    top: -40px;\n    right: 5px;\n  }\n\n  .row:not(:first-child) {\n    margin-top: 20px;\n  }\n}\n</style>\n"]}]}