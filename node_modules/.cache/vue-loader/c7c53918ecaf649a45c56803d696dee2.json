{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/dialog/RollbackWorkloadDialog.vue?vue&type=style&index=0&id=a4ae1218&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/dialog/RollbackWorkloadDialog.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoucHJvbXB0LXJvbGxiYWNrIHsKICBtYXJnaW46IDA7CgogICYgOjp2LWRlZXAgLmNhcmQtYWN0aW9ucyB7CiAgICBkaXNwbGF5OiBncmlkOwogIH0KfQoKLnlhbWwtZWRpdG9yIHsKICBtYXgtaGVpZ2h0OiA3MHZoOwoKICAmIDo6di1kZWVwLnJvb3QgewogICAgbWF4LWhlaWdodDogNjV2aDsKICB9Cn0KCi5kaWZmIHsKICAmOmRpc2FibGVkIHsKICAgIGJvcmRlcjogbm9uZTsKICB9CiAgJjpmb2N1cyB7CiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsKICAgIGJveC1zaGFkb3c6IG5vbmU7CiAgfQp9Cgo6OnYtZGVlcCAuY2FyZC1ib2R5IHsKICBtYXgtaGVpZ2h0OiBjYWxjKDk1dmggLSAxMzVweCk7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKfQoK"},{"version":3,"sources":["RollbackWorkloadDialog.vue"],"names":[],"mappings":";;AAqRA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"RollbackWorkloadDialog.vue","sourceRoot":"node_modules/@rancher/shell/dialog","sourcesContent":["<script>\nimport AsyncButton from '@shell/components/AsyncButton';\nimport day from 'dayjs';\nimport { Card } from '@components/Card';\nimport { exceptionToErrorsArray } from '@shell/utils/error';\nimport LabeledSelect from '@shell/components/form/LabeledSelect';\nimport { Banner } from '@components/Banner';\nimport YamlEditor, { EDITOR_MODES } from '@shell/components/YamlEditor';\nimport { WORKLOAD_TYPES } from '@shell/config/types';\nimport { diffFrom } from '@shell/utils/time';\nimport { mapGetters } from 'vuex';\nimport { ACTIVELY_REMOVE, NEVER_ADD } from '@shell/utils/create-yaml';\nimport { DATE_FORMAT, TIME_FORMAT } from '@shell/store/prefs';\nimport { escapeHtml } from '@shell/utils/string';\n\nconst HIDE = [\n  'metadata.labels.pod-template-hash',\n  'spec.selector.matchLabels.pod-template-hash',\n  'spec.template.metadata.labels.pod-template-hash',\n  'metadata.fields'\n];\n\nconst REMOVE = [...ACTIVELY_REMOVE, ...NEVER_ADD, ...HIDE];\n\nconst REMOVE_KEYS = REMOVE.reduce((obj, item) => {\n  obj[item] = true;\n\n  return obj;\n}, {});\n\nexport default {\n  components: {\n    Card,\n    AsyncButton,\n    LabeledSelect,\n    Banner,\n    YamlEditor,\n  },\n  props: {\n    workload: {\n      type:     Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      errors:           [],\n      selectedRevision: null,\n      currentRevision:  null,\n      revisions:        [],\n      editorMode:       EDITOR_MODES.DIFF_CODE,\n      showDiff:         false,\n    };\n  },\n  computed: {\n    ...mapGetters({ t: 'i18n/t' }),\n    ...mapGetters(['currentCluster']),\n    workloadName() {\n      return this.workload.metadata.name;\n    },\n    workloadNamespace() {\n      return this.workload.metadata.namespace;\n    },\n    workloadType() {\n      return this.workload.kind.toLowerCase();\n    },\n    revisionsType() {\n      return this.workloadType === 'deployment' ? WORKLOAD_TYPES.REPLICA_SET : 'apps.controllerrevision';\n    },\n    selectedRevisionId() {\n      return this.selectedRevision.id;\n    },\n    sanitizedSelectedRevision() {\n      return this.sanitizeYaml(this.selectedRevision);\n    },\n    timeFormatStr() {\n      const dateFormat = escapeHtml( this.$store.getters['prefs/get'](DATE_FORMAT));\n      const timeFormat = escapeHtml( this.$store.getters['prefs/get'](TIME_FORMAT));\n\n      return `${ dateFormat }, ${ timeFormat }`;\n    },\n  },\n  fetch() {\n    // Fetch revisions of the current workload\n    this.$store.dispatch('cluster/findAll', { type: this.revisionsType })\n      .then(( response ) => {\n        const allRevisions = response;\n\n        const hasRelationshipWithCurrentWorkload = ( replicaSet ) => {\n          const relationshipsOfReplicaSet = replicaSet.metadata.relationships;\n\n          const revisionsOfCurrentWorkload = relationshipsOfReplicaSet.filter(( relationship ) => {\n            const isRevisionOfCurrentWorkload = relationship.fromId && relationship.fromId === `${ this.workloadNamespace }/${ this.workloadName }`;\n\n            return isRevisionOfCurrentWorkload;\n          });\n\n          return revisionsOfCurrentWorkload.length > 0;\n        };\n\n        const workloadRevisions = allRevisions.filter(( replicaSet ) => {\n          return hasRelationshipWithCurrentWorkload( replicaSet );\n        });\n\n        const revisionOptions = workloadRevisions\n          .map( (revision ) => {\n            if (this.isCurrentRevision(revision)) {\n              this.currentRevision = revision;\n            }\n\n            return this.buildRevisionOption( revision );\n          })\n          .sort((a, b) => b.revisionNumber - a.revisionNumber);\n\n        this.revisions = revisionOptions;\n      })\n      .catch(( err ) => {\n        this.errors = exceptionToErrorsArray(err);\n      });\n  },\n  methods: {\n    close() {\n      this.$emit('close');\n    },\n    async save() {\n      try {\n        await this.workload.rollBack(this.currentCluster, this.workload, this.selectedRevision);\n        this.close();\n      } catch (err) {\n        this.errors = exceptionToErrorsArray(err);\n      }\n    },\n    isCurrentRevision(revision) {\n      return revision.revisionNumber === this.workload.currentRevisionNumber;\n    },\n    buildRevisionOption( revision ) {\n      const { revisionNumber } = revision;\n      const isCurrentRevision = this.isCurrentRevision(revision);\n      const now = day();\n      const createdDate = day(revision.metadata.creationTimestamp);\n      const createdDateFormatted = createdDate.format(this.timeFormatStr);\n\n      const revisionAgeObject = diffFrom(createdDate, now, this.t);\n      const revisionAge = `${ createdDateFormatted }, ${ revisionAgeObject.label }`;\n      const units = this.t(revisionAgeObject.unitsKey, { count: revisionAgeObject.label });\n      const currentLabel = this.t('promptRollback.currentLabel');\n\n      const optionLabel = this.t('promptRollback.revisionOption', {\n        revisionNumber,\n        revisionAge,\n        units,\n        currentLabel: isCurrentRevision ? currentLabel : ''\n      });\n\n      return {\n        label:    optionLabel,\n        value:    revision,\n        disabled: isCurrentRevision,\n        revisionNumber\n      };\n    },\n    getOptionLabel(option) {\n      return option.label;\n    },\n    sizeDialog() {\n      const dialogs = document.getElementsByClassName('v--modal');\n      const width = this.showDiff ? '85%' : '600px';\n\n      if (dialogs.length === 1) {\n        dialogs[0].style.setProperty('--prompt-modal-width', width);\n      }\n    },\n    sanitizeYaml(obj, path = '') {\n      const res = {};\n\n      if (!obj) {\n        return obj;\n      }\n\n      Object.keys(obj).forEach((key) => {\n        const keyPath = !path ? key : `${ path }.${ key }`;\n\n        if (!REMOVE_KEYS[keyPath]) {\n          res[key] = obj[key];\n\n          if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\n            res[key] = this.sanitizeYaml(obj[key], keyPath);\n          }\n        }\n      });\n\n      return res;\n    }\n  }\n};\n</script>\n\n<template>\n  <Card\n    class=\"prompt-rollback\"\n    :show-highlight-border=\"false\"\n  >\n    <h4\n      slot=\"title\"\n      class=\"text-default-text\"\n    >\n      {{ t('promptRollback.modalTitle', { workloadName }, true) }}\n    </h4>\n    <div\n      slot=\"body\"\n      class=\"pl-10 pr-10 \"\n    >\n      <Banner\n        v-if=\"revisions.length === 1\"\n        color=\"info\"\n        :label=\"t('promptRollback.singleRevisionBanner')\"\n      />\n      <form>\n        <LabeledSelect\n          v-model=\"selectedRevision\"\n          class=\"provider\"\n          :label=\"t('promptRollback.dropdownTitle')\"\n          :placeholder=\"t('promptRollback.placeholder')\"\n          :options=\"revisions\"\n          :get-option-label=\"getOptionLabel\"\n        />\n      </form>\n      <Banner\n        v-for=\"(error, i) in errors\"\n        :key=\"i\"\n        class=\"\"\n        color=\"error\"\n        :label=\"error\"\n      />\n      <YamlEditor\n        v-if=\"selectedRevision && showDiff\"\n        :key=\"selectedRevisionId\"\n        v-model=\"sanitizedSelectedRevision\"\n        :initial-yaml-values=\"sanitizeYaml(currentRevision)\"\n        class=\"mt-10 \"\n        :editor-mode=\"editorMode\"\n        :as-object=\"true\"\n      />\n    </div>\n    <div\n      slot=\"actions\"\n      class=\"buttons \"\n    >\n      <div class=\"left\">\n        <button\n          :disabled=\"!selectedRevision\"\n          class=\"btn role-secondary diff\"\n          @click=\"showDiff = !showDiff; sizeDialog()\"\n        >\n          {{ showDiff ? t('resourceYaml.buttons.hideDiff') : t('resourceYaml.buttons.diff') }}\n        </button>\n      </div>\n      <div class=\"right\">\n        <button\n          class=\"btn role-secondary mr-10\"\n          @click=\"close\"\n        >\n          {{ t('generic.cancel') }}\n        </button>\n        <AsyncButton\n          :action-label=\"t('asyncButton.rollback.action')\"\n          :disabled=\"!selectedRevision\"\n          get-option-label=\"getOptionLabel\"\n          :right-align=\"true\"\n          @click=\"save\"\n        />\n      </div>\n    </div>\n  </Card>\n</template>\n<style lang='scss' scoped>\n\n.prompt-rollback {\n  margin: 0;\n\n  & ::v-deep .card-actions {\n    display: grid;\n  }\n}\n\n.yaml-editor {\n  max-height: 70vh;\n\n  & ::v-deep.root {\n    max-height: 65vh;\n  }\n}\n\n.diff {\n  &:disabled {\n    border: none;\n  }\n  &:focus {\n    background: transparent;\n    box-shadow: none;\n  }\n}\n\n::v-deep .card-body {\n  max-height: calc(95vh - 135px);\n  overflow: hidden;\n}\n\n</style>\n"]}]}