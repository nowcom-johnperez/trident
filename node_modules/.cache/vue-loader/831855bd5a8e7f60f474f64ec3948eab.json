{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/PodSecurityAdmission.vue?vue&type=script&lang=ts","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/PodSecurityAdmission.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js","mtime":1716430466133},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBWdWUgZnJvbSAndnVlJzsKaW1wb3J0IHsgX1ZJRVcsIF9DUkVBVEUgfSBmcm9tICdAc2hlbGwvY29uZmlnL3F1ZXJ5LXBhcmFtcyc7CmltcG9ydCBMYWJlbGVkU2VsZWN0IGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL2Zvcm0vTGFiZWxlZFNlbGVjdC52dWUnOwppbXBvcnQgQ2hlY2tib3ggZnJvbSAnQGNvbXBvbmVudHMvRm9ybS9DaGVja2JveC9DaGVja2JveC52dWUnOwppbXBvcnQgTGFiZWxlZElucHV0IGZyb20gJ0Bjb21wb25lbnRzL0Zvcm0vTGFiZWxlZElucHV0L0xhYmVsZWRJbnB1dC52dWUnOwppbXBvcnQgeyBQU0FEaW1lbnNpb24sIFBTQU1vZGUgfSBmcm9tICdAc2hlbGwvdHlwZXMvcG9kLXNlY3VyaXR5LWFkbWlzc2lvbic7CmltcG9ydCB7CiAgUFNBRGVmYXVsdExldmVsLAogIFBTQURlZmF1bHRWZXJzaW9uLCBQU0FEaW1lbnNpb25zLCBQU0FMZXZlbHMsIFBTQU1vZGVzCn0gZnJvbSAnQHNoZWxsL2NvbmZpZy9wb2Qtc2VjdXJpdHktYWRtaXNzaW9uJzsKaW1wb3J0IHsgcGlja0J5LCB0b0RpY3Rpb25hcnkgfSBmcm9tICdAc2hlbGwvdXRpbHMvb2JqZWN0JzsKCmludGVyZmFjZSBQU0FDb250cm9sIHsgYWN0aXZlOiBib29sZWFuLCBsZXZlbDogc3RyaW5nLCB2ZXJzaW9uOiBzdHJpbmcgfQpjb25zdCBnZXRQc2FDb250cm9sID0gKCk6IFBTQUNvbnRyb2wgPT4gKHsKICBhY3RpdmU6ICBmYWxzZSwKICBsZXZlbDogICBQU0FEZWZhdWx0TGV2ZWwsCiAgdmVyc2lvbjogJycKfSk7CgovLyBUeXBlIGFuZCBmdW5jdGlvbiBmb3IgZXhlbXB0aW9ucyBmb3JtIGJ1aWxkZXIKaW50ZXJmYWNlIFBTQUV4ZW1wdGlvbkNvbnRyb2wgeyBhY3RpdmU6IGJvb2xlYW4sIHZhbHVlOiBzdHJpbmcgfQpjb25zdCBnZXRFeGVtcHRpb25Db250cm9sID0gKCk6IFBTQUV4ZW1wdGlvbkNvbnRyb2wgPT4gKHsKICBhY3RpdmU6IGZhbHNlLAogIHZhbHVlOiAgJycKfSk7CgpleHBvcnQgZGVmYXVsdCBWdWUuZXh0ZW5kKHsKICBjb21wb25lbnRzOiB7CiAgICBDaGVja2JveCwgTGFiZWxlZFNlbGVjdCwgTGFiZWxlZElucHV0CiAgfSwKICBwcm9wczogewogICAgLyoqCiAgICAgKiBMaXN0IG9mIGxhYmVscyB1c2VkIGZvciB0aGUgcmVzb3VyY2UKICAgICAqIE5vdGU6IFBTQSBsYWJlbHMgYXJlIGFsd2F5cyBwYWlyZWQKICAgICAqLwogICAgbGFiZWxzOiB7CiAgICAgIHR5cGU6ICAgIE9iamVjdCBhcyAoKSA9PiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LAogICAgICBkZWZhdWx0OiAoKSA9PiAoe30pCiAgICB9LAoKICAgIGxhYmVsc0Fsd2F5c0FjdGl2ZTogewogICAgICB0eXBlOiAgICBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfSwKCiAgICAvKioKICAgICAqIE1hcCBlZGl0aW5nIGNhcGFiaWxpdGllcyB0byB0aGUgY29tcG9uZW50CiAgICAgKi8KICAgIG1vZGU6IHsKICAgICAgdHlwZTogICAgIFN0cmluZywKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIH0sCgogICAgLyoqCiAgICAgKiBMaXN0IG9mIGV4ZW1wdGlvbnMgdXNlZCBmb3IgdGhlIHJlc291cmNlCiAgICAgKi8KICAgIGV4ZW1wdGlvbnM6IHsKICAgICAgdHlwZTogICAgT2JqZWN0IGFzICgpID0+IFJlY29yZDxQU0FEaW1lbnNpb24sIHN0cmluZ1tdPiwKICAgICAgZGVmYXVsdDogKCkgPT4gKHt9IGFzIFJlY29yZDxQU0FEaW1lbnNpb24sIHN0cmluZ1tdPikKICAgIH0sCgogICAgLyoqCiAgICAgKiBQcmVmaXggdXNlZCBmb3Igc2V0dGluZyBsYWJlbHMKICAgICAqLwogICAgbGFiZWxzUHJlZml4OiB7CiAgICAgIHR5cGU6ICAgIFN0cmluZywKICAgICAgZGVmYXVsdDogJycKICAgIH0sCgogICAgLyoqCiAgICAgKiBJbmhlcml0ZWQgZ2xvYmFsIGlkZW50aWZpZXIgcHJlZml4IGZvciB0ZXN0cwogICAgICogRGVmaW5lIGEgdGVybSBiYXNlZCBvbiB0aGUgcGFyZW50IGNvbXBvbmVudCB0byBhdm9pZCBjb25mbGljdHMgb24gbXVsdGlwbGUgY29tcG9uZW50cwogICAgICovCiAgICBjb21wb25lbnRUZXN0aWQ6IHsKICAgICAgdHlwZTogICAgU3RyaW5nLAogICAgICBkZWZhdWx0OiAncG9kLXNlY3VyaXR5LWFkbWlzc2lvbicKICAgIH0KICB9LAoKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgLy8gR2VuZXJhdGUgUFNBIGZvcm0gY29udHJvbHMKICAgICAgcHNhQ29udHJvbHM6ICAgICAgICAgICB0b0RpY3Rpb25hcnkoUFNBTW9kZXMsIGdldFBzYUNvbnRyb2wpIGFzIFJlY29yZDxQU0FNb2RlLCBQU0FDb250cm9sPiwKICAgICAgcHNhRXhlbXB0aW9uc0NvbnRyb2xzOiB0b0RpY3Rpb25hcnkoUFNBRGltZW5zaW9ucywgZ2V0RXhlbXB0aW9uQ29udHJvbCkgYXMgUmVjb3JkPFBTQURpbWVuc2lvbiwgUFNBRXhlbXB0aW9uQ29udHJvbD4sCiAgICAgIG9wdGlvbnM6ICAgICAgICAgICAgICAgUFNBTGV2ZWxzLm1hcCgobGV2ZWwpID0+ICh7CiAgICAgICAgdmFsdWU6IGxldmVsLAogICAgICAgIGxhYmVsOiB0aGlzLnQoYHBvZFNlY3VyaXR5QWRtaXNzaW9uLmxhYmVscy4keyBsZXZlbCB9YCkKICAgICAgfSkpLAogICAgfTsKICB9LAoKICB3YXRjaDoge30sCgogIGNvbXB1dGVkOiB7CiAgICBpc1ZpZXcoKTogYm9vbGVhbiB7CiAgICAgIHJldHVybiB0aGlzLm1vZGUgPT09IF9WSUVXOwogICAgfSwKCiAgICAvKioKICAgICAqIEVuYWJsZSBleGVtcHRpb24gZm9ybSBpZiBhbnkKICAgICAqLwogICAgaGFzRXhlbXB0aW9ucygpOiBib29sZWFuIHsKICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuZXhlbXB0aW9ucykubGVuZ3RoID4gMDsKICAgIH0sCiAgfSwKCiAgY3JlYXRlZCgpIHsKICAgIC8vIEFzc2lnbiB2YWx1ZXMgdG8gdGhlIGZvcm0sIG92ZXJyaWRpbmcgZXhpc3RpbmcgdmFsdWVzCiAgICB0aGlzLnBzYUNvbnRyb2xzID0gewogICAgICAuLi50aGlzLnBzYUNvbnRyb2xzLAogICAgICAuLi50aGlzLmdldFBzYUNvbnRyb2xzKCkKICAgIH07CgogICAgdGhpcy5wc2FFeGVtcHRpb25zQ29udHJvbHMgPSB0aGlzLmdldFBzYUV4ZW1wdGlvbnMoKTsKCiAgICAvLyBFbWl0IGluaXRpYWwgdmFsdWUgb24gY3JlYXRpb24gaWYgbGFiZWxzIGFsd2F5cyBhY3RpdmUsIGFzIGRlZmF1bHQgcHJlZGVmaW5lZCB2YWx1ZXMgYXJlIHJlcXVpcmVkCiAgICBpZiAodGhpcy5tb2RlID09PSBfQ1JFQVRFICYmIHRoaXMubGFiZWxzQWx3YXlzQWN0aXZlKSB7CiAgICAgIHRoaXMudXBkYXRlTGFiZWxzKCk7CiAgICAgIHRoaXMudXBkYXRlRXhlbXB0aW9ucygpOwogICAgfQogIH0sCgogIG1ldGhvZHM6IHsKICAgIC8qKgogICAgICogRmlsdGVyIG91dCBleGlzdGluZyBQU0EgbGFiZWxzIGFuZCBlbWl0IGV4aXN0aW5nIGxhYmVscyB3aXRoIG5ldyBQU0Egb25lcwogICAgICovCiAgICB1cGRhdGVMYWJlbHMoKTogdm9pZCB7CiAgICAgIGNvbnN0IG5vblBTQUxhYmVscyA9IHBpY2tCeSh0aGlzLmxhYmVscywgKF8sIGtleSkgPT4gIWtleS5pbmNsdWRlcyh0aGlzLmxhYmVsc1ByZWZpeCkpOwogICAgICBjb25zdCBsYWJlbHMgPSBQU0FNb2Rlcy5yZWR1Y2UoKGFjYywgbW9kZSkgPT4gewogICAgICAgIHJldHVybiB0aGlzLnBzYUNvbnRyb2xzW21vZGVdLmFjdGl2ZSB8fCB0aGlzLmxhYmVsc0Fsd2F5c0FjdGl2ZSA/IHsKICAgICAgICAgIC4uLmFjYywKICAgICAgICAgIC8vIFNldCBkZWZhdWx0IGxldmVsIGlmIG5vbmUKICAgICAgICAgIFtgJHsgdGhpcy5sYWJlbHNQcmVmaXggfSR7IG1vZGUgfWBdOiAgICAgICAgIHRoaXMucHNhQ29udHJvbHNbbW9kZV0ubGV2ZWwgfHwgUFNBRGVmYXVsdExldmVsLAogICAgICAgICAgLy8gU2V0IGRlZmF1bHQgdmVyc2lvbiBpZiBub25lCiAgICAgICAgICBbYCR7IHRoaXMubGFiZWxzUHJlZml4IH0keyBtb2RlIH0tdmVyc2lvbmBdOiB0aGlzLnBzYUNvbnRyb2xzW21vZGVdLnZlcnNpb24gfHwgUFNBRGVmYXVsdFZlcnNpb24KICAgICAgICB9IDogYWNjOwogICAgICB9LCBub25QU0FMYWJlbHMpOwoKICAgICAgdGhpcy4kZW1pdCgndXBkYXRlTGFiZWxzJywgbGFiZWxzKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBFbWl0IGFjdGl2ZSBleGVtcHRpb25zIGluIHJlcXVpcmVkIGZvcm1hdAogICAgICovCiAgICB1cGRhdGVFeGVtcHRpb25zKCk6IHZvaWQgewogICAgICBjb25zdCBleGVtcHRpb25zID0gUFNBRGltZW5zaW9ucy5yZWR1Y2UoKGFjYywgZGltZW5zaW9uKSA9PiB7CiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnBzYUV4ZW1wdGlvbnNDb250cm9sc1tkaW1lbnNpb25dLnZhbHVlLnNwbGl0KCcsJykubWFwKCh2YWx1ZSkgPT4gdmFsdWUudHJpbSgpKTsKICAgICAgICBjb25zdCBhY3RpdmUgPSB0aGlzLnBzYUV4ZW1wdGlvbnNDb250cm9sc1tkaW1lbnNpb25dLmFjdGl2ZTsKCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIC4uLmFjYywKICAgICAgICAgIFtkaW1lbnNpb25dOiBhY3RpdmUgJiYgdmFsdWUgPyB2YWx1ZSA6IFtdCiAgICAgICAgfTsKICAgICAgfSwge30pOwoKICAgICAgdGhpcy4kZW1pdCgndXBkYXRlRXhlbXB0aW9ucycsIGV4ZW1wdGlvbnMpOwogICAgfSwKCiAgICAvKioKICAgICAqIEdlbmVyYXRlIGZvcm0gY29udHJvbHMgYmFzZWQgb24gUFNBIGxhYmVscyBpbiB0aGUgcHJvdmlkZWQgZGljdGlvbmFyeQogICAgICovCiAgICBnZXRQc2FDb250cm9scygpOiBSZWNvcmQ8UFNBTW9kZSwgUFNBQ29udHJvbD4gewogICAgICByZXR1cm4gUFNBTW9kZXMucmVkdWNlKChhY2MsIG1vZGUpID0+IHsKICAgICAgICBjb25zdCBsZXZlbCA9IHRoaXMubGFiZWxzW2AkeyB0aGlzLmxhYmVsc1ByZWZpeCB9JHsgbW9kZSB9YF07CiAgICAgICAgLy8gUmV0cmlldmUgdmVyc2lvbiwgaGlkaW5nIHRoZSB2YWx1ZSAnbGF0ZXN0JyBmcm9tIHRoZSB1c2VyCiAgICAgICAgY29uc3QgdmVyc2lvbiA9ICh0aGlzLmxhYmVsc1tgJHsgdGhpcy5sYWJlbHNQcmVmaXggfSR7IG1vZGUgfS12ZXJzaW9uYF0gfHwgJycpLnJlcGxhY2UoUFNBRGVmYXVsdFZlcnNpb24sICcnKTsKCiAgICAgICAgcmV0dXJuIGxldmVsID8gewogICAgICAgICAgLi4uYWNjLAogICAgICAgICAgW21vZGVdOiB7CiAgICAgICAgICAgIGFjdGl2ZTogdHJ1ZSwKICAgICAgICAgICAgbGV2ZWwsCiAgICAgICAgICAgIHZlcnNpb24KICAgICAgICAgIH0KICAgICAgICB9IDogYWNjOwogICAgICB9LCB7fSBhcyBSZWNvcmQ8UFNBTW9kZSwgUFNBQ29udHJvbD4pOwogICAgfSwKCiAgICAvKioKICAgICAqIEdlbmVyYXRlIGZvcm0gZXhlbXB0aW9ucyBiYXNlZCBvbiBQU0EgZXhlbXB0aW9ucyBwcm92aWRlZCBkaWN0aW9uYXJ5CiAgICAgKi8KICAgIGdldFBzYUV4ZW1wdGlvbnMoKTogUmVjb3JkPFBTQURpbWVuc2lvbiwgUFNBRXhlbXB0aW9uQ29udHJvbD4gewogICAgICByZXR1cm4gUFNBRGltZW5zaW9ucy5yZWR1Y2UoKGFjYywgZGltZW5zaW9uKSA9PiB7CiAgICAgICAgY29uc3QgdmFsdWVzID0gKHRoaXMuZXhlbXB0aW9uc1tkaW1lbnNpb25dIHx8IFtdKS5tYXAoKHZhbHVlKSA9PiB2YWx1ZS50cmltKCkpLmpvaW4oJywnKTsKCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIC4uLmFjYywKICAgICAgICAgIFtkaW1lbnNpb25dOiB7CiAgICAgICAgICAgIGFjdGl2ZTogISF2YWx1ZXMubGVuZ3RoLAogICAgICAgICAgICB2YWx1ZTogIHZhbHVlcwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgIH0sIHt9KSBhcyBSZWNvcmQ8UFNBRGltZW5zaW9uLCBQU0FFeGVtcHRpb25Db250cm9sPjsKICAgIH0sCgogICAgLyoqCiAgICAgKiBBZGQgY2hlY2tzIG9uIGlucHV0IGZvciBQU0EgY29udHJvbHMgdG8gYmUgYWN0aXZlIG9yIG5vdCwgYWxsb3dpbmcgd2hpdGUgY2FzZXMKICAgICAqLwogICAgaXNQc2FDb250cm9sRGlzYWJsZWQoYWN0aXZlOiBib29sZWFuKTogYm9vbGVhbiB7CiAgICAgIHJldHVybiAhdGhpcy5sYWJlbHNBbHdheXNBY3RpdmUgJiYgKCFhY3RpdmUgfHwgdGhpcy5pc1ZpZXcpOwogICAgfQogIH0KfSk7Cg=="},{"version":3,"sources":["PodSecurityAdmission.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PodSecurityAdmission.vue","sourceRoot":"node_modules/@rancher/shell/components","sourcesContent":["<script lang=\"ts\">\nimport Vue from 'vue';\nimport { _VIEW, _CREATE } from '@shell/config/query-params';\nimport LabeledSelect from '@shell/components/form/LabeledSelect.vue';\nimport Checkbox from '@components/Form/Checkbox/Checkbox.vue';\nimport LabeledInput from '@components/Form/LabeledInput/LabeledInput.vue';\nimport { PSADimension, PSAMode } from '@shell/types/pod-security-admission';\nimport {\n  PSADefaultLevel,\n  PSADefaultVersion, PSADimensions, PSALevels, PSAModes\n} from '@shell/config/pod-security-admission';\nimport { pickBy, toDictionary } from '@shell/utils/object';\n\ninterface PSAControl { active: boolean, level: string, version: string }\nconst getPsaControl = (): PSAControl => ({\n  active:  false,\n  level:   PSADefaultLevel,\n  version: ''\n});\n\n// Type and function for exemptions form builder\ninterface PSAExemptionControl { active: boolean, value: string }\nconst getExemptionControl = (): PSAExemptionControl => ({\n  active: false,\n  value:  ''\n});\n\nexport default Vue.extend({\n  components: {\n    Checkbox, LabeledSelect, LabeledInput\n  },\n  props: {\n    /**\n     * List of labels used for the resource\n     * Note: PSA labels are always paired\n     */\n    labels: {\n      type:    Object as () => Record<string, string>,\n      default: () => ({})\n    },\n\n    labelsAlwaysActive: {\n      type:    Boolean,\n      default: false\n    },\n\n    /**\n     * Map editing capabilities to the component\n     */\n    mode: {\n      type:     String,\n      required: true\n    },\n\n    /**\n     * List of exemptions used for the resource\n     */\n    exemptions: {\n      type:    Object as () => Record<PSADimension, string[]>,\n      default: () => ({} as Record<PSADimension, string[]>)\n    },\n\n    /**\n     * Prefix used for setting labels\n     */\n    labelsPrefix: {\n      type:    String,\n      default: ''\n    },\n\n    /**\n     * Inherited global identifier prefix for tests\n     * Define a term based on the parent component to avoid conflicts on multiple components\n     */\n    componentTestid: {\n      type:    String,\n      default: 'pod-security-admission'\n    }\n  },\n\n  data() {\n    return {\n      // Generate PSA form controls\n      psaControls:           toDictionary(PSAModes, getPsaControl) as Record<PSAMode, PSAControl>,\n      psaExemptionsControls: toDictionary(PSADimensions, getExemptionControl) as Record<PSADimension, PSAExemptionControl>,\n      options:               PSALevels.map((level) => ({\n        value: level,\n        label: this.t(`podSecurityAdmission.labels.${ level }`)\n      })),\n    };\n  },\n\n  watch: {},\n\n  computed: {\n    isView(): boolean {\n      return this.mode === _VIEW;\n    },\n\n    /**\n     * Enable exemption form if any\n     */\n    hasExemptions(): boolean {\n      return Object.keys(this.exemptions).length > 0;\n    },\n  },\n\n  created() {\n    // Assign values to the form, overriding existing values\n    this.psaControls = {\n      ...this.psaControls,\n      ...this.getPsaControls()\n    };\n\n    this.psaExemptionsControls = this.getPsaExemptions();\n\n    // Emit initial value on creation if labels always active, as default predefined values are required\n    if (this.mode === _CREATE && this.labelsAlwaysActive) {\n      this.updateLabels();\n      this.updateExemptions();\n    }\n  },\n\n  methods: {\n    /**\n     * Filter out existing PSA labels and emit existing labels with new PSA ones\n     */\n    updateLabels(): void {\n      const nonPSALabels = pickBy(this.labels, (_, key) => !key.includes(this.labelsPrefix));\n      const labels = PSAModes.reduce((acc, mode) => {\n        return this.psaControls[mode].active || this.labelsAlwaysActive ? {\n          ...acc,\n          // Set default level if none\n          [`${ this.labelsPrefix }${ mode }`]:         this.psaControls[mode].level || PSADefaultLevel,\n          // Set default version if none\n          [`${ this.labelsPrefix }${ mode }-version`]: this.psaControls[mode].version || PSADefaultVersion\n        } : acc;\n      }, nonPSALabels);\n\n      this.$emit('updateLabels', labels);\n    },\n\n    /**\n     * Emit active exemptions in required format\n     */\n    updateExemptions(): void {\n      const exemptions = PSADimensions.reduce((acc, dimension) => {\n        const value = this.psaExemptionsControls[dimension].value.split(',').map((value) => value.trim());\n        const active = this.psaExemptionsControls[dimension].active;\n\n        return {\n          ...acc,\n          [dimension]: active && value ? value : []\n        };\n      }, {});\n\n      this.$emit('updateExemptions', exemptions);\n    },\n\n    /**\n     * Generate form controls based on PSA labels in the provided dictionary\n     */\n    getPsaControls(): Record<PSAMode, PSAControl> {\n      return PSAModes.reduce((acc, mode) => {\n        const level = this.labels[`${ this.labelsPrefix }${ mode }`];\n        // Retrieve version, hiding the value 'latest' from the user\n        const version = (this.labels[`${ this.labelsPrefix }${ mode }-version`] || '').replace(PSADefaultVersion, '');\n\n        return level ? {\n          ...acc,\n          [mode]: {\n            active: true,\n            level,\n            version\n          }\n        } : acc;\n      }, {} as Record<PSAMode, PSAControl>);\n    },\n\n    /**\n     * Generate form exemptions based on PSA exemptions provided dictionary\n     */\n    getPsaExemptions(): Record<PSADimension, PSAExemptionControl> {\n      return PSADimensions.reduce((acc, dimension) => {\n        const values = (this.exemptions[dimension] || []).map((value) => value.trim()).join(',');\n\n        return {\n          ...acc,\n          [dimension]: {\n            active: !!values.length,\n            value:  values\n          }\n        };\n      }, {}) as Record<PSADimension, PSAExemptionControl>;\n    },\n\n    /**\n     * Add checks on input for PSA controls to be active or not, allowing white cases\n     */\n    isPsaControlDisabled(active: boolean): boolean {\n      return !this.labelsAlwaysActive && (!active || this.isView);\n    }\n  }\n});\n</script>\n\n<template>\n  <div class=\"psa\">\n    <!-- PSA -->\n    <p class=\"mb-30\">\n      <t k=\"podSecurityAdmission.description\" />\n    </p>\n\n    <div\n      v-for=\"(psaControl, level, i) in psaControls\"\n      :key=\"'psaControl-' + i\"\n      class=\"row row--y-center mb-20\"\n    >\n      <span class=\"col span-2\">\n        <Checkbox\n          v-if=\"!labelsAlwaysActive\"\n          v-model=\"psaControl.active\"\n          :data-testid=\"componentTestid + '--psaControl-' + i + '-active'\"\n          :label=\"level\"\n          :label-key=\"`podSecurityAdmission.labels.${ level }`\"\n          :disabled=\"isView\"\n          @input=\"updateLabels()\"\n        />\n        <p v-else>\n          <t :k=\"`podSecurityAdmission.labels.${level}`\" />\n        </p>\n      </span>\n\n      <span\n        class=\"\n          col\n          span-4\"\n      >\n        <LabeledSelect\n          v-model=\"psaControl.level\"\n          :data-testid=\"componentTestid + '--psaControl-' + i + '-level'\"\n          :disabled=\"isPsaControlDisabled(psaControl.active)\"\n          :options=\"options\"\n          :mode=\"mode\"\n          @input=\"updateLabels()\"\n        />\n      </span>\n\n      <span class=\"col span-4\">\n        <LabeledInput\n          v-model=\"psaControl.version\"\n          :data-testid=\"componentTestid + '--psaControl-' + i + '-version'\"\n          :disabled=\"isPsaControlDisabled(psaControl.active)\"\n          :options=\"options\"\n          :placeholder=\"t('podSecurityAdmission.version.placeholder', { psaControl: mode })\"\n          :mode=\"mode\"\n          @input=\"updateLabels()\"\n        />\n      </span>\n    </div>\n\n    <!-- Exemptions -->\n    <template v-if=\"hasExemptions\">\n      <slot name=\"title\">\n        <h3>\n          <t k=\"podSecurityAdmission.exemptions.title\" />\n        </h3>\n      </slot>\n      <p class=\"mb-30\">\n        <t k=\"podSecurityAdmission.exemptions.description\" />\n      </p>\n\n      <div\n        v-for=\"(psaExemptionsControl, dimension, i) in psaExemptionsControls\"\n        :key=\"'psaExemptionsControl-' + i\"\n        class=\"row row--y-center mb-20\"\n      >\n        <span class=\"col span-2\">\n          <Checkbox\n            v-model=\"psaExemptionsControl.active\"\n            :data-testid=\"componentTestid + '--psaExemptionsControl-' + i + '-active'\"\n            :label=\"dimension\"\n            :label-key=\"`podSecurityAdmission.labels.${ dimension }`\"\n            :disabled=\"isView\"\n            @input=\"updateExemptions()\"\n          />\n        </span>\n        <span class=\"col span-8\">\n          <LabeledInput\n            v-model=\"psaExemptionsControl.value\"\n            :data-testid=\"componentTestid + '--psaExemptionsControl-' + i + '-value'\"\n            :disabled=\"(isView || !psaExemptionsControl.active)\"\n            :options=\"options\"\n            :placeholder=\"t('podSecurityAdmission.exemptions.placeholder', { psaExemptionsControl: dimension })\"\n            :mode=\"mode\"\n            @input=\"updateExemptions()\"\n          />\n        </span>\n      </div>\n    </template>\n  </div>\n</template>\n"]}]}