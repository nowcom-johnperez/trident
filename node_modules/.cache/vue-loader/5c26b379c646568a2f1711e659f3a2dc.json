{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/workload/storage/Mount.vue?vue&type=style&index=0&id=9cb07908&lang=scss","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/workload/storage/Mount.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5tb3VudC1oZWFkZXJzLCAubW91bnQtcm93c3sKICBkaXNwbGF5OiBncmlkOwogIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNDIlIDQyJSA1JSBhdXRvOwogIGdyaWQtZ2FwOiAkY29sdW1uLWd1dHRlcjsKICBtYXJnaW4tYm90dG9tOiAxMHB4OwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CgogIC5yZW1vdmUgQlVUVE9OIHsKICAgIHBhZGRpbmc6IDBweDsKICB9Cn0KCi5tb3VudC1oZWFkZXJzIHsKICBjb2xvcjogdmFyKC0taW5wdXQtbGFiZWwpOwp9Cg=="},{"version":3,"sources":["Mount.vue"],"names":[],"mappings":";AA0IA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"Mount.vue","sourceRoot":"node_modules/@rancher/shell/edit/workload/storage","sourcesContent":["<script>\nimport { LabeledInput } from '@components/Form/LabeledInput';\nimport { Checkbox } from '@components/Form/Checkbox';\nimport { mapGetters } from 'vuex';\nimport { removeObject } from '@shell/utils/array';\nexport default {\n  name:       'Mount',\n  components: { LabeledInput, Checkbox },\n  props:      {\n    mode: {\n      type:    String,\n      default: 'create'\n    },\n\n    // volume name\n    name: {\n      type:    String,\n      default: ''\n    },\n\n    container: {\n      type:     Object,\n      required: true\n    }\n  },\n\n  data() {\n    const volumeMounts = (this.container.volumeMounts || []).filter((mount) => mount.name === this.name);\n\n    return { volumeMounts };\n  },\n\n  computed: { ...mapGetters({ t: 'i18n/t' }) },\n\n  watch: {\n    volumeMounts(neu) {\n      this.container.volumeMounts = (this.container.volumeMounts || []).filter((mount) => mount.name && (mount.name !== this.name));\n      this.container.volumeMounts.push(...neu);\n    },\n\n    name(neu) {\n      this.updateMountNames(neu);\n    }\n  },\n\n  created() {\n    if (!this.volumeMounts.length) {\n      this.volumeMounts.push({ name: this.name });\n    }\n  },\n\n  methods: {\n    add() {\n      this.volumeMounts.push({ name: this.name });\n    },\n\n    remove(volumeMount) {\n      removeObject(this.volumeMounts, volumeMount);\n    },\n\n    updateMountNames(name) {\n      this.volumeMounts.forEach((mount) => {\n        mount.name = name;\n      });\n    }\n  }\n};\n</script>\n\n<template>\n  <div>\n    <div\n      v-if=\"volumeMounts.length\"\n      class=\"mount-headers\"\n    >\n      <span>\n        {{ t('workload.storage.mountPoint') }}\n        <span class=\"text-error\">*</span>\n      </span>\n      <span>\n        {{ t('workload.storage.subPath') }}\n      </span>\n      <span class=\"read-only\">\n        {{ t('workload.storage.readOnly') }}\n      </span>\n      <span />\n    </div>\n    <div\n      v-for=\"(volumeMount, i) in volumeMounts\"\n      :key=\"i\"\n      class=\"mount-rows\"\n    >\n      <div>\n        <LabeledInput\n          :id=\"`mount-path-${i}`\"\n          v-model=\"volumeMount.mountPath\"\n          :mode=\"mode\"\n        />\n      </div>\n      <div>\n        <LabeledInput\n          v-model=\"volumeMount.subPath\"\n          :mode=\"mode\"\n        />\n      </div>\n      <div class=\"read-only\">\n        <Checkbox\n          v-model=\"volumeMount.readOnly\"\n          :mode=\"mode\"\n        />\n      </div>\n      <div class=\"remove\">\n        <button\n          v-if=\"mode!=='view'\"\n          id=\"remove-mount\"\n          type=\"button\"\n          class=\"btn btn-sm role-link\"\n          @click=\"remove(volumeMount)\"\n        >\n          {{ t('generic.remove') }}\n        </button>\n      </div>\n    </div>\n    <div class=\"row\">\n      <button\n        v-if=\"mode!=='view'\"\n        id=\"add-mount\"\n        type=\"button\"\n        class=\"btn role-tertiary\"\n        @click=\"add()\"\n      >\n        {{ t('workload.storage.addMount') }}\n      </button>\n    </div>\n  </div>\n</template>\n\n<style lang='scss'>\n.mount-headers, .mount-rows{\n  display: grid;\n  grid-template-columns: 42% 42% 5% auto;\n  grid-gap: $column-gutter;\n  margin-bottom: 10px;\n  align-items: center;\n\n  .remove BUTTON {\n    padding: 0px;\n  }\n}\n\n.mount-headers {\n  color: var(--input-label);\n}\n</style>\n"]}]}