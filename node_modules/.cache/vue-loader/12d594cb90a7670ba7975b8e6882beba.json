{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/DetailTop.vue?vue&type=style&index=0&id=0388315e&lang=scss","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/DetailTop.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5kZXRhaWwtdG9wIHsKICAkc3BhY2luZzogNHB4OwoKICAmOm5vdCguZW1wdHkpIHsKICAgIC8vIEZsaXAgb2YgLm1hc3RoZWFkIHBhZGRpbmcvbWFyZ2luCiAgICBwYWRkaW5nLXRvcDogMTBweDsKICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCB2YXIoLS1ib3JkZXIpOwogICAgbWFyZ2luLXRvcDogMTBweDsKICB9CgogIC5uYW1lc3BhY2VMaW5rTGlzdDpub3QoOmZpcnN0LWNoaWxkKTpiZWZvcmUgewogICAgY29udGVudDogIiwgIjsKICB9CgogIC50YWdzIHsKICAgIGRpc3BsYXk6IGlubGluZS1mbGV4OwogICAgZmxleC1kaXJlY3Rpb246IHJvdzsKICAgIGZsZXgtd3JhcDogd3JhcDsKICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgIHRvcDogJHNwYWNpbmcgKiBtYXRoLmRpdigtMSwgMik7CgogICAgLmxhYmVsIHsKICAgICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgICB0b3A6ICRzcGFjaW5nOwogICAgfQoKICAgIC50YWcgewogICAgICBtYXJnaW46IG1hdGguZGl2KCRzcGFjaW5nLCAyKSAkc3BhY2luZyAwIG1hdGguZGl2KCRzcGFjaW5nLCAyKTsKICAgICAgZm9udC1zaXplOiAxMnB4OwogICAgfQogIH0KCiAgLmFubm90YXRpb24gewogICAgbWFyZ2luLXRvcDogMTBweDsKICB9CgogIC5sYWJlbCB7CiAgICBjb2xvcjogdmFyKC0taW5wdXQtbGFiZWwpOwogICAgbWFyZ2luOiAwIDRweCAwIDA7CiAgfQoKICAmX19sYWJlbC1idXR0b24gewogICAgcGFkZGluZzogNHB4OwogIH0KCiAgLmRldGFpbHMgewogICAgZGlzcGxheTogZmxleDsKICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7CiAgICBmbGV4LXdyYXA6IHdyYXA7CgogICAgLmRldGFpbCB7CiAgICAgIG1hcmdpbi1yaWdodDogMjBweDsKICAgICAgbWFyZ2luLWJvdHRvbTogM3B4OwogICAgfQogICAgJjpub3QoOmZpcnN0LW9mLXR5cGUpIHsKICAgICAgbWFyZ2luLXRvcDogM3B4OwogICAgfQogIH0KCiAgJiA+IGRpdiB7CiAgICAmOm5vdCg6bGFzdC1vZi10eXBlKSB7CiAgICAgIG1hcmdpbi1ib3R0b206ICRzcGFjaW5nOwogICAgfQogIH0KCiAgLmljb24gewogICAgdmVydGljYWwtYWxpZ246IHRvcDsKICB9Cn0K"},{"version":3,"sources":["DetailTop.vue"],"names":[],"mappings":";AAuXA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"DetailTop.vue","sourceRoot":"node_modules/@rancher/shell/components","sourcesContent":["<script>\nimport Tag from '@shell/components/Tag';\nimport isEmpty from 'lodash/isEmpty';\nimport DetailText from '@shell/components/DetailText';\nimport { _VIEW } from '@shell/config/query-params';\nimport { ExtensionPoint, PanelLocation } from '@shell/core/types';\nimport ExtensionPanel from '@shell/components/ExtensionPanel';\n\nexport default {\n  components: {\n    DetailText, Tag, ExtensionPanel\n  },\n\n  props: {\n    value: {\n      type:    Object,\n      default: () => {\n        return {};\n      }\n    },\n\n    moreDetails: {\n      type:    Array,\n      default: () => {\n        return [];\n      }\n    },\n\n    /**\n     * Optionally replace key/value and display tooltips for the tab\n     * Dictionary key based\n     */\n    tooltips: {\n      type:    Object,\n      default: () => {\n        return {};\n      }\n    },\n\n    /**\n     * Optionally display icons next to the tab\n     * Dictionary key based\n     */\n    icons: {\n      type:    Object,\n      default: () => {\n        return {};\n      }\n    }\n  },\n\n  data() {\n    return {\n      extensionType:      ExtensionPoint.PANEL,\n      extensionLocation:  PanelLocation.DETAIL_TOP,\n      annotationsVisible: false,\n      showAllLabels:      false,\n      view:               _VIEW\n    };\n  },\n\n  computed: {\n    namespaces() {\n      return (this.value?.namespaces || []).map((namespace) => {\n        return {\n          name:           namespace?.metadata?.name,\n          detailLocation: namespace.detailLocation\n        };\n      });\n    },\n    details() {\n      const items = [\n        ...(this.moreDetails || []),\n        ...(this.value?.details || []),\n      ].filter((x) => x.separator || (!!`${ x.content }` && x.content !== undefined && x.content !== null));\n\n      const groups = [];\n      let currentGroup = [];\n\n      items.forEach((i) => {\n        if (i.separator) {\n          groups.push(currentGroup);\n          currentGroup = [];\n        } else {\n          currentGroup.push(i);\n        }\n      });\n\n      if (currentGroup.length) {\n        groups.push(currentGroup);\n      }\n\n      return groups;\n    },\n\n    labels() {\n      if (!this.showFilteredSystemLabels) {\n        return this.value?.labels || {};\n      }\n\n      return this.value?.filteredSystemLabels;\n    },\n\n    internalTooltips() {\n      return this.value?.detailTopTooltips || this.tooltips;\n    },\n\n    internalIcons() {\n      return this.value?.detailTopIcons || this.icons;\n    },\n\n    annotations() {\n      return this.value?.annotations || {};\n    },\n\n    description() {\n      return this.value?.description;\n    },\n\n    hasDetails() {\n      return !isEmpty(this.details);\n    },\n\n    hasLabels() {\n      return !isEmpty(this.labels);\n    },\n\n    hasAnnotations() {\n      return !isEmpty(this.annotations);\n    },\n\n    hasDescription() {\n      return !isEmpty(this.description);\n    },\n\n    hasNamespaces() {\n      return !isEmpty(this.namespaces);\n    },\n\n    annotationCount() {\n      return Object.keys(this.annotations || {}).length;\n    },\n\n    isEmpty() {\n      const hasAnything = this.hasDetails || this.hasLabels || this.hasAnnotations || this.hasDescription || this.hasNamespaces;\n\n      return !hasAnything;\n    },\n\n    showFilteredSystemLabels() {\n      // It would be nicer to use hasSystemLabels here, but not all places have implemented it\n      // Instead check that there's a discrepancy between all labels and all labels without system ones\n      if (this.value?.labels && this.value?.filteredSystemLabels) {\n        const labelCount = Object.keys(this.value.labels).length;\n        const filteredSystemLabelsCount = Object.keys(this.value.filteredSystemLabels).length;\n\n        return labelCount !== filteredSystemLabelsCount;\n      }\n\n      return false;\n    },\n  },\n  methods: {\n    toggleLabels() {\n      this.showAllLabels = !this.showAllLabels;\n    },\n\n    toggleAnnotations(ev) {\n      this.annotationsVisible = !this.annotationsVisible;\n    }\n  }\n};\n</script>\n\n<template>\n  <div\n    class=\"detail-top\"\n    :class=\"{empty: isEmpty}\"\n  >\n    <div\n      v-if=\"hasNamespaces\"\n      class=\"labels\"\n    >\n      <span class=\"label\">\n        {{ t('resourceDetail.detailTop.namespaces') }}:\n      </span>\n      <span>\n        <nuxt-link\n          v-for=\"namespace in namespaces\"\n          :key=\"namespace.name\"\n          :to=\"namespace.detailLocation\"\n          class=\"namespaceLinkList\"\n        >\n          {{ namespace.name }}\n        </nuxt-link>\n      </span>\n    </div>\n\n    <div\n      v-if=\"description\"\n      class=\"description\"\n    >\n      <span class=\"label\">\n        {{ t('resourceDetail.detailTop.description') }}:\n      </span>\n      <span class=\"content\">{{ description }}</span>\n    </div>\n\n    <div v-if=\"hasDetails\">\n      <div\n        v-for=\"group, index in details\"\n        :key=\"index\"\n        class=\"details\"\n      >\n        <div\n          v-for=\"detail in group\"\n          :key=\"detail.label || detail.slotName\"\n          class=\"detail\"\n        >\n          <span class=\"label\">\n            {{ detail.label }}:\n          </span>\n          <component\n            :is=\"detail.formatter\"\n            v-if=\"detail.formatter\"\n            :value=\"detail.content\"\n            v-bind=\"detail.formatterOpts\"\n          />\n          <span v-else>{{ detail.content }}</span>\n        </div>\n      </div>\n    </div>\n\n    <div\n      v-if=\"hasLabels\"\n      class=\"labels\"\n    >\n      <div class=\"tags\">\n        <span class=\"label\">\n          {{ t('resourceDetail.detailTop.labels') }}:\n        </span>\n        <Tag\n          v-for=\"(prop, key) in labels\"\n          :key=\"key + prop\"\n        >\n          <i\n            v-if=\"internalIcons[key]\"\n            class=\"icon\"\n            :class=\"internalIcons[key]\"\n          />\n          <span\n            v-if=\"internalTooltips[key]\"\n            v-clean-tooltip=\"prop ? `${key} : ${prop}` : key\"\n          >\n            <span>{{ internalTooltips[key] ? internalTooltips[key] : key }}</span>\n            <span v-if=\"showAllLabels\">: {{ key }}</span>\n          </span>\n          <span v-else>{{ prop ? `${key} : ${prop}` : key }}</span>\n        </Tag>\n        <a\n          v-if=\"showFilteredSystemLabels\"\n          href=\"#\"\n          class=\"detail-top__label-button\"\n          @click.prevent=\"toggleLabels\"\n        >\n          {{ t(`resourceDetail.detailTop.${showAllLabels? 'hideLabels' : 'showLabels'}`) }}\n        </a>\n      </div>\n    </div>\n\n    <div\n      v-if=\"hasAnnotations\"\n      class=\"annotations\"\n    >\n      <span class=\"label\">\n        {{ t('resourceDetail.detailTop.annotations') }}:\n      </span>\n      <a\n        href=\"#\"\n        @click.prevent=\"toggleAnnotations\"\n      >\n        {{ t(`resourceDetail.detailTop.${annotationsVisible? 'hideAnnotations' : 'showAnnotations'}`, {annotations: annotationCount}) }}\n      </a>\n      <div v-if=\"annotationsVisible\">\n        <DetailText\n          v-for=\"(val, key) in annotations\"\n          :key=\"key\"\n          class=\"annotation\"\n          :value=\"val\"\n          :label=\"key\"\n        />\n      </div>\n    </div>\n\n    <!-- Extensions area -->\n    <ExtensionPanel\n      :resource=\"value\"\n      :type=\"extensionType\"\n      :location=\"extensionLocation\"\n    />\n  </div>\n</template>\n\n<style lang=\"scss\">\n  .detail-top {\n    $spacing: 4px;\n\n    &:not(.empty) {\n      // Flip of .masthead padding/margin\n      padding-top: 10px;\n      border-top: 1px solid var(--border);\n      margin-top: 10px;\n    }\n\n    .namespaceLinkList:not(:first-child):before {\n      content: \", \";\n    }\n\n    .tags {\n      display: inline-flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n      position: relative;\n      top: $spacing * math.div(-1, 2);\n\n      .label {\n        position: relative;\n        top: $spacing;\n      }\n\n      .tag {\n        margin: math.div($spacing, 2) $spacing 0 math.div($spacing, 2);\n        font-size: 12px;\n      }\n    }\n\n    .annotation {\n      margin-top: 10px;\n    }\n\n    .label {\n      color: var(--input-label);\n      margin: 0 4px 0 0;\n    }\n\n    &__label-button {\n      padding: 4px;\n    }\n\n    .details {\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n\n      .detail {\n        margin-right: 20px;\n        margin-bottom: 3px;\n      }\n      &:not(:first-of-type) {\n        margin-top: 3px;\n      }\n    }\n\n    & > div {\n      &:not(:last-of-type) {\n        margin-bottom: $spacing;\n      }\n    }\n\n    .icon {\n      vertical-align: top;\n    }\n  }\n</style>\n"]}]}