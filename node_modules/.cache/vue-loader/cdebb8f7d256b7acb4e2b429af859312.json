{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/form/Select.vue?vue&type=style&index=0&id=83930b98&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/form/Select.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci51bmxhYmVsZWQtc2VsZWN0IHsKICBwb3NpdGlvbjogcmVsYXRpdmU7CgogIDo6di1kZWVwIC52LXNlbGVjdC5zZWxlY3QtaW5wdXQtdmlldyB7CiAgICAudnNfX2FjdGlvbnMgewogICAgICB2aXNpYmlsaXR5OiBoaWRkZW47CiAgICB9CiAgfQoKICAmIC52cy0tbXVsdGlwbGUgOjp2LWRlZXAgLnZzX19zZWxlY3RlZC1vcHRpb25zIC52c19fc2VsZWN0ZWQgewogICAgd2lkdGg6IGF1dG87CiAgfQoKICA6OnYtZGVlcCAubGFiZWxlZC10b29sdGlwLmVycm9yIC5zdGF0dXMtaWNvbiB7CiAgICB0b3A6IDdweDsKICAgIHJpZ2h0OiAycHg7CiAgfQoKICA6OnYtZGVlcCAudnNfX3NlbGVjdGVkLW9wdGlvbnMgewogICAgZGlzcGxheTogZmxleDsKICAgIG1hcmdpbjogM3B4OwoKICAgIC52c19fc2VsZWN0ZWQgewogICAgICAgIHdpZHRoOiBpbml0aWFsOwogICAgfQogIH0KCiAgOjp2LWRlZXAgLnYtc2VsZWN0LnZzLS1vcGVuIHsKICAgIC52c19fZHJvcGRvd24tdG9nZ2xlIHsKICAgICAgY29sb3I6IHZhcigtLW91dGxpbmUpICFpbXBvcnRhbnQ7CiAgICB9CiAgfQoKICA6OnYtZGVlcCAudi1zZWxlY3QudnMtLW9wZW4gewogICAgLnZzX19kcm9wZG93bi10b2dnbGUgewogICAgICBjb2xvcjogdmFyKC0tb3V0bGluZSkgIWltcG9ydGFudDsKICAgIH0KICB9CgogIEBpbmNsdWRlIGlucHV0LXN0YXR1cy1jb2xvcjsKfQo="},{"version":3,"sources":["Select.vue"],"names":[],"mappings":";AAgUA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"Select.vue","sourceRoot":"node_modules/@rancher/shell/components/form","sourcesContent":["<script>\nimport { get } from '@shell/utils/object';\nimport LabeledFormElement from '@shell/mixins/labeled-form-element';\nimport VueSelectOverrides from '@shell/mixins/vue-select-overrides';\nimport { LabeledTooltip } from '@components/LabeledTooltip';\nimport { onClickOption, calculatePosition } from '@shell/utils/select';\n\nexport default {\n  components: { LabeledTooltip },\n  mixins:     [LabeledFormElement, VueSelectOverrides],\n  props:      {\n    appendToBody: {\n      default: true,\n      type:    Boolean,\n    },\n    disabled: {\n      default: false,\n      type:    Boolean,\n    },\n    getKeyForOption: {\n      default: null,\n      type:    Function\n    },\n    mode: {\n      default: 'edit',\n      type:    String,\n    },\n    optionKey: {\n      default: null,\n      type:    String,\n    },\n    optionLabel: {\n      default: 'label',\n      type:    String,\n    },\n    placement: {\n      default: null,\n      type:    String,\n    },\n    placeholder: {\n      type:    String,\n      default: '',\n    },\n    popperOverride: {\n      type:    Function,\n      default: null,\n    },\n    reduce: {\n      default: (e) => {\n        if (e && typeof e === 'object' && e.value !== undefined) {\n          return e.value;\n        }\n\n        return e;\n      },\n      type: Function,\n    },\n    tooltip: {\n      type:    String,\n      default: null,\n    },\n\n    hoverTooltip: {\n      type:    Boolean,\n      default: true,\n    },\n\n    status: {\n      type:    String,\n      default: null,\n    },\n    value: {\n      default: null,\n      type:    [String, Object, Number, Array, Boolean],\n    },\n    closeOnSelect: {\n      type:    Boolean,\n      default: true\n    },\n  },\n\n  methods: {\n    // resizeHandler = in mixin\n    getOptionLabel(option) {\n      if (this.$attrs['get-option-label']) {\n        return this.$attrs['get-option-label'](option);\n      }\n      if (get(option, this.optionLabel)) {\n        if (this.localizedLabel) {\n          return this.$store.getters['i18n/t'](get(option, this.optionLabel));\n        } else {\n          return get(option, this.optionLabel);\n        }\n      } else {\n        return option;\n      }\n    },\n\n    positionDropdown(dropdownList, component, { width }) {\n      if (this.popperOverride) {\n        return this.popperOverride(dropdownList, component, { width });\n      }\n\n      calculatePosition(dropdownList, component, width, this.placement);\n    },\n\n    focus() {\n      this.focusSearch();\n    },\n\n    focusSearch() {\n      this.$nextTick(() => {\n        const el = this.$refs['select-input']?.searchEl;\n\n        if ( el ) {\n          el.focus();\n        }\n      });\n    },\n\n    get,\n\n    onClickOption(option, event) {\n      onClickOption.call(this, option, event);\n    },\n    selectable(opt) {\n      // Lets you disable options that are used\n      // for headings on groups of options.\n      if ( opt ) {\n        if ( opt.disabled || opt.kind === 'group' || opt.kind === 'divider' || opt.loading ) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    /**\n     * Get a unique value to represent the option\n     */\n    getOptionKey(opt) {\n      // Use the property from a component level key\n      if (opt && this.optionKey) {\n        return get(opt, this.optionKey);\n      }\n\n      // Use the property from an option level key\n      // This doesn't seem right, think it was meant to represent the actual option key... rather than the key to find the option key\n      // This approach also doesn't appear in LabeledSelect\n      if (opt?.optionKey) {\n        // opt.optionKey should in theory be optionKeyKey\n        return get(opt, opt.optionKey);\n      }\n\n      // There's no configuration to help us get a sensible key. Fall back on ..\n      // - the label\n      // - something random\n\n      const label = this.getOptionLabel(opt);\n\n      // label may be type of object\n      if (typeof label === 'string' || typeof label === 'number') {\n        return label;\n      } else {\n        return Math.random(100000);\n      }\n    },\n    report(e) {\n      alert(e);\n    }\n  },\n  computed: {\n    requiredField() {\n      // using \"any\" for a type on \"rule\" here is dirty but the use of the optional chaining operator makes it safe for what we're doing here.\n      return (this.required || this.rules.some((rule) => rule?.name === 'required'));\n    },\n    validationMessage() {\n      // we want to grab the required rule passed in if we can but if it's not there then we can just grab it from the formRulesGenerator\n      const requiredRule = this.rules.find((rule) => rule?.name === 'required');\n      const ruleMessages = [];\n      const value = this?.value;\n\n      if (requiredRule && this.blurred && !this.focused) {\n        const message = requiredRule(value);\n\n        if (!!message) {\n          return message;\n        }\n      }\n\n      for (const rule of this.rules) {\n        const message = rule(value);\n\n        if (!!message && rule.name !== 'required') { // we're catching 'required' above so we can ignore it here\n          ruleMessages.push(message);\n        }\n      }\n      if (ruleMessages.length > 0 && (this.blurred || this.focused)) {\n        return ruleMessages.join(', ');\n      } else {\n        return undefined;\n      }\n    }\n  }\n};\n</script>\n\n<template>\n  <div\n    ref=\"select\"\n    class=\"unlabeled-select\"\n    :class=\"{\n      disabled: disabled && !isView,\n      focused,\n      [mode]: true,\n      [status]: status,\n      taggable: $attrs.taggable,\n      taggable: $attrs.multiple,\n    }\"\n    @focus=\"focusSearch\"\n  >\n    <v-select\n      ref=\"select-input\"\n      v-bind=\"$attrs\"\n      class=\"inline\"\n      :class=\"{'select-input-view': mode === 'view'}\"\n      :autoscroll=\"true\"\n      :append-to-body=\"appendToBody\"\n      :calculate-position=\"positionDropdown\"\n      :disabled=\"isView || disabled\"\n      :get-option-key=\"(opt) => getOptionKey(opt)\"\n      :get-option-label=\"(opt) => getOptionLabel(opt)\"\n      :label=\"optionLabel\"\n      :options=\"options\"\n      :close-on-select=\"closeOnSelect\"\n      :map-keydown=\"mappedKeys\"\n      :placeholder=\"placeholder\"\n      :reduce=\"(x) => reduce(x)\"\n      :searchable=\"isSearchable\"\n      :selectable=\"selectable\"\n      :value=\"value != null ? value : ''\"\n      v-on=\"$listeners\"\n      @search:blur=\"onBlur\"\n      @search:focus=\"onFocus\"\n      @open=\"resizeHandler\"\n      @option:created=\"(e) => $emit('createdListItem', e)\"\n    >\n      <template #option=\"option\">\n        <div @mousedown=\"(e) => onClickOption(option, e)\">\n          {{ option.label }}\n        </div>\n      </template>\n      <!-- Pass down templates provided by the caller -->\n      <template\n        v-for=\"(_, slot) of $scopedSlots\"\n        v-slot:[slot]=\"scope\"\n      >\n        <slot\n          :name=\"slot\"\n          v-bind=\"scope\"\n        />\n      </template>\n    </v-select>\n    <LabeledTooltip\n      v-if=\"tooltip && !focused\"\n      :hover=\"hoverTooltip\"\n      :value=\"tooltip\"\n      :status=\"status\"\n    />\n    <LabeledTooltip\n      v-if=\"!!validationMessage\"\n      :hover=\"hoverTooltip\"\n      :value=\"validationMessage\"\n    />\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n  .unlabeled-select {\n    position: relative;\n\n    ::v-deep .v-select.select-input-view {\n      .vs__actions {\n        visibility: hidden;\n      }\n    }\n\n    & .vs--multiple ::v-deep .vs__selected-options .vs__selected {\n      width: auto;\n    }\n\n    ::v-deep .labeled-tooltip.error .status-icon {\n      top: 7px;\n      right: 2px;\n    }\n\n    ::v-deep .vs__selected-options {\n      display: flex;\n      margin: 3px;\n\n      .vs__selected {\n          width: initial;\n      }\n    }\n\n    ::v-deep .v-select.vs--open {\n      .vs__dropdown-toggle {\n        color: var(--outline) !important;\n      }\n    }\n\n    ::v-deep .v-select.vs--open {\n      .vs__dropdown-toggle {\n        color: var(--outline) !important;\n      }\n    }\n\n    @include input-status-color;\n  }\n</style>\n"]}]}