{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/list/management.cattle.io.setting.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/list/management.cattle.io.setting.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCB7IG1hcEdldHRlcnMgfSBmcm9tICd2dWV4JzsKaW1wb3J0IHsgTUFOQUdFTUVOVCB9IGZyb20gJ0BzaGVsbC9jb25maWcvdHlwZXMnOwppbXBvcnQgeyBBTExPV0VEX1NFVFRJTkdTIH0gZnJvbSAnQHNoZWxsL2NvbmZpZy9zZXR0aW5ncyc7CmltcG9ydCB7IEJhbm5lciB9IGZyb20gJ0Bjb21wb25lbnRzL0Jhbm5lcic7CmltcG9ydCBMb2FkaW5nIGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL0xvYWRpbmcnOwppbXBvcnQgeyBWSUVXX0lOX0FQSSB9IGZyb20gJ0BzaGVsbC9zdG9yZS9wcmVmcyc7CgpleHBvcnQgZGVmYXVsdCB7CiAgY29tcG9uZW50czogeyBCYW5uZXIsIExvYWRpbmcgfSwKCiAgYXN5bmMgZmV0Y2goKSB7CiAgICBjb25zdCB2aWV3SW5BcGkgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzWydwcmVmcy9nZXQnXShWSUVXX0lOX0FQSSk7CiAgICBjb25zdCByb3dzID0gYXdhaXQgdGhpcy4kc3RvcmUuZGlzcGF0Y2goYG1hbmFnZW1lbnQvZmluZEFsbGAsIHsgdHlwZTogTUFOQUdFTUVOVC5TRVRUSU5HIH0pOwogICAgY29uc3QgdCA9IHRoaXMuJHN0b3JlLmdldHRlcnNbJ2kxOG4vdCddOwogICAgLy8gTWFwIHNldHRpbmdzIGZyb20gYXJyYXkgdG8gb2JqZWN0IGtleWVkIGJ5IGlkCiAgICBjb25zdCBzZXR0aW5nc01hcCA9IHJvd3MucmVkdWNlKChyZXMsIHMpID0+IHsKICAgICAgcmVzW3MuaWRdID0gczsKCiAgICAgIHJldHVybiByZXM7CiAgICB9LCB7fSk7CgogICAgY29uc3Qgc2V0dGluZ3MgPSBbXTsKCiAgICAvLyBDb21iaW5lIHRoZSBhbGxvd2VkIHNldHRpbmdzIHdpdGggdGhlIGRhdGEgZnJvbSB0aGUgQVBJCiAgICBmb3IgKCBjb25zdCBpZCBpbiBBTExPV0VEX1NFVFRJTkdTICkgewogICAgICBjb25zdCBzZXR0aW5nID0gc2V0dGluZ3NNYXBbaWRdOwoKICAgICAgaWYgKCAhc2V0dGluZyApIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQoKICAgICAgY29uc3QgcmVhZG9ubHkgPSAhIUFMTE9XRURfU0VUVElOR1NbaWRdLnJlYWRPbmx5OwogICAgICBjb25zdCBzID0gewogICAgICAgIC4uLkFMTE9XRURfU0VUVElOR1NbaWRdLAogICAgICAgIGlkLAogICAgICAgIGRlc2NyaXB0aW9uOiB0KGBhZHZhbmNlZFNldHRpbmdzLmRlc2NyaXB0aW9ucy4keyBpZCB9YCksCiAgICAgICAgZGF0YTogICAgICAgIHNldHRpbmcsCiAgICAgICAgY3VzdG9taXplZDogICFyZWFkb25seSAmJiBzZXR0aW5nLnZhbHVlICYmIHNldHRpbmcudmFsdWUgIT09IHNldHRpbmcuZGVmYXVsdCwKICAgICAgICBmcm9tRW52OiAgICAgc2V0dGluZy5mcm9tRW52LAogICAgICB9OwoKICAgICAgcy5oaWRlID0gcy5jYW5IaWRlID0gKHMua2luZCA9PT0gJ2pzb24nIHx8IHMua2luZCA9PT0gJ211bHRpbGluZScpOwoKICAgICAgaWYgKHMua2luZCA9PT0gJ2pzb24nKSB7CiAgICAgICAgcy5qc29uID0gSlNPTi5zdHJpbmdpZnkoSlNPTi5wYXJzZShzLmRhdGEudmFsdWUgfHwgcy5kYXRhLmRlZmF1bHQpLCBudWxsLCAyKTsKICAgICAgfSBlbHNlIGlmIChzLmtpbmQgPT09ICdlbnVtJykgewogICAgICAgIGNvbnN0IHYgPSBzLmRhdGEudmFsdWUgfHwgcy5kYXRhLmRlZmF1bHQ7CgogICAgICAgIHMuZW51bSA9IGBhZHZhbmNlZFNldHRpbmdzLmVudW0uJHsgaWQgfS4keyB2IH1gOwogICAgICB9CiAgICAgIC8vIFRoZXJlIGFyZSBvbmx5IDIgYWN0aW9ucyB0aGF0IGNhbiBiZSBlbmFibGVkIC0gRWRpdCBTZXR0aW5nIG9yIFZpZXcgaW4gQVBJCiAgICAgIC8vIElmIG5laXRoZXIgaXMgYXZhaWxhYmxlIGZvciB0aGlzIHNldHRpbmcgdGhlbiB3ZSBoaWRlIHRoZSBhY3Rpb24gbWVudSBidXR0b24KICAgICAgcy5oYXNBY3Rpb25zID0gKCFzLnJlYWRPbmx5IHx8IHZpZXdJbkFwaSkgJiYgc2V0dGluZy5hdmFpbGFibGVBY3Rpb25zPy5sZW5ndGg7CiAgICAgIHNldHRpbmdzLnB1c2gocyk7CiAgICB9CgogICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzOwogIH0sCgogIGRhdGEoKSB7CiAgICByZXR1cm4geyBzZXR0aW5nczogbnVsbCB9OwogIH0sCgogIGNvbXB1dGVkOiB7IC4uLm1hcEdldHRlcnMoeyB0OiAnaTE4bi90JyB9KSB9LAoKICBtZXRob2RzOiB7CiAgICBzaG93QWN0aW9uTWVudShlLCBzZXR0aW5nKSB7CiAgICAgIGNvbnN0IGFjdGlvbkVsZW1lbnQgPSBlLnNyY0VsZW1lbnQ7CgogICAgICB0aGlzLiRzdG9yZS5jb21taXQoYGFjdGlvbi1tZW51L3Nob3dgLCB7CiAgICAgICAgcmVzb3VyY2VzOiBzZXR0aW5nLmRhdGEsCiAgICAgICAgZWxlbTogICAgICBhY3Rpb25FbGVtZW50CiAgICAgIH0pOwogICAgfSwKICB9Cn07Cg=="},{"version":3,"sources":["management.cattle.io.setting.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"management.cattle.io.setting.vue","sourceRoot":"node_modules/@rancher/shell/list","sourcesContent":["<script>\nimport { mapGetters } from 'vuex';\nimport { MANAGEMENT } from '@shell/config/types';\nimport { ALLOWED_SETTINGS } from '@shell/config/settings';\nimport { Banner } from '@components/Banner';\nimport Loading from '@shell/components/Loading';\nimport { VIEW_IN_API } from '@shell/store/prefs';\n\nexport default {\n  components: { Banner, Loading },\n\n  async fetch() {\n    const viewInApi = this.$store.getters['prefs/get'](VIEW_IN_API);\n    const rows = await this.$store.dispatch(`management/findAll`, { type: MANAGEMENT.SETTING });\n    const t = this.$store.getters['i18n/t'];\n    // Map settings from array to object keyed by id\n    const settingsMap = rows.reduce((res, s) => {\n      res[s.id] = s;\n\n      return res;\n    }, {});\n\n    const settings = [];\n\n    // Combine the allowed settings with the data from the API\n    for ( const id in ALLOWED_SETTINGS ) {\n      const setting = settingsMap[id];\n\n      if ( !setting ) {\n        continue;\n      }\n\n      const readonly = !!ALLOWED_SETTINGS[id].readOnly;\n      const s = {\n        ...ALLOWED_SETTINGS[id],\n        id,\n        description: t(`advancedSettings.descriptions.${ id }`),\n        data:        setting,\n        customized:  !readonly && setting.value && setting.value !== setting.default,\n        fromEnv:     setting.fromEnv,\n      };\n\n      s.hide = s.canHide = (s.kind === 'json' || s.kind === 'multiline');\n\n      if (s.kind === 'json') {\n        s.json = JSON.stringify(JSON.parse(s.data.value || s.data.default), null, 2);\n      } else if (s.kind === 'enum') {\n        const v = s.data.value || s.data.default;\n\n        s.enum = `advancedSettings.enum.${ id }.${ v }`;\n      }\n      // There are only 2 actions that can be enabled - Edit Setting or View in API\n      // If neither is available for this setting then we hide the action menu button\n      s.hasActions = (!s.readOnly || viewInApi) && setting.availableActions?.length;\n      settings.push(s);\n    }\n\n    this.settings = settings;\n  },\n\n  data() {\n    return { settings: null };\n  },\n\n  computed: { ...mapGetters({ t: 'i18n/t' }) },\n\n  methods: {\n    showActionMenu(e, setting) {\n      const actionElement = e.srcElement;\n\n      this.$store.commit(`action-menu/show`, {\n        resources: setting.data,\n        elem:      actionElement\n      });\n    },\n  }\n};\n</script>\n\n<template>\n  <Loading v-if=\"!settings\" />\n  <div v-else>\n    <Banner\n      color=\"warning\"\n      class=\"settings-banner\"\n    >\n      <div>\n        {{ t('advancedSettings.subtext') }}\n      </div>\n    </Banner>\n    <div\n      v-for=\"setting in settings\"\n      :key=\"setting.id\"\n      class=\"advanced-setting mb-20\"\n    >\n      <div class=\"header\">\n        <div class=\"title\">\n          <h1>\n            {{ setting.id }}\n            <span\n              v-if=\"setting.fromEnv\"\n              class=\"modified\"\n            >Set by Environment Variable</span>\n            <span\n              v-else-if=\"setting.customized\"\n              class=\"modified\"\n            >{{ t('advancedSettings.modified') }}</span>\n          </h1>\n          <h2>{{ t(`advancedSettings.descriptions.${setting.id}`) }}</h2>\n        </div>\n        <div\n          v-if=\"setting.hasActions\"\n          class=\"action\"\n        >\n          <button\n            aria-haspopup=\"true\"\n            aria-expanded=\"false\"\n            type=\"button\"\n            class=\"btn btn-sm role-multi-action actions\"\n            @click=\"showActionMenu($event, setting)\"\n          >\n            <i class=\"icon icon-actions\" />\n          </button>\n        </div>\n      </div>\n      <div value>\n        <div v-if=\"setting.hide\">\n          <button\n            class=\"btn btn-sm role-primary\"\n            @click=\"setting.hide = !setting.hide\"\n          >\n            {{ t('advancedSettings.show') }} {{ setting.id }}\n          </button>\n        </div>\n        <div\n          v-else\n          class=\"settings-value\"\n        >\n          <pre v-if=\"setting.kind === 'json'\">{{ setting.json }}</pre>\n          <pre v-else-if=\"setting.kind === 'multiline'\">{{ setting.data.value || setting.data.default }}</pre>\n          <pre v-else-if=\"setting.kind === 'enum'\">{{ t(setting.enum) }}</pre>\n          <pre v-else-if=\"setting.data.value || setting.data.default\">{{ setting.data.value || setting.data.default }}</pre>\n          <pre\n            v-else\n            class=\"text-muted\"\n          >&lt;{{ t('advancedSettings.none') }}&gt;</pre>\n        </div>\n        <div v-if=\"setting.canHide && !setting.hide\">\n          <button\n            class=\"btn btn-sm role-primary\"\n            @click=\"setting.hide = !setting.hide\"\n          >\n            {{ t('advancedSettings.hide') }} {{ setting.id }}\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style lang='scss' scoped>\n.settings-banner {\n  margin-top: 0;\n}\n.advanced-setting {\n  border: 1px solid var(--border);\n  padding: 20px;\n  border-radius: var(--border-radius);\n\n  h1 {\n    font-size: 14px;\n  }\n  h2 {\n    font-size: 12px;\n    margin-bottom: 0;\n    opacity: 0.8;\n  }\n}\n\n.settings-value pre {\n  margin: 0;\n}\n\n.header {\n  display: flex;\n  margin-bottom: 20px;\n}\n\n.title {\n  flex: 1;\n}\n\n.modified {\n  margin-left: 10px;\n  border: 1px solid var(--primary);\n  border-radius: 5px;\n  padding: 2px 10px;\n  font-size: 12px;\n}\n</style>\n"]}]}