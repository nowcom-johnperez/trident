{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/list/group.principal.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/list/group.principal.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBSZXNvdXJjZVRhYmxlIGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL1Jlc291cmNlVGFibGUnOwppbXBvcnQgTG9hZGluZyBmcm9tICdAc2hlbGwvY29tcG9uZW50cy9Mb2FkaW5nJzsKaW1wb3J0IE1hc3RoZWFkIGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL1Jlc291cmNlTGlzdC9NYXN0aGVhZCc7CmltcG9ydCB7IE5PUk1BTiwgTUFOQUdFTUVOVCB9IGZyb20gJ0BzaGVsbC9jb25maWcvdHlwZXMnOwppbXBvcnQgQXN5bmNCdXR0b24gZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvQXN5bmNCdXR0b24nOwppbXBvcnQgeyBhcHBseVByb2R1Y3RzIH0gZnJvbSAnQHNoZWxsL3N0b3JlL3R5cGUtbWFwJzsKaW1wb3J0IHsgTkFNRSB9IGZyb20gJ0BzaGVsbC9jb25maWcvcHJvZHVjdC9hdXRoJzsKaW1wb3J0IHsgTU9ERSwgX0VESVQgfSBmcm9tICdAc2hlbGwvY29uZmlnL3F1ZXJ5LXBhcmFtcyc7CmltcG9ydCB7IG1hcFN0YXRlIH0gZnJvbSAndnVleCc7CmltcG9ydCB7IEJMQU5LX0NMVVNURVIgfSBmcm9tICdAc2hlbGwvc3RvcmUvc3RvcmUtdHlwZXMuanMnOwppbXBvcnQgeyBhbGxIYXNoIH0gZnJvbSAnQHNoZWxsL3V0aWxzL3Byb21pc2UnOwoKZXhwb3J0IGRlZmF1bHQgewogIGNvbXBvbmVudHM6IHsKICAgIEFzeW5jQnV0dG9uLCBSZXNvdXJjZVRhYmxlLCBNYXN0aGVhZCwgTG9hZGluZwogIH0sCiAgcHJvcHM6IHsKICAgIHJlc291cmNlOiB7CiAgICAgIHR5cGU6ICAgICBTdHJpbmcsCiAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgfSwKCiAgICBzY2hlbWE6IHsKICAgICAgdHlwZTogICAgIE9iamVjdCwKICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICB9LAoKICAgIHVzZVF1ZXJ5UGFyYW1zRm9yU2ltcGxlRmlsdGVyaW5nOiB7CiAgICAgIHR5cGU6ICAgIEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9CiAgfSwKICBhc3luYyBmZXRjaCgpIHsKICAgIGF3YWl0IHRoaXMudXBkYXRlUm93cygpOwoKICAgIGNvbnN0IGF1dGhDb25maWdTY2hlbWEgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzW2BtYW5hZ2VtZW50L3NjaGVtYUZvcmBdKE1BTkFHRU1FTlQuQVVUSF9DT05GSUcpOwogICAgY29uc3QgZ3JiU2NoZW1hID0gdGhpcy4kc3RvcmUuZ2V0dGVyc1sncmFuY2hlci9zY2hlbWFGb3InXShOT1JNQU4uR0xPQkFMX1JPTEVfQklORElORyk7CgogICAgY29uc3QgaGFzaCA9IGF3YWl0IGFsbEhhc2goewogICAgICB1c2VyOiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdyYW5jaGVyL3JlcXVlc3QnLCB7IHVybDogJy92My91c2Vycz9saW1pdD0wJyB9KSwKICAgICAgcHJvdmlkZXJzOiBhdXRoQ29uZmlnU2NoZW1hID8gdGhpcy4kc3RvcmUuZGlzcGF0Y2goYG1hbmFnZW1lbnQvZmluZEFsbGAsIHsgdHlwZTogTUFOQUdFTUVOVC5BVVRIX0NPTkZJRyB9KSA6IFByb21pc2UucmVzb2x2ZShbXSkKICAgIH0pOwoKICAgIGNvbnN0IG5vbkxvY2FsQXV0aFByb3ZpZGVyID0gISFoYXNoLnByb3ZpZGVycy5maW5kKChwKSA9PiBwLm5hbWUgIT09ICdsb2NhbCcgJiYgcC5lbmFibGVkID09PSB0cnVlKTsKCiAgICB0aGlzLmNhblJlZnJlc2hBY2Nlc3MgPSBub25Mb2NhbEF1dGhQcm92aWRlciAmJiAhIWhhc2gudXNlcj8uYWN0aW9ucz8ucmVmcmVzaGF1dGhwcm92aWRlcmFjY2VzczsKICAgIHRoaXMuY2FuQ3JlYXRlR2xvYmFsUm9sZUJpbmRpbmcgPSBub25Mb2NhbEF1dGhQcm92aWRlciAmJiBncmJTY2hlbWE/LmNvbGxlY3Rpb25NZXRob2RzPy5pbmNsdWRlcygnUE9TVCcpOwogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHJvd3M6ICAgICAgICAgICAgICAgICAgICAgICBbXSwKICAgICAgY2FuQ3JlYXRlR2xvYmFsUm9sZUJpbmRpbmc6IGZhbHNlLAogICAgICBjYW5SZWZyZXNoQWNjZXNzOiAgICAgICAgICAgZmFsc2UsCiAgICAgIGFzc2lnbkxvY2F0aW9uOiAgICAgICAgICAgICB7CiAgICAgICAgcGF0aDogIGAvYy8keyBCTEFOS19DTFVTVEVSIH0vJHsgTkFNRSB9LyR7IE5PUk1BTi5TUE9PRkVELkdST1VQX1BSSU5DSVBBTCB9L2Fzc2lnbi1lZGl0YCwKICAgICAgICBxdWVyeTogeyBbTU9ERV06IF9FRElUIH0KICAgICAgfSwKICAgICAgaW5pdGlhbExvYWQ6IHRydWUsCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsgLi4ubWFwU3RhdGUoJ2FjdGlvbi1tZW51JywgWydzaG93UHJvbXB0UmVtb3ZlJywgJ3RvUmVtb3ZlJ10pIH0sCiAgd2F0Y2g6ICAgIHsKICAgIGFzeW5jIHRvUmVtb3ZlKHJlc291cmNlcykgewogICAgICBpZiAodGhpcy5pbml0aWFsTG9hZCkgewogICAgICAgIHRoaXMuaW5pdGlhbExvYWQgPSBmYWxzZTsKCiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGlmIChyZXNvdXJjZXM/Lmxlbmd0aCA9PT0gMCkgewogICAgICAgIGF3YWl0IHRoaXMucmVmcmVzaEdyb3VwTWVtYmVyc2hpcHMoKCkgPT4ge30pOwogICAgICAgIC8vIHNwb29mZWQgY29sbGVjdGlvbnMgbm9ybWFsbHkgZ2V0IHVwZGF0ZWQgd2hlbiBwcm9tcHRSZW1vdmUgaGFzIGNvbXBsZXRlZCAoZ2l2ZW4gdGhlIHJlc291cmNlcyBhcmUgb2YgYSBzcG9vZmVkIHR5cGUpLi4KICAgICAgICAvLyAuLi4gaG93ZXZlciBpbiB0aGlzIHVzZSBjYXNlIGl0IGRvZXNuJ3QgaGFwcGVuIHNvIGRvIGl0IG1hbnVhbGx5ICh0aGUgcmVtb3ZlZCByZXNvdXJjZXMgYXJlIG5vdCBnbG9iYWxSb2xlQmluZGluZ3MgYW5kIG5vdCBzcG9vZmVkKQogICAgICAgIGF3YWl0IHRoaXMudXBkYXRlUm93cyh0cnVlKTsKICAgICAgfQogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgYXN5bmMgdXBkYXRlUm93cyhmb3JjZSA9IGZhbHNlKSB7CiAgICAgIGF3YWl0IHRoaXMudXBkYXRlR3JvdXBQcmluY2lwYWxzKGZvcmNlKTsKCiAgICAgIC8vIFVwZnJvbnQgbG9hZCBhbGwgZ2xvYmFsIHJvbGVzLCB0aGlzIG1ha2VzIGl0IGVhc2llciB0byBzeW5jIGZldGNoIHRoZW0gbGF0ZXIgb24KICAgICAgYXdhaXQgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ21hbmFnZW1lbnQvZmluZEFsbCcsIHsgdHlwZTogTUFOQUdFTUVOVC5HTE9CQUxfUk9MRSB9KTsKCiAgICAgIGF3YWl0IHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdyYW5jaGVyL2ZpbmRBbGwnLCB7IHR5cGU6IE5PUk1BTi5QUklOQ0lQQUwsIG9wdDogeyB1cmw6ICcvdjMvcHJpbmNpcGFscycgfSB9KTsKICAgIH0sCiAgICBhc3luYyByZWZyZXNoR3JvdXBNZW1iZXJzaGlwcyhidXR0b25Eb25lKSB7CiAgICAgIHRyeSB7CiAgICAgICAgYXdhaXQgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ3JhbmNoZXIvcmVxdWVzdCcsIHsKICAgICAgICAgIHVybDogICAgJy92My91c2Vycz9hY3Rpb249cmVmcmVzaGF1dGhwcm92aWRlcmFjY2VzcycsCiAgICAgICAgICBtZXRob2Q6ICdwb3N0JywKICAgICAgICAgIGRhdGE6ICAgeyB9LAogICAgICAgIH0pOwoKICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZUdyb3VwUHJpbmNpcGFscyh0cnVlKTsKCiAgICAgICAgYnV0dG9uRG9uZSh0cnVlKTsKICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2dyb3dsL2Zyb21FcnJvcicsIHsgdGl0bGU6ICdFcnJvciByZWZyZXNoaW5nIGdyb3VwIG1lbWJlcnNoaXBzJywgZXJyIH0sIHsgcm9vdDogdHJ1ZSB9KTsKICAgICAgICBidXR0b25Eb25lKGZhbHNlKTsKICAgICAgfQogICAgfSwKICAgIGFzeW5jIHVwZGF0ZUdyb3VwUHJpbmNpcGFscyhmb3JjZSA9IGZhbHNlKSB7CiAgICAgIC8vIFRoaXMgaXMgbmVlZGVkIGluIFNTUiwgYnV0IG5vdCBTUEEuIElmIHRoaXMgaXMgbm90IGhlcmUuLi4gd2hlbiBjbHVzdGVyL2ZpbmRBbGwgaXMgZGlzcGF0Y2hlZC4uLiB3ZSBmYWlsIHRvIGZpbmQgdGhlIHNwb29mZWQKICAgICAgLy8gdHlwZSdzIGBnZXRJbnN0YW5jZWAgZm4gYXMgaXQgaGFzbid0IGJlZW4gcmVnaXN0ZXJlZCAoYGluc3RhbmNlTWV0aG9kc2AgaW4gdHlwZS1tYXAgZmlsZSBpcyBlbXB0eSkKICAgICAgYXdhaXQgYXBwbHlQcm9kdWN0cyh0aGlzLiRzdG9yZSk7CgogICAgICAvLyBGb3JjZSBzcG9vZmVkIHR5cGUgZ2V0SW5zdGFuY2VzIHRvIGV4ZWN1dGUgYWdhaW4KICAgICAgdGhpcy5yb3dzID0gYXdhaXQgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ21hbmFnZW1lbnQvZmluZEFsbCcsIHsKICAgICAgICB0eXBlOiBOT1JNQU4uU1BPT0ZFRC5HUk9VUF9QUklOQ0lQQUwsCiAgICAgICAgb3B0OiAgeyBmb3JjZSB9CiAgICAgIH0sIHsgcm9vdDogdHJ1ZSB9KTsKICAgIH0KICB9LAoKfTsK"},{"version":3,"sources":["group.principal.vue"],"names":[],"mappingsfile":"group.principal.vue","sourceRoot":"node_modules/@rancher/shell/list","sourcesContent":["<script>\nimport ResourceTable from '@shell/components/ResourceTable';\nimport Loading from '@shell/components/Loading';\nimport Masthead from '@shell/components/ResourceList/Masthead';\nimport { NORMAN, MANAGEMENT } from '@shell/config/types';\nimport AsyncButton from '@shell/components/AsyncButton';\nimport { applyProducts } from '@shell/store/type-map';\nimport { NAME } from '@shell/config/product/auth';\nimport { MODE, _EDIT } from '@shell/config/query-params';\nimport { mapState } from 'vuex';\nimport { BLANK_CLUSTER } from '@shell/store/store-types.js';\nimport { allHash } from '@shell/utils/promise';\n\nexport default {\n  components: {\n    AsyncButton, ResourceTable, Masthead, Loading\n  },\n  props: {\n    resource: {\n      type:     String,\n      required: true,\n    },\n\n    schema: {\n      type:     Object,\n      required: true,\n    },\n\n    useQueryParamsForSimpleFiltering: {\n      type:    Boolean,\n      default: false\n    }\n  },\n  async fetch() {\n    await this.updateRows();\n\n    const authConfigSchema = this.$store.getters[`management/schemaFor`](MANAGEMENT.AUTH_CONFIG);\n    const grbSchema = this.$store.getters['rancher/schemaFor'](NORMAN.GLOBAL_ROLE_BINDING);\n\n    const hash = await allHash({\n      user:      this.$store.dispatch('rancher/request', { url: '/v3/users?limit=0' }),\n      providers: authConfigSchema ? this.$store.dispatch(`management/findAll`, { type: MANAGEMENT.AUTH_CONFIG }) : Promise.resolve([])\n    });\n\n    const nonLocalAuthProvider = !!hash.providers.find((p) => p.name !== 'local' && p.enabled === true);\n\n    this.canRefreshAccess = nonLocalAuthProvider && !!hash.user?.actions?.refreshauthprovideraccess;\n    this.canCreateGlobalRoleBinding = nonLocalAuthProvider && grbSchema?.collectionMethods?.includes('POST');\n  },\n  data() {\n    return {\n      rows:                       [],\n      canCreateGlobalRoleBinding: false,\n      canRefreshAccess:           false,\n      assignLocation:             {\n        path:  `/c/${ BLANK_CLUSTER }/${ NAME }/${ NORMAN.SPOOFED.GROUP_PRINCIPAL }/assign-edit`,\n        query: { [MODE]: _EDIT }\n      },\n      initialLoad: true,\n    };\n  },\n  computed: { ...mapState('action-menu', ['showPromptRemove', 'toRemove']) },\n  watch:    {\n    async toRemove(resources) {\n      if (this.initialLoad) {\n        this.initialLoad = false;\n\n        return;\n      }\n      if (resources?.length === 0) {\n        await this.refreshGroupMemberships(() => {});\n        // spoofed collections normally get updated when promptRemove has completed (given the resources are of a spoofed type)..\n        // ... however in this use case it doesn't happen so do it manually (the removed resources are not globalRoleBindings and not spoofed)\n        await this.updateRows(true);\n      }\n    }\n  },\n  methods: {\n    async updateRows(force = false) {\n      await this.updateGroupPrincipals(force);\n\n      // Upfront load all global roles, this makes it easier to sync fetch them later on\n      await this.$store.dispatch('management/findAll', { type: MANAGEMENT.GLOBAL_ROLE });\n\n      await this.$store.dispatch('rancher/findAll', { type: NORMAN.PRINCIPAL, opt: { url: '/v3/principals' } });\n    },\n    async refreshGroupMemberships(buttonDone) {\n      try {\n        await this.$store.dispatch('rancher/request', {\n          url:    '/v3/users?action=refreshauthprovideraccess',\n          method: 'post',\n          data:   { },\n        });\n\n        await this.updateGroupPrincipals(true);\n\n        buttonDone(true);\n      } catch (err) {\n        this.$store.dispatch('growl/fromError', { title: 'Error refreshing group memberships', err }, { root: true });\n        buttonDone(false);\n      }\n    },\n    async updateGroupPrincipals(force = false) {\n      // This is needed in SSR, but not SPA. If this is not here... when cluster/findAll is dispatched... we fail to find the spoofed\n      // type's `getInstance` fn as it hasn't been registered (`instanceMethods` in type-map file is empty)\n      await applyProducts(this.$store);\n\n      // Force spoofed type getInstances to execute again\n      this.rows = await this.$store.dispatch('management/findAll', {\n        type: NORMAN.SPOOFED.GROUP_PRINCIPAL,\n        opt:  { force }\n      }, { root: true });\n    }\n  },\n\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n  <div v-else>\n    <Masthead\n      :schema=\"schema\"\n      :resource=\"resource\"\n    >\n      <template slot=\"extraActions\">\n        <AsyncButton\n          v-if=\"canRefreshAccess\"\n          mode=\"refresh\"\n          :action-label=\"t('authGroups.actions.refresh')\"\n          :waiting-label=\"t('authGroups.actions.refresh')\"\n          :success-label=\"t('authGroups.actions.refresh')\"\n          :error-label=\"t('authGroups.actions.refresh')\"\n          :class=\"{'mr-5': canCreateGlobalRoleBinding}\"\n          @click=\"refreshGroupMemberships\"\n        />\n        <n-link\n          v-if=\"canCreateGlobalRoleBinding\"\n          :to=\"assignLocation\"\n          class=\"btn role-primary\"\n        >\n          {{ t(\"authGroups.actions.assignRoles\") }}\n        </n-link>\n      </template>\n    </Masthead>\n\n    <ResourceTable\n      :schema=\"schema\"\n      :rows=\"rows\"\n      :use-query-params-for-simple-filtering=\"useQueryParamsForSimpleFiltering\"\n    />\n  </div>\n</template>\n"]}]}