{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/formatter/LiveExpiryBadgeState.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/formatter/LiveExpiryBadgeState.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBkYXkgZnJvbSAnZGF5anMnOwppbXBvcnQgeyBCYWRnZVN0YXRlIH0gZnJvbSAnQGNvbXBvbmVudHMvQmFkZ2VTdGF0ZSc7CmltcG9ydCB7IGNvbG9yRm9yU3RhdGUsIHN0YXRlRGlzcGxheSB9IGZyb20gJ0BzaGVsbC9wbHVnaW5zL2Rhc2hib2FyZC1zdG9yZS9yZXNvdXJjZS1jbGFzcyc7CmltcG9ydCB7IHNhZmVTZXRUaW1lb3V0IH0gZnJvbSAnQHNoZWxsL3V0aWxzL3RpbWUnOwoKZXhwb3J0IGRlZmF1bHQgewogIGNvbXBvbmVudHM6IHsgQmFkZ2VTdGF0ZSB9LAoKICBwcm9wczogewogICAgcm93OiB7CiAgICAgIHR5cGU6ICAgIE9iamVjdCwKICAgICAgZGVmYXVsdDogbnVsbCwKICAgIH0sCiAgfSwKCiAgZGF0YSgpIHsKICAgIHJldHVybiB7IHN0YXRlOiB0aGlzLnVwZGF0ZSgpIH07CiAgfSwKCiAgY29tcHV0ZWQ6IHsKICAgIHN0YXRlVmFsdWUoKSB7CiAgICAgIHJldHVybiB0aGlzLnN0YXRlOwogICAgfQogIH0sCgogIHdhdGNoOiB7CiAgICByb3coKSB7CiAgICAgIHRoaXMudXBkYXRlKCk7CiAgICB9CiAgfSwKCiAgYmVmb3JlRGVzdHJveSgpIHsKICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTsKICB9LAoKICBtZXRob2RzOiB7CiAgICB1cGRhdGUoKSB7CiAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5yb3cuc3RhdGU7CgogICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcik7CiAgICAgIGlmIChzdGF0ZSAhPT0gJ2V4cGlyZWQnICYmIHRoaXMucm93LmV4cGlyZXNBdCkgewogICAgICAgIC8vIE5vdCBleHBpcmVkIGFuZCBoYXMgYW4gZXhwaXJ5IGRhdGUsIHNvIHNldCBhIHRpbWVyIHRvIHVwZGF0ZSB0aGUgc3RhdGUgb25jZSBpdHMgZXhwaXJlZAogICAgICAgIGNvbnN0IGV4cGlyeSA9IGRheSh0aGlzLnJvdy5leHBpcmVzQXQpOwogICAgICAgIGNvbnN0IG5vdyA9IGRheSgpOwogICAgICAgIGNvbnN0IHRpbWVUb0V4cGlyZSA9IGV4cGlyeS5kaWZmKG5vdyk7CgogICAgICAgIHRoaXMudGltZXIgPSBzYWZlU2V0VGltZW91dCh0aW1lVG9FeHBpcmUsIHRoaXMudXBkYXRlLCB0aGlzKTsKICAgICAgfQoKICAgICAgY29uc3Qgb3V0ID0ge307CiAgICAgIGNvbnN0IGNvbG9yID0gY29sb3JGb3JTdGF0ZShzdGF0ZSk7CgogICAgICBvdXQuc3RhdGVEaXNwbGF5ID0gc3RhdGVEaXNwbGF5KHN0YXRlKTsKICAgICAgb3V0LnN0YXRlQmFja2dyb3VuZCA9IGNvbG9yLnJlcGxhY2UoJ3RleHQtJywgJ2JnLScpOwogICAgICB0aGlzLnN0YXRlID0gb3V0OwoKICAgICAgcmV0dXJuIG91dDsKICAgIH0KICB9Cn07Cg=="},{"version":3,"sources":["LiveExpiryBadgeState.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"LiveExpiryBadgeState.vue","sourceRoot":"node_modules/@rancher/shell/components/formatter","sourcesContent":["<script>\nimport day from 'dayjs';\nimport { BadgeState } from '@components/BadgeState';\nimport { colorForState, stateDisplay } from '@shell/plugins/dashboard-store/resource-class';\nimport { safeSetTimeout } from '@shell/utils/time';\n\nexport default {\n  components: { BadgeState },\n\n  props: {\n    row: {\n      type:    Object,\n      default: null,\n    },\n  },\n\n  data() {\n    return { state: this.update() };\n  },\n\n  computed: {\n    stateValue() {\n      return this.state;\n    }\n  },\n\n  watch: {\n    row() {\n      this.update();\n    }\n  },\n\n  beforeDestroy() {\n    clearTimeout(this.timer);\n  },\n\n  methods: {\n    update() {\n      const state = this.row.state;\n\n      clearTimeout(this.timer);\n      if (state !== 'expired' && this.row.expiresAt) {\n        // Not expired and has an expiry date, so set a timer to update the state once its expired\n        const expiry = day(this.row.expiresAt);\n        const now = day();\n        const timeToExpire = expiry.diff(now);\n\n        this.timer = safeSetTimeout(timeToExpire, this.update, this);\n      }\n\n      const out = {};\n      const color = colorForState(state);\n\n      out.stateDisplay = stateDisplay(state);\n      out.stateBackground = color.replace('text-', 'bg-');\n      this.state = out;\n\n      return out;\n    }\n  }\n};\n</script>\n\n<template>\n  <BadgeState :value=\"stateValue\" />\n</template>\n"]}]}