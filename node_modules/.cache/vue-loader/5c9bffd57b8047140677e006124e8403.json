{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/detail/catalog.cattle.io.app.vue?vue&type=style&index=0&id=cfe8933a&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/detail/catalog.cattle.io.app.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5sYXRlc3Qtb3BlcmF0aW9uIGEgewogIGN1cnNvcjogcG9pbnRlcjsKfQo="},{"version":3,"sources":["catalog.cattle.io.app.vue"],"names":[],"mappings":";AAoKA;AACA;AACA","file":"catalog.cattle.io.app.vue","sourceRoot":"node_modules/@rancher/shell/detail","sourcesContent":["<script>\nimport YamlEditor from '@shell/components/YamlEditor';\nimport Loading from '@shell/components/Loading';\nimport Markdown from '@shell/components/Markdown';\nimport Tabbed from '@shell/components/Tabbed';\nimport Tab from '@shell/components/Tabbed/Tab';\nimport { Banner } from '@components/Banner';\nimport RelatedResources from '@shell/components/RelatedResources';\nimport jsyaml from 'js-yaml';\nimport merge from 'lodash/merge';\nimport { CATALOG } from '@shell/config/types';\nimport { sortBy } from '~shell/utils/sort';\n\nexport default {\n  name: 'DetailRelease',\n\n  components: {\n    Markdown, Tabbed, Tab, Loading, YamlEditor, Banner, RelatedResources\n  },\n\n  props: {\n    value: {\n      type:     Object,\n      required: true,\n    },\n  },\n\n  data() {\n    return { allOperations: [] };\n  },\n\n  async fetch() {\n    await this.$store.dispatch('catalog/load', { force: true, reset: true });\n\n    this.allOperations = await this.$store.dispatch('cluster/findAll', { type: CATALOG.OPERATION });\n  },\n\n  computed: {\n    hasNotes() {\n      return !!this.value?.spec?.info?.notes;\n    },\n\n    hasReadme() {\n      return !!this.value?.spec?.info?.readme;\n    },\n\n    valuesYaml() {\n      const combined = merge(merge({}, this.value?.spec?.chart?.values || {}), this.value?.spec?.values || {});\n\n      return jsyaml.dump(combined);\n    },\n\n    isBusy() {\n      if (this.value?.metadata?.state?.transitioning && this.value?.metadata?.state?.name === 'pending-install') {\n        return true;\n      }\n\n      return false;\n    },\n\n    filteredOperations() {\n      return this.allOperations.filter((operation) => {\n        if (operation.status?.releaseName === this.value.metadata.name &&\n            operation.status?.namespace === this.value.metadata.namespace) {\n          return true;\n        }\n      });\n    },\n\n    latestOperation() {\n      if (this.filteredOperations.length > 0) {\n        const sortedOperations = sortBy(Object.values(this.filteredOperations), ['createdAt', 'created', 'metadata.creationTimestamp'], true);\n\n        return sortedOperations[0];\n      }\n\n      return false;\n    },\n\n  },\n\n  methods: {\n    tabChanged({ tab }) {\n      window.scrollTop = 0;\n\n      this.selectedTabName = tab.name;\n\n      if ( tab.name === 'values-yaml' ) {\n        this.$nextTick(() => {\n          if ( this.$refs.yaml ) {\n            this.$refs.yaml.refresh();\n            this.$refs.yaml.focus();\n          }\n        });\n      }\n    },\n  },\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n  <div v-else>\n    <span\n      v-if=\"latestOperation\"\n      class=\"latest-operation\"\n    >\n      {{ t('catalog.app.section.lastOperation') }}: ( {{ latestOperation.status.action }} ) - <a @click=\"latestOperation.openLogs()\">  {{ t('catalog.app.section.openLogs') }}</a>\n    </span>\n\n    <Tabbed\n      class=\"mt-20\"\n      default-tab=\"resources\"\n      @changed=\"tabChanged($event)\"\n    >\n      <Tab\n        name=\"resources\"\n        :label=\"t('catalog.app.section.resources.label')\"\n        :weight=\"4\"\n      >\n        <Banner\n          v-if=\"isBusy\"\n          color=\"info\"\n          :label=\"t('catalog.app.section.resources.busy', { app: value.metadata.name })\"\n        />\n        <RelatedResources\n          v-else\n          :value=\"value\"\n          rel=\"helmresource\"\n        />\n      </Tab>\n      <Tab\n        name=\"values-yaml\"\n        :label=\"t('catalog.app.section.values')\"\n        :weight=\"3\"\n      >\n        <YamlEditor\n          ref=\"yaml\"\n          :scrolling=\"false\"\n          :value=\"valuesYaml\"\n          editor-mode=\"VIEW_CODE\"\n        />\n      </Tab>\n      <Tab\n        v-if=\"hasReadme\"\n        name=\"readme\"\n        :label=\"t('catalog.app.section.readme')\"\n        :weight=\"2\"\n      >\n        <Markdown v-model=\"value.spec.info.readme\" />\n      </Tab>\n      <Tab\n        v-if=\"hasNotes\"\n        name=\"notes\"\n        :label=\"t('catalog.app.section.notes')\"\n        :weight=\"1\"\n      >\n        <Markdown v-model=\"value.spec.info.notes\" />\n      </Tab>\n    </Tabbed>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.latest-operation a {\n  cursor: pointer;\n}\n</style>\n"]}]}