{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/list/fleet.cattle.io.cluster.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/list/fleet.cattle.io.cluster.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBGbGVldENsdXN0ZXJzIGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL2ZsZWV0L0ZsZWV0Q2x1c3RlcnMnOwppbXBvcnQgeyBGTEVFVCwgTUFOQUdFTUVOVCB9IGZyb20gJ0BzaGVsbC9jb25maWcvdHlwZXMnOwppbXBvcnQgeyBmaWx0ZXJPbmx5S3ViZXJuZXRlc0NsdXN0ZXJzIH0gZnJvbSAnQHNoZWxsL3V0aWxzL2NsdXN0ZXInOwppbXBvcnQgeyBCYW5uZXIgfSBmcm9tICdAY29tcG9uZW50cy9CYW5uZXInOwppbXBvcnQgUmVzb3VyY2VGZXRjaCBmcm9tICdAc2hlbGwvbWl4aW5zL3Jlc291cmNlLWZldGNoJzsKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAgICAgICAnTGlzdENsdXN0ZXInLAogIGNvbXBvbmVudHM6IHsgQmFubmVyLCBGbGVldENsdXN0ZXJzIH0sCiAgbWl4aW5zOiAgICAgW1Jlc291cmNlRmV0Y2hdLAogIHByb3BzOiAgICAgIHsKICAgIHJlc291cmNlOiB7CiAgICAgIHR5cGU6ICAgICBTdHJpbmcsCiAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgfSwKICAgIHNjaGVtYTogewogICAgICB0eXBlOiAgICAgT2JqZWN0LAogICAgICByZXF1aXJlZDogdHJ1ZSwKICAgIH0sCiAgICB1c2VRdWVyeVBhcmFtc0ZvclNpbXBsZUZpbHRlcmluZzogewogICAgICB0eXBlOiAgICBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfQogIH0sCgogIGFzeW5jIGZldGNoKCkgewogICAgdGhpcy4kaW5pdGlhbGl6ZUZldGNoRGF0YSh0aGlzLnJlc291cmNlKTsKCiAgICB0aGlzLiRmZXRjaFR5cGUoRkxFRVQuV09SS1NQQUNFKTsKICAgIGF3YWl0IHRoaXMuJGZldGNoVHlwZSh0aGlzLnJlc291cmNlKTsKICAgIHRoaXMuYWxsTWdtdCA9IGF3YWl0IHRoaXMuJGZldGNoVHlwZShNQU5BR0VNRU5ULkNMVVNURVIpOwogIH0sCgogIGRhdGEoKSB7CiAgICByZXR1cm4geyBhbGxNZ210OiBbXSB9OwogIH0sCgogIGNvbXB1dGVkOiB7CiAgICBhbGxDbHVzdGVycygpIHsKICAgICAgY29uc3Qgb3V0ID0gdGhpcy5yb3dzLnNsaWNlKCk7CgogICAgICBjb25zdCBrbm93biA9IHt9OwoKICAgICAgZm9yICggY29uc3QgYyBvZiBvdXQgKSB7CiAgICAgICAga25vd25bYy5tZXRhZGF0YS5uYW1lXSA9IHRydWU7CiAgICAgIH0KCiAgICAgIGZvciAoIGNvbnN0IGMgb2YgdGhpcy5hbGxNZ210ICkgewogICAgICAgIGlmICggIWtub3duW2MubWV0YWRhdGEubmFtZV0gKSB7CiAgICAgICAgICBvdXQucHVzaChjKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBvdXQ7CiAgICB9LAoKICAgIGZpbHRlcmVkUm93cygpIHsKICAgICAgcmV0dXJuIGZpbHRlck9ubHlLdWJlcm5ldGVzQ2x1c3RlcnModGhpcy5mbGVldENsdXN0ZXJzLCB0aGlzLiRzdG9yZSk7CiAgICB9LAoKICAgIGZsZWV0Q2x1c3RlcnMoKSB7CiAgICAgIHJldHVybiB0aGlzLmFsbENsdXN0ZXJzLmZpbHRlcigoYykgPT4gYy50eXBlID09PSBGTEVFVC5DTFVTVEVSKTsKICAgIH0sCgogICAgaGlkZGVuSGFydmVzdGVyQ291bnQoKSB7CiAgICAgIHJldHVybiB0aGlzLmZsZWV0Q2x1c3RlcnMubGVuZ3RoIC0gdGhpcy5maWx0ZXJlZFJvd3MubGVuZ3RoOwogICAgfSwKICB9LAogIC8vIG92ZXJyaWRlIHdpdGggcmVsZXZhbnQgaW5mbyBmb3IgdGhlIGxvYWRpbmcgaW5kaWNhdG9yIHNpbmNlIHRoaXMgZG9lc24ndCB1c2UgaXQncyBvd24gbWFzdGhlYWQKICAkbG9hZGluZ1Jlc291cmNlcygpIHsKICAgIHJldHVybiB7CiAgICAgIGxvYWRSZXNvdXJjZXM6ICAgICBbRkxFRVQuQ0xVU1RFUl0sCiAgICAgIGxvYWRJbmRldGVybWluYXRlOiB0cnVlLCAvLyByZXN1bHRzIGFyZSBmaWx0ZXJlZCBzbyB3ZSB3b3VsZG4ndCBnZXQgdGhlIGNvcnJlY3QgY291bnQgb24gaW5kaWNhdG9yLi4uCiAgICB9OwogIH0sCn07Cg=="},{"version":3,"sources":["fleet.cattle.io.cluster.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"fleet.cattle.io.cluster.vue","sourceRoot":"node_modules/@rancher/shell/list","sourcesContent":["<script>\nimport FleetClusters from '@shell/components/fleet/FleetClusters';\nimport { FLEET, MANAGEMENT } from '@shell/config/types';\nimport { filterOnlyKubernetesClusters } from '@shell/utils/cluster';\nimport { Banner } from '@components/Banner';\nimport ResourceFetch from '@shell/mixins/resource-fetch';\n\nexport default {\n  name:       'ListCluster',\n  components: { Banner, FleetClusters },\n  mixins:     [ResourceFetch],\n  props:      {\n    resource: {\n      type:     String,\n      required: true,\n    },\n    schema: {\n      type:     Object,\n      required: true,\n    },\n    useQueryParamsForSimpleFiltering: {\n      type:    Boolean,\n      default: false\n    }\n  },\n\n  async fetch() {\n    this.$initializeFetchData(this.resource);\n\n    this.$fetchType(FLEET.WORKSPACE);\n    await this.$fetchType(this.resource);\n    this.allMgmt = await this.$fetchType(MANAGEMENT.CLUSTER);\n  },\n\n  data() {\n    return { allMgmt: [] };\n  },\n\n  computed: {\n    allClusters() {\n      const out = this.rows.slice();\n\n      const known = {};\n\n      for ( const c of out ) {\n        known[c.metadata.name] = true;\n      }\n\n      for ( const c of this.allMgmt ) {\n        if ( !known[c.metadata.name] ) {\n          out.push(c);\n        }\n      }\n\n      return out;\n    },\n\n    filteredRows() {\n      return filterOnlyKubernetesClusters(this.fleetClusters, this.$store);\n    },\n\n    fleetClusters() {\n      return this.allClusters.filter((c) => c.type === FLEET.CLUSTER);\n    },\n\n    hiddenHarvesterCount() {\n      return this.fleetClusters.length - this.filteredRows.length;\n    },\n  },\n  // override with relevant info for the loading indicator since this doesn't use it's own masthead\n  $loadingResources() {\n    return {\n      loadResources:     [FLEET.CLUSTER],\n      loadIndeterminate: true, // results are filtered so we wouldn't get the correct count on indicator...\n    };\n  },\n};\n</script>\n\n<template>\n  <div>\n    <Banner\n      v-if=\"hiddenHarvesterCount\"\n      color=\"info\"\n      :label=\"t('fleet.clusters.harvester', {count: hiddenHarvesterCount} )\"\n    />\n    <FleetClusters\n      :rows=\"filteredRows\"\n      :schema=\"schema\"\n      :loading=\"loading\"\n      :use-query-params-for-simple-filtering=\"useQueryParamsForSimpleFiltering\"\n      :force-update-live-and-delayed=\"forceUpdateLiveAndDelayed\"\n    />\n  </div>\n</template>\n"]}]}