{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/persistentvolumeclaim.vue?vue&type=style&index=0&id=6145c40c&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/persistentvolumeclaim.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQouYWNjZXNzIHsNCiAgZGlzcGxheTogZmxleDsNCiAgZmxleC1kaXJlY3Rpb246IHJvdzsNCn0NCg=="},{"version":3,"sources":["persistentvolumeclaim.vue"],"names":[],"mappings":";AAoYA;AACA;AACA;AACA","file":"persistentvolumeclaim.vue","sourceRoot":"node_modules/@rancher/shell/edit","sourcesContent":["<script>\r\nimport { Checkbox } from '@components/Form/Checkbox';\r\nimport CreateEditView from '@shell/mixins/create-edit-view';\r\nimport CruResource from '@shell/components/CruResource';\r\nimport NameNsDescription from '@shell/components/form/NameNsDescription';\r\nimport Tab from '@shell/components/Tabbed/Tab';\r\nimport { RadioGroup } from '@components/Form/Radio';\r\nimport LabeledInput from '@components/Form/LabeledInput/LabeledInput.vue';\r\nimport LabeledSelect from '@shell/components/form/LabeledSelect';\r\nimport UnitInput from '@shell/components/form/UnitInput';\r\nimport uniq from 'lodash/uniq';\r\nimport { _CREATE, _EDIT, FOCUS, _VIEW } from '@shell/config/query-params';\r\nimport { STORAGE_CLASS, PV } from '@shell/config/types';\r\nimport StatusTable from '@shell/components/StatusTable';\r\nimport ResourceTabs from '@shell/components/form/ResourceTabs';\r\nimport Labels from '@shell/components/form/Labels';\r\nimport { Banner } from '@components/Banner';\r\nimport ResourceManager from '@shell/mixins/resource-manager';\r\n\r\nconst DEFAULT_STORAGE = '10Gi';\r\n\r\nexport default {\r\n  name: 'PersistentVolumeClaim',\r\n\r\n  components: {\r\n    Banner,\r\n    Checkbox,\r\n    CruResource,\r\n    LabeledInput,\r\n    LabeledSelect,\r\n    Labels,\r\n    NameNsDescription,\r\n    RadioGroup,\r\n    ResourceTabs,\r\n    StatusTable,\r\n    Tab,\r\n    UnitInput,\r\n  },\r\n\r\n  mixins: [CreateEditView, ResourceManager],\r\n  async fetch() {\r\n    const storageClasses = await this.$store.dispatch('cluster/findAll', { type: STORAGE_CLASS });\r\n\r\n    if (this.$store.getters['cluster/canList'](PV)) {\r\n      this.resourceManagerFetchSecondaryResources(this.secondaryResourceData);\r\n    }\r\n\r\n    this.storageClassOptions = storageClasses.map((s) => s.name).sort();\r\n    this.storageClassOptions.unshift(this.t('persistentVolumeClaim.useDefault'));\r\n\r\n    this.$set(this.value.spec, 'storageClassName', this.value.spec.storageClassName || this.storageClassOptions[0]);\r\n  },\r\n  data() {\r\n    const canListPersistentVolumes = this.$store.getters['cluster/canList'](PV);\r\n    const canListStorageClasses = this.$store.getters['cluster/canList'](STORAGE_CLASS);\r\n    const sourceOptions = [\r\n      {\r\n        label: this.t('persistentVolumeClaim.source.options.new'),\r\n        value: 'new'\r\n      },\r\n      {\r\n        label: this.t('persistentVolumeClaim.source.options.existing'),\r\n        value: 'existing'\r\n      }\r\n    ];\r\n\r\n    const defaultAccessModes = ['ReadWriteOnce'];\r\n\r\n    this.$set(this.value, 'spec', this.value.spec || {});\r\n    this.$set(this.value.spec, 'resources', this.value.spec.resources || {});\r\n    this.$set(this.value.spec.resources, 'requests', this.value.spec.resources.requests || {});\r\n    this.$set(this.value.spec.resources.requests, 'storage', this.value.spec.resources.requests.storage || DEFAULT_STORAGE);\r\n    if (this.realMode === _CREATE) {\r\n      this.$set(this.value.spec, 'accessModes', defaultAccessModes);\r\n    }\r\n\r\n    const defaultTab = this.$route.query[FOCUS] || null;\r\n\r\n    return {\r\n      secondaryResourceData:   this.secondaryResourceDataConfig(),\r\n      sourceOptions,\r\n      source:                  this.value.spec.volumeName ? sourceOptions[1].value : sourceOptions[0].value,\r\n      immutableMode:           this.realMode === _CREATE ? _CREATE : _VIEW,\r\n      persistentVolumeOptions: [],\r\n      persistentVolumes:       [],\r\n      storageClassOptions:     [],\r\n      defaultTab,\r\n      canListPersistentVolumes,\r\n      canListStorageClasses,\r\n    };\r\n  },\r\n  computed: {\r\n    readWriteOnce: {\r\n      get() {\r\n        return this.value.spec.accessModes.includes('ReadWriteOnce');\r\n      },\r\n      set(value) {\r\n        this.checkboxSetter('ReadWriteOnce', value);\r\n      }\r\n    },\r\n    readOnlyMany: {\r\n      get() {\r\n        return this.value.spec.accessModes.includes('ReadOnlyMany');\r\n      },\r\n      set(value) {\r\n        this.checkboxSetter('ReadOnlyMany', value);\r\n      }\r\n    },\r\n    readWriteMany: {\r\n      get() {\r\n        return this.value.spec.accessModes.includes('ReadWriteMany');\r\n      },\r\n      set(value) {\r\n        this.checkboxSetter('ReadWriteMany', value);\r\n      }\r\n    },\r\n    persistentVolume: {\r\n      get() {\r\n        return this.value.spec.volumeName;\r\n      },\r\n      set(value) {\r\n        const persistentVolume = this.persistentVolumes.find((pv) => pv.metadata.name === value);\r\n\r\n        this.$set(this.value.spec, 'storageClassName', '');\r\n\r\n        if (persistentVolume) {\r\n          this.$set(this.value.spec.resources.requests, 'storage', persistentVolume.spec.capacity?.storage);\r\n          if (persistentVolume.spec?.storageClassName) {\r\n            this.$set(this.value.spec, 'storageClassName', persistentVolume.spec?.storageClassName );\r\n          }\r\n        }\r\n\r\n        this.$set(this.value.spec, 'volumeName', value);\r\n      }\r\n    },\r\n    storageAmountMode() {\r\n      if (this.isCreate) {\r\n        return _CREATE;\r\n      } else if (this.isEdit && this.value.expandable && this.value.bound) {\r\n        return _EDIT;\r\n      }\r\n\r\n      return _VIEW;\r\n    }\r\n  },\r\n  created() {\r\n    this.registerBeforeHook(this.willSave, 'willSave');\r\n  },\r\n  mounted() {\r\n    const focus = this.$refs.volumeSize?.focus;\r\n\r\n    if (this.defaultTab === 'volumeclaim' && focus) {\r\n      setTimeout(() => focus());\r\n    }\r\n  },\r\n  methods: {\r\n    secondaryResourceDataConfig() {\r\n      return {\r\n        namespace: this.value?.metadata?.namespace || null,\r\n        data:      {\r\n          [PV]: {\r\n            applyTo: [\r\n              { var: 'persistentVolumes' },\r\n              {\r\n                var:         'persistentVolumeOptions',\r\n                parsingFunc: (data) => {\r\n                  return data\r\n                    .map((s) => {\r\n                      const status = s.status.phase === 'Available' ? '' : ` (${ s.status.phase })`;\r\n\r\n                      return {\r\n                        label: `${ s.metadata.name }${ status }`,\r\n                        value: s.metadata.name\r\n                      };\r\n                    })\r\n                    .sort((l, r) => l.label.localeCompare(r.label));\r\n                }\r\n              }\r\n            ]\r\n          },\r\n        }\r\n      };\r\n    },\r\n    checkboxSetter(key, value) {\r\n      if (value) {\r\n        this.value.spec.accessModes.push(key);\r\n        this.$set(this.value, 'accessModes', uniq(this.value.spec.accessModes));\r\n      } else {\r\n        const indexOf = this.value.spec.accessModes.indexOf(key);\r\n\r\n        if (indexOf >= 0) {\r\n          this.value.spec.accessModes.splice(indexOf, 1);\r\n        }\r\n      }\r\n    },\r\n    isPersistentVolumeSelectable(option) {\r\n      const persistentVolume = this.persistentVolumes.find((pv) => pv.metadata.name === option.value);\r\n\r\n      return persistentVolume.status.phase === 'Available';\r\n    },\r\n    updateDefaults(source) {\r\n      if (source === 'new') {\r\n        this.$set(this.value.spec.resources.requests, 'storage', DEFAULT_STORAGE);\r\n      }\r\n\r\n      this.$set(this, 'persistentVolume', null);\r\n    },\r\n    willSave() {\r\n      if (this.value.spec.storageClassName === this.t('persistentVolumeClaim.useDefault')) {\r\n        this.$delete(this.value.spec, 'storageClassName');\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <CruResource\r\n    :done-route=\"doneRoute\"\r\n    :mode=\"mode\"\r\n    :resource=\"value\"\r\n    :subtypes=\"[]\"\r\n    :validation-passed=\"true\"\r\n    :errors=\"errors\"\r\n    @error=\"e=>errors = e\"\r\n    @finish=\"save\"\r\n    @cancel=\"done\"\r\n  >\r\n    <NameNsDescription\r\n      :value=\"value\"\r\n      :mode=\"mode\"\r\n      :register-before-hook=\"registerBeforeHook\"\r\n      :namespaced=\"true\"\r\n    />\r\n\r\n    <ResourceTabs\r\n      v-model=\"value\"\r\n      :mode=\"mode\"\r\n      :side-tabs=\"true\"\r\n      :default-tab=\"defaultTab\"\r\n    >\r\n      <Tab\r\n        name=\"volumeclaim\"\r\n        :label=\"t('persistentVolumeClaim.volumeClaim.label')\"\r\n        :weight=\"4\"\r\n      >\r\n        <div class=\"row\">\r\n          <div class=\"col span-6\">\r\n            <RadioGroup\r\n              v-model=\"source\"\r\n              name=\"source\"\r\n              :mode=\"immutableMode\"\r\n              :label=\"t('persistentVolumeClaim.source.label')\"\r\n              :options=\"sourceOptions\"\r\n              @input=\"updateDefaults\"\r\n            />\r\n          </div>\r\n          <div class=\"col span-6\">\r\n            <div class=\"row\">\r\n              <div\r\n                v-if=\"source === 'new'\"\r\n                class=\"col span-12\"\r\n              >\r\n                <LabeledSelect\r\n                  v-if=\"canListStorageClasses\"\r\n                  v-model=\"value.spec.storageClassName\"\r\n                  :options=\"storageClassOptions\"\r\n                  :label=\"t('persistentVolumeClaim.volumeClaim.storageClass')\"\r\n                  :mode=\"immutableMode\"\r\n                />\r\n                <LabeledInput\r\n                  v-else\r\n                  v-model=\"value.spec.storageClassName\"\r\n                  :label=\"t('persistentVolumeClaim.volumeClaim.storageClass')\"\r\n                  :mode=\"immutableMode\"\r\n                  :tooltip=\"t('persistentVolumeClaim.volumeClaim.tooltips.noStorageClass')\"\r\n                />\r\n              </div>\r\n              <div\r\n                v-else\r\n                class=\"col span-12\"\r\n              >\r\n                <LabeledSelect\r\n                  v-if=\"canListPersistentVolumes\"\r\n                  v-model=\"persistentVolume\"\r\n                  :options=\"persistentVolumeOptions\"\r\n                  :label=\"t('persistentVolumeClaim.volumeClaim.persistentVolume')\"\r\n                  :selectable=\"isPersistentVolumeSelectable\"\r\n                  :mode=\"immutableMode\"\r\n                  :loading=\"isLoadingSecondaryResources\"\r\n                />\r\n                <LabeledInput\r\n                  v-else\r\n                  v-model=\"persistentVolume\"\r\n                  :label=\"t('persistentVolumeClaim.volumeClaim.persistentVolume')\"\r\n                  :mode=\"immutableMode\"\r\n                  :tooltip=\"t('persistentVolumeClaim.volumeClaim.tooltips.noPersistentVolume')\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col span-12 mt-10\">\r\n                <UnitInput\r\n                  ref=\"volumeSize\"\r\n                  v-model=\"value.spec.resources.requests.storage\"\r\n                  :label=\"t('persistentVolumeClaim.volumeClaim.requestStorage')\"\r\n                  :mode=\"storageAmountMode\"\r\n                  :input-exponent=\"3\"\r\n                  :output-modifier=\"true\"\r\n                  :increment=\"1024\"\r\n                  :min=\"1\"\r\n                  :required=\"true\"\r\n                />\r\n                <Banner\r\n                  v-if=\"isEdit && !value.expandable\"\r\n                  color=\"info\"\r\n                  class=\"mt-10\"\r\n                >\r\n                  {{ t('persistentVolumeClaim.expand.notSupported') }}\r\n                </Banner>\r\n                <Banner\r\n                  v-else-if=\"isEdit && !value.bound\"\r\n                  color=\"info\"\r\n                  class=\"mt-10\"\r\n                >\r\n                  {{ t('persistentVolumeClaim.expand.notBound') }}\r\n                </Banner>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Tab>\r\n      <Tab\r\n        name=\"customize\"\r\n        :label=\"t('persistentVolumeClaim.customize.label')\"\r\n        :weight=\"3\"\r\n      >\r\n        <div class=\"access\">\r\n          <h3>{{ t('persistentVolumeClaim.accessModes') }}</h3>\r\n          <span class=\"text-error\">*</span>\r\n        </div>\r\n        <div>\r\n          <Checkbox\r\n            v-model=\"readWriteOnce\"\r\n            :label=\"t('persistentVolumeClaim.customize.accessModes.readWriteOnce')\"\r\n            :mode=\"immutableMode\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <Checkbox\r\n            v-model=\"readOnlyMany\"\r\n            :label=\"t('persistentVolumeClaim.customize.accessModes.readOnlyMany')\"\r\n            :mode=\"immutableMode\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <Checkbox\r\n            v-model=\"readWriteMany\"\r\n            :label=\"t('persistentVolumeClaim.customize.accessModes.readWriteMany')\"\r\n            :mode=\"immutableMode\"\r\n          />\r\n        </div>\r\n      </Tab>\r\n      <Tab\r\n        v-if=\"isView\"\r\n        name=\"status\"\r\n        :label=\"t('persistentVolumeClaim.status.label')\"\r\n        :weight=\"2\"\r\n      >\r\n        <StatusTable :resource=\"value\" />\r\n      </Tab>\r\n      <Tab\r\n        name=\"labels-and-annotations\"\r\n        label-key=\"generic.labelsAndAnnotations\"\r\n        :weight=\"-1\"\r\n      >\r\n        <Labels\r\n          default-container-class=\"labels-and-annotations-container\"\r\n          :value=\"value\"\r\n          :mode=\"mode\"\r\n          :display-side-by-side=\"false\"\r\n        />\r\n      </Tab>\r\n    </ResourceTabs>\r\n  </CruResource>\r\n</template>\r\n\r\n<style lang='scss' scoped>\r\n.access {\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n</style>\r\n"]}]}