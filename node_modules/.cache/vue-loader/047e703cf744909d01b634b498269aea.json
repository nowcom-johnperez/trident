{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/form/Tolerations.vue?vue&type=style&index=0&id=1ca2b354&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/form/Tolerations.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci50b2xlcmF0aW9uc3sKICB3aWR0aDogMTAwJTsKfQoKLnJ1bGUsIC50b2xlcmF0aW9uLWhlYWRlcnN7CiAgZGlzcGxheTogZ3JpZDsKICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDIwJSAxMCUgMjAlIDE1JSAyMCUgMTUlOwogIGdyaWQtZ2FwOiAxMHB4OwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7Cn0KCi5ydWxlIHsKICBtYXJnaW4tYm90dG9tOiAyMHB4OwogIC5jb2wgewogICAgaGVpZ2h0OiAxMDAlOwogIH0KfQoKLnRvbGVyYXRpb24taGVhZGVycyBTUEFOIHsKICBjb2xvcjogdmFyKC0taW5wdXQtbGFiZWwpOwogIG1hcmdpbi1ib3R0b206IDEwcHg7Cn0KLnJlbW92ZSBCVVRUT04gewogIHBhZGRpbmc6IDBweDsKfQouaGVpZ2h0LWFkanVzdC1pbnB1dCB7CiAgbWluLWhlaWdodDogNDJweDsKfQo="},{"version":3,"sources":["Tolerations.vue"],"names":[],"mappings":";AA4RA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Tolerations.vue","sourceRoot":"node_modules/@rancher/shell/components/form","sourcesContent":["<script>\nimport { mapGetters } from 'vuex';\nimport { LabeledInput } from '@components/Form/LabeledInput';\nimport Select from '@shell/components/form/Select';\nimport UnitInput from '@shell/components/form/UnitInput';\nimport { _VIEW } from '@shell/config/query-params';\nimport { random32 } from '@shell/utils/string';\n\nexport default {\n  components: {\n    LabeledInput,\n    Select,\n    // SortableTable,\n    UnitInput\n  },\n  props: {\n    // pod tolerations array\n    value: {\n      type:    Array,\n      default: () => []\n    },\n\n    mode: {\n      type:    String,\n      default: 'edit'\n    }\n  },\n\n  data() {\n    const rules = [];\n\n    // on creation in agent configuration, the backend \"eats\"\n    // the empty \"effect\" string, which doesn't happen on edit\n    // just to make sure we populate it correcty, let's consider\n    // no prop \"effect\" as an empty string which means all\n    // https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#toleration-v1-core\n    if (this.value.length) {\n      this.value.forEach((v) => {\n        if (!Object.keys(v).includes('effect')) {\n          rules.push({\n            ...v,\n            effect: ''\n          });\n        } else {\n          rules.push(v);\n        }\n      });\n    }\n\n    return { rules };\n  },\n\n  computed: {\n    tableHeaders() {\n      return [\n        {\n          name:  'key',\n          label: this.t('workload.scheduling.tolerations.labelKey'),\n          value: 'key'\n        },\n        {\n          name:  'operator',\n          label: this.t('workload.scheduling.tolerations.operator'),\n          value: 'operator',\n          width: '10%'\n        },\n        {\n          name:  'value',\n          label: this.t('workload.scheduling.tolerations.value'),\n          value: 'value'\n        },\n        {\n          name:  'effect',\n          label: this.t('workload.scheduling.tolerations.effect'),\n          value: 'effect',\n          width: '20%'\n        },\n        {\n          name:  'seconds',\n          label: this.t('workload.scheduling.tolerations.tolerationSeconds'),\n          value: 'tolerationSeconds',\n          width: '20%'\n        },\n        {\n          name:  'remove',\n          width: '50'\n        }\n      ];\n    },\n    operatorOpts() {\n      return [\n        {\n          label: this.t('workload.scheduling.tolerations.operatorOptions.exists'),\n          value: 'Exists'\n        },\n        {\n          label: this.t('workload.scheduling.tolerations.operatorOptions.equal'),\n          value: 'Equal'\n        }\n      ];\n    },\n    effectOpts() {\n      return [\n        {\n          label: this.t('workload.scheduling.tolerations.effectOptions.all'),\n          value: ''\n        },\n        {\n          label: this.t('workload.scheduling.tolerations.effectOptions.noSchedule'),\n          value: 'NoSchedule'\n        },\n        {\n          label: this.t('workload.scheduling.tolerations.effectOptions.preferNoSchedule'),\n          value: 'PreferNoSchedule'\n        },\n        {\n          label: this.t('workload.scheduling.tolerations.effectOptions.noExecute'),\n          value: 'NoExecute'\n        }\n      ];\n    },\n\n    isView() {\n      return this.mode === _VIEW;\n    },\n    ...mapGetters({ t: 'i18n/t' })\n  },\n\n  methods: {\n    remove(row) {\n      const idx = this.rules.indexOf(row);\n\n      this.rules.splice(idx, 1);\n      this.update();\n    },\n\n    update() {\n      // let's delete the vKey prop as it's only poluting the data\n      const rules = this.rules.map((rule) => {\n        const newRule = { ...rule };\n\n        // prevent vKey from being sent as data\n        if (newRule.vKey) {\n          delete newRule.vKey;\n        }\n\n        // let's clear the value field if operator is Exists\n        if (newRule.operator === 'Exists' && newRule.value) {\n          newRule.value = null;\n        }\n\n        // remove effect from payload sent upstream, as it's empty\n        // it should be null, but the Select input doesn't seem to like it\n        // so we keep it as '' and sanitize it here\n        if (newRule.effect === '') {\n          delete newRule.effect;\n        }\n\n        return newRule;\n      });\n\n      this.$emit('input', rules);\n    },\n\n    addToleration() {\n      this.rules.push({ vKey: random32(), effect: '' });\n    },\n\n    updateEffect(neu, rule) {\n      if (neu !== 'NoExecute' && rule.tolerationSeconds) {\n        delete rule.tolerationSeconds;\n      }\n\n      this.update();\n    }\n  }\n\n};\n</script>\n\n<template>\n  <div class=\"tolerations\">\n    <div\n      v-if=\"rules.length\"\n      class=\"toleration-headers\"\n    >\n      <span>{{ t('workload.scheduling.tolerations.labelKey') }}</span>\n      <span>{{ t('workload.scheduling.tolerations.operator') }}</span>\n      <span>{{ t('workload.scheduling.tolerations.value') }}</span>\n      <span>{{ t('workload.scheduling.tolerations.effect') }}</span>\n      <span>{{ t('workload.scheduling.tolerations.tolerationSeconds') }}</span>\n      <span />\n    </div>\n    <div\n      v-for=\"(rule, index) in rules\"\n      :key=\"rule.vKey\"\n      class=\"rule\"\n    >\n      <div class=\"col\">\n        <LabeledInput\n          v-model=\"rule.key\"\n          :mode=\"mode\"\n          :data-testid=\"`toleration-key-index${ index }`\"\n          class=\"height-adjust-input\"\n          @input=\"update\"\n        />\n      </div>\n      <div class=\"col\">\n        <Select\n          id=\"operator\"\n          v-model=\"rule.operator\"\n          :options=\"operatorOpts\"\n          :mode=\"mode\"\n          :data-testid=\"`toleration-operator-index${ index }`\"\n          @input=\"update\"\n        />\n      </div>\n      <template v-if=\"rule.operator==='Exists'\">\n        <div class=\"col\">\n          <LabeledInput\n            value=\"n/a\"\n            :mode=\"mode\"\n            disabled\n            class=\"height-adjust-input\"\n          />\n        </div>\n      </template>\n      <template v-else>\n        <div class=\"col\">\n          <LabeledInput\n            v-model=\"rule.value\"\n            :mode=\"mode\"\n            :data-testid=\"`toleration-value-index${ index }`\"\n            class=\"height-adjust-input\"\n            @input=\"update\"\n          />\n        </div>\n      </template>\n      <div class=\"col\">\n        <Select\n          v-model=\"rule.effect\"\n          :options=\"effectOpts\"\n          :mode=\"mode\"\n          :data-testid=\"`toleration-effect-index${ index }`\"\n          @input=\"e=>updateEffect(e, rule)\"\n        />\n      </div>\n      <div class=\"col\">\n        <UnitInput\n          v-model=\"rule.tolerationSeconds\"\n          :disabled=\"rule.effect !== 'NoExecute'\"\n          :mode=\"mode\"\n          suffix=\"Seconds\"\n          :data-testid=\"`toleration-seconds-index${ index }`\"\n          class=\"height-adjust-input\"\n          @input=\"update\"\n        />\n      </div>\n      <div class=\"col remove\">\n        <button\n          v-if=\"!isView\"\n          type=\"button\"\n          class=\"btn role-link\"\n          :disabled=\"mode==='view'\"\n          :data-testid=\"`toleration-remove-index${ index }`\"\n          @click=\"remove(rule)\"\n        >\n          <t k=\"generic.remove\" />\n        </button>\n      </div>\n    </div>\n    <button\n      v-if=\"!isView\"\n      type=\"button\"\n      class=\"btn role-tertiary\"\n      data-testid=\"add-toleration-btn\"\n      @click=\"addToleration\"\n    >\n      <t k=\"workload.scheduling.tolerations.addToleration\" />\n    </button>\n  </div>\n</template>\n\n<style lang='scss' scoped>\n.tolerations{\n  width: 100%;\n}\n\n.rule, .toleration-headers{\n  display: grid;\n  grid-template-columns: 20% 10% 20% 15% 20% 15%;\n  grid-gap: 10px;\n  align-items: center;\n}\n\n.rule {\n  margin-bottom: 20px;\n  .col {\n    height: 100%;\n  }\n}\n\n.toleration-headers SPAN {\n  color: var(--input-label);\n  margin-bottom: 10px;\n}\n.remove BUTTON {\n  padding: 0px;\n}\n.height-adjust-input {\n  min-height: 42px;\n}\n</style>\n"]}]}