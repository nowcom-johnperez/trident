{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/workload/storage/index.vue?vue&type=style&index=0&id=2254e856&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/workload/storage/index.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci52b2x1bWUtc291cmNlIHsKICBwYWRkaW5nOiAyMHB4OwogIG1hcmdpbjogMjBweCAwcHggMjBweCAwcHg7CiAgcG9zaXRpb246IHJlbGF0aXZlOwoKICA6OnYtZGVlcCAuY29kZS1taXJyb3IgewogICAgLkNvZGVNaXJyb3IgewogICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS15YW1sLWVkaXRvci1iZyk7CiAgICAgICYgLkNvZGVNaXJyb3ItZ3V0dGVycyB7CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0teWFtbC1lZGl0b3ItYmcpOwogICAgICB9CiAgICB9CiAgfQp9CgoucmVtb3ZlLXZvbCB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogMTBweDsKICByaWdodDogMTBweDsKICBwYWRkaW5nOiAwcHg7Cn0KCi5hZGQtdm9sOmZvY3VzIHsKICBvdXRsaW5lOiBub25lOwogIGJveC1zaGFkb3c6IG5vbmU7Cn0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AAqTA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/@rancher/shell/edit/workload/storage","sourcesContent":["<script>\nimport ButtonDropdown from '@shell/components/ButtonDropdown';\nimport Mount from '@shell/edit/workload/storage/Mount';\nimport { _VIEW } from '@shell/config/query-params';\nimport CodeMirror from '@shell/components/CodeMirror';\nimport jsyaml from 'js-yaml';\nimport ArrayListGrouped from '@shell/components/form/ArrayListGrouped';\nimport { randomStr } from '@shell/utils/string';\n\nexport default {\n  name: 'Storage',\n\n  components: {\n    ArrayListGrouped, ButtonDropdown, Mount, CodeMirror\n  },\n\n  props: {\n    mode: {\n      type:    String,\n      default: 'create',\n    },\n\n    // pod spec\n    value: {\n      type:    Object,\n      default: () => {\n        return {};\n      },\n    },\n\n    namespace: {\n      type:    String,\n      default: null,\n    },\n\n    savePvcHookName: {\n      type:     String,\n      required: true,\n    },\n\n    // namespaced configmaps and secrets\n    configMaps: {\n      type:    Array,\n      default: () => [],\n    },\n\n    secrets: {\n      type:    Array,\n      default: () => [],\n    },\n    namespacedPvcs: {\n      type:    Array,\n      default: () => [],\n    },\n\n    registerBeforeHook: {\n      type:    Function,\n      default: null,\n    },\n    loading: {\n      default: false,\n      type:    Boolean\n    },\n  },\n\n  data() {\n    this.initializeStorage();\n\n    return {};\n  },\n\n  computed: {\n    isView() {\n      return this.mode === _VIEW;\n    },\n\n    /**\n     * Generated list of volumes\n     */\n    volumeTypeOptions() {\n      const excludedFiles = ['index', 'Mount', 'PVC', 'ContainerMountPaths'];\n      const defaultVolumeTypes = [\n        'csi',\n        'configMap',\n        'createPVC',\n        'persistentVolumeClaim'\n      ];\n      // Get all the custom volume types from the file names of this folder\n      const customVolumeTypes = require\n        .context('@shell/edit/workload/storage', false, /^.*\\.vue$/)\n        .keys()\n        .map((path) => path.replace(/(\\.\\/)|(.vue)/g, ''))\n        .filter((file) => !excludedFiles.includes(file));\n\n      return [\n        ...customVolumeTypes,\n        ...defaultVolumeTypes\n      ]\n        .sort()\n        .map((volumeType) => ({\n          label:  this.t(`workload.storage.subtypes.${ volumeType }`),\n          action: this.addVolume,\n          value:  volumeType,\n        }));\n    },\n\n    pvcNames() {\n      return this.namespacedPvcs.map((pvc) => pvc.metadata.name);\n    },\n  },\n\n  // watch: {\n  //   storageVolumes(neu, old) {\n  //     removeObjects(this.value.volumes, old);\n  //     addObjects(this.value.volumes, neu);\n  //     const names = neu.reduce((all, each) => {\n  //       all.push(each.name);\n\n  //       return all;\n  //     }, []);\n\n  //     this.container.volumeMounts = this.container.volumeMounts.filter(mount => names.includes(mount.name));\n  //   }\n  // },\n\n  methods: {\n    /**\n     * Initialize missing values for the container\n     */\n    initializeStorage() {\n      if (!this.value.volumes) {\n        this.$set(this.value, 'volumes', []);\n      }\n    },\n\n    /**\n     * Remove all mounts for given storage volume\n     */\n    removeVolume(volume) {\n      const removeName = volume.row.value.name;\n\n      this.value.volumes = this.value.volumes.filter(({ name }) => name !== removeName);\n    },\n\n    addVolume(type) {\n      const name = `vol-${ randomStr(5).toLowerCase() }`;\n\n      if (type === 'createPVC') {\n        this.value.volumes.push({\n          _type:                 'createPVC',\n          persistentVolumeClaim: {},\n          name,\n        });\n      } else if (type === 'csi') {\n        this.value.volumes.push({\n          _type: type,\n          csi:   { volumeAttributes: {} },\n          name,\n        });\n      } else if (type === 'emptyDir') {\n        this.value.volumes.push({\n          _type:    type,\n          emptyDir: { medium: '' },\n          name,\n        });\n      } else {\n        this.value.volumes.push({\n          _type:  type,\n          [type]: {},\n          name,\n        });\n      }\n\n      // this.container.volumeMounts.push({ name });\n    },\n\n    volumeType(vol) {\n      const type = Object.keys(vol).filter(\n        (key) => typeof vol[key] === 'object'\n      )[0];\n\n      return type;\n    },\n\n    // import component for volume type\n    getComponent(type) {\n      switch (type) {\n      case 'configMap':\n        return require(`@shell/edit/workload/storage/secret.vue`).default;\n      case 'createPVC':\n      case 'persistentVolumeClaim':\n        return require(`@shell/edit/workload/storage/persistentVolumeClaim/index.vue`)\n          .default;\n      case 'csi':\n        return require(`@shell/edit/workload/storage/csi/index.vue`).default;\n\n      default: {\n        let component;\n\n        try {\n          component = require(`@shell/edit/workload/storage/${ type }.vue`).default;\n        } catch {}\n\n        return component;\n      }\n      }\n    },\n\n    headerFor(type) {\n      if (\n        this.$store.getters['i18n/exists'](`workload.storage.subtypes.${ type }`)\n      ) {\n        return this.t(`workload.storage.subtypes.${ type }`);\n      } else {\n        return type;\n      }\n    },\n\n    yamlDisplay(volume) {\n      try {\n        return jsyaml.dump(volume);\n      } catch {\n        return volume;\n      }\n    },\n\n    openPopover() {\n      const button = this.$refs.buttonDropdown;\n\n      try {\n        button.togglePopover();\n      } catch (e) {}\n    },\n\n    // codemirror needs to refresh if it is in a tab that wasn't visible on page load\n    refresh() {\n      if (this.$refs.cm) {\n        this.$refs.cm.forEach((component) => component.refresh());\n      }\n    },\n\n    removePvcForm(hookName) {\n      this.$emit('removePvcForm', hookName);\n    }\n  },\n};\n</script>\n\n<template>\n  <div>\n    <!-- Storage Volumes -->\n    <ArrayListGrouped\n      :key=\"value.volumes.length\"\n      v-model=\"value.volumes\"\n      :mode=\"mode\"\n      @remove=\"removeVolume\"\n    >\n      <!-- Custom/default storage volume form -->\n      <template #default=\"props\">\n        <h3>{{ headerFor(volumeType(props.row.value)) }}</h3>\n        <div class=\"bordered-section\">\n          <component\n            :is=\"getComponent(volumeType(props.row.value))\"\n            v-if=\"getComponent(volumeType(props.row.value))\"\n            :value=\"props.row.value\"\n            :pod-spec=\"value\"\n            :mode=\"mode\"\n            :namespace=\"namespace\"\n            :secrets=\"secrets\"\n            :config-maps=\"configMaps\"\n            :pvcs=\"pvcNames\"\n            :register-before-hook=\"registerBeforeHook\"\n            :save-pvc-hook-name=\"savePvcHookName\"\n            :loading=\"loading\"\n            @removePvcForm=\"removePvcForm\"\n          />\n          <div v-else-if=\"isView\">\n            <CodeMirror\n              ref=\"cm\"\n              :value=\"yamlDisplay(props.row.value)\"\n              :options=\"{ readOnly: true, cursorBlinkRate: -1 }\"\n            />\n          </div>\n        </div>\n\n        <!-- Mount point list to be mapped to volume\n        <Mount\n          :container=\"container\"\n          :name=\"props.row.value.name\"\n          :mode=\"mode\"\n        /> -->\n      </template>\n\n      <!-- Add Storage Volume -->\n      <template #add>\n        <ButtonDropdown\n          v-if=\"!isView\"\n          id=\"select-volume\"\n          :button-label=\"t('workload.storage.addVolume')\"\n          :dropdown-options=\"volumeTypeOptions\"\n          size=\"sm\"\n          @click-action=\"e=>addVolume(e.value)\"\n        />\n      </template>\n    </ArrayListGrouped>\n  </div>\n</template>\n\n<style lang='scss' scoped>\n.volume-source {\n  padding: 20px;\n  margin: 20px 0px 20px 0px;\n  position: relative;\n\n  ::v-deep .code-mirror {\n    .CodeMirror {\n      background-color: var(--yaml-editor-bg);\n      & .CodeMirror-gutters {\n        background-color: var(--yaml-editor-bg);\n      }\n    }\n  }\n}\n\n.remove-vol {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  padding: 0px;\n}\n\n.add-vol:focus {\n  outline: none;\n  box-shadow: none;\n}\n</style>\n"]}]}