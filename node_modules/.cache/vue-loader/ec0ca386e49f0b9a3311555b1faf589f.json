{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/pages/c/_cluster/uiplugins/CatalogList/index.vue?vue&type=style&index=0&id=6793ae20&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/pages/c/_cluster/uiplugins/CatalogList/index.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5zdWItcm93IHsKICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdmFyKC0tc29ydGFibGUtdGFibGUtdG9wLWRpdmlkZXIpOwogIHBhZGRpbmctbGVmdDogMXJlbTsKICBwYWRkaW5nLXJpZ2h0OiAxcmVtOwp9CgouY29sIHsKICBkaXNwbGF5OiBmbGV4OwogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CgogIHNlY3Rpb24gewogICAgbWFyZ2luLWJvdHRvbTogMS41cmVtOwogIH0KCiAgLnRpdGxlIHsKICAgIG1hcmdpbi1ib3R0b206IDAuNXJlbTsKICB9Cn0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AAmJA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/@rancher/shell/pages/c/_cluster/uiplugins/CatalogList","sourcesContent":["<script>\nimport { mapGetters } from 'vuex';\nimport isEmpty from 'lodash/isEmpty';\n\nimport ResourceManager from '@shell/mixins/resource-manager';\nimport { SERVICE, WORKLOAD_TYPES } from '@shell/config/types';\nimport { UI_PLUGIN_LABELS, UI_PLUGIN_NAMESPACE } from '@shell/config/uiplugins';\nimport { UI_PLUGIN_CATALOG } from '@shell/config/table-headers';\n\nimport ActionMenu from '@shell/components/ActionMenu';\nimport ResourceTable from '@shell/components/ResourceTable';\n\nexport default {\n  name: 'CatalogList',\n\n  components: { ActionMenu, ResourceTable },\n\n  mixins: [ResourceManager],\n\n  data() {\n    const actions = [\n      {\n        action:  'showCatalogUninstallDialog',\n        label:   this.t('plugins.uninstall.label'),\n        icon:    'icon icon-trash',\n        enabled: true,\n      }\n    ];\n\n    return {\n      actions,\n      catalogHeaders:    UI_PLUGIN_CATALOG,\n      menuTargetElement: null,\n      menuTargetEvent:   null,\n      menuOpen:          false,\n    };\n  },\n\n  computed: {\n    ...mapGetters({ allRepos: 'catalog/repos' }),\n\n    namespacedDeployments() {\n      return this.$store.getters['management/all'](WORKLOAD_TYPES.DEPLOYMENT).filter((dep) => dep.metadata.namespace === UI_PLUGIN_NAMESPACE);\n    },\n\n    namespacedServices() {\n      return this.$store.getters['management/all'](SERVICE).filter((svc) => svc.metadata.namespace === UI_PLUGIN_NAMESPACE);\n    },\n\n    catalogRows() {\n      const rows = [];\n\n      if ( !isEmpty(this.namespacedDeployments) ) {\n        this.namespacedDeployments.forEach((deploy) => {\n          const resources = [this.namespacedServices, this.allRepos];\n          const deployName = deploy.metadata?.labels?.[UI_PLUGIN_LABELS.CATALOG_IMAGE];\n\n          if ( deployName ) {\n            const out = {\n              name:    deployName,\n              state:   deploy.metadata?.state?.name,\n              image:   deploy.spec?.template?.spec?.containers[0]?.image,\n              service: null,\n              repo:    null\n            };\n            const keys = ['service', 'repo'];\n\n            resources.forEach((resource, i) => {\n              out[keys[i]] = resource?.filter((item) => item.metadata?.labels?.[UI_PLUGIN_LABELS.CATALOG_IMAGE] === deployName)[0];\n            });\n\n            rows.push(out);\n          }\n        });\n      }\n\n      return rows;\n    }\n  },\n\n  methods: {\n    setMenu(event) {\n      this.menuOpen = !!event;\n\n      if (event) {\n        this.menuTargetElement = this.$refs.catalogActions;\n        this.menuTargetEvent = event;\n      } else {\n        this.menuTargetElement = undefined;\n        this.menuTargetEvent = undefined;\n      }\n    }\n  }\n};\n</script>\n\n<template>\n  <div class=\"row mt-20\">\n    <div class=\"col span-12\">\n      <ResourceTable\n        :headers=\"catalogHeaders\"\n        :rows=\"catalogRows\"\n        :paging=\"true\"\n        :rows-per-page=\"10\"\n        :table-actions=\"false\"\n        key-field=\"name\"\n      >\n        <template #header-left>\n          <div>\n            <button\n              class=\"btn bg-primary mr-10\"\n              type=\"button\"\n              aria-haspopup=\"dialog\"\n              data-testid=\"extensions-catalog-load-dialog\"\n              @click=\"$emit('showCatalogLoadDialog')\"\n            >\n              {{ t('plugins.manageCatalog.imageLoad.load') }}\n            </button>\n          </div>\n        </template>\n        <template #row-actions=\"{row}\">\n          <button\n            ref=\"catalogActions\"\n            aria-haspopup=\"true\"\n            type=\"button\"\n            class=\"btn btn-sm role-multi-action actions\"\n            data-testid=\"extensions-page-catalog-row-menu\"\n            @click=\"setMenu\"\n          >\n            <i class=\"icon icon-actions\" />\n          </button>\n          <ActionMenu\n            :custom-actions=\"actions\"\n            :open=\"menuOpen\"\n            :use-custom-target-element=\"true\"\n            :custom-target-element=\"menuTargetElement\"\n            :custom-target-event=\"menuTargetEvent\"\n            @close=\"setMenu(false)\"\n            @showCatalogUninstallDialog=\"e => $emit('showCatalogUninstallDialog', row, e.event)\"\n          />\n        </template>\n      </ResourceTable>\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.sub-row {\n  border-bottom: 1px solid var(--sortable-table-top-divider);\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n\n.col {\n  display: flex;\n  flex-direction: column;\n\n  section {\n    margin-bottom: 1.5rem;\n  }\n\n  .title {\n    margin-bottom: 0.5rem;\n  }\n}\n</style>\n"]}]}