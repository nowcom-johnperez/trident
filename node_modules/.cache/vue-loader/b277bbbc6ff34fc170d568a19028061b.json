{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/pages/c/_cluster/uiplugins/RemoveUIPlugins.vue?vue&type=style&index=0&id=3e348bee&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/pages/c/_cluster/uiplugins/RemoveUIPlugins.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5lbmFibGUtcGx1Z2luLXN1cHBvcnQgewogIGZvbnQtc2l6ZTogMTRweDsKICBtYXJnaW4tdG9wOiAyMHB4Owp9CgoucGx1Z2luLXNldHVwLWVycm9yIHsKICBmb250LXNpemU6IDE0cHg7CiAgY29sb3I6IHZhcigtLWVycm9yKTsKICBtYXJnaW46IDEwcHggMCAwIDA7Cn0KCi5jaGVja2JveC1pbmZvIHsKICBtYXJnaW4tbGVmdDogMjBweDsKICBvcGFjaXR5OiAwLjc7Cn0K"},{"version":3,"sources":["RemoveUIPlugins.vue"],"names":[],"mappings":";AAyOA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"RemoveUIPlugins.vue","sourceRoot":"node_modules/@rancher/shell/pages/c/_cluster/uiplugins","sourcesContent":["<script>\nimport { mapGetters } from 'vuex';\nimport { CATALOG, UI_PLUGIN } from '@shell/config/types';\nimport Dialog from '@shell/components/Dialog.vue';\nimport Checkbox from '@components/Form/Checkbox/Checkbox.vue';\nimport {\n  UI_PLUGIN_NAMESPACE,\n  UI_PLUGIN_CHARTS,\n  UI_PLUGIN_OPERATOR_CRD_CHART_NAME,\n  UI_PLUGINS_REPO_NAME,\n  UI_PLUGINS_REPO_URL,\n  UI_PLUGINS_REPO_BRANCH,\n  UI_PLUGINS_PARTNERS_REPO_NAME,\n  UI_PLUGINS_PARTNERS_REPO_URL,\n  UI_PLUGINS_PARTNERS_REPO_BRANCH,\n} from '@shell/config/uiplugins';\n\nexport default {\n  components: {\n    Checkbox,\n    Dialog,\n  },\n\n  async fetch() {\n    if (this.$store.getters['management/schemaFor'](CATALOG.CLUSTER_REPO)) {\n      // we need to force the request, so that we know at all times if what's the status of the offical and partners repos (installed or not)\n      await this.$store.dispatch('management/findAll', { type: CATALOG.CLUSTER_REPO, opt: { force: true } });\n    }\n\n    if (this.$store.getters['management/schemaFor'](UI_PLUGIN)) {\n      const plugins = await this.$store.dispatch('management/findAll', { type: UI_PLUGIN });\n\n      // Are there any plugins installed?\n      this.hasPluginsInstalled = (plugins || []).length > 0;\n      this.removeCRD = !this.hasPluginsInstalled;\n    }\n  },\n\n  data() {\n    return {\n      errors:      [],\n      removeRepos: {\n        official: true,\n        partners: true\n      },\n      reposInfo: {\n        official: {\n          name:   UI_PLUGINS_REPO_NAME,\n          url:    UI_PLUGINS_REPO_URL,\n          branch: UI_PLUGINS_REPO_BRANCH,\n        },\n        partners: {\n          name:   UI_PLUGINS_PARTNERS_REPO_NAME,\n          url:    UI_PLUGINS_PARTNERS_REPO_URL,\n          branch: UI_PLUGINS_PARTNERS_REPO_BRANCH,\n        }\n      },\n      removeCRD:           true,\n      hasPluginsInstalled: false,\n    };\n  },\n\n  computed: {\n    ...mapGetters({ repos: 'catalog/repos' }),\n    officialRepo() {\n      const repo = this.repos.find((r) => r.urlDisplay === UI_PLUGINS_REPO_URL);\n\n      return repo?.id ? repo : undefined;\n    },\n    partnersRepo() {\n      const repo = this.repos.find((r) => r.urlDisplay === UI_PLUGINS_PARTNERS_REPO_URL);\n\n      return repo?.id ? repo : undefined;\n    }\n  },\n\n  methods: {\n    async removeChart(name) {\n      const apps = await this.$store.dispatch('management/findAll', { type: CATALOG.APP });\n      const found = apps.find((app) => {\n        return app.namespace === UI_PLUGIN_NAMESPACE && app.name === name;\n      });\n\n      if (found) {\n        return found.remove();\n      }\n\n      // Return rejected promise - could not find the required chart\n      return Promise.reject(new Error(`Could not find chart ยง{ name }`));\n    },\n\n    showDialog() {\n      this.removeRepos = {\n        official: !!this.officialRepo,\n        partners: !!this.partnersRepo,\n      };\n      this.$modal.show('confirm-uiplugins-remove');\n    },\n\n    async doRemove(btnCb) {\n      this.errors = [];\n\n      // Remove the charts in the reverse order that we install them in\n      let uninstall = [...UI_PLUGIN_CHARTS].reverse();\n\n      if (!this.removeCRD) {\n        // User does not want to uninstall the CRD, so remove the chart\n        uninstall = uninstall.filter((chart) => chart !== UI_PLUGIN_OPERATOR_CRD_CHART_NAME);\n      }\n\n      for (let i = 0; i < uninstall.length; i++) {\n        const chart = uninstall[i];\n\n        try {\n          await this.removeChart(chart);\n        } catch (e) {\n          this.errors.push(e.message);\n        }\n      }\n\n      // remove extension repos that have been picked\n      const promises = [];\n\n      for (const key in this.removeRepos) {\n        if (this.removeRepos[key] && this[`${ key }Repo`]) {\n          promises.push(this[`${ key }Repo`].remove());\n        }\n      }\n\n      const res = await Promise.allSettled(promises);\n\n      res.forEach((result) => {\n        if (result.status === 'rejected') {\n          console.error(result.reason); // eslint-disable-line no-console\n\n          this.errors.push(result.reason);\n        }\n      });\n\n      // forget PLUGINS type from store as it's not needed\n      this.$store.dispatch('management/forgetType', UI_PLUGIN);\n\n      await new Promise((resolve) => setTimeout(resolve, 5000));\n\n      this.$emit('done');\n\n      btnCb(true);\n    },\n  }\n};\n</script>\n<template>\n  <Dialog\n    name=\"confirm-uiplugins-remove\"\n    :title=\"t('plugins.setup.remove.title')\"\n    mode=\"disable\"\n    data-testid=\"disable-ext-modal\"\n    @okay=\"doRemove\"\n  >\n    <template>\n      <p class=\"mb-20\">\n        {{ t('plugins.setup.remove.prompt') }}\n      </p>\n      <!-- Official repo -->\n      <div\n        class=\"mb-15\"\n      >\n        <Checkbox\n          v-model=\"removeRepos.official\"\n          :primary=\"true\"\n          :disabled=\"!officialRepo\"\n          label-key=\"plugins.setup.remove.registry.official.title\"\n          data-testid=\"disable-ext-modal-remove-official-repo\"\n        />\n        <div\n          v-if=\"!officialRepo\"\n          class=\"checkbox-info\"\n        >\n          ({{ t('plugins.setup.uninstalled') }})\n        </div>\n      </div>\n      <!-- Partners repo -->\n      <div\n        class=\"mb-15\"\n      >\n        <Checkbox\n          v-model=\"removeRepos.partners\"\n          :primary=\"true\"\n          :disabled=\"!partnersRepo\"\n          label-key=\"plugins.setup.remove.registry.partners.title\"\n          data-testid=\"disable-ext-modal-remove-partners-repo\"\n        />\n        <div\n          v-if=\"!partnersRepo\"\n          class=\"checkbox-info\"\n        >\n          ({{ t('plugins.setup.uninstalled') }})\n        </div>\n      </div>\n      <div\n        v-if=\"hasPluginsInstalled\"\n        class=\"mt-20\"\n      >\n        <Checkbox\n          v-model=\"removeCRD\"\n          :primary=\"true\"\n          label-key=\"plugins.setup.remove.crd.title\"\n        />\n        <div class=\"checkbox-info\">\n          {{ t('plugins.setup.remove.crd.prompt') }}\n        </div>\n      </div>\n    </template>\n  </Dialog>\n</template>\n<style lang=\"scss\" scoped>\n  .enable-plugin-support {\n    font-size: 14px;\n    margin-top: 20px;\n  }\n\n  .plugin-setup-error {\n    font-size: 14px;\n    color: var(--error);\n    margin: 10px 0 0 0;\n  }\n\n  .checkbox-info {\n    margin-left: 20px;\n    opacity: 0.7;\n  }\n</style>\n"]}]}