{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/form/UnitInput.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/form/UnitInput.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCB7IHBhcnNlU2ksIGZvcm1hdFNpLCBVTklUUywgRlJBQ1RJT05BTCB9IGZyb20gJ0BzaGVsbC91dGlscy91bml0cyc7CmltcG9ydCB7IExhYmVsZWRJbnB1dCB9IGZyb20gJ0Bjb21wb25lbnRzL0Zvcm0vTGFiZWxlZElucHV0JzsKaW1wb3J0IHsgX0VESVQgfSBmcm9tICdAc2hlbGwvY29uZmlnL3F1ZXJ5LXBhcmFtcyc7CgpleHBvcnQgZGVmYXVsdCB7CiAgY29tcG9uZW50czogeyBMYWJlbGVkSW5wdXQgfSwKCiAgcHJvcHM6IHsKICAgIC8qKgogICAgICogQ29udmVydCBvdXRwdXQgdG8gc3RyaW5nCiAgICAgKiBPdXRwdXQgd2lsbCBhbHNvIGJlIGEgc3RyaW5nIHJlZ2FyZGxlc3Mgb2YgdGhpcyBwcm9wIGlmIG91dHB1dE1vZGlmaWVyID0gdHJ1ZQogICAgICovCiAgICBvdXRwdXRBczogewogICAgICB0eXBlOiAgICBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICdudW1iZXInLAogICAgfSwKCiAgICAvKioKICAgICAqIEFwcGVuZCBleHBvbmVudGlhbCBtb2RpZmllciBpbiBvdXRwdXQsIGVnICIxMjNNaSIKICAgICAqIElmIHRoaXMgaXMgZmFsc2Ugd2hpbGUgaW5wdXRFeHBvbmVudCBpcyB0cnVlLCB0aGUgb3V0cHV0IHZhbCB3aWxsIGJlIGNvbnZlcnRlZCB0byBiYXNlIHVuaXRzCiAgICAgKiBlZyB1c2VyIGlzIHZpZXdzIGluIHRlcm1zIG9mIE1pQiBidXQgaW50ZWdlciB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byBCIGFyZSBhY3R1YWxseSBlbWl0dGVkCiAgICAgKi8KICAgIG91dHB1dE1vZGlmaWVyOiB7CiAgICAgIHR5cGU6ICAgIEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAoKICAgIC8qKgogICAgICogU2V0IG1vZGlmaWVyIG9uIGJhc2UgdW5pdCAtIHBvc2l0aXZlIHZhbHMgbWFwIHRvIFVOSVRTIGFycmF5LCBuZWdhdGl2ZSB0byBGUkFDVElPTkFMCiAgICAgKiBTdHJpbmcgaW5wdXQgdmFsdWVzIHdpdGggU0kgbm90YXRpb24gd2lsbCBiZSBjb252ZXJ0ZWQgdG8gdGhpcyBtZWFzdXJlbWVudCB1bml0LAogICAgICogZWcgIjFHaSIgd2lsbCBiZWNvbWUgIjEwMjRNaSIgaWYgdGhpcyBpcyBzZXQgdG8gMgogICAgICogVU5JVFMgPSBbJycsICdLJywgJ00nLCAnRycsICdUJywgJ1AnLCAnRScsICdaJywgJ1knXTsKICAgICAqIEZSQUNUSU9OQUwgPSBbJycsICdtJywgJ3UnLCAnbicsICdwJywgJ2YnLCAnYScsICd6JywgJ3knXTsKICAgICAqLwogICAgaW5wdXRFeHBvbmVudDogewogICAgICB0eXBlOiAgICBOdW1iZXIsCiAgICAgIGRlZmF1bHQ6IDAsCiAgICB9LAoKICAgIC8qKgogICAgICogQ29tYmluZXMgd2l0aCBpbnB1dEV4cG9uZW50IHRvIG1ha2UgZGlzcGxheWVkIHVuaXQuCiAgICAgKiBVc2UgJ3N1ZmZpeCcgaWYgdGhlIGlucHV0J3MgdW5pdHMgYXJlIHN0cmljdGx5IGZvciBkaXNwbGF5CiAgICAgKi8KICAgIGJhc2VVbml0OiB7CiAgICAgIHR5cGU6ICAgIFN0cmluZywKICAgICAgZGVmYXVsdDogJ0InLAogICAgfSwKCiAgICAvKioKICAgICAqIEhpZGUgYXJyb3dzIG9uIG51bWJlciBpbnB1dCB3aGVuIGl0IG92ZXJsYXBzIHdpdGggdGhlIHVuaXQKICAgICAqLwogICAgaGlkZUFycm93czogewogICAgICB0eXBlOiAgICBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfSwKCiAgICAvKioKICAgICAqIElmIHNldCB0byAxMDI0LCBiaW5hcnkgbW9kaWZpZXIgd2lsbCBiZSB1c2VkIGVnIE1pQiBpbnN0ZWFkIG9mIE1CCiAgICAgKi8KICAgIGluY3JlbWVudDogewogICAgICB0eXBlOiAgICBOdW1iZXIsCiAgICAgIGRlZmF1bHQ6IDEwMDAsCiAgICB9LAoKICAgIC8qKgogICAgICogSWdub3JlIGJhc2VVbml0IGFuZCBpbnB1dEV4cG9uZW50IGluIGZhdm9yIG9mIGEgZGlzcGxheS1vbmx5IHN1ZmZpeAogICAgICogZGlzcGxheS9lbWl0IGludGVnZXJzIHdpdGhvdXQgU0kgY29udmVyc2lvbgogICAgICovCiAgICBzdWZmaXg6IHsKICAgICAgdHlwZTogICAgU3RyaW5nLAogICAgICBkZWZhdWx0OiBudWxsLAogICAgfSwKCiAgICAvKioKICAgICAqIExhYmVsZWRJbnB1dCBwcm9wcwogICAgICovCiAgICBtb2RlOiB7CiAgICAgIHR5cGU6ICAgIFN0cmluZywKICAgICAgZGVmYXVsdDogX0VESVQKICAgIH0sCgogICAgdmFsdWU6IHsKICAgICAgdHlwZTogICAgW051bWJlciwgU3RyaW5nXSwKICAgICAgZGVmYXVsdDogbnVsbAogICAgfSwKCiAgICBsYWJlbDogewogICAgICB0eXBlOiAgICBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6IG51bGwKICAgIH0sCgogICAgbGFiZWxLZXk6IHsKICAgICAgdHlwZTogICAgU3RyaW5nLAogICAgICBkZWZhdWx0OiBudWxsCiAgICB9LAoKICAgIHRvb2x0aXA6IHsKICAgICAgdHlwZTogICAgW1N0cmluZywgT2JqZWN0XSwKICAgICAgZGVmYXVsdDogbnVsbAogICAgfSwKCiAgICB0b29sdGlwS2V5OiB7CiAgICAgIHR5cGU6ICAgIFN0cmluZywKICAgICAgZGVmYXVsdDogbnVsbAogICAgfSwKCiAgICByZXF1aXJlZDogewogICAgICB0eXBlOiAgICBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZSwKICAgIH0sCgogICAgbWluOiB7CiAgICAgIHR5cGU6ICAgIFtOdW1iZXIsIFN0cmluZ10sCiAgICAgIGRlZmF1bHQ6IDAKICAgIH0sCgogICAgcGxhY2Vob2xkZXI6IHsKICAgICAgdHlwZTogICAgW1N0cmluZywgTnVtYmVyXSwKICAgICAgZGVmYXVsdDogJycKICAgIH0sCgogICAgLyoqCiAgICAgKiBPcHRpb25hbGx5IGRlbGF5IG9uIGlucHV0IHdoaWxlIHR5cGluZwogICAgICovCiAgICBkZWxheTogewogICAgICB0eXBlOiAgICBOdW1iZXIsCiAgICAgIGRlZmF1bHQ6IDAKICAgIH0KICB9LAoKICBjb21wdXRlZDogewogICAgdW5pdCgpIHsKICAgICAgbGV0IG91dDsKCiAgICAgIGlmICggdGhpcy5pbnB1dEV4cG9uZW50ID49IDAgKSB7CiAgICAgICAgb3V0ID0gVU5JVFNbdGhpcy5pbnB1dEV4cG9uZW50XTsKICAgICAgfSBlbHNlIHsKICAgICAgICBvdXQgPSBGUkFDVElPTkFMWy0xICogdGhpcy5pbnB1dEV4cG9uZW50XTsKICAgICAgfQogICAgICBpZiAodGhpcy5pbmNyZW1lbnQgPT09IDEwMjQgJiYgb3V0KSB7CiAgICAgICAgb3V0ICs9ICdpJzsKICAgICAgfQoKICAgICAgcmV0dXJuIG91dDsKICAgIH0sCgogICAgLyoqCiAgICAgKiBQYXJzZSBzdHJpbmcgd2l0aCB1bml0IG1vZGlmaWVyIHRvIGJhc2UgdW5pdCBlZyAiMW0iIC0+IDAuMDAxCiAgICAgKi8KICAgIHBhcnNlZFZhbHVlKCkgewogICAgICByZXR1cm4gdHlwZW9mIHRoaXMudmFsdWUgPT09ICdzdHJpbmcnID8gcGFyc2VTaSh0aGlzLnZhbHVlKSA6IHRoaXMudmFsdWU7CiAgICB9LAoKICAgIC8qKgogICAgICogQ29udmVydCBpbnRlZ2VyIHZhbHVlCiAgICAgKi8KICAgIGRpc3BsYXlWYWx1ZSgpIHsKICAgICAgbGV0IGRpc3BsYXlWYWx1ZSA9ICcnOwoKICAgICAgaWYgKCB0aGlzLnBhcnNlZFZhbHVlIHx8IHRoaXMucGFyc2VkVmFsdWUgPT09IDApIHsKICAgICAgICBkaXNwbGF5VmFsdWUgPSBmb3JtYXRTaSh0aGlzLnBhcnNlZFZhbHVlLCB7CiAgICAgICAgICBpbmNyZW1lbnQ6ICAgdGhpcy5pbmNyZW1lbnQsCiAgICAgICAgICBhZGRTdWZmaXg6ICAgZmFsc2UsCiAgICAgICAgICBtYXhFeHBvbmVudDogdGhpcy5pbnB1dEV4cG9uZW50LAogICAgICAgICAgbWluRXhwb25lbnQ6IHRoaXMuaW5wdXRFeHBvbmVudCwKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgcmV0dXJuIGRpc3BsYXlWYWx1ZSA7CiAgICB9LAoKICAgIC8qKgogICAgICogQ29uZGl0aW9uYWxseSBkaXNwbGF5IHZhbHVlIHdpdGggdW5pdCBvciBTSSBzdWZmaXgKICAgICAqLwogICAgZGlzcGxheVVuaXQoKSB7CiAgICAgIGlmICh0aGlzLnN1ZmZpeCkgewogICAgICAgIHJldHVybiB0aGlzLnN1ZmZpeDsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMudW5pdCArIHRoaXMuYmFzZVVuaXQ7CiAgICB9CiAgfSwKCiAgbWV0aG9kczogewogICAgZm9jdXMoKSB7CiAgICAgIGNvbnN0IGNvbXAgPSB0aGlzLiRyZWZzLnZhbHVlOwoKICAgICAgaWYgKGNvbXApIHsKICAgICAgICBjb21wLmZvY3VzKCk7CiAgICAgIH0KICAgIH0sCgogICAgdXBkYXRlKGlucHV0VmFsdWUpIHsKICAgICAgbGV0IG91dCA9IGlucHV0VmFsdWUgPT09ICcnID8gbnVsbCA6IGlucHV0VmFsdWU7CgogICAgICBpZiAodGhpcy5vdXRwdXRNb2RpZmllcikgewogICAgICAgIG91dCA9IG91dCA9PT0gbnVsbCA/IG51bGwgOiBgJHsgaW5wdXRWYWx1ZSB9JHsgdGhpcy51bml0IH1gOwogICAgICB9IGVsc2UgaWYgKCB0aGlzLm91dHB1dEFzID09PSAnc3RyaW5nJyApIHsKICAgICAgICBvdXQgPSBvdXQgPT09IG51bGwgPyAnJyA6IGAkeyBpbnB1dFZhbHVlIH1gOwogICAgICB9IGVsc2UgaWYgKG91dCkgewogICAgICAgIG91dCA9IHRoaXMudW5pdCA/IHBhcnNlU2koYCR7IG91dCB9JHsgdGhpcy51bml0IH1gKSA6IHBhcnNlSW50KG91dCk7CiAgICAgIH0KCiAgICAgIHRoaXMuJGVtaXQoJ2lucHV0Jywgb3V0KTsKICAgIH0sCiAgfQp9Owo="},{"version":3,"sources":["UnitInput.vue"],"names":[],"mappingsfile":"UnitInput.vue","sourceRoot":"node_modules/@rancher/shell/components/form","sourcesContent":["<script>\nimport { parseSi, formatSi, UNITS, FRACTIONAL } from '@shell/utils/units';\nimport { LabeledInput } from '@components/Form/LabeledInput';\nimport { _EDIT } from '@shell/config/query-params';\n\nexport default {\n  components: { LabeledInput },\n\n  props: {\n    /**\n     * Convert output to string\n     * Output will also be a string regardless of this prop if outputModifier = true\n     */\n    outputAs: {\n      type:    String,\n      default: 'number',\n    },\n\n    /**\n     * Append exponential modifier in output, eg \"123Mi\"\n     * If this is false while inputExponent is true, the output val will be converted to base units\n     * eg user is views in terms of MiB but integer values corresponding to B are actually emitted\n     */\n    outputModifier: {\n      type:    Boolean,\n      default: false\n    },\n\n    /**\n     * Set modifier on base unit - positive vals map to UNITS array, negative to FRACTIONAL\n     * String input values with SI notation will be converted to this measurement unit,\n     * eg \"1Gi\" will become \"1024Mi\" if this is set to 2\n     * UNITS = ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];\n     * FRACTIONAL = ['', 'm', 'u', 'n', 'p', 'f', 'a', 'z', 'y'];\n     */\n    inputExponent: {\n      type:    Number,\n      default: 0,\n    },\n\n    /**\n     * Combines with inputExponent to make displayed unit.\n     * Use 'suffix' if the input's units are strictly for display\n     */\n    baseUnit: {\n      type:    String,\n      default: 'B',\n    },\n\n    /**\n     * Hide arrows on number input when it overlaps with the unit\n     */\n    hideArrows: {\n      type:    Boolean,\n      default: false\n    },\n\n    /**\n     * If set to 1024, binary modifier will be used eg MiB instead of MB\n     */\n    increment: {\n      type:    Number,\n      default: 1000,\n    },\n\n    /**\n     * Ignore baseUnit and inputExponent in favor of a display-only suffix\n     * display/emit integers without SI conversion\n     */\n    suffix: {\n      type:    String,\n      default: null,\n    },\n\n    /**\n     * LabeledInput props\n     */\n    mode: {\n      type:    String,\n      default: _EDIT\n    },\n\n    value: {\n      type:    [Number, String],\n      default: null\n    },\n\n    label: {\n      type:    String,\n      default: null\n    },\n\n    labelKey: {\n      type:    String,\n      default: null\n    },\n\n    tooltip: {\n      type:    [String, Object],\n      default: null\n    },\n\n    tooltipKey: {\n      type:    String,\n      default: null\n    },\n\n    required: {\n      type:    Boolean,\n      default: false,\n    },\n\n    min: {\n      type:    [Number, String],\n      default: 0\n    },\n\n    placeholder: {\n      type:    [String, Number],\n      default: ''\n    },\n\n    /**\n     * Optionally delay on input while typing\n     */\n    delay: {\n      type:    Number,\n      default: 0\n    }\n  },\n\n  computed: {\n    unit() {\n      let out;\n\n      if ( this.inputExponent >= 0 ) {\n        out = UNITS[this.inputExponent];\n      } else {\n        out = FRACTIONAL[-1 * this.inputExponent];\n      }\n      if (this.increment === 1024 && out) {\n        out += 'i';\n      }\n\n      return out;\n    },\n\n    /**\n     * Parse string with unit modifier to base unit eg \"1m\" -> 0.001\n     */\n    parsedValue() {\n      return typeof this.value === 'string' ? parseSi(this.value) : this.value;\n    },\n\n    /**\n     * Convert integer value\n     */\n    displayValue() {\n      let displayValue = '';\n\n      if ( this.parsedValue || this.parsedValue === 0) {\n        displayValue = formatSi(this.parsedValue, {\n          increment:   this.increment,\n          addSuffix:   false,\n          maxExponent: this.inputExponent,\n          minExponent: this.inputExponent,\n        });\n      }\n\n      return displayValue ;\n    },\n\n    /**\n     * Conditionally display value with unit or SI suffix\n     */\n    displayUnit() {\n      if (this.suffix) {\n        return this.suffix;\n      }\n\n      return this.unit + this.baseUnit;\n    }\n  },\n\n  methods: {\n    focus() {\n      const comp = this.$refs.value;\n\n      if (comp) {\n        comp.focus();\n      }\n    },\n\n    update(inputValue) {\n      let out = inputValue === '' ? null : inputValue;\n\n      if (this.outputModifier) {\n        out = out === null ? null : `${ inputValue }${ this.unit }`;\n      } else if ( this.outputAs === 'string' ) {\n        out = out === null ? '' : `${ inputValue }`;\n      } else if (out) {\n        out = this.unit ? parseSi(`${ out }${ this.unit }`) : parseInt(out);\n      }\n\n      this.$emit('input', out);\n    },\n  }\n};\n</script>\n\n<template>\n  <LabeledInput\n    ref=\"value\"\n    :value=\"displayValue\"\n    v-bind=\"$attrs\"\n    type=\"number\"\n    :min=\"min\"\n    :mode=\"mode\"\n    :label=\"label\"\n    :delay=\"delay\"\n    :label-key=\"labelKey\"\n    :tooltip=\"tooltip\"\n    :tooltip-key=\"tooltipKey\"\n    :required=\"required\"\n    :placeholder=\"placeholder\"\n    :hide-arrows=\"hideArrows\"\n    @change=\"update($event.target.value)\"\n    @blur=\"update($event.target.value)\"\n  >\n    <template #suffix>\n      <div\n        v-if=\"displayUnit\"\n        class=\"addon\"\n        :class=\"{'with-tooltip': tooltip || tooltipKey}\"\n      >\n        {{ displayUnit }}\n      </div>\n    </template>\n  </LabeledInput>\n</template>\n\n<style lang=\"scss\" scoped>\n  .addon.with-tooltip {\n    position: relative;\n    right: 30px;\n  }\n</style>\n"]}]}