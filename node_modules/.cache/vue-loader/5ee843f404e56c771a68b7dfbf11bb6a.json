{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/ProgressBarMulti.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/ProgressBarMulti.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCB7IHNvcnRCeSB9IGZyb20gJ0BzaGVsbC91dGlscy9zb3J0JzsKaW1wb3J0IHsgZ2V0IH0gZnJvbSAnQHNoZWxsL3V0aWxzL29iamVjdCc7CgpleHBvcnQgZGVmYXVsdCB7CiAgcHJvcHM6IHsKICAgIHZhbHVlczogewogICAgICB0eXBlOiAgICAgQXJyYXksCiAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgfSwKCiAgICBjb2xvcktleTogewogICAgICB0eXBlOiAgICBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICdjb2xvcicsCiAgICB9LAogICAgbGFiZWxLZXk6IHsKICAgICAgdHlwZTogICAgU3RyaW5nLAogICAgICBkZWZhdWx0OiAnbGFiZWwnLAogICAgfSwKICAgIHZhbHVlS2V5OiB7CiAgICAgIHR5cGU6ICAgIFN0cmluZywKICAgICAgZGVmYXVsdDogJ3ZhbHVlJywKICAgIH0sCgogICAgbWluOiB7CiAgICAgIHR5cGU6ICAgIE51bWJlciwKICAgICAgZGVmYXVsdDogMAogICAgfSwKICAgIG1heDogewogICAgICB0eXBlOiAgICBOdW1iZXIsCiAgICAgIGRlZmF1bHQ6IG51bGwsCiAgICB9LAogICAgbWluUGVyY2VudDogewogICAgICB0eXBlOiAgICBOdW1iZXIsCiAgICAgIGRlZmF1bHQ6IDUsCiAgICB9LAogICAgc2hvd1plcm9zOiB7CiAgICAgIHR5cGU6ICAgIEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlLAogICAgfQogIH0sCgogIGNvbXB1dGVkOiB7CiAgICBwaWVjZXMoKSB7CiAgICAgIGNvbnN0IG91dCA9IFtdOwoKICAgICAgZm9yICggY29uc3Qgb2JqIG9mIHRoaXMudmFsdWVzICkgewogICAgICAgIGNvbnN0IGNvbG9yID0gZ2V0KG9iaiwgdGhpcy5jb2xvcktleSk7CiAgICAgICAgY29uc3QgbGFiZWwgPSBnZXQob2JqLCB0aGlzLmxhYmVsS2V5KTsKICAgICAgICBjb25zdCB2YWx1ZSA9IGdldChvYmosIHRoaXMudmFsdWVLZXkpOwoKICAgICAgICBpZiAoIHZhbHVlID09PSAwICYmICF0aGlzLnNob3daZXJvcykgewogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQoKICAgICAgICBvdXQucHVzaCh7CiAgICAgICAgICBjb2xvciwKICAgICAgICAgIGxhYmVsLAogICAgICAgICAgdmFsdWUsCiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIGNvbnN0IG1pblBlcmNlbnQgPSB0aGlzLm1pblBlcmNlbnQgfHwgMDsKICAgICAgY29uc3QgbWluID0gdGhpcy5taW4gfHwgMDsKICAgICAgbGV0IG1heCA9IHRoaXMubWF4OwogICAgICBsZXQgc3VtID0gMDsKCiAgICAgIGlmICggIXRoaXMubWF4ICkgewogICAgICAgIG1heCA9IDEwMDsKICAgICAgICBpZiAoIG91dC5sZW5ndGggKSB7CiAgICAgICAgICBtYXggPSBvdXQubWFwKCh4KSA9PiB4LnZhbHVlKS5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGZvciAoIGNvbnN0IG9iaiBvZiBvdXQgKSB7CiAgICAgICAgY29uc3QgcGVyY2VudCA9IE1hdGgubWF4KG1pblBlcmNlbnQsIHRvUGVyY2VudChvYmoudmFsdWUsIG1pbiwgbWF4KSk7CgogICAgICAgIG9iai5wZXJjZW50ID0gcGVyY2VudDsKICAgICAgICBzdW0gKz0gcGVyY2VudDsKICAgICAgfQoKICAgICAgLy8gSWYgdGhlIHN1bSBpcyBiaWdnZXIgdGhhbiAxMDAlLCB0YWtlIGl0IG91dCBvZiB0aGUgYmlnZ2VzdCBwaWVjZQogICAgICBpZiAoIHN1bSA+IDEwMCApIHsKICAgICAgICBzb3J0Qnkob3V0LCAncGVyY2VudCcsIHRydWUpWzBdLnBlcmNlbnQgLT0gc3VtIC0gMTAwOwogICAgICB9CgogICAgICBmb3IgKCBjb25zdCBvYmogb2Ygb3V0ICkgewogICAgICAgIG9iai5zdHlsZSA9IGB3aWR0aDogJHsgb2JqLnBlcmNlbnQgfSVgOwogICAgICB9CgogICAgICByZXR1cm4gb3V0LmZpbHRlcigob2JqKSA9PiBvYmoucGVyY2VudCk7CiAgICB9LAogIH0KfTsKCmZ1bmN0aW9uIHRvUGVyY2VudCh2YWx1ZSwgbWluLCBtYXgpIHsKICB2YWx1ZSA9IE1hdGgubWF4KG1pbiwgTWF0aC5taW4obWF4LCB2YWx1ZSkpOwogIGxldCBwZXIgPSB2YWx1ZSAvIChtYXggLSBtaW4pICogMTAwOyAvLyBQZXJjZW50IDAtMTAwCgogIHBlciA9IE1hdGguZmxvb3IocGVyICogMTAwKSAvIDEwMDsgLy8gUm91bmQgdG8gMiBkZWNpbWFsIHBsYWNlcwoKICByZXR1cm4gcGVyOwp9Cgo="},{"version":3,"sources":["ProgressBarMulti.vue"],"names":[],"mappings":";AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA","file":"ProgressBarMulti.vue","sourceRoot":"node_modules/@rancher/shell/components","sourcesContent":["<script>\nimport { sortBy } from '@shell/utils/sort';\nimport { get } from '@shell/utils/object';\n\nexport default {\n  props: {\n    values: {\n      type:     Array,\n      required: true,\n    },\n\n    colorKey: {\n      type:    String,\n      default: 'color',\n    },\n    labelKey: {\n      type:    String,\n      default: 'label',\n    },\n    valueKey: {\n      type:    String,\n      default: 'value',\n    },\n\n    min: {\n      type:    Number,\n      default: 0\n    },\n    max: {\n      type:    Number,\n      default: null,\n    },\n    minPercent: {\n      type:    Number,\n      default: 5,\n    },\n    showZeros: {\n      type:    Boolean,\n      default: false,\n    }\n  },\n\n  computed: {\n    pieces() {\n      const out = [];\n\n      for ( const obj of this.values ) {\n        const color = get(obj, this.colorKey);\n        const label = get(obj, this.labelKey);\n        const value = get(obj, this.valueKey);\n\n        if ( value === 0 && !this.showZeros) {\n          continue;\n        }\n\n        out.push({\n          color,\n          label,\n          value,\n        });\n      }\n\n      const minPercent = this.minPercent || 0;\n      const min = this.min || 0;\n      let max = this.max;\n      let sum = 0;\n\n      if ( !this.max ) {\n        max = 100;\n        if ( out.length ) {\n          max = out.map((x) => x.value).reduce((a, b) => a + b);\n        }\n      }\n\n      for ( const obj of out ) {\n        const percent = Math.max(minPercent, toPercent(obj.value, min, max));\n\n        obj.percent = percent;\n        sum += percent;\n      }\n\n      // If the sum is bigger than 100%, take it out of the biggest piece\n      if ( sum > 100 ) {\n        sortBy(out, 'percent', true)[0].percent -= sum - 100;\n      }\n\n      for ( const obj of out ) {\n        obj.style = `width: ${ obj.percent }%`;\n      }\n\n      return out.filter((obj) => obj.percent);\n    },\n  }\n};\n\nfunction toPercent(value, min, max) {\n  value = Math.max(min, Math.min(max, value));\n  let per = value / (max - min) * 100; // Percent 0-100\n\n  per = Math.floor(per * 100) / 100; // Round to 2 decimal places\n\n  return per;\n}\n\n</script>\n\n<template>\n  <div\n    v-trim-whitespace\n    :class=\"{progress: true, multi: pieces.length > 1}\"\n  >\n    <div\n      v-for=\"(piece, idx) of pieces\"\n      :key=\"idx\"\n      v-trim-whitespace\n      :class=\"{'piece': true, [piece.color]: true}\"\n      :style=\"piece.style\"\n    />\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n  $progress-divider-width: 1px;\n  $progress-border-radius: 90px;\n  $progress-height:        10px;\n  $progress-width:         100px;\n\n  .progress {\n    display: block;\n    border-radius: $progress-border-radius;\n    background-color: var(--progress-bg);\n    height: $progress-height;\n    width: $progress-width;\n\n    .piece {\n      display: inline-block;\n      vertical-align: top;\n      height: $progress-height;\n      border-radius: 0;\n      border-right: $progress-divider-width solid var(--progress-divider);\n      vertical-align: top;\n\n      &:first-child {\n        border-top-left-radius: $progress-border-radius;\n        border-bottom-left-radius: $progress-border-radius;\n      }\n\n      &:last-child {\n        border-top-right-radius: $progress-border-radius;\n        border-bottom-right-radius: $progress-border-radius;\n        border-right: 0;\n      }\n    }\n  }\n\n  .piece.bg-success:only-child {\n    opacity: 0.5;\n  }\n</style>\n"]}]}