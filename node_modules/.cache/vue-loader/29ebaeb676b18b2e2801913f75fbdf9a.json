{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/chart/monitoring/ClusterSelector.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/chart/monitoring/ClusterSelector.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBpc0VtcHR5IGZyb20gJ2xvZGFzaC9pc0VtcHR5JzsKaW1wb3J0IExhYmVsZWRTZWxlY3QgZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvZm9ybS9MYWJlbGVkU2VsZWN0JzsKaW1wb3J0IHsgbWFwR2V0dGVycyB9IGZyb20gJ3Z1ZXgnOwppbXBvcnQgeyBmaW5kQnkgfSBmcm9tICdAc2hlbGwvdXRpbHMvYXJyYXknOwppbXBvcnQgc29ydEJ5IGZyb20gJ2xvZGFzaC9zb3J0QnknOwoKY29uc3QgTUFOQUdFRF9DT05GSUdfS0VZUyA9IFsKICAna3ViZUNvbnRyb2xsZXJNYW5hZ2VyJywKICAna3ViZVNjaGVkdWxlcicsCiAgJ2t1YmVFdGNkJywKICAna3ViZVByb3h5JywKXTsKCmNvbnN0IE9USEVSX0NPTkZJR19LRVlTID0gWwogICdrdWJlQ29udHJvbGxlck1hbmFnZXInLAogICdrdWJlU2NoZWR1bGVyJywKICAna3ViZUV0Y2QnLAogICdrdWJlUHJveHknLApdOwoKY29uc3QgQ0xVU1RFUl9UWVBFUyA9IFsKICB7CiAgICBncm91cDogICAgICAnbWFuYWdlZCcsCiAgICBpZDogICAgICAgICAnYWtzJywKICAgIGxhYmVsOiAgICAgICdjbHVzdGVyLnByb3ZpZGVyLmF6dXJlYWtzJywKICAgIGNvbmZpZ0tleXM6IE1BTkFHRURfQ09ORklHX0tFWVMsCiAgfSwKICB7CiAgICBncm91cDogICAgICAnbWFuYWdlZCcsCiAgICBpZDogICAgICAgICAnZWtzJywKICAgIGxhYmVsOiAgICAgICdjbHVzdGVyLnByb3ZpZGVyLmFtYXpvbmVrcycsCiAgICBjb25maWdLZXlzOiBNQU5BR0VEX0NPTkZJR19LRVlTLAogIH0sCiAgewogICAgZ3JvdXA6ICAgICAgJ21hbmFnZWQnLAogICAgaWQ6ICAgICAgICAgJ2drZScsCiAgICBsYWJlbDogICAgICAnY2x1c3Rlci5wcm92aWRlci5nb29nbGVna2UnLAogICAgY29uZmlnS2V5czogTUFOQUdFRF9DT05GSUdfS0VZUywKICB9LAogIHsKICAgIGdyb3VwOiAgICAgICdrM3MnLAogICAgaWQ6ICAgICAgICAgJ2szcycsCiAgICBsYWJlbDogICAgICAnY2x1c3Rlci5wcm92aWRlci5rM3MnLAogICAgY29uZmlnS2V5czogWydrM3NDb250cm9sbGVyTWFuYWdlcicsICdrM3NTY2hlZHVsZXInLCAnazNzUHJveHknLCAnazNzU2VydmVyJ10sCiAgfSwKICB7CiAgICBncm91cDogICAgICAna3ViZWFkbScsCiAgICBpZDogICAgICAgICAna3ViZWFkbScsCiAgICBsYWJlbDogICAgICAnY2x1c3Rlci5wcm92aWRlci5rdWJlQWRtaW4nLAogICAgY29uZmlnS2V5czogWwogICAgICAna3ViZUFkbUNvbnRyb2xsZXJNYW5hZ2VyJywKICAgICAgJ2t1YmVBZG1TY2hlZHVsZXInLAogICAgICAna3ViZUFkbVByb3h5JywKICAgICAgJ2t1YmVBZG1FdGNkJywKICAgIF0sCiAgfSwKICB7CiAgICBncm91cDogICAgICAnb3RoZXInLAogICAgaWQ6ICAgICAgICAgJ290aGVyJywKICAgIGxhYmVsOiAgICAgICdjbHVzdGVyLnByb3ZpZGVyLm90aGVyJywKICAgIGNvbmZpZ0tleXM6IE9USEVSX0NPTkZJR19LRVlTLAogIH0sCiAgewogICAgZ3JvdXA6ICAgICAgJ3JrZScsCiAgICBpZDogICAgICAgICAncmtlJywKICAgIGxhYmVsOiAgICAgICdjbHVzdGVyLnByb3ZpZGVyLnJrZScsCiAgICBjb25maWdLZXlzOiBbJ3JrZUNvbnRyb2xsZXJNYW5hZ2VyJywgJ3JrZVNjaGVkdWxlcicsICdya2VQcm94eScsICdya2VFdGNkJ10sCiAgfSwKICB7CiAgICBncm91cDogICAgICAncmtlJywKICAgIGlkOiAgICAgICAgICdya2UyJywgLy8gcmtlIGZlZGVyYWwKICAgIGxhYmVsOiAgICAgICdjbHVzdGVyLnByb3ZpZGVyLnJrZTInLAogICAgY29uZmlnS2V5czogWwogICAgICAncmtlMkNvbnRyb2xsZXJNYW5hZ2VyJywKICAgICAgJ3JrZTJTY2hlZHVsZXInLAogICAgICAncmtlMlByb3h5JywKICAgICAgJ3JrZTJFdGNkJywKICAgIF0sCiAgfSwKICB7CiAgICBncm91cDogICAgICAncmtlJywKICAgIGlkOiAgICAgICAgICdya2Uud2luZG93cycsCiAgICBsYWJlbDogICAgICAnY2x1c3Rlci5wcm92aWRlci5ya2VXaW5kb3dzJywKICAgIGNvbmZpZ0tleXM6IFsncmtlQ29udHJvbGxlck1hbmFnZXInLCAncmtlU2NoZWR1bGVyJywgJ3JrZVByb3h5JywgJ3JrZUV0Y2QnXSwKICB9LApdOwoKZXhwb3J0IGRlZmF1bHQgewogIGNvbXBvbmVudHM6IHsgTGFiZWxlZFNlbGVjdCB9LAogIHByb3BzOiAgICAgIHsKICAgIHZhbHVlOiB7CiAgICAgIHR5cGU6ICAgIE9iamVjdCwKICAgICAgZGVmYXVsdDogKCkgPT4gewogICAgICAgIHJldHVybiB7fTsKICAgICAgfSwKICAgIH0sCiAgfSwKCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGNsdXN0ZXJUeXBlOiAgbnVsbCwKICAgICAgY2x1c3RlclR5cGVzOiBzb3J0QnkoQ0xVU1RFUl9UWVBFUywgJ2lkJyksCiAgICB9OwogIH0sCgogIGNvbXB1dGVkOiB7CiAgICAuLi5tYXBHZXR0ZXJzKFsnY3VycmVudENsdXN0ZXInXSksCiAgICBwcm92aWRlcigpIHsKICAgICAgcmV0dXJuIHRoaXMuY3VycmVudENsdXN0ZXIuc3RhdHVzLnByb3ZpZGVyLnRvTG93ZXJDYXNlKCk7CiAgICB9LAogIH0sCgogIHdhdGNoOiB7CiAgICAvLyBUaGlzIG1ldGhvZCBpcyBub3QgdGhhdCBkaXNzaW1pbGFyIHRvIHBlcnNpc3RlbnRTdG9yYWdlVHlwZSBpbiBHcmFmYW5hIGNvbmZpZwogICAgLy8gVGhlIHJlYXNvbiBmb3IgdGhlIGRpdmVyZ2VuY2UgaXMgdGhhdCBHcmFmYW5hIGhhcyBhIHN1YmtleSBvbiB0aGUgY2hhcnQKICAgIC8vIHdoZXJlIHRoZXNlIGtleXMgYXJlIGF0IHRoZSByb290IG9mIHRoZSBjaGFydC4gVnVlIGNvbXBsYWlucyBhYm91dCBjYWxsaW5nCiAgICAvLyB0aGlzLiRzZXQodGhpcywgJ3ZhbHVlJywgb2JqKSBhcyB3ZSBuZWVkIHRvIGRvIGhlcmUgdG8gcmVzZXQgdGhlIHZhbHVlcyBpbiBidWxrLgogICAgLy8gU28gcmF0aGVyIHRoYW4gY2FsbCBlYWNoIHNldCBvbiBlYWNoIGxpbmUgaW5kaXZpZHVhbGx5IEkgZ2l2ZSB5b3UgdGhpcy4KICAgIGNsdXN0ZXJUeXBlKGNsdXN0ZXJUeXBlLCBvbGRDbHVzdGVyVHlwZSkgewogICAgICBpZiAoaXNFbXB0eShjbHVzdGVyVHlwZSkpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmICghaXNFbXB0eShvbGRDbHVzdGVyVHlwZSkpIHsKICAgICAgICBjb25zdCB7IGNvbmZpZ0tleXM6IG9sZENvbmZpZ0tleXMgfSA9IGZpbmRCeSgKICAgICAgICAgIHRoaXMuY2x1c3RlclR5cGVzLAogICAgICAgICAgJ2lkJywKICAgICAgICAgIG9sZENsdXN0ZXJUeXBlLmlkCiAgICAgICAgKTsKCiAgICAgICAgaWYgKG9sZENsdXN0ZXJUeXBlLmdyb3VwID09PSAnbWFuYWdlZCcpIHsKICAgICAgICAgIGlmIChvbGRDbHVzdGVyVHlwZS5pZCA9PT0gJ2drZScpIHsKICAgICAgICAgICAgdGhpcy4kc2V0KHRoaXMudmFsdWUuY29yZURucywgJ2VuYWJsZWQnLCB0cnVlKTsKICAgICAgICAgICAgdGhpcy4kc2V0KHRoaXMudmFsdWUua3ViZURucywgJ2VuYWJsZWQnLCBmYWxzZSk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChvbGRDbHVzdGVyVHlwZS5ncm91cCAhPT0gJ290aGVyJykgeyAvLyBvbGQgY2x1c3RlciB0eXBlIG9ubHkgc2V0cyBzb21lIHZhbHVlcyB0byBmYWxzZSwgaWYgdGhleSBuZWVkIHRvIGJlIHJlc2V0IHRydWUgaXQgd2lsbCBoYXBwZW4gYmVsb3cKICAgICAgICAgIHRoaXMuc2V0Q2x1c3RlclR5cGVFbmFibGVkVmFsdWVzKFtvbGRDb25maWdLZXlzLCBmYWxzZV0pOwogICAgICAgIH0KCiAgICAgICAgaWYgKG9sZENsdXN0ZXJUeXBlLmdyb3VwID09PSAnazNzJykgewogICAgICAgICAgdGhpcy4kc2V0KHRoaXMudmFsdWUucHJvbWV0aGV1cy5wcm9tZXRoZXVzU3BlYy5yZXNvdXJjZXMubGltaXRzLCAnbWVtb3J5JywgJzE1MDBNaScpOwogICAgICAgICAgdGhpcy4kc2V0KHRoaXMudmFsdWUucHJvbWV0aGV1cy5wcm9tZXRoZXVzU3BlYy5yZXNvdXJjZXMucmVxdWVzdHMsICdtZW1vcnknLCAnNzUwTWknKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgY29uc3QgeyBjb25maWdLZXlzIH0gPSBmaW5kQnkodGhpcy5jbHVzdGVyVHlwZXMsICdpZCcsIGNsdXN0ZXJUeXBlLmlkKTsKCiAgICAgIGlmIChjbHVzdGVyVHlwZS5ncm91cCA9PT0gJ290aGVyJykgewogICAgICAgIHRoaXMuc2V0Q2x1c3RlclR5cGVFbmFibGVkVmFsdWVzKFtjb25maWdLZXlzLCBmYWxzZV0pOwogICAgICB9IGVsc2UgaWYgKGNsdXN0ZXJUeXBlLmdyb3VwID09PSAnbWFuYWdlZCcpIHsKICAgICAgICB0aGlzLnNldENsdXN0ZXJUeXBlRW5hYmxlZFZhbHVlcyhbY29uZmlnS2V5cywgZmFsc2VdKTsKCiAgICAgICAgaWYgKGNsdXN0ZXJUeXBlLmlkID09PSAnZ2tlJykgewogICAgICAgICAgdGhpcy4kc2V0KHRoaXMudmFsdWUuY29yZURucywgJ2VuYWJsZWQnLCBmYWxzZSk7CiAgICAgICAgICB0aGlzLiRzZXQodGhpcy52YWx1ZS5rdWJlRG5zLCAnZW5hYmxlZCcsIHRydWUpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnNldENsdXN0ZXJUeXBlRW5hYmxlZFZhbHVlcyhbY29uZmlnS2V5cywgdHJ1ZV0pOwogICAgICB9CgogICAgICBpZiAoY2x1c3RlclR5cGUuZ3JvdXAgPT09ICdrM3MnKSB7CiAgICAgICAgdGhpcy4kc2V0KHRoaXMudmFsdWUucHJvbWV0aGV1cy5wcm9tZXRoZXVzU3BlYy5yZXNvdXJjZXMubGltaXRzLCAnbWVtb3J5JywgJzMwMDBNaScpOwogICAgICAgIHRoaXMuJHNldCh0aGlzLnZhbHVlLnByb21ldGhldXMucHJvbWV0aGV1c1NwZWMucmVzb3VyY2VzLnJlcXVlc3RzLCAnbWVtb3J5JywgJzE3NTBNaScpOwogICAgICB9CgogICAgICBpZiAoY2x1c3RlclR5cGUuaWQgPT09ICdya2Uud2luZG93cycpIHsKICAgICAgICBpZiAoIXRoaXMudmFsdWUuZ2xvYmFsLmNhdHRsZS53aW5kb3dzKSB7CiAgICAgICAgICB0aGlzLiRzZXQodGhpcy52YWx1ZS5nbG9iYWwuY2F0dGxlLCAnd2luZG93cycsIHsgZW5hYmxlZDogdHJ1ZSB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy52YWx1ZS5nbG9iYWwuY2F0dGxlLndpbmRvd3MuZW5hYmxlZCA9IHRydWU7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKG9sZENsdXN0ZXJUeXBlICYmIG9sZENsdXN0ZXJUeXBlLmlkID09PSAncmtlLndpbmRvd3MnKSB7CiAgICAgICAgZGVsZXRlIHRoaXMudmFsdWUuZ2xvYmFsLmNhdHRsZS53aW5kb3dzOwogICAgICB9CiAgICAgIHRoaXMuJGVtaXQoJ29uQ2x1c3RlclR5cGVDaGFuZ2VkJywgY2x1c3RlclR5cGUpOwogICAgfSwKICB9LAoKICBjcmVhdGVkKCkgewogICAgY29uc3QgeyBwcm92aWRlciwgY2x1c3RlclR5cGVzIH0gPSB0aGlzOwogICAgY29uc3QgbWF0Y2hlZFByb3ZpZGVyID0gZmluZEJ5KGNsdXN0ZXJUeXBlcywgJ2lkJywgcHJvdmlkZXIpOwoKICAgIGlmIChpc0VtcHR5KG1hdGNoZWRQcm92aWRlcikpIHsKICAgICAgdGhpcy5jbHVzdGVyVHlwZSA9IGZpbmRCeSh0aGlzLmNsdXN0ZXJUeXBlcywgJ2lkJywgJ290aGVyJyk7CiAgICB9IGVsc2UgewogICAgICB0aGlzLmNsdXN0ZXJUeXBlID0gbWF0Y2hlZFByb3ZpZGVyOwogICAgfQogIH0sCgogIG1ldGhvZHM6IHsKICAgIHNldENsdXN0ZXJUeXBlRW5hYmxlZFZhbHVlcyhba2V5TmFtZXMgPSBbXSwgdmFsdWVUb1NldCA9IGZhbHNlXSkgewogICAgICBjb25zdCB7IHZhbHVlIH0gPSB0aGlzOwoKICAgICAga2V5TmFtZXMuZm9yRWFjaCgoa24pID0+IHsKICAgICAgICBpZiAoIXZhbHVlW2tuXSkgewogICAgICAgICAgdGhpcy4kc2V0KHZhbHVlLCBrbiwge30pOwogICAgICAgIH0KICAgICAgICB0aGlzLiRzZXQodmFsdWVba25dLCAnZW5hYmxlZCcsIHZhbHVlVG9TZXQpOwogICAgICB9KTsKICAgIH0sCiAgfSwKfTsK"},{"version":3,"sources":["ClusterSelector.vue"],"names":[],"mappingsfile":"ClusterSelector.vue","sourceRoot":"node_modules/@rancher/shell/chart/monitoring","sourcesContent":["<script>\nimport isEmpty from 'lodash/isEmpty';\nimport LabeledSelect from '@shell/components/form/LabeledSelect';\nimport { mapGetters } from 'vuex';\nimport { findBy } from '@shell/utils/array';\nimport sortBy from 'lodash/sortBy';\n\nconst MANAGED_CONFIG_KEYS = [\n  'kubeControllerManager',\n  'kubeScheduler',\n  'kubeEtcd',\n  'kubeProxy',\n];\n\nconst OTHER_CONFIG_KEYS = [\n  'kubeControllerManager',\n  'kubeScheduler',\n  'kubeEtcd',\n  'kubeProxy',\n];\n\nconst CLUSTER_TYPES = [\n  {\n    group:      'managed',\n    id:         'aks',\n    label:      'cluster.provider.azureaks',\n    configKeys: MANAGED_CONFIG_KEYS,\n  },\n  {\n    group:      'managed',\n    id:         'eks',\n    label:      'cluster.provider.amazoneks',\n    configKeys: MANAGED_CONFIG_KEYS,\n  },\n  {\n    group:      'managed',\n    id:         'gke',\n    label:      'cluster.provider.googlegke',\n    configKeys: MANAGED_CONFIG_KEYS,\n  },\n  {\n    group:      'k3s',\n    id:         'k3s',\n    label:      'cluster.provider.k3s',\n    configKeys: ['k3sControllerManager', 'k3sScheduler', 'k3sProxy', 'k3sServer'],\n  },\n  {\n    group:      'kubeadm',\n    id:         'kubeadm',\n    label:      'cluster.provider.kubeAdmin',\n    configKeys: [\n      'kubeAdmControllerManager',\n      'kubeAdmScheduler',\n      'kubeAdmProxy',\n      'kubeAdmEtcd',\n    ],\n  },\n  {\n    group:      'other',\n    id:         'other',\n    label:      'cluster.provider.other',\n    configKeys: OTHER_CONFIG_KEYS,\n  },\n  {\n    group:      'rke',\n    id:         'rke',\n    label:      'cluster.provider.rke',\n    configKeys: ['rkeControllerManager', 'rkeScheduler', 'rkeProxy', 'rkeEtcd'],\n  },\n  {\n    group:      'rke',\n    id:         'rke2', // rke federal\n    label:      'cluster.provider.rke2',\n    configKeys: [\n      'rke2ControllerManager',\n      'rke2Scheduler',\n      'rke2Proxy',\n      'rke2Etcd',\n    ],\n  },\n  {\n    group:      'rke',\n    id:         'rke.windows',\n    label:      'cluster.provider.rkeWindows',\n    configKeys: ['rkeControllerManager', 'rkeScheduler', 'rkeProxy', 'rkeEtcd'],\n  },\n];\n\nexport default {\n  components: { LabeledSelect },\n  props:      {\n    value: {\n      type:    Object,\n      default: () => {\n        return {};\n      },\n    },\n  },\n\n  data() {\n    return {\n      clusterType:  null,\n      clusterTypes: sortBy(CLUSTER_TYPES, 'id'),\n    };\n  },\n\n  computed: {\n    ...mapGetters(['currentCluster']),\n    provider() {\n      return this.currentCluster.status.provider.toLowerCase();\n    },\n  },\n\n  watch: {\n    // This method is not that dissimilar to persistentStorageType in Grafana config\n    // The reason for the divergence is that Grafana has a subkey on the chart\n    // where these keys are at the root of the chart. Vue complains about calling\n    // this.$set(this, 'value', obj) as we need to do here to reset the values in bulk.\n    // So rather than call each set on each line individually I give you this.\n    clusterType(clusterType, oldClusterType) {\n      if (isEmpty(clusterType)) {\n        return;\n      }\n\n      if (!isEmpty(oldClusterType)) {\n        const { configKeys: oldConfigKeys } = findBy(\n          this.clusterTypes,\n          'id',\n          oldClusterType.id\n        );\n\n        if (oldClusterType.group === 'managed') {\n          if (oldClusterType.id === 'gke') {\n            this.$set(this.value.coreDns, 'enabled', true);\n            this.$set(this.value.kubeDns, 'enabled', false);\n          }\n        } else if (oldClusterType.group !== 'other') { // old cluster type only sets some values to false, if they need to be reset true it will happen below\n          this.setClusterTypeEnabledValues([oldConfigKeys, false]);\n        }\n\n        if (oldClusterType.group === 'k3s') {\n          this.$set(this.value.prometheus.prometheusSpec.resources.limits, 'memory', '1500Mi');\n          this.$set(this.value.prometheus.prometheusSpec.resources.requests, 'memory', '750Mi');\n        }\n      }\n      const { configKeys } = findBy(this.clusterTypes, 'id', clusterType.id);\n\n      if (clusterType.group === 'other') {\n        this.setClusterTypeEnabledValues([configKeys, false]);\n      } else if (clusterType.group === 'managed') {\n        this.setClusterTypeEnabledValues([configKeys, false]);\n\n        if (clusterType.id === 'gke') {\n          this.$set(this.value.coreDns, 'enabled', false);\n          this.$set(this.value.kubeDns, 'enabled', true);\n        }\n      } else {\n        this.setClusterTypeEnabledValues([configKeys, true]);\n      }\n\n      if (clusterType.group === 'k3s') {\n        this.$set(this.value.prometheus.prometheusSpec.resources.limits, 'memory', '3000Mi');\n        this.$set(this.value.prometheus.prometheusSpec.resources.requests, 'memory', '1750Mi');\n      }\n\n      if (clusterType.id === 'rke.windows') {\n        if (!this.value.global.cattle.windows) {\n          this.$set(this.value.global.cattle, 'windows', { enabled: true });\n        } else {\n          this.value.global.cattle.windows.enabled = true;\n        }\n      } else if (oldClusterType && oldClusterType.id === 'rke.windows') {\n        delete this.value.global.cattle.windows;\n      }\n      this.$emit('onClusterTypeChanged', clusterType);\n    },\n  },\n\n  created() {\n    const { provider, clusterTypes } = this;\n    const matchedProvider = findBy(clusterTypes, 'id', provider);\n\n    if (isEmpty(matchedProvider)) {\n      this.clusterType = findBy(this.clusterTypes, 'id', 'other');\n    } else {\n      this.clusterType = matchedProvider;\n    }\n  },\n\n  methods: {\n    setClusterTypeEnabledValues([keyNames = [], valueToSet = false]) {\n      const { value } = this;\n\n      keyNames.forEach((kn) => {\n        if (!value[kn]) {\n          this.$set(value, kn, {});\n        }\n        this.$set(value[kn], 'enabled', valueToSet);\n      });\n    },\n  },\n};\n</script>\n\n<template>\n  <LabeledSelect\n    v-model=\"clusterType\"\n    :label=\"t('monitoring.clusterType.label')\"\n    :placeholder=\"t('monitoring.clusterType.placeholder')\"\n    :localized-label=\"true\"\n    :options=\"clusterTypes\"\n  />\n</template>\n"]}]}