{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/dialog/AddCustomBadgeDialog.vue?vue&type=style&index=0&id=7994daec&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/dialog/AddCustomBadgeDialog.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5wcm9tcHQtYmFkZ2UgewogIG1hcmdpbjogMDsKCiAgLmNsdXN0ZXItYmFkZ2UtYm9keSB7CiAgICBtaW4taGVpZ2h0OiA1MHB4OwogICAgZGlzcGxheTogZmxleDsKICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CgogICAgLnByZXZpZXctcm93IHsKICAgICAgaGVpZ2h0OiAzMnB4OwoKICAgICAgLmJhZGdlLXByZXZpZXcgewogICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICBoZWlnaHQ6IDMycHg7CiAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDsKCiAgICAgICAgLmNsdXN0ZXItbmFtZSB7CiAgICAgICAgICBtYXJnaW46IDAgMTBweDsKICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgICAgICB9CgogICAgICAgIC5jbHVzdGVyLWJhZGdlLWljb24tcHJldmlldyB7CiAgICAgICAgICB3aWR0aDogMzJweDsKICAgICAgICAgIGhlaWdodDogMzJweDsKICAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7CiAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICB9CgogICAgICAgIC5jbHVzdGVyLWJhZGdlLXByZXZpZXcgewogICAgICAgICAgY3Vyc29yOiBkZWZhdWx0OwogICAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDsKICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDsKICAgICAgICAgIHBhZGRpbmc6IDJweCAxMHB4OwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIDo6di1kZWVwIC5iYWRnZS1pY29uLXRleHQgaW5wdXQgewogICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlOwogICAgfQogIH0KfQoKLmJvdHRvbSB7CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogIGZsZXg6IDE7CgogIC5iYW5uZXIgewogICAgbWFyZ2luLXRvcDogMDsKICB9CgogIC5idXR0b25zIHsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kOwogICAgd2lkdGg6IDEwMCU7CiAgfQp9Cgo="},{"version":3,"sources":["AddCustomBadgeDialog.vue"],"names":[],"mappings":";AAkTA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"AddCustomBadgeDialog.vue","sourceRoot":"node_modules/@rancher/shell/dialog","sourcesContent":["<script>\nimport { mapGetters } from 'vuex';\nimport { CLUSTER_BADGE } from '@shell/config/labels-annotations';\nimport AsyncButton from '@shell/components/AsyncButton';\nimport { Card } from '@components/Card';\nimport { Banner } from '@components/Banner';\nimport ClusterBadge from '@shell/components/ClusterBadge';\nimport ClusterProviderIcon from '@shell/components/ClusterProviderIcon';\nimport { exceptionToErrorsArray } from '@shell/utils/error';\nimport { Checkbox } from '@components/Form/Checkbox';\nimport { LabeledInput } from '@components/Form/LabeledInput';\nimport ColorInput from '@shell/components/form/ColorInput';\nimport { parseColor, textColor } from '@shell/utils/color';\nimport { NORMAN } from '@shell/config/types';\n\nexport default {\n  name:       'AddCustomBadgeDialog',\n  components: {\n    Card,\n    AsyncButton,\n    Banner,\n    Checkbox,\n    LabeledInput,\n    ColorInput,\n    ClusterBadge,\n    ClusterProviderIcon,\n  },\n\n  data() {\n    return {\n      useCustomBadge:   null,\n      errors:           [],\n      badgeBgColor:     '',\n      badgeDescription: '',\n      badgeAsIcon:      null,\n      letter:           '',\n    };\n  },\n\n  fetch() {\n    if (this.currentCluster.metadata?.annotations) {\n      this.badgeDescription = this.currentCluster.metadata?.annotations[CLUSTER_BADGE.TEXT];\n      this.useCustomBadge = this.badgeDescription?.length > 0;\n      this.badgeDescription = this.badgeDescription || 'Example Text';\n      this.badgeBgColor = this.currentCluster.metadata?.annotations[CLUSTER_BADGE.COLOR] || '#ff0000';\n\n      this.badgeAsIcon = !!this.currentCluster.metadata?.annotations[CLUSTER_BADGE.ICON_TEXT] || false;\n\n      this.letter = this.currentCluster.metadata?.annotations[CLUSTER_BADGE.ICON_TEXT] || this.badgeDescription.substring(0, 2);\n    }\n  },\n\n  computed: {\n    ...mapGetters(['currentCluster']),\n\n    previewColor() {\n      return textColor(parseColor(this.badgeBgColor)) || '#ffffff';\n    },\n    canSubmit() {\n      return this.badgeDescription.length >= 1;\n    },\n    // Fake cluster object for use with badge component\n    previewCluster() {\n      // Make cluster object that is enough for the badge component to work\n      return {\n        isLocal:         this.currentCluster.isLocal,\n        providerNavLogo: this.currentCluster.providerNavLogo,\n        badge:           {\n          text:      this.badgeDescription,\n          color:     this.badgeBgColor,\n          textColor: textColor(parseColor(this.badgeBgColor)),\n          iconText:  this.badgeAsIcon ? this.letter.toUpperCase() : '',\n        }\n      };\n    },\n\n    mode() {\n      return !!this.useCustomBadge ? 'edit' : 'view';\n    },\n  },\n\n  methods: {\n    close() {\n      this.$emit('close');\n    },\n\n    async apply(buttonDone) {\n      try {\n        // Fetch the Norman cluster object\n        const norman = await this.$store.dispatch('rancher/find', { type: NORMAN.CLUSTER, id: this.currentCluster.id });\n\n        delete norman.annotations[CLUSTER_BADGE.TEXT];\n        delete norman.annotations[CLUSTER_BADGE.COLOR];\n        delete norman.annotations[CLUSTER_BADGE.ICON_TEXT];\n\n        if (this.useCustomBadge) {\n          this.$set(norman.annotations, CLUSTER_BADGE.TEXT, this.badgeDescription);\n          this.$set(norman.annotations, CLUSTER_BADGE.COLOR, this.badgeBgColor);\n          if (this.badgeAsIcon) {\n            this.$set(norman.annotations, CLUSTER_BADGE.ICON_TEXT, this.letter.toUpperCase());\n          }\n        }\n\n        await norman.save();\n\n        buttonDone(true);\n        this.close();\n      } catch (err) {\n        this.errors = exceptionToErrorsArray(err);\n        buttonDone(false);\n      }\n    }\n  }\n};\n</script>\n\n<template>\n  <Card\n    class=\"prompt-badge\"\n    :show-highlight-border=\"false\"\n  >\n    <h4\n      slot=\"title\"\n      class=\"text-default-text\"\n    >\n      {{ t('clusterBadge.modal.title') }}\n    </h4>\n\n    <div\n      slot=\"body\"\n      class=\"pl-10 pr-10 cluster-badge-body\"\n    >\n      <div>{{ t('clusterBadge.modal.previewTitle') }}</div>\n\n      <div class=\"mt-10 pl-20 row preview-row\">\n        <div class=\"badge-preview col span-12\">\n          <ClusterProviderIcon\n            v-if=\"useCustomBadge\"\n            :cluster=\"previewCluster\"\n          />\n          <ClusterProviderIcon\n            v-else\n            :cluster=\"currentCluster\"\n          />\n          <div class=\"cluster-name\">\n            {{ currentCluster.nameDisplay }}\n          </div>\n          <ClusterBadge\n            v-if=\"useCustomBadge\"\n            :cluster=\"previewCluster\"\n          />\n        </div>\n      </div>\n\n      <div class=\"row mt-10\">\n        <div class=\"col\">\n          <Checkbox\n            v-model=\"useCustomBadge\"\n            :label=\"t('clusterBadge.modal.checkbox')\"\n            class=\"mt-10\"\n          />\n        </div>\n      </div>\n\n      <div class=\"options\">\n        <div class=\"row mt-10\">\n          <div class=\"col span-12\">\n            <LabeledInput\n              v-model.trim=\"badgeDescription\"\n              :mode=\"mode\"\n              :label=\"t('clusterBadge.modal.description')\"\n              :maxlength=\"32\"\n              :required=\"true\"\n            />\n          </div>\n        </div>\n\n        <div class=\"row mt-10\">\n          <div class=\"col span-12\">\n            <ColorInput\n              v-model=\"badgeBgColor\"\n              :mode=\"mode\"\n              :default-value=\"badgeBgColor\"\n              :label=\"t('clusterBadge.modal.badgeBgColor')\"\n            />\n          </div>\n        </div>\n\n        <div class=\"row mt-10\">\n          <div class=\"col\">\n            <Checkbox\n              v-model=\"badgeAsIcon\"\n              :mode=\"mode\"\n              :label=\"t('clusterBadge.modal.badgeAsIcon')\"\n              class=\"mt-10\"\n              :tooltip=\"t('clusterBadge.modal.maxCharsTooltip')\"\n            />\n          </div>\n        </div>\n        <div class=\"row mt-10\">\n          <div class=\"col\">\n            <LabeledInput\n              v-model.trim=\"letter\"\n              :disabled=\"!badgeAsIcon\"\n              class=\"badge-icon-text\"\n              :mode=\"mode\"\n              :label=\"t('clusterBadge.modal.iconText')\"\n              :maxlength=\"2\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div\n      slot=\"actions\"\n      class=\"bottom\"\n    >\n      <Banner\n        v-for=\"(err, i) in errors\"\n        :key=\"i\"\n        color=\"error\"\n        :label=\"err\"\n      />\n      <div class=\"buttons\">\n        <button\n          class=\"btn role-secondary mr-10\"\n          @click=\"close\"\n        >\n          {{ t('generic.cancel') }}\n        </button>\n        <AsyncButton\n          :action-label=\"t('clusterBadge.modal.buttonAction')\"\n          :disabled=\"!canSubmit\"\n          @click=\"apply\"\n        />\n      </div>\n    </div>\n  </Card>\n</template>\n<style lang='scss' scoped>\n  .prompt-badge {\n    margin: 0;\n\n    .cluster-badge-body {\n      min-height: 50px;\n      display: flex;\n      flex-direction: column;\n\n      .preview-row {\n        height: 32px;\n\n        .badge-preview {\n          align-items: center;\n          display: flex;\n          height: 32px;\n          white-space: nowrap;\n\n          .cluster-name {\n            margin: 0 10px;\n            font-size: 16px;\n          }\n\n          .cluster-badge-icon-preview {\n            width: 32px;\n            height: 32px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            border-radius: 5px;\n            font-weight: bold;\n          }\n\n          .cluster-badge-preview {\n            cursor: default;\n            border-radius: 10px;\n            font-size: 12px;\n            padding: 2px 10px;\n          }\n        }\n      }\n\n      ::v-deep .badge-icon-text input {\n        text-transform: uppercase;\n      }\n    }\n  }\n\n  .bottom {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n\n    .banner {\n      margin-top: 0;\n    }\n\n    .buttons {\n      display: flex;\n      justify-content: flex-end;\n      width: 100%;\n    }\n  }\n\n</style>\n"]}]}