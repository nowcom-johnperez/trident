{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/formatter/ReceiverIcons.vue?vue&type=style&index=0&id=ab19679a&scoped=true&lang=scss","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/formatter/ReceiverIcons.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5sb2dvewogIGRpc3BsYXk6IGlubGluZTsKICBoZWlnaHQ6IDEuM2VtOwoKICBpbWd7CiAgICBoZWlnaHQ6IDEuM2VtOwogIH0KfQoubmFtZS1jb250YWluZXJ7CiAgZGlzcGxheTogZmxleDsKICBhbGlnbi1pdGVtczogY2VudGVyOwp9Ci5jb21tYXsKICBtYXJnaW4tcmlnaHQ6IDJweDsKfQo="},{"version":3,"sources":["ReceiverIcons.vue"],"names":[],"mappings":";AAmIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ReceiverIcons.vue","sourceRoot":"node_modules/@rancher/shell/components/formatter","sourcesContent":["<script>\nimport { RECEIVERS_TYPES } from '@shell/edit/monitoring.coreos.com.alertmanagerconfig/receiverConfig.vue';\nimport { MONITORING } from '@shell/config/types';\nexport default {\n  props: {\n    value: {\n      type:    String,\n      default: ''\n    },\n    row: {\n      type:     Object,\n      required: true\n    }\n  },\n  computed: {\n\n    types() {\n    // get count and logo for all configured types in every receiver in the alertmanagerconfig\n      if (this.row?.type === MONITORING.ALERTMANAGERCONFIG) {\n        const receivers = this.row?.spec?.receivers;\n\n        if (receivers && receivers.length > 0) {\n          return receivers.reduce((totals, receiver) => {\n            const counts = this.getReceiverTypes(receiver);\n\n            Object.keys(counts).forEach((type) => {\n              if (!totals[type]) {\n                totals[type] = {\n                  count: counts[type].count,\n                  logo:  counts[type].logo\n                };\n              } else {\n                totals[type].count += counts[type].count;\n              }\n            });\n\n            return totals;\n          }, {});\n        }\n\n        return null;\n      } else {\n        // if not alertmanagerconfig, this is an individual receiver\n        return this.getReceiverTypes(this.row);\n      }\n    }\n  },\n  methods: {\n    // get count and logo for each type configured in a given receiver\n    getReceiverTypes(receiver) {\n      // iterate through predefined types and sum the number configured in this receiver\n      const types = RECEIVERS_TYPES\n        .reduce((types, type) => {\n          if (type.name !== 'custom' && receiver?.[type.key]?.length > 0) {\n            types[this.t(type.label)] = { count: receiver?.[type.key]?.length, logo: type.logo };\n          }\n\n          return types;\n        }, {});\n\n      // if there are keys other than those defined in RECEIVERS_TYPES and 'name', assume they're custom types and sum them under \"custom\"\n      const expectedKeys = RECEIVERS_TYPES.map((type) => type.key).filter((key) => key !== 'custom');\n\n      expectedKeys.push('name');\n      const customKeys = Object.keys(receiver)\n        .filter((key) => !expectedKeys.includes(key));\n\n      if (customKeys.length > 0) {\n        const customType = RECEIVERS_TYPES.find((type) => type.name === 'custom');\n        const customLabel = this.t(customType.label);\n\n        types[customLabel] = { count: customKeys.length, logo: customType.logo };\n      }\n\n      return types;\n    },\n\n    countDisplay(type, count) {\n      if (count > 1) {\n        return `${ type }(x${ count })`;\n      }\n\n      return type;\n    }\n  }\n};\n</script>\n\n<template>\n  <span class=\"name-container\">\n    <template v-for=\"(type, key, i) in types\">\n      <div\n        :key=\"key\"\n        class=\"logo\"\n      >\n        <img :src=\"type.logo\">\n      </div>\n      <span :key=\"key+i\">\n        <span\n          v-if=\"i<Object.keys(types).length-1\"\n          class=\"comma\"\n        >\n          {{ `${countDisplay(key, type.count)}, ` }}\n        </span>\n        <span v-else>\n          {{ countDisplay(key, type.count) }}\n        </span>\n      </span>\n\n    </template>\n  </span>\n</template>\n\n<style scoped lang='scss'>\n  .logo{\n    display: inline;\n    height: 1.3em;\n\n    img{\n      height: 1.3em;\n    }\n  }\n  .name-container{\n    display: flex;\n    align-items: center;\n  }\n  .comma{\n    margin-right: 2px;\n  }\n</style>\n"]}]}