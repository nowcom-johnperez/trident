{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/rancher-components/Form/Radio/RadioGroup.vue?vue&type=style&index=0&id=065d92ec&lang=scss","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/rancher-components/Form/Radio/RadioGroup.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5yYWRpby1ncm91cCB7CiAgJjpmb2N1cyB7CiAgICBib3JkZXI6bm9uZTsKICAgIG91dGxpbmU6bm9uZTsKICB9CgogIGgzIHsKICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICB9CgogICYucm93IHsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICAucmFkaW8tY29udGFpbmVyIHsKICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4OwogICAgfQogIH0KCiAgLmxhYmVsewogICAgZm9udC1zaXplOiAxNHB4ICFpbXBvcnRhbnQ7CiAgfQp9Cg=="},{"version":3,"sources":["RadioGroup.vue"],"names":[],"mappings":";AAwOA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"RadioGroup.vue","sourceRoot":"node_modules/@rancher/shell/rancher-components/Form/Radio","sourcesContent":["<script lang=\"ts\">\nimport Vue, { PropType } from 'vue';\nimport { _VIEW } from '@shell/config/query-params';\nimport RadioButton from '@components/Form/Radio/RadioButton.vue';\n\ninterface Option {\n  value: unknown,\n  label: string\n}\n\nexport default Vue.extend({\n  components: { RadioButton },\n  props:      {\n    /**\n     * Name for the checkbox grouping, must be unique on page.\n     */\n    name: {\n      type:     String,\n      required: true\n    },\n\n    /**\n     * Options can be an array of {label, value}, or just values.\n     */\n    options: {\n      type:     Array as PropType<Option[] | string[]>,\n      required: true\n    },\n\n    /**\n     * If options are just values, then labels can be a corresponding display\n     * value.\n     */\n    labels: {\n      type:    Array as PropType<string[]>,\n      default: null\n    },\n\n    /**\n     * The selected value.\n     */\n    value: {\n      type:    [Boolean, String, Object],\n      default: null\n    },\n\n    /**\n     * Disable the radio group.\n     */\n    disabled: {\n      type:    Boolean,\n      default: false\n    },\n\n    /**\n     * The radio group editing mode.\n     * @values _EDIT, _VIEW\n     */\n    mode: {\n      type:    String,\n      default: 'edit'\n    },\n\n    /**\n     * Label for above the radios.\n     */\n    label: {\n      type:    String,\n      default: null\n    },\n\n    /**\n     * The i18n key to use for the radio group label.\n     */\n    labelKey: {\n      type:    String,\n      default: null\n    },\n\n    /**\n     * Radio group tooltip.\n     */\n    tooltip: {\n      type:    [String, Object],\n      default: null\n    },\n\n    /**\n     * The i18n key to use for the radio group tooltip.\n     */\n    tooltipKey: {\n      type:    String,\n      default: null\n    },\n\n    /**\n     * Show radio buttons in column or row.\n     */\n    row: {\n      type:    Boolean,\n      default: false\n    }\n  },\n\n  computed: {\n    /**\n     * Creates a collection of Options from the provided props.\n     */\n    normalizedOptions(): Option[] {\n      const out: Option[] = [];\n\n      for (let i = 0; i < this.options.length; i++) {\n        const opt = this.options[i];\n\n        if (typeof opt === 'object' && opt) {\n          out.push(opt);\n        } else if (this.labels) {\n          out.push({\n            label: this.labels[i],\n            value: opt\n          });\n        } else {\n          out.push({\n            label: opt,\n            value: opt\n          });\n        }\n      }\n\n      return out;\n    },\n\n    /**\n     * Determines the view mode for the radio group.\n     */\n    isView(): boolean {\n      return this.mode === _VIEW;\n    },\n\n    /**\n     * Determines if the radio group is disabled.\n     */\n    isDisabled(): boolean {\n      return (this.disabled || this.isView);\n    }\n  },\n\n  methods: {\n    /**\n     * Keyboard left/right event listener to select next/previous option. Emits\n     * the input event.\n     */\n    clickNext(direction: number): void {\n      const opts = this.normalizedOptions;\n      const selected = opts.find((x) => x.value === this.value);\n      let newIndex = (selected ? opts.indexOf(selected) : -1) + direction;\n\n      if (newIndex >= opts.length) {\n        newIndex = opts.length - 1;\n      } else if (newIndex < 0) {\n        newIndex = 0;\n      }\n\n      this.$emit('input', opts[newIndex].value);\n    }\n  }\n});\n</script>\n\n<template>\n  <div>\n    <div\n      v-if=\"label || labelKey || tooltip || tooltipKey || $slots.label\"\n      class=\"radio-group label\"\n    >\n      <slot name=\"label\">\n        <h3>\n          <t\n            v-if=\"labelKey\"\n            :k=\"labelKey\"\n          />\n          <template v-else-if=\"label\">\n            {{ label }}\n          </template>\n          <i\n            v-if=\"tooltipKey\"\n            v-clean-tooltip=\"t(tooltipKey)\"\n            class=\"icon icon-info icon-lg\"\n          />\n          <i\n            v-else-if=\"tooltip\"\n            v-clean-tooltip=\"tooltip\"\n            class=\"icon icon-info icon-lg\"\n          />\n        </h3>\n      </slot>\n    </div>\n    <div\n      class=\"radio-group\"\n      :class=\"{'row':row}\"\n      tabindex=\"0\"\n      @keyup.down.stop=\"clickNext(1)\"\n      @keyup.up.stop=\"clickNext(-1)\"\n    >\n      <div\n        v-for=\"(option, i) in normalizedOptions\"\n        :key=\"name+'-'+i\"\n      >\n        <slot\n          :listeners=\"$listeners\"\n          :option=\"option\"\n          :is-disabled=\"isDisabled\"\n          :name=\"i\"\n        >\n          <RadioButton\n            :key=\"name+'-'+i\"\n            :name=\"name\"\n            :value=\"value\"\n            :label=\"option.label\"\n            :description=\"option.description\"\n            :val=\"option.value\"\n            :disabled=\"isDisabled\"\n            :mode=\"mode\"\n            v-on=\"$listeners\"\n          />\n        </slot>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style lang='scss'>\n.radio-group {\n  &:focus {\n    border:none;\n    outline:none;\n  }\n\n  h3 {\n    position: relative;\n  }\n\n  &.row {\n    display: flex;\n    .radio-container {\n      margin-right: 10px;\n    }\n  }\n\n  .label{\n    font-size: 14px !important;\n  }\n}\n</style>\n"]}]}