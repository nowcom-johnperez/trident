{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/Import.vue?vue&type=style&index=0&id=24491468&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/Import.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiRtaW46IDUwdmg7CiRtYXg6IDUwdmg7CgoueWFtbC1lZGl0b3IgewogIGZsZXg6IDE7CiAgbWluLWhlaWdodDogJG1pbjsKICBtYXgtaGVpZ2h0OiAkbWF4OwoKICA6OnYtZGVlcCAuY29kZS1taXJyb3IgewogICAgLkNvZGVNaXJyb3IgewogICAgICBwb3NpdGlvbjogaW5pdGlhbDsKICAgIH0KCiAgICAuQ29kZU1pcnJvciwKICAgIC5Db2RlTWlycm9yLXNjcm9sbCwKICAgIC5Db2RlTWlycm9yLWd1dHRlcnMgewogICAgICBtaW4taGVpZ2h0OiAkbWluOwogICAgICBtYXgtaGVpZ2h0OiAkbWF4OwogICAgfQogIH0KfQo="},{"version":3,"sources":["Import.vue"],"names":[],"mappings":";AAkPA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Import.vue","sourceRoot":"node_modules/@rancher/shell/components","sourcesContent":["<script>\nimport { mapGetters } from 'vuex';\nimport { Card } from '@components/Card';\nimport { Banner } from '@components/Banner';\nimport Loading from '@shell/components/Loading';\nimport YamlEditor from '@shell/components/YamlEditor';\nimport FileSelector from '@shell/components/form/FileSelector';\nimport AsyncButton from '@shell/components/AsyncButton';\nimport LabeledSelect from '@shell/components/form/LabeledSelect';\nimport SortableTable from '@shell/components/SortableTable';\nimport { sortBy } from '@shell/utils/sort';\nimport { exceptionToErrorsArray } from '@shell/utils/error';\nimport { NAMESPACE } from '@shell/config/types';\nimport {\n  NAME as NAME_COL, STATE, TYPE, NAMESPACE as NAMESPACE_COL, AGE\n} from '@shell/config/table-headers';\n\nexport default {\n  components: {\n    AsyncButton,\n    Banner,\n    Card,\n    Loading,\n    YamlEditor,\n    FileSelector,\n    LabeledSelect,\n    SortableTable\n  },\n\n  props: {\n    defaultNamespace: {\n      type:    String,\n      default: 'default'\n    },\n  },\n\n  async fetch() {\n    this.allNamespaces = await this.$store.dispatch('cluster/findAll', { type: NAMESPACE, opt: { url: 'namespaces' } });\n  },\n\n  data() {\n    return {\n      currentYaml:   '',\n      allNamespaces: null,\n      errors:        null,\n      rows:          null,\n      done:          false,\n    };\n  },\n\n  computed: {\n    ...mapGetters(['currentCluster']),\n\n    namespaceOptions() {\n      const out = this.allNamespaces.map((obj) => {\n        return {\n          label: obj.name,\n          value: obj.name,\n        };\n      });\n\n      return sortBy(out, 'label');\n    },\n\n    headers() {\n      return [\n        STATE,\n        TYPE,\n        NAME_COL,\n        NAMESPACE_COL,\n        AGE\n      ];\n    },\n  },\n\n  methods: {\n    close() {\n      this.$emit('close');\n    },\n\n    onFileSelected(value) {\n      const component = this.$refs.yamleditor;\n\n      if (component) {\n        this.errors = null;\n        component.updateValue(value);\n      }\n    },\n\n    async importYaml(btnCb) {\n      try {\n        this.errors = [];\n\n        const res = await this.currentCluster.doAction('apply', {\n          yaml:             this.currentYaml,\n          defaultNamespace: this.defaultNamespace,\n        });\n\n        btnCb(true);\n\n        this.rows = res;\n        this.done = true;\n      } catch (err) {\n        this.errors = exceptionToErrorsArray(err);\n        this.done = false;\n        btnCb(false);\n      }\n    },\n\n    rowClick(e) {\n      if ( e.target.tagName === 'A' ) {\n        this.close();\n      }\n    },\n  },\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n  <Card\n    v-else\n    :show-highlight-border=\"false\"\n  >\n    <template #title>\n      <div style=\"display: block; width: 100%;\">\n        <template v-if=\"done\">\n          <h4>{{ t('import.success', {count: rows.length}) }}</h4>\n        </template>\n        <template v-else>\n          <h4 v-t=\"'import.title'\" />\n          <div class=\"row\">\n            <div class=\"col span-6\">\n              <FileSelector\n                class=\"btn role-secondary pull-left\"\n                :label=\"t('generic.readFromFile')\"\n                @selected=\"onFileSelected\"\n              />\n            </div>\n            <div class=\"col span-6\">\n              <LabeledSelect\n                v-model=\"defaultNamespace\"\n                class=\"pull-right\"\n                :options=\"namespaceOptions\"\n                label-key=\"import.defaultNamespace.label\"\n                mode=\"edit\"\n              />\n            </div>\n          </div>\n        </template>\n      </div>\n    </template>\n    <template #body>\n      <template v-if=\"done\">\n        <div class=\"results\">\n          <SortableTable\n            :rows=\"rows\"\n            :headers=\"headers\"\n            mode=\"view\"\n            key-field=\"_key\"\n            :search=\"false\"\n            :paging=\"true\"\n            :row-actions=\"false\"\n            :table-actions=\"false\"\n            @rowClick=\"rowClick\"\n          />\n        </div>\n      </template>\n      <YamlEditor\n        v-else\n        ref=\"yamleditor\"\n        v-model=\"currentYaml\"\n        class=\"yaml-editor\"\n      />\n      <Banner\n        v-for=\"(err, i) in errors\"\n        :key=\"i\"\n        color=\"error\"\n        :label=\"err\"\n      />\n    </template>\n    <template #actions>\n      <div\n        v-if=\"done\"\n        class=\"text-center\"\n        style=\"width: 100%\"\n      >\n        <button\n          type=\"button\"\n          class=\"btn role-primary\"\n          @click=\"close\"\n        >\n          {{ t('generic.close') }}\n        </button>\n      </div>\n      <div\n        v-else\n        class=\"text-center\"\n        style=\"width: 100%\"\n      >\n        <button\n          type=\"button\"\n          class=\"btn role-secondary mr-10\"\n          @click=\"close\"\n        >\n          {{ t('generic.cancel') }}\n        </button>\n        <AsyncButton\n          v-if=\"!done\"\n          mode=\"import\"\n          :disabled=\"!currentYaml.length\"\n          @click=\"importYaml\"\n        />\n      </div>\n    </template>\n  </Card>\n</template>\n\n<style lang='scss' scoped>\n  $min: 50vh;\n  $max: 50vh;\n\n  .yaml-editor {\n    flex: 1;\n    min-height: $min;\n    max-height: $max;\n\n    ::v-deep .code-mirror {\n      .CodeMirror {\n        position: initial;\n      }\n\n      .CodeMirror,\n      .CodeMirror-scroll,\n      .CodeMirror-gutters {\n        min-height: $min;\n        max-height: $max;\n      }\n    }\n  }\n</style>\n"]}]}