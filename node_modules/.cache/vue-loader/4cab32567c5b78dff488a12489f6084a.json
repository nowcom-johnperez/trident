{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/monitoring.coreos.com.prometheusrule/AlertingRule.vue?vue&type=style&index=0&id=0c31d23a&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/monitoring.coreos.com.prometheusrule/AlertingRule.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5yb3cgewogIG1hcmdpbjogMjBweCAwOwp9Ci5yZW1vdmUgewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0b3A6IDA7CiAgcmlnaHQ6IDVweDsKfQo="},{"version":3,"sources":["AlertingRule.vue"],"names":[],"mappings":";AA0fA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AlertingRule.vue","sourceRoot":"node_modules/@rancher/shell/edit/monitoring.coreos.com.prometheusrule","sourcesContent":["<script>\nimport debounce from 'lodash/debounce';\nimport has from 'lodash/has';\nimport isEmpty from 'lodash/isEmpty';\nimport pickBy from 'lodash/pickBy';\n\nimport { Checkbox } from '@components/Form/Checkbox';\nimport CodeMirror from '@shell/components/CodeMirror';\nimport KeyValue from '@shell/components/form/KeyValue';\nimport { LabeledInput } from '@components/Form/LabeledInput';\nimport LabeledSelect from '@shell/components/form/LabeledSelect';\nimport UnitInput from '@shell/components/form/UnitInput';\nimport { _VIEW } from '@shell/config/query-params';\nimport { toMilliseconds } from './duration.js';\n\nconst IGNORED_ANNOTATIONS = [\n  'summary',\n  'message',\n  'description',\n  'runbook_url',\n];\n\nexport default {\n  components: {\n    Checkbox,\n    CodeMirror,\n    KeyValue,\n    LabeledInput,\n    LabeledSelect,\n    UnitInput,\n  },\n\n  props: {\n    value: {\n      type:    Object,\n      default: () => ({}),\n    },\n\n    mode: {\n      type:    String,\n      default: 'create',\n    },\n  },\n\n  data() {\n    return {\n      selectedSeverityLabel: null,\n      ignoredAnnotations:    IGNORED_ANNOTATIONS,\n      severityOptions:       [\n        this.t('prometheusRule.alertingRules.labels.severity.choices.critical'),\n        this.t('prometheusRule.alertingRules.labels.severity.choices.warning'),\n        this.t('prometheusRule.alertingRules.labels.severity.choices.none'),\n      ],\n    };\n  },\n\n  computed: {\n    isView() {\n      return this.mode === _VIEW;\n    },\n    severityLabelChecked: {\n      get() {\n        if (has(this.value?.labels, 'severity')) {\n          return true;\n        }\n\n        return false;\n      },\n      set(value) {\n        if (value) {\n          if (isEmpty(this.value?.labels)) {\n            this.$set(this.value, 'labels', { severity: 'none' });\n          } else {\n            this.$set(this.value.labels, 'severity', 'none');\n          }\n        } else {\n          this.$set(this.value.labels, 'severity', '');\n          delete this.value.labels.severity;\n        }\n      },\n    },\n\n    summaryAnnotationChecked: {\n      get() {\n        if (has(this.value?.annotations, 'summary')) {\n          return true;\n        }\n\n        return false;\n      },\n      set(value) {\n        if (value) {\n          if (isEmpty(this.value?.annotations)) {\n            this.$set(this.value, 'annotations', { summary: '' });\n          } else {\n            this.$set(this.value.annotations, 'summary', '');\n          }\n        } else {\n          this.$set(this.value.annotations, 'summary', '');\n          delete this.value.annotations.summary;\n        }\n      },\n    },\n\n    messageAnnotationChecked: {\n      get() {\n        if (has(this.value?.annotations, 'message')) {\n          return true;\n        }\n\n        return false;\n      },\n      set(value) {\n        if (value) {\n          if (isEmpty(this.value?.annotations)) {\n            this.$set(this.value, 'annotations', { message: '' });\n          } else {\n            this.$set(this.value.annotations, 'message', '');\n          }\n        } else {\n          this.$set(this.value.annotations, 'message', '');\n          delete this.value.annotations.message;\n        }\n      },\n    },\n\n    descriptionAnnotationChecked: {\n      get() {\n        if (has(this.value?.annotations, 'description')) {\n          return true;\n        }\n\n        return false;\n      },\n      set(value) {\n        if (value) {\n          if (isEmpty(this.value?.annotations)) {\n            this.$set(this.value, 'annotations', { description: '' });\n          } else {\n            this.$set(this.value.annotations, 'description', '');\n          }\n        } else {\n          this.$set(this.value.annotations, 'description', '');\n          delete this.value.annotations.description;\n        }\n      },\n    },\n\n    runbookAnnotationChecked: {\n      get() {\n        if (has(this.value?.annotations, 'runbook_url')) {\n          return true;\n        }\n\n        return false;\n      },\n      set(value) {\n        if (value) {\n          if (isEmpty(this.value?.annotations)) {\n            this.$set(this.value, 'annotations', { runbook_url: '' });\n          } else {\n            this.$set(this.value.annotations, 'runbook_url', '');\n          }\n        } else {\n          this.$set(this.value.annotations, 'runbook_url', '');\n          delete this.value.annotations.runbook_url;\n        }\n      },\n    },\n\n    filteredAnnotations() {\n      const { ignoredAnnotations } = this;\n      const annotations = this.value?.annotations;\n\n      return pickBy(annotations, (value, key) => {\n        return !ignoredAnnotations.includes(key);\n      });\n    },\n\n    filteredLabels() {\n      const labels = this.value?.labels;\n\n      return pickBy(labels, (value, key) => {\n        return key !== 'severity';\n      });\n    },\n\n    showCustomSeverityInput() {\n      const { selectedSeverityLabel } = this;\n\n      if (selectedSeverityLabel === 'custom') {\n        return true;\n      }\n\n      return false;\n    },\n\n    waitToFireFor: {\n      get() {\n        if (![null, undefined].includes(this.value.for)) {\n          return Math.floor(toMilliseconds(this.value.for) / 1000);\n        }\n\n        return undefined;\n      },\n      set(v) {\n        this.$set(this.value, 'for', [null, undefined].includes(v) ? undefined : `${ v }s`);\n      }\n    }\n  },\n\n  watch: {\n    selectedSeverityLabel(value /* , oldValue */) {\n      const neu = value === 'custom' ? '' : value;\n\n      if (this.value?.labels) {\n        this.$set(this.value.labels, 'severity', neu);\n      } else {\n        this.$set(this.value, 'labels', { severity: neu });\n      }\n    },\n  },\n\n  created() {\n    this.queueUpdate = debounce(this.updateExpression, 500);\n    this.queueLabelUpdate = debounce(this.updateLabels, 500);\n    this.queueAnnotationUpdate = debounce(this.updateAnnotations, 500);\n  },\n\n  mounted() {\n    this.$nextTick(() => {\n      if (this.value?.labels?.severity) {\n        this.selectedSeverityLabel = this.value.labels.severity;\n      }\n    });\n  },\n\n  methods: {\n    updateLabels(value) {\n      const neu = { ...value };\n\n      if (this.selectedSeverityLabel) {\n        neu['severity'] = this.selectedSeverityLabel;\n      }\n\n      this.$set(this.value, 'labels', neu);\n    },\n    updateAnnotations(value) {\n      const {\n        ignoredAnnotations,\n        value: { annotations = {} },\n      } = this;\n      const neu = { ...value };\n\n      ignoredAnnotations.forEach((anno) => {\n        if (has(annotations, anno)) {\n          neu[anno] = annotations[anno];\n        }\n      });\n\n      this.$set(this.value, 'annotations', neu);\n    },\n    updateExpression(value) {\n      this.$set(this.value, 'expr', value);\n    }\n  },\n};\n</script>\n\n<template>\n  <div>\n    <div class=\"row mt-25\">\n      <div class=\"col span-6\">\n        <LabeledInput\n          v-model=\"value.alert\"\n          :label=\"t('prometheusRule.alertingRules.name')\"\n          :required=\"true\"\n          :mode=\"mode\"\n        />\n      </div>\n      <div class=\"col span-6\">\n        <UnitInput\n          v-model=\"waitToFireFor\"\n          :suffix=\"t('suffix.seconds', {count: value.for})\"\n          :placeholder=\"t('prometheusRule.alertingRules.for.placeholder')\"\n          :label=\"t('prometheusRule.alertingRules.for.label')\"\n          :mode=\"mode\"\n        />\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col span-12\">\n        <LabeledInput\n          v-model=\"value.expr\"\n          :label=\"t('prometheusRule.promQL.label')\"\n          :required=\"true\"\n          :mode=\"mode\"\n        >\n          <template #field>\n            <CodeMirror\n              class=\"mt-20\"\n              :value=\"value.expr\"\n              :options=\"{\n                mode: null,\n                foldGutter: false,\n                readOnly: mode === 'view',\n              }\"\n              @onInput=\"queueUpdate\"\n            />\n          </template>\n        </LabeledInput>\n      </div>\n    </div>\n    <div class=\"suggested-labels\">\n      <div class=\"row mb-0 mt-30\">\n        <div class=\"col span-12\">\n          <h3>\n            <t k=\"prometheusRule.alertingRules.labels.label\" />\n          </h3>\n        </div>\n      </div>\n      <div :class=\"[{ hide: isView && !severityLabelChecked }, 'row']\">\n        <div\n          v-if=\"isView && severityLabelChecked\"\n          class=\"col span-6 severity\"\n        >\n          <label><t k=\"prometheusRule.alertingRules.labels.severity.label\" /></label>\n          <div>{{ value.labels.severity }}</div>\n        </div>\n        <div\n          v-else\n          class=\"severity col span-6\"\n        >\n          <Checkbox\n            v-model=\"severityLabelChecked\"\n            :mode=\"mode\"\n            :label=\"t('prometheusRule.alertingRules.labels.severity.label')\"\n          />\n          <LabeledSelect\n            v-if=\"severityLabelChecked\"\n            v-model=\"value.labels.severity\"\n            class=\"mt-10\"\n            :mode=\"mode\"\n            :label=\"t('prometheusRule.alertingRules.labels.severity.choices.label')\"\n            :localized-label=\"false\"\n            :options=\"severityOptions\"\n          />\n        </div>\n      </div>\n      <div :class=\"[{ hide: isView && Object.keys(filteredLabels).length === 0}, 'row', 'mt-0']\">\n        <div class=\"col span-12\">\n          <KeyValue\n            key=\"labels\"\n            :value=\"filteredLabels\"\n            :add-label=\"t('labels.addLabel')\"\n            :mode=\"mode\"\n            :read-allowed=\"false\"\n            :value-multiline=\"false\"\n            @input=\"queueLabelUpdate\"\n          />\n        </div>\n      </div>\n      <div class=\"suggested-annotations\">\n        <div class=\"row mb-0 mt-30\">\n          <div class=\"col span-12\">\n            <h3>\n              <t k=\"prometheusRule.alertingRules.annotations.label\" />\n            </h3>\n          </div>\n        </div>\n        <div class=\"row mt-0 mb-0\">\n          <div class=\"col span-12\">\n            <div :class=\"[{ hide: isView && !summaryAnnotationChecked }, 'row']\">\n              <div\n                v-if=\"isView && summaryAnnotationChecked\"\n                class=\"col span-6 annotation-checkbox-container\"\n              >\n                <label>\n                  <t k=\"prometheusRule.alertingRules.annotations.summary.label\" />\n                </label>\n                <div>{{ value.annotations.summary }}</div>\n              </div>\n              <div\n                v-else\n                class=\"col span-6 annotation-checkbox-container\"\n              >\n                <Checkbox\n                  v-model=\"summaryAnnotationChecked\"\n                  :mode=\"mode\"\n                  :label=\"t('prometheusRule.alertingRules.annotations.summary.label')\"\n                />\n                <LabeledInput\n                  v-if=\"summaryAnnotationChecked\"\n                  v-model=\"value.annotations.summary\"\n                  class=\"mt-5\"\n                  :label=\"t('prometheusRule.alertingRules.annotations.summary.input')\"\n                  type=\"multiline\"\n                  :mode=\"mode\"\n                />\n              </div>\n            </div>\n            <div :class=\"[{ hide: isView && !messageAnnotationChecked }, 'row']\">\n              <div\n                v-if=\"isView && messageAnnotationChecked\"\n                class=\"col span-6 annotation-checkbox-container\"\n              >\n                <label><t\n                  k=\"prometheusRule.alertingRules.annotations.message.label\"\n                /></label>\n                <div>{{ value.annotations.message }}</div>\n              </div>\n              <div\n                v-else\n                class=\"col span-6 annotation-checkbox-container\"\n              >\n                <Checkbox\n                  v-model=\"messageAnnotationChecked\"\n                  :mode=\"mode\"\n                  :label=\"t('prometheusRule.alertingRules.annotations.message.label')\"\n                />\n                <LabeledInput\n                  v-if=\"messageAnnotationChecked\"\n                  v-model=\"value.annotations.message\"\n                  class=\"mt-5\"\n                  :label=\"t('prometheusRule.alertingRules.annotations.message.input')\"\n                  type=\"multiline\"\n                  :mode=\"mode\"\n                />\n              </div>\n            </div>\n            <div :class=\"[ { hide: isView && !descriptionAnnotationChecked }, 'row']\">\n              <div\n                v-if=\"isView && descriptionAnnotationChecked\"\n                class=\"col span-6 annotation-checkbox-container\"\n              >\n                <label><t\n                  k=\"prometheusRule.alertingRules.annotations.description.label\"\n                /></label>\n                <div>{{ value.annotations.description }}</div>\n              </div>\n              <div\n                v-else\n                class=\"col span-6 annotation-checkbox-container\"\n              >\n                <Checkbox\n                  v-model=\"descriptionAnnotationChecked\"\n                  :mode=\"mode\"\n                  :label=\"t('prometheusRule.alertingRules.annotations.description.label')\"\n                />\n                <LabeledInput\n                  v-if=\"descriptionAnnotationChecked\"\n                  v-model=\"value.annotations.description\"\n                  class=\"mt-5\"\n                  :label=\"t('prometheusRule.alertingRules.annotations.description.input')\"\n                  type=\"multiline\"\n                  :mode=\"mode\"\n                />\n              </div>\n            </div>\n            <div :class=\"[{ hide: isView && !runbookAnnotationChecked }, 'row']\">\n              <div\n                v-if=\"isView && runbookAnnotationChecked\"\n                class=\"col span-6 annotation-checkbox-container\"\n              >\n                <label>\n                  <t k=\"prometheusRule.alertingRules.annotations.runbook.label\" />\n                </label>\n                <div>{{ value.annotations.runbook_url }}</div>\n              </div>\n              <div\n                v-else\n                class=\"col span-6 annotation-checkbox-container\"\n              >\n                <Checkbox\n                  v-model=\"runbookAnnotationChecked\"\n                  :mode=\"mode\"\n                  :label=\"t('prometheusRule.alertingRules.annotations.runbook.label')\"\n                />\n                <LabeledInput\n                  v-if=\"runbookAnnotationChecked\"\n                  v-model=\"value.annotations.runbook_url\"\n                  class=\"mt-5\"\n                  :label=\"t('prometheusRule.alertingRules.annotations.runbook.input')\"\n                  type=\"multiline\"\n                  :mode=\"mode\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div :class=\"[{ hide: isView && Object.keys(filteredAnnotations).length === 0}, 'row', 'mt-0']\">\n          <KeyValue\n            key=\"annotations\"\n            :value=\"filteredAnnotations\"\n            :add-label=\"t('labels.addAnnotation')\"\n            :mode=\"mode\"\n            :read-allowed=\"false\"\n            @input=\"queueAnnotationUpdate\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.row {\n  margin: 20px 0;\n}\n.remove {\n  position: absolute;\n  top: 0;\n  right: 5px;\n}\n</style>\n"]}]}