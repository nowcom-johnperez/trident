{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/detail/provisioning.cattle.io.cluster.vue?vue&type=style&index=0&id=b9689d20&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/detail/provisioning.cattle.io.cluster.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5tYWluLXJvdyAubm8tZW50cmllcyB7CiAgdGV4dC1hbGlnbjogY2VudGVyOwp9CgoucG9vbC1yb3cgewogIGRpc3BsYXk6IGZsZXg7CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CgogICYuaGFzLWRlc2NyaXB0aW9uIHsKICAgIC5ncm91cC10YWIgewogICAgICAmLCAmOjphZnRlciB7CiAgICAgICAgICBoZWlnaHQ6IDUwcHg7CiAgICAgIH0KCiAgICAgICY6OmFmdGVyIHsKICAgICAgICAgIHJpZ2h0OiAtMjBweDsKICAgICAgfQoKICAgICAgLmRlc2NyaXB0aW9uIHsKICAgICAgICAgIG1hcmdpbi10b3A6IC0yMHB4OwogICAgICB9CiAgICB9CiAgfQogIC5ncm91cC1oZWFkZXItYnV0dG9ucyB7CiAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgZGlzcGxheTogZmxleDsKICB9Cn0KCi5sb2dzLWNvbnRhaW5lciB7CiAgaGVpZ2h0OiAxMDAlOwogIG92ZXJmbG93OiBhdXRvOwogIHBhZGRpbmc6IDVweDsKICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1sb2dzLWJnKTsKICBmb250LWZhbWlseTogTWVubG8sQ29uc29sYXMsbW9ub3NwYWNlOwogIGNvbG9yOiB2YXIoLS1sb2dzLXRleHQpOwoKICAuY2xvc2VkIHsKICAgIG9wYWNpdHk6IDAuMjU7CiAgfQoKICAudGltZSB7CiAgICB3aGl0ZS1zcGFjZTogbm93cmFwOwogICAgd2lkdGg6IGF1dG87CiAgICBwYWRkaW5nLXJpZ2h0OiAxNXB4OwogICAgdXNlci1zZWxlY3Q6IG5vbmU7CiAgfQoKICAubXNnIHsKICAgIHdoaXRlLXNwYWNlOiBub3JtYWw7CgogICAgLmhpZ2hsaWdodCB7CiAgICAgIGNvbG9yOiB2YXIoLS1sb2dzLWhpZ2hsaWdodCk7CiAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWxvZ3MtaGlnaGxpZ2h0LWJnKTsKICAgIH0KICB9Cn0KCi5zbmFwc2hvdHMgOjp2LWRlZXAgLnN0YXRlLWRlc2NyaXB0aW9uewogIGZvbnQtc2l6ZTogLjhlbTsKICBjb2xvcjogdmFyKC0tZXJyb3IpOwp9Cgo="},{"version":3,"sources":["provisioning.cattle.io.cluster.vue"],"names":[],"mappings":";AA6gCA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"provisioning.cattle.io.cluster.vue","sourceRoot":"node_modules/@rancher/shell/detail","sourcesContent":["<script>\nimport Loading from '@shell/components/Loading';\nimport { Banner } from '@components/Banner';\nimport ResourceTable, { defaultTableSortGenerationFn } from '@shell/components/ResourceTable';\nimport ResourceTabs from '@shell/components/form/ResourceTabs';\nimport SortableTable from '@shell/components/SortableTable';\nimport CopyCode from '@shell/components/CopyCode';\nimport Tab from '@shell/components/Tabbed/Tab';\nimport { allHash } from '@shell/utils/promise';\nimport { CAPI, MANAGEMENT, NORMAN, SNAPSHOT } from '@shell/config/types';\nimport {\n  STATE, NAME as NAME_COL, AGE, AGE_NORMAN, INTERNAL_EXTERNAL_IP, STATE_NORMAN, ROLES, MACHINE_NODE_OS, MANAGEMENT_NODE_OS, NAME,\n} from '@shell/config/table-headers';\nimport { STATES_ENUM } from '@shell/plugins/dashboard-store/resource-class';\nimport CustomCommand from '@shell/edit/provisioning.cattle.io.cluster/CustomCommand';\nimport AsyncButton from '@shell/components/AsyncButton.vue';\nimport AnsiUp from 'ansi_up';\nimport day from 'dayjs';\nimport { addParams } from '@shell/utils/url';\nimport { base64Decode } from '@shell/utils/crypto';\nimport { DATE_FORMAT, TIME_FORMAT, SCALE_POOL_PROMPT } from '@shell/store/prefs';\nimport { escapeHtml } from '@shell/utils/string';\nimport MachineSummaryGraph from '@shell/components/formatter/MachineSummaryGraph';\nimport Socket, {\n  EVENT_CONNECTED,\n  EVENT_DISCONNECTED,\n  EVENT_MESSAGE,\n  //  EVENT_FRAME_TIMEOUT,\n  EVENT_CONNECT_ERROR\n} from '@shell/utils/socket';\nimport { get } from '@shell/utils/object';\nimport CapiMachineDeployment from '@shell/models/cluster.x-k8s.io.machinedeployment';\nimport { isAlternate } from '@shell/utils/platform';\n\nlet lastId = 1;\nconst ansiup = new AnsiUp();\n\n/**\n * Machine Deployment has a reference to the 'template' used to create that deployment\n * For an empty machine pool, we (obviously) don't get any machine deployments for that pool.\n *\n * This class allows us to fake a machine deployment - when created, we set additional properties (_cluster etc)\n * and use these in the getters.\n **/\nclass EmptyCapiMachineDeployment extends CapiMachineDeployment {\n  get inClusterSpec() {\n    return this._clusterSpec;\n  }\n\n  get cluster() {\n    return this._cluster;\n  }\n\n  get template() {\n    return this._template;\n  }\n}\n\nexport default {\n  components: {\n    Loading,\n    Banner,\n    ResourceTable,\n    ResourceTabs,\n    SortableTable,\n    Tab,\n    CopyCode,\n    CustomCommand,\n    AsyncButton,\n    MachineSummaryGraph,\n  },\n\n  props: {\n    value: {\n      type:    Object,\n      default: () => {\n        return {};\n      }\n    }\n  },\n\n  async fetch() {\n    await this.value.waitForProvisioner();\n\n    const extClass = this.$plugin.getDynamic('provisioner', this.value.machineProvider);\n\n    if (extClass) {\n      this.extProvider = new extClass({\n        dispatch: this.$store.dispatch,\n        getters:  this.$store.getters,\n        axios:    this.$store.$axios,\n        $plugin:  this.$store.app.$plugin,\n        $t:       this.t\n      });\n      this.extDetailTabs = {\n        ...this.extDetailTabs,\n        ...this.extProvider.detailTabs\n      };\n      this.extCustomParams = { provider: this.value.machineProvider };\n    }\n\n    const fetchOne = {};\n\n    if ( this.$store.getters['management/canList'](CAPI.MACHINE_DEPLOYMENT) ) {\n      fetchOne.machineDeployments = this.$store.dispatch('management/findAll', { type: CAPI.MACHINE_DEPLOYMENT });\n    }\n\n    if ( this.$store.getters['management/canList'](CAPI.MACHINE) ) {\n      fetchOne.machines = this.$store.dispatch('management/findAll', { type: CAPI.MACHINE });\n    }\n\n    if ( this.$store.getters['management/canList'](SNAPSHOT) ) {\n      fetchOne.snapshots = this.$store.dispatch('management/findAll', { type: SNAPSHOT });\n    }\n\n    if ( this.value.isImported || this.value.isCustom || this.value.isHostedKubernetesProvider ) {\n      fetchOne.clusterToken = this.value.getOrCreateToken();\n    }\n\n    // Need to get Norman clusters so that we can check if user has permissions to access the local cluster\n    if ( this.$store.getters['rancher/canList'](NORMAN.CLUSTER) ) {\n      fetchOne.normanClusters = this.$store.dispatch('rancher/findAll', { type: NORMAN.CLUSTER });\n    }\n\n    if ( this.value.isRke1 && this.$store.getters['isRancher'] ) {\n      fetchOne.etcdBackups = this.$store.dispatch('rancher/findAll', { type: NORMAN.ETCD_BACKUP });\n\n      fetchOne.normanNodePools = this.$store.dispatch('rancher/findAll', { type: NORMAN.NODE_POOL });\n    }\n\n    const fetchOneRes = await allHash(fetchOne);\n\n    this.allMachines = fetchOneRes.machines || [];\n    this.allMachineDeployments = fetchOneRes.machineDeployments || [];\n    this.haveMachines = !!fetchOneRes.machines;\n    this.haveDeployments = !!fetchOneRes.machineDeployments;\n    this.clusterToken = fetchOneRes.clusterToken;\n    this.etcdBackups = fetchOneRes.etcdBackups;\n\n    if (fetchOneRes.normanClusters) {\n      // Does the user have access to the local cluster? Need to in order to be able to show the 'Related Resources' tab\n      this.hasLocalAccess = !!fetchOneRes.normanClusters.find((c) => c.internal);\n    }\n\n    const fetchTwo = {};\n\n    const thisClusterMachines = this.allMachineDeployments.filter((deployment) => {\n      return deployment?.spec?.clusterName === this.value.metadata.name;\n    });\n\n    const machineDeploymentTemplateType = thisClusterMachines?.[0]?.templateType;\n\n    if (machineDeploymentTemplateType && this.$store.getters['management/schemaFor'](machineDeploymentTemplateType) ) {\n      fetchTwo.mdtt = this.$store.dispatch('management/findAll', { type: machineDeploymentTemplateType });\n    }\n\n    if (!this.showMachines) {\n      if ( this.$store.getters['management/canList'](MANAGEMENT.NODE) ) {\n        fetchTwo.allNodes = this.$store.dispatch('management/findAll', { type: MANAGEMENT.NODE });\n      }\n\n      if ( this.$store.getters['management/canList'](MANAGEMENT.NODE_POOL) ) {\n        fetchTwo.allNodePools = this.$store.dispatch('management/findAll', { type: MANAGEMENT.NODE_POOL });\n      }\n\n      if ( this.$store.getters['management/canList'](MANAGEMENT.NODE_TEMPLATE) ) {\n        fetchTwo.nodeTemplates = this.$store.dispatch('management/findAll', { type: MANAGEMENT.NODE_TEMPLATE });\n      }\n    }\n\n    const fetchTwoRes = await allHash(fetchTwo);\n\n    this.allNodes = fetchTwoRes.allNodes || [];\n    this.haveNodes = !!fetchTwoRes.allNodes;\n    this.allNodePools = fetchTwoRes.allNodePools || [];\n    this.haveNodePools = !!fetchTwoRes.allNodePools;\n    this.machineTemplates = fetchTwoRes.mdtt || [];\n\n    // Fetch RKE template revisions so we can show when an updated template is available\n    // This request does not need to be blocking\n    if ( this.$store.getters['management/canList'](MANAGEMENT.RKE_TEMPLATE) ) {\n      this.$store.dispatch('management/findAll', { type: MANAGEMENT.RKE_TEMPLATE });\n    }\n\n    if ( this.$store.getters['management/canList'](MANAGEMENT.RKE_TEMPLATE_REVISION) ) {\n      this.$store.dispatch('management/findAll', { type: MANAGEMENT.RKE_TEMPLATE_REVISION });\n    }\n  },\n\n  created() {\n    if ( this.showLog ) {\n      this.connectLog();\n    }\n  },\n\n  beforeDestroy() {\n    if ( this.logSocket ) {\n      this.logSocket.disconnect();\n      this.logSocket = null;\n    }\n  },\n\n  data() {\n    return {\n\n      allMachines:           [],\n      allMachineDeployments: [],\n      allNodes:              [],\n      allNodePools:          [],\n\n      haveMachines:    false,\n      haveDeployments: false,\n      haveNodes:       false,\n      haveNodePools:   false,\n      hasLocalAccess:  false,\n\n      mgmtNodeSchema: this.$store.getters[`management/schemaFor`](MANAGEMENT.NODE),\n      machineSchema:  this.$store.getters[`management/schemaFor`](CAPI.MACHINE),\n\n      clusterToken: null,\n      etcdBackups:  null,\n\n      logOpen:   false,\n      logSocket: null,\n      logs:      [],\n\n      extProvider:     null,\n      extCustomParams: null,\n      extDetailTabs:   {\n        machines:     true, // in this component\n        logs:         true, // in this component\n        registration: true, // in this component\n        snapshots:    true, // in this component\n        related:      true, // in ResourceTabs\n        events:       true, // in ResourceTabs\n        conditions:   true, // in ResourceTabs\n      },\n\n      showWindowsWarning: false\n    };\n  },\n\n  watch: {\n    showNodes(neu) {\n      if (neu) {\n        this.$store.dispatch('rancher/findAll', { type: NORMAN.NODE });\n      }\n    },\n  },\n\n  computed: {\n    defaultTab() {\n      if (this.showRegistration) {\n        if (this.value.isRke2 ? !this.machines?.length : !this.nodes?.length) {\n          return 'registration';\n        }\n      }\n\n      if (this.showMachines) {\n        return 'machine-pools';\n      }\n\n      if (this.showNodes) {\n        return 'node-pools';\n      }\n\n      return '';\n    },\n\n    // Used to show summary graph for each node pool group in the machine pool table\n    poolSummaryInfo() {\n      const info = {};\n\n      this.value?.pools.forEach((p) => {\n        const group = `[${ p.type }: ${ p.id }]`;\n\n        info[group] = p;\n      });\n\n      return info;\n    },\n\n    fakeMachines() {\n      const machineNameFn = (clusterName, machinePoolName) => `${ clusterName }-${ machinePoolName }`;\n\n      // When we scale up, the quantity will change to N+1 - so from 0 to 1, the quantity changes,\n      // but it takes tiem for the machine to appear, so the pool is empty, but if we just go off on a non-zero quqntity\n      // then the pool would be hidden - so we find empty pool by checking the machines\n      const emptyPools = (this.value.spec.rkeConfig?.machinePools || []).filter((mp) => {\n        const machineFullName = machineNameFn(this.value.name, mp.name);\n\n        const machines = this.value.machines.filter((machine) => {\n          const isElementalCluster = machine.spec?.infrastructureRef?.apiVersion.startsWith('elemental.cattle.io');\n          const machinePoolInfName = machine.spec?.infrastructureRef?.name;\n\n          if (isElementalCluster) {\n            return machinePoolInfName.includes(machineFullName);\n          }\n\n          // if labels exist, then the machineFullName must unequivocally be equal to manchineLabelFullName (based on labels)\n          const machineLabelClusterName = machine.metadata?.labels?.['cluster.x-k8s.io/cluster-name'];\n          const machineLabelPoolName = machine.metadata?.labels?.['rke.cattle.io/rke-machine-pool-name'];\n\n          if (machineLabelClusterName && machineLabelPoolName) {\n            const manchineLabelFullName = machineNameFn(machineLabelClusterName, machineLabelPoolName);\n\n            return machineFullName === manchineLabelFullName;\n          }\n\n          return machinePoolInfName.startsWith(machineFullName);\n        });\n\n        return machines.length === 0;\n      });\n\n      // When a deployment has no machines it's not shown.... so add a fake machine to it\n      // This is a catch all scenario seen in older node pool world but not deployments\n      return emptyPools.map((mp, i) => {\n        const pool = new EmptyCapiMachineDeployment(\n          {\n            id:       i,\n            metadata: {\n              name:      `${ this.value.nameDisplay }-${ mp.name }`,\n              namespace: this.value.namespace,\n            },\n            spec: {}\n          },\n          {\n            getters:     this.$store.getters,\n            rootGetters: this.$root.$store.getters,\n          }\n        );\n\n        const templateNamePrefix = `${ pool.metadata.name }-`;\n\n        // All of these properties are needed to ensure the pool displays correctly and that we can scale up and down\n        pool._template = this.machineTemplates.find((t) => t.metadata.name.startsWith(templateNamePrefix));\n        pool._cluster = this.value;\n        pool._clusterSpec = mp;\n\n        return {\n          poolId:           pool.id,\n          mainRowKey:       'isFake',\n          pool,\n          availableActions: []\n        };\n      });\n    },\n\n    machines() {\n      return [...this.value.machines, ...this.fakeMachines];\n    },\n\n    nodes() {\n      const nodes = this.allNodes.filter((x) => x.mgmtClusterId === this.value.mgmtClusterId);\n\n      return [...nodes, ...this.fakeNodes];\n    },\n\n    fakeNodes() {\n      // When a pool has no nodes it's not shown.... so add a fake node to it\n      const emptyNodePools = this.allNodePools.filter((x) => x.spec.clusterName === this.value.mgmtClusterId && x.spec.quantity === 0);\n\n      return emptyNodePools.map((np) => ({\n        spec:             { nodePoolName: np.id.replace('/', ':') },\n        mainRowKey:       'isFake',\n        pool:             np,\n        availableActions: []\n      }));\n    },\n\n    showMachines() {\n      const showMachines = this.haveMachines && (this.value.isRke2 || !!this.machines.length);\n\n      return showMachines && this.extDetailTabs.machines;\n    },\n\n    showNodes() {\n      return !this.showMachines && this.haveNodes && !!this.nodes.length;\n    },\n\n    showSnapshots() {\n      if (this.value.isRke1) {\n        return this.$store.getters['rancher/canList'](NORMAN.ETCD_BACKUP) && this.extDetailTabs.snapshots;\n      } else if (this.value.isRke2) {\n        return this.$store.getters['management/canList'](SNAPSHOT) && this.extDetailTabs.snapshots;\n      }\n\n      return false;\n    },\n\n    showEksNodeGroupWarning() {\n      if ( this.value.provisioner === 'EKS' && this.value.state !== STATES_ENUM.ACTIVE) {\n        const desiredTotal = this.value.eksNodeGroups.filter((g) => g.desiredSize === 0);\n\n        if ( desiredTotal.length === this.value.eksNodeGroups.length ) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    machineHeaders() {\n      return [\n        STATE,\n        NAME_COL,\n        {\n          name:          'node-name',\n          labelKey:      'tableHeaders.machineNodeName',\n          sort:          'status.nodeRef.name',\n          value:         'status.nodeRef.name',\n          formatter:     'LinkDetail',\n          formatterOpts: { reference: 'kubeNodeDetailLocation' },\n          dashIfEmpty:   true,\n        },\n        INTERNAL_EXTERNAL_IP,\n        MACHINE_NODE_OS,\n        ROLES,\n        AGE,\n      ];\n    },\n\n    mgmtNodeSchemaHeaders() {\n      return [\n        STATE, NAME_COL,\n        {\n          name:          'node-name',\n          labelKey:      'tableHeaders.machineNodeName',\n          sort:          'kubeNodeName',\n          value:         'kubeNodeName',\n          formatter:     'LinkDetail',\n          formatterOpts: { reference: 'kubeNodeDetailLocation' },\n          dashIfEmpty:   true,\n        },\n        INTERNAL_EXTERNAL_IP,\n        MANAGEMENT_NODE_OS,\n        ROLES,\n        AGE\n      ];\n    },\n\n    rke1Snapshots() {\n      const mgmtId = this.value.mgmt?.id;\n\n      if ( !mgmtId ) {\n        return [];\n      }\n\n      return (this.etcdBackups || []).filter((x) => x.clusterId === mgmtId);\n    },\n\n    rke2Snapshots() {\n      return this.value.etcdSnapshots;\n    },\n\n    rke1SnapshotHeaders() {\n      return [\n        STATE_NORMAN,\n        {\n          name:          'name',\n          labelKey:      'tableHeaders.name',\n          value:         'nameDisplay',\n          sort:          ['nameSort'],\n          canBeVariable: true,\n        },\n        {\n          name:     'version',\n          labelKey: 'tableHeaders.version',\n          value:    'status.kubernetesVersion',\n          sort:     'status.kubernetesVersion',\n          width:    150,\n        },\n        { ...AGE_NORMAN, canBeVariable: true },\n        {\n          name:      'manual',\n          labelKey:  'tableHeaders.manual',\n          value:     'manual',\n          formatter: 'Checked',\n          sort:      ['manual'],\n          align:     'center',\n          width:     50,\n        },\n      ];\n    },\n\n    rke2SnapshotHeaders() {\n      return [\n        {\n          ...STATE_NORMAN, value: 'snapshotFile.status', formatterOpts: { arbitrary: true }\n        },\n        NAME,\n        {\n          name:      'size',\n          labelKey:  'tableHeaders.size',\n          value:     'snapshotFile.size',\n          sort:      'snapshotFile.size',\n          formatter: 'Si',\n          width:     150,\n        },\n        {\n          ...AGE,\n          sort:          'snapshotFile.createdAt:desc',\n          canBeVariable: true\n        },\n      ];\n    },\n\n    showRegistration() {\n      if ( !this.clusterToken ) {\n        return false;\n      }\n\n      if ( this.value.isImported ) {\n        return !this.value.mgmt?.isReady && this.extDetailTabs.registration;\n      }\n\n      if ( this.value.isCustom ) {\n        return this.extDetailTabs.registration;\n      }\n\n      if ( this.value.isHostedKubernetesProvider && !this.isClusterReady ) {\n        return this.extDetailTabs.registration;\n      }\n\n      return false;\n    },\n\n    isClusterReady() {\n      return this.value.mgmt?.isReady;\n    },\n\n    showLog() {\n      const showLog = this.value.mgmt?.hasLink('log');\n\n      return showLog && this.extDetailTabs.logs;\n    },\n\n    dateTimeFormatStr() {\n      const dateFormat = escapeHtml( this.$store.getters['prefs/get'](DATE_FORMAT));\n\n      return `${ dateFormat } ${ this.timeFormatStr }`;\n    },\n\n    timeFormatStr() {\n      return escapeHtml( this.$store.getters['prefs/get'](TIME_FORMAT));\n    },\n\n    hasWindowsMachine() {\n      return this.machines.some((machine) => get(machine, 'status.nodeInfo.operatingSystem') === 'windows');\n    },\n\n    snapshotsGroupBy() {\n      return 'backupLocation';\n    }\n  },\n\n  mounted() {\n    window.c = this;\n  },\n\n  methods: {\n    toggleScaleDownModal( event, resources ) {\n      // Check if the user held alt key when an action is clicked.\n      const alt = isAlternate(event);\n      const showScalePoolPrompt = this.$store.getters['prefs/get'](SCALE_POOL_PROMPT);\n\n      // Prompt if showScalePoolPrompt pref not store and user did not held alt key\n      if (!alt && !showScalePoolPrompt) {\n        this.$store.dispatch('management/promptModal', {\n          component:  'ScalePoolDownDialog',\n          resources,\n          modalWidth: '450px'\n        });\n      } else {\n        // User held alt key, so don't prompt\n        resources.scalePool(-1);\n      }\n    },\n\n    async takeSnapshot(btnCb) {\n      try {\n        await this.value.takeSnapshot();\n\n        // Give the change event some time to show up\n        setTimeout(() => {\n          btnCb(true);\n        }, 1000);\n      } catch (err) {\n        this.$store.dispatch('growl/fromError', { title: 'Error creating snapshot', err });\n        btnCb(false);\n      }\n    },\n\n    showPoolAction(event, pool) {\n      this.$store.commit(`action-menu/show`, {\n        resources: [pool],\n        elem:      event.target\n      });\n    },\n\n    showPoolActionButton(pool) {\n      return !!pool.availableActions?.length;\n    },\n\n    async connectLog() {\n      if ( this.logSocket ) {\n        await this.logSocket.disconnect();\n        this.logSocket = null;\n      }\n\n      const params = {\n        follow:     true,\n        timestamps: true,\n        pretty:     true,\n      };\n\n      let url = this.value.mgmt?.linkFor('log');\n\n      url = addParams(url.replace(/^http/, 'ws'), params);\n\n      this.logSocket = new Socket(url, true, 0);\n      this.logSocket.addEventListener(EVENT_CONNECTED, (e) => {\n        this.logs = [];\n        this.logOpen = true;\n      });\n\n      this.logSocket.addEventListener(EVENT_DISCONNECTED, (e) => {\n        this.logOpen = false;\n      });\n\n      this.logSocket.addEventListener(EVENT_CONNECT_ERROR, (e) => {\n        this.logOpen = false;\n        console.error('Connect Error', e); // eslint-disable-line no-console\n      });\n\n      this.logSocket.addEventListener(EVENT_MESSAGE, (e) => {\n        const line = base64Decode(e.detail.data);\n\n        let msg = line;\n        let time = null;\n\n        const idx = line.indexOf(' ');\n\n        if ( idx > 0 ) {\n          const timeStr = line.substr(0, idx);\n          const date = new Date(timeStr);\n\n          if ( !isNaN(date.getSeconds()) ) {\n            time = date.toISOString();\n            msg = line.substr(idx + 1);\n          }\n        }\n\n        this.logs.push({\n          id:     lastId++,\n          msg:    ansiup.ansi_to_html(msg),\n          rawMsg: msg,\n          time,\n        });\n      });\n\n      this.logSocket.connect();\n    },\n\n    format(time) {\n      if ( !time ) {\n        return '';\n      }\n\n      const val = day(time);\n      const today = day().format('YYYY-MM-DD');\n\n      if ( val.format('YYYY-MM-DD') === today ) {\n        return day(time).format(this.timeFormatStr);\n      } else {\n        return day(time).format(this.dateTimeFormatStr);\n      }\n    },\n\n    machineSortGenerationFn() {\n      // The sort generation function creates a unique value and is used to create a key including sort details.\n      // The unique key determines if the list is redrawn or a cached version is shown.\n      // Because we ensure the 'not in a pool' group is there via a row, and timing issues, the unqiue key doesn't change\n      // after a machine is added/removed... so the list won't update... so we need to inject a string to ensure the key is fresh\n      const base = defaultTableSortGenerationFn(this.machineSchema, this.$store);\n\n      return base + (!!this.fakeMachines.length ? '-fake' : '');\n    },\n\n    nodeSortGenerationFn() {\n      // The sort generation function creates a unique value and is used to create a key including sort details.\n      // The unique key determines if the list is redrawn or a cached version is shown.\n      // Because we ensure the 'not in a pool' group is there via a row, and timing issues, the unqiue key doesn't change\n      // after a machine is added/removed... so the list won't update... so we need to inject a string to ensure the key is fresh\n      const base = defaultTableSortGenerationFn(this.mgmtNodeSchema, this.$store);\n\n      return base + (!!this.fakeNodes.length ? '-fake' : '');\n    },\n  }\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n  <div v-else>\n    <Banner\n      v-if=\"showWindowsWarning\"\n      color=\"error\"\n      :label=\"t('cluster.banner.os', { newOS: 'Windows', existingOS: 'Linux' })\"\n    />\n    <Banner\n      v-if=\"showEksNodeGroupWarning\"\n      color=\"error\"\n      :label=\"t('cluster.banner.desiredNodeGroupWarning')\"\n    />\n\n    <Banner\n      v-if=\"$fetchState.error\"\n      color=\"error\"\n      :label=\"$fetchState.error\"\n    />\n    <ResourceTabs\n      v-model=\"value\"\n      :default-tab=\"defaultTab\"\n      :need-related=\"hasLocalAccess\"\n      :extension-params=\"extCustomParams\"\n      :needRelated=\"extDetailTabs.related\"\n      :needEvents=\"extDetailTabs.events\"\n      :needConditions=\"extDetailTabs.conditions\"\n    >\n      <Tab\n        v-if=\"showMachines\"\n        name=\"machine-pools\"\n        :label-key=\"value.isCustom ? 'cluster.tabs.machines' : 'cluster.tabs.machinePools'\"\n        :weight=\"4\"\n      >\n        <ResourceTable\n          :rows=\"machines\"\n          :schema=\"machineSchema\"\n          :headers=\"machineHeaders\"\n          default-sort-by=\"name\"\n          :groupable=\"false\"\n          :group-by=\"value.isCustom ? null : 'poolId'\"\n          group-ref=\"pool\"\n          :group-sort=\"['pool.nameDisplay']\"\n          :sort-generation-fn=\"machineSortGenerationFn\"\n        >\n          <template #main-row:isFake=\"{fullColspan}\">\n            <tr class=\"main-row\">\n              <td\n                :colspan=\"fullColspan\"\n                class=\"no-entries\"\n              >\n                {{ t('node.list.noNodes') }}\n              </td>\n            </tr>\n          </template>\n\n          <template #group-by=\"{group}\">\n            <div\n              class=\"pool-row\"\n              :class=\"{'has-description':group.ref && group.ref.template}\"\n            >\n              <div\n                v-trim-whitespace\n                class=\"group-tab\"\n              >\n                <div\n                  v-if=\"group && group.ref\"\n                  v-clean-html=\"group.ref.groupByPoolShortLabel\"\n                />\n                <div\n                  v-else\n                  v-clean-html=\"t('resourceTable.groupLabel.notInANodePool')\"\n                />\n                <div\n                  v-if=\"group.ref && group.ref.template\"\n                  class=\"description text-muted text-small\"\n                >\n                  {{ group.ref.providerDisplay }} &ndash;  {{ group.ref.providerLocation }} / {{ group.ref.providerSize }} ({{ group.ref.providerName }})\n                </div>\n              </div>\n              <div\n                v-if=\"group.ref && poolSummaryInfo[group.ref]\"\n                class=\"right group-header-buttons mr-20\"\n              >\n                <MachineSummaryGraph\n                  :row=\"poolSummaryInfo[group.ref]\"\n                  :horizontal=\"true\"\n                  class=\"mr-20\"\n                />\n                <template v-if=\"value.hasLink('update') && group.ref.showScalePool\">\n                  <button\n                    v-clean-tooltip=\"t('node.list.scaleDown')\"\n                    :disabled=\"!group.ref.canScaleDownPool()\"\n                    type=\"button\"\n                    class=\"btn btn-sm role-secondary\"\n                    @click=\"toggleScaleDownModal($event, group.ref)\"\n                  >\n                    <i class=\"icon icon-sm icon-minus\" />\n                  </button>\n                  <button\n                    v-clean-tooltip=\"t('node.list.scaleUp')\"\n                    :disabled=\"!group.ref.canScaleUpPool()\"\n                    type=\"button\"\n                    class=\"btn btn-sm role-secondary ml-10\"\n                    @click=\"group.ref.scalePool(1)\"\n                  >\n                    <i class=\"icon icon-sm icon-plus\" />\n                  </button>\n                </template>\n              </div>\n            </div>\n          </template>\n        </ResourceTable>\n      </Tab>\n\n      <Tab\n        v-else-if=\"showNodes\"\n        name=\"node-pools\"\n        :label-key=\"value.isCustom ? 'cluster.tabs.machines' : 'cluster.tabs.machinePools'\"\n        :weight=\"4\"\n      >\n        <ResourceTable\n          :schema=\"mgmtNodeSchema\"\n          :headers=\"mgmtNodeSchemaHeaders\"\n          :rows=\"nodes\"\n          :groupable=\"false\"\n          :group-by=\"value.isCustom ? null : 'spec.nodePoolName'\"\n          group-ref=\"pool\"\n          :group-sort=\"['pool.nameDisplay']\"\n          :sort-generation-fn=\"nodeSortGenerationFn\"\n        >\n          <template #main-row:isFake=\"{fullColspan}\">\n            <tr class=\"main-row\">\n              <td\n                :colspan=\"fullColspan\"\n                class=\"no-entries\"\n              >\n                {{ t('node.list.noNodes') }}\n              </td>\n            </tr>\n          </template>\n\n          <template #group-by=\"{group}\">\n            <div\n              class=\"pool-row\"\n              :class=\"{'has-description':group.ref && group.ref.nodeTemplate}\"\n            >\n              <div\n                v-trim-whitespace\n                class=\"group-tab\"\n              >\n                <div\n                  v-if=\"group.ref\"\n                  v-clean-html=\"t('resourceTable.groupLabel.nodePool', { name: group.ref.spec.hostnamePrefix}, true)\"\n                />\n                <div\n                  v-else\n                  v-clean-html=\"t('resourceTable.groupLabel.notInANodePool')\"\n                />\n                <div\n                  v-if=\"group.ref && group.ref.nodeTemplate\"\n                  class=\"description text-muted text-small\"\n                >\n                  {{ group.ref.providerDisplay }} &ndash;  {{ group.ref.providerLocation }} / {{ group.ref.providerSize }} ({{ group.ref.providerName }})\n                </div>\n              </div>\n              <div\n                v-if=\"group.ref\"\n                class=\"right group-header-buttons\"\n              >\n                <MachineSummaryGraph\n                  :row=\"poolSummaryInfo[group.ref]\"\n                  :horizontal=\"true\"\n                  class=\"mr-20\"\n                />\n                <template v-if=\"group.ref.hasLink('update')\">\n                  <button\n                    v-clean-tooltip=\"t('node.list.scaleDown')\"\n                    :disabled=\"group.ref.spec.quantity < 2\"\n                    type=\"button\"\n                    class=\"btn btn-sm role-secondary\"\n                    @click=\"toggleScaleDownModal($event, group.ref)\"\n                  >\n                    <i class=\"icon icon-sm icon-minus\" />\n                  </button>\n                  <button\n                    v-clean-tooltip=\"t('node.list.scaleUp')\"\n                    type=\"button\"\n                    class=\"btn btn-sm role-secondary ml-10\"\n                    @click=\"group.ref.scalePool(1)\"\n                  >\n                    <i class=\"icon icon-sm icon-plus\" />\n                  </button>\n                </template>\n\n                <button\n                  type=\"button\"\n                  class=\"project-action btn btn-sm role-multi-action actions mr-5 ml-15\"\n                  :class=\"{invisible: !showPoolActionButton(group.ref)}\"\n                  @click=\"showPoolAction($event, group.ref)\"\n                >\n                  <i class=\"icon icon-actions\" />\n                </button>\n              </div>\n            </div>\n          </template>\n        </ResourceTable>\n      </Tab>\n\n      <Tab\n        v-if=\"showLog\"\n        name=\"log\"\n        :label=\"t('cluster.tabs.log')\"\n        :weight=\"3\"\n        class=\"logs-container\"\n      >\n        <table\n          class=\"fixed\"\n          cellpadding=\"0\"\n          cellspacing=\"0\"\n        >\n          <tbody class=\"logs-body\">\n            <template v-if=\"logs.length\">\n              <tr\n                v-for=\"line in logs\"\n                :key=\"line.id\"\n              >\n                <td\n                  :key=\"line.id + '-time'\"\n                  v-clean-html=\"format(line.time)\"\n                  class=\"time\"\n                />\n                <td\n                  :key=\"line.id + '-msg'\"\n                  v-clean-html=\"line.msg\"\n                  class=\"msg\"\n                />\n              </tr>\n            </template>\n            <tr\n              v-else-if=\"!logOpen\"\n              v-t=\"'cluster.log.connecting'\"\n              colspan=\"2\"\n              class=\"msg text-muted\"\n            />\n            <tr\n              v-else\n              v-t=\"'cluster.log.noData'\"\n              colspan=\"2\"\n              class=\"msg text-muted\"\n            />\n          </tbody>\n        </table>\n      </Tab>\n\n      <Tab\n        v-if=\"showRegistration\"\n        name=\"registration\"\n        :label=\"t('cluster.tabs.registration')\"\n        :weight=\"2\"\n      >\n        <Banner\n          v-if=\"!value.isCustom\"\n          color=\"warning\"\n          :label=\"t('cluster.import.warningBanner')\"\n        />\n        <CustomCommand\n          v-if=\"value.isCustom\"\n          :cluster-token=\"clusterToken\"\n          :cluster=\"value\"\n          @copied-windows=\"hasWindowsMachine ? null : showWindowsWarning = true\"\n        />\n        <template v-else>\n          <h4 v-clean-html=\"t('cluster.import.commandInstructions', null, true)\" />\n          <CopyCode class=\"m-10 p-10\">\n            {{ clusterToken.command }}\n          </CopyCode>\n\n          <h4\n            v-clean-html=\"t('cluster.import.commandInstructionsInsecure', null, true)\"\n            class=\"mt-10\"\n          />\n          <CopyCode class=\"m-10 p-10\">\n            {{ clusterToken.insecureCommand }}\n          </CopyCode>\n\n          <h4\n            v-clean-html=\"t('cluster.import.clusterRoleBindingInstructions', null, true)\"\n            class=\"mt-10\"\n          />\n          <CopyCode class=\"m-10 p-10\">\n            {{ t('cluster.import.clusterRoleBindingCommand', null, true) }}\n          </CopyCode>\n        </template>\n      </Tab>\n\n      <Tab\n        v-if=\"showSnapshots\"\n        name=\"snapshots\"\n        label=\"Snapshots\"\n        :weight=\"1\"\n      >\n        <SortableTable\n          class=\"snapshots\"\n          :headers=\"value.isRke1 ? rke1SnapshotHeaders : rke2SnapshotHeaders\"\n          default-sort-by=\"age\"\n          :table-actions=\"value.isRke1\"\n          :rows=\"value.isRke1 ? rke1Snapshots : rke2Snapshots\"\n          :search=\"false\"\n          :groupable=\"true\"\n          :group-by=\"snapshotsGroupBy\"\n        >\n          <template #header-right>\n            <AsyncButton\n              mode=\"snapshot\"\n              class=\"btn role-primary\"\n              :disabled=\"!isClusterReady\"\n              @click=\"takeSnapshot\"\n            />\n          </template>\n          <template #group-by=\"{group}\">\n            <div class=\"group-bar\">\n              <div class=\"group-tab\">\n                {{ t('cluster.snapshot.groupLabel') }}: {{ group.key }}\n              </div>\n            </div>\n          </template>\n        </SortableTable>\n      </Tab>\n    </ResourceTabs>\n  </div>\n</template>\n\n<style lang='scss' scoped>\n.main-row .no-entries {\n  text-align: center;\n}\n\n.pool-row {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  &.has-description {\n    .group-tab {\n      &, &::after {\n          height: 50px;\n      }\n\n      &::after {\n          right: -20px;\n      }\n\n      .description {\n          margin-top: -20px;\n      }\n    }\n  }\n  .group-header-buttons {\n    align-items: center;\n    display: flex;\n  }\n}\n\n.logs-container {\n  height: 100%;\n  overflow: auto;\n  padding: 5px;\n  background-color: var(--logs-bg);\n  font-family: Menlo,Consolas,monospace;\n  color: var(--logs-text);\n\n  .closed {\n    opacity: 0.25;\n  }\n\n  .time {\n    white-space: nowrap;\n    width: auto;\n    padding-right: 15px;\n    user-select: none;\n  }\n\n  .msg {\n    white-space: normal;\n\n    .highlight {\n      color: var(--logs-highlight);\n      background-color: var(--logs-highlight-bg);\n    }\n  }\n}\n\n.snapshots ::v-deep .state-description{\n  font-size: .8em;\n  color: var(--error);\n}\n\n</style>\n"]}]}