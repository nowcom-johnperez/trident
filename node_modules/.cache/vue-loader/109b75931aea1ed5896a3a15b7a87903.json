{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/networking.k8s.io.networkpolicy/PolicyRuleTarget.vue?vue&type=style&index=0&id=17cc55a3&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/networking.k8s.io.networkpolicy/PolicyRuleTarget.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5uYW1lc3BhY2UtcG9kLXJ1bGUgewogIGRpc3BsYXk6IHRhYmxlOwogIHdpZHRoOiAxMDBweDsKICBwYWRkaW5nOiAwLCAxMHB4LCAwLCAwOwogIHRleHQtYWxpZ246IGNlbnRlcjsKCiAgLmxhYmVsIHsKICAgIGRpc3BsYXk6dGFibGUtY2VsbDsKICAgIHZlcnRpY2FsLWFsaWduOm1pZGRsZTsKICB9Cn0K"},{"version":3,"sources":["PolicyRuleTarget.vue"],"names":[],"mappings":";AA+XA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"PolicyRuleTarget.vue","sourceRoot":"node_modules/@rancher/shell/edit/networking.k8s.io.networkpolicy","sourcesContent":["<script>\n\nimport { LabeledInput } from '@components/Form/LabeledInput';\nimport LabeledSelect from '@shell/components/form/LabeledSelect';\nimport { _EDIT } from '@shell/config/query-params';\nimport MatchExpressions from '@shell/components/form/MatchExpressions';\nimport { convert, matching, simplify } from '@shell/utils/selector';\nimport { POD } from '@shell/config/types';\nimport ArrayList from '@shell/components/form/ArrayList';\nimport { Banner } from '@components/Banner';\nimport throttle from 'lodash/throttle';\nimport { isValidCIDR } from '@shell/utils/validators/cidr';\n\nconst TARGET_OPTIONS = {\n  IP_BLOCK:                   'ipBlock',\n  NAMESPACE_SELECTOR:         'namespaceSelector',\n  POD_SELECTOR:               'podSelector',\n  NAMESPACE_AND_POD_SELECTOR: 'namespaceAndPodSelector',\n};\n\nexport default {\n  components: {\n    ArrayList, Banner, LabeledInput, LabeledSelect, MatchExpressions\n  },\n  props: {\n    value: {\n      type:    Object,\n      default: () => {\n        return {};\n      },\n    },\n    mode: {\n      type:    String,\n      default: _EDIT,\n    },\n    type: {\n      type:    String,\n      default: 'ingress'\n    },\n    namespace: {\n      type:    String,\n      default: ''\n    },\n    allPods: {\n      type:    Array,\n      default: () => {\n        return [];\n      },\n    },\n    allNamespaces: {\n      type:    Array,\n      default: () => {\n        return [];\n      },\n    },\n  },\n  data() {\n    if (!this.value[TARGET_OPTIONS.IP_BLOCK] &&\n      !this.value[TARGET_OPTIONS.POD_SELECTOR] &&\n      !this.value[TARGET_OPTIONS.NAMESPACE_SELECTOR] &&\n      !this.value[TARGET_OPTIONS.NAMESPACE_AND_POD_SELECTOR]\n    ) {\n      this.$nextTick(() => {\n        this.$set(this.value, TARGET_OPTIONS.IP_BLOCK, {});\n      });\n    }\n\n    return {\n      portOptions:        ['TCP', 'UDP'],\n      matchingPods:       {},\n      matchingNamespaces: {},\n      invalidCidr:        null,\n      invalidCidrs:       [],\n      POD,\n      TARGET_OPTIONS,\n      targetOptions:      Object.values(TARGET_OPTIONS),\n      throttleTime:       250,\n    };\n  },\n  computed: {\n    podSelectorExpressions: {\n      get() {\n        return convert(\n          this.value[TARGET_OPTIONS.POD_SELECTOR]?.matchLabels || {},\n          this.value[TARGET_OPTIONS.POD_SELECTOR]?.matchExpressions || []\n        );\n      },\n      set(podSelectorExpressions) {\n        this.$set(this.value, TARGET_OPTIONS.POD_SELECTOR, simplify(podSelectorExpressions));\n      }\n    },\n    namespaceSelectorExpressions: {\n      get() {\n        return convert(\n          this.value[TARGET_OPTIONS.NAMESPACE_SELECTOR]?.matchLabels || {},\n          this.value[TARGET_OPTIONS.NAMESPACE_SELECTOR]?.matchExpressions || []\n        );\n      },\n      set(namespaceSelectorExpressions) {\n        this.$set(this.value, TARGET_OPTIONS.NAMESPACE_SELECTOR, simplify(namespaceSelectorExpressions));\n      }\n    },\n    selectTargetOptions() {\n      const selectTargetOptions = [];\n\n      for (const option of this.targetOptions) {\n        selectTargetOptions.push({\n          label: this.t(`networkpolicy.rules.${ option }.label`),\n          value: option,\n        });\n      }\n\n      return selectTargetOptions;\n    },\n    targetType: {\n      get() {\n        for (const option of this.targetOptions) {\n          if (this.value[TARGET_OPTIONS.NAMESPACE_AND_POD_SELECTOR] || (this.value[TARGET_OPTIONS.NAMESPACE_SELECTOR] && this.value[TARGET_OPTIONS.POD_SELECTOR])) {\n            return TARGET_OPTIONS.NAMESPACE_AND_POD_SELECTOR;\n          }\n          if (this.value[option]) {\n            return option;\n          }\n        }\n\n        return null;\n      },\n      set(targetType) {\n        this.$delete(this.value, TARGET_OPTIONS.IP_BLOCK);\n        this.$delete(this.value, TARGET_OPTIONS.NAMESPACE_SELECTOR);\n        this.$delete(this.value, TARGET_OPTIONS.POD_SELECTOR);\n        this.$delete(this.value, TARGET_OPTIONS.NAMESPACE_AND_POD_SELECTOR);\n        this.$nextTick(() => {\n          this.$set(this.value, targetType, {});\n        });\n      }\n    },\n    updateMatches() {\n      return {\n        handler: throttle(function() {\n          this.matchingNamespaces = this.getMatchingNamespaces();\n          this.matchingPods = this.getMatchingPods();\n        }, this.throttle, { leading: true }),\n        immediate: true\n      };\n    },\n    matchingNamespacesAndPods() {\n      return {\n        policyNamespace: this.namespace,\n        ...Object.keys(this.matchingNamespaces).reduce((acc, k) => ({ ...acc, [`${ k }Namespaces`]: this.matchingNamespaces[k] }), {}),\n        ...Object.keys(this.matchingPods).reduce((acc, k) => ({ ...acc, [`${ k }Pods`]: this.matchingPods[k] }), {}),\n      };\n    }\n  },\n  watch: {\n    namespace:                    'updateMatches',\n    'value.podSelector':          'updateMatches',\n    'value.namespaceSelector':    'updateMatches',\n    'value.ipBlock.cidr':         'validateCIDR',\n    'value.ipBlock.except':       'validateCIDR',\n    podSelectorExpressions:       'updateMatches',\n    namespaceSelectorExpressions: 'updateMatches',\n  },\n  methods: {\n    validateCIDR() {\n      const exceptCidrs = this.value[TARGET_OPTIONS.IP_BLOCK]?.except || [];\n\n      this.invalidCidrs = exceptCidrs\n        .filter((cidr) => !isValidCIDR(cidr))\n        .map((invalidCidr) => invalidCidr || '<blank>');\n\n      if (this.value[TARGET_OPTIONS.IP_BLOCK]?.cidr && !isValidCIDR(this.value[TARGET_OPTIONS.IP_BLOCK].cidr)) {\n        this.invalidCidr = this.value[TARGET_OPTIONS.IP_BLOCK].cidr;\n      } else {\n        this.invalidCidr = null;\n      }\n    },\n    getMatchingPods() {\n      const namespaces = this.targetType === TARGET_OPTIONS.NAMESPACE_AND_POD_SELECTOR ? this.matchingNamespaces.matches : [{ id: this.namespace }];\n      const allInNamespace = this.allPods.filter((pod) => namespaces.some((ns) => ns.id === pod.metadata.namespace));\n      const match = matching(allInNamespace, this.podSelectorExpressions);\n      const matched = match.length || 0;\n      const sample = match[0]?.nameDisplay;\n\n      return {\n        matched,\n        matches: match,\n        none:    matched === 0,\n        sample,\n        total:   allInNamespace.length,\n      };\n    },\n    getMatchingNamespaces() {\n      const allNamespaces = this.allNamespaces;\n      const match = matching(allNamespaces, this.namespaceSelectorExpressions);\n      const matched = match.length || 0;\n      const sample = match[0]?.nameDisplay;\n\n      return {\n        matched,\n        matches: match,\n        none:    matched === 0,\n        sample,\n        total:   allNamespaces.length,\n      };\n    },\n  }\n};\n</script>\n\n<template>\n  <div class=\"rule\">\n    <div class=\"row mb-20\">\n      <div class=\"col span-6\">\n        <LabeledSelect\n          v-model=\"targetType\"\n          data-testid=\"labeled-select-type-selector\"\n          :mode=\"mode\"\n          :tooltip=\"targetType === TARGET_OPTIONS.NAMESPACE_AND_POD_SELECTOR ? t('networkpolicy.selectors.matchingNamespacesAndPods.tooltip') : null\"\n          :options=\"selectTargetOptions\"\n          :multiple=\"false\"\n          :label=\"t('networkpolicy.rules.type')\"\n        />\n      </div>\n    </div>\n    <div v-if=\"targetType === TARGET_OPTIONS.IP_BLOCK\">\n      <div class=\"row\">\n        <div class=\"col span-6\">\n          <LabeledInput\n            v-model=\"value[TARGET_OPTIONS.IP_BLOCK].cidr\"\n            data-testid=\"labeled-input-ip-block-selector\"\n            :mode=\"mode\"\n            :placeholder=\"t('networkpolicy.rules.ipBlock.cidr.placeholder')\"\n            :label=\"t('networkpolicy.rules.ipBlock.cidr.label')\"\n          />\n        </div>\n      </div>\n      <div\n        v-if=\"invalidCidr\"\n        class=\"row\"\n      >\n        <div class=\"col span-12\">\n          <Banner color=\"error\">\n            <t k=\"networkpolicy.rules.ipBlock.invalidCidr\" />\n          </Banner>\n        </div>\n      </div>\n      <div class=\"row mt-20\">\n        <div class=\"col span-12\">\n          <ArrayList\n            v-model=\"value[TARGET_OPTIONS.IP_BLOCK].except\"\n            :add-label=\"t('networkpolicy.rules.ipBlock.addExcept')\"\n            :mode=\"mode\"\n            :show-header=\"true\"\n            :value-label=\"t('networkpolicy.rules.ipBlock.exceptions')\"\n            :value-placeholder=\"t('networkpolicy.rules.ipBlock.cidr.placeholder')\"\n          />\n        </div>\n      </div>\n      <div\n        v-if=\"invalidCidrs.length\"\n        class=\"row mb-10\"\n      >\n        <div class=\"col span-12\">\n          <Banner color=\"error\">\n            <t k=\"networkpolicy.rules.ipBlock.invalidExceptionCidrs\" />{{ invalidCidrs.join(', ') }}\n          </Banner>\n        </div>\n      </div>\n    </div>\n    <div v-if=\"targetType === TARGET_OPTIONS.POD_SELECTOR\">\n      <div class=\"row\">\n        <div class=\"col span-12\">\n          <Banner color=\"success\">\n            <span v-clean-html=\"t('networkpolicy.selectors.matchingPods.matchesSome', matchingPods)\" />\n          </Banner>\n        </div>\n      </div>\n      <div class=\"row mb-0\">\n        <div class=\"col span-12\">\n          <MatchExpressions\n            v-model=\"podSelectorExpressions\"\n            data-testid=\"match-expression-pod-selector\"\n            :mode=\"mode\"\n            :show-remove=\"false\"\n            :initial-empty-row=\"true\"\n            :type=\"POD\"\n          />\n        </div>\n      </div>\n    </div>\n    <div v-if=\"targetType === TARGET_OPTIONS.NAMESPACE_SELECTOR\">\n      <div class=\"row\">\n        <div class=\"col span-12\">\n          <Banner color=\"success\">\n            <span v-clean-html=\"t('networkpolicy.selectors.matchingNamespaces.matchesSome', matchingNamespaces)\" />\n          </Banner>\n        </div>\n      </div>\n      <div class=\"row mb-0\">\n        <div class=\"col span-12\">\n          <MatchExpressions\n            v-model=\"namespaceSelectorExpressions\"\n            data-testid=\"match-expression-namespace-selector\"\n            :mode=\"mode\"\n            :show-remove=\"false\"\n            :initial-empty-row=\"true\"\n            :type=\"POD\"\n          />\n        </div>\n      </div>\n    </div>\n    <div v-if=\"targetType === TARGET_OPTIONS.NAMESPACE_AND_POD_SELECTOR\">\n      <div class=\"row\">\n        <div class=\"col span-12\">\n          <Banner color=\"success\">\n            <span\n              v-if=\"!namespaceSelectorExpressions.length\"\n              v-clean-html=\"t('networkpolicy.selectors.matchingPods.matchesSome', matchingPods)\"\n            />\n            <span\n              v-else\n              v-clean-html=\"t('networkpolicy.selectors.matchingNamespacesAndPods.matchesSome', matchingNamespacesAndPods)\"\n            />\n          </Banner>\n        </div>\n      </div>\n      <div class=\"row mb-0\">\n        <div class=\"col span-1 namespace-pod-rule\">\n          <span class=\"label\">\n            {{ t('networkpolicy.rules.namespace') }}\n          </span>\n        </div>\n        <div class=\"col span-11\">\n          <MatchExpressions\n            v-model=\"namespaceSelectorExpressions\"\n            data-testid=\"match-expression-namespace-and-pod-selector-ns-rule\"\n            :mode=\"mode\"\n            :show-add-button=\"false\"\n            :show-remove-button=\"false\"\n            :show-remove=\"false\"\n            :initial-empty-row=\"true\"\n            :type=\"POD\"\n          />\n        </div>\n      </div>\n      <div class=\"row mb-0\">\n        <div class=\"col span-1 namespace-pod-rule\">\n          <span class=\"label\">\n            {{ t('networkpolicy.rules.pod') }}\n          </span>\n        </div>\n        <div class=\"col span-11\">\n          <MatchExpressions\n            v-model=\"podSelectorExpressions\"\n            data-testid=\"match-expression-namespace-and-pod-selector-pod-rule\"\n            :mode=\"mode\"\n            :show-add-button=\"false\"\n            :show-remove-button=\"false\"\n            :show-remove=\"false\"\n            :initial-empty-row=\"true\"\n            :type=\"POD\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style lang='scss' scoped>\n  .namespace-pod-rule {\n    display: table;\n    width: 100px;\n    padding: 0, 10px, 0, 0;\n    text-align: center;\n\n    .label {\n      display:table-cell;\n      vertical-align:middle;\n    }\n  }\n</style>\n"]}]}