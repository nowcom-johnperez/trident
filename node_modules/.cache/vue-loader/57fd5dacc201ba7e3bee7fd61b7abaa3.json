{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/fleet/FleetSummary.vue?vue&type=style&index=0&id=3dcd87dc&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/fleet/FleetSummary.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAuZmxleHdyYXAgLmZsZWV0LXN0YXR1cyB7CiAgbWF4LXdpZHRoOiA1MCU7CiAgbWFyZ2luLXJpZ2h0OiAxNXB4OwoKICAmOmxhc3QtY2hpbGQgewogICAgbWFyZ2luOiAwCiAgfQp9Ci5jb3VudGJveCB7CiAgbWluLXdpZHRoOiAxNTBweDsKICB3aWR0aDogMTIuNSU7CiAgbWFyZ2luLWJvdHRvbTogMTBweDsKfQo="},{"version":3,"sources":["FleetSummary.vue"],"names":[],"mappings":";AAmNA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"FleetSummary.vue","sourceRoot":"node_modules/@rancher/shell/components/fleet","sourcesContent":["<script>\nimport capitalize from 'lodash/capitalize';\nimport { STATES, STATES_ENUM } from '@shell/plugins/dashboard-store/resource-class';\nimport FleetStatus from '@shell/components/fleet/FleetStatus';\n\nconst getResourceDefaultState = (labelGetter, stateKey) => {\n  return {\n    ready: {\n      count: 0,\n      color: STATES[STATES_ENUM.READY].color,\n      label: labelGetter(`${ stateKey }.${ STATES_ENUM.READY }`, null, STATES[STATES_ENUM.READY].label )\n    },\n    info: {\n      count: 0,\n      color: STATES[STATES_ENUM.INFO].color,\n      label: labelGetter(`${ stateKey }.${ STATES_ENUM.INFO }`, null, STATES[STATES_ENUM.INFO].label )\n    },\n    warning: {\n      count: 0,\n      color: STATES[STATES_ENUM.WARNING].color,\n      label: labelGetter(`${ stateKey }.${ STATES_ENUM.WARNING }`, null, STATES[STATES_ENUM.WARNING].label )\n    },\n    notready: {\n      count: 0,\n      color: STATES[STATES_ENUM.NOT_READY].color,\n      label: labelGetter(`${ stateKey }.${ STATES_ENUM.NOT_READY }`, null, STATES[STATES_ENUM.NOT_READY].label )\n    },\n    error: {\n      count: 0,\n      color: STATES[STATES_ENUM.ERROR].color,\n      label: labelGetter(`${ stateKey }.${ STATES_ENUM.ERROR }`, null, STATES[STATES_ENUM.ERROR].label )\n\n    },\n    errapplied: {\n      count: 0,\n      color: STATES[STATES_ENUM.ERR_APPLIED].color,\n      label: labelGetter(`${ stateKey }.${ STATES_ENUM.ERR_APPLIED }`, null, STATES[STATES_ENUM.ERR_APPLIED].label )\n\n    },\n    waitapplied: {\n      count: 0,\n      color: STATES[STATES_ENUM.WAIT_APPLIED].color,\n      label: labelGetter(`${ stateKey }.${ STATES_ENUM.WAIT_APPLIED }`, null, STATES[STATES_ENUM.WAIT_APPLIED].label )\n\n    },\n    unknown: {\n      count: 0,\n      color: STATES[STATES_ENUM.UNKNOWN].color,\n      label: labelGetter(`${ stateKey }.${ STATES_ENUM.UNKNOWN }`, null, STATES[STATES_ENUM.UNKNOWN].label )\n    }\n  };\n};\n\nexport default {\n\n  name: 'FleetSummary',\n\n  components: { FleetStatus },\n\n  props: {\n    bundles: {\n      type:    Array,\n      default: () => [],\n    },\n    value: {\n      type:     Object,\n      required: true,\n    },\n\n    stateKey: {\n      type:    String,\n      default: 'fleet.fleetSummary.state'\n    },\n  },\n\n  computed: {\n\n    repoName() {\n      return this.value.metadata.name;\n    },\n\n    bundleCounts() {\n      const resources = this.bundles.filter((item) => item.metadata.name.startsWith(`${ this.repoName }-`));\n\n      if (!resources.length) {\n        return [];\n      }\n\n      const out = { ...getResourceDefaultState(this.$store.getters['i18n/withFallback'], this.stateKey) };\n\n      resources.forEach(({ status, metadata }) => {\n        if (!status) {\n          out[STATES_ENUM.UNKNOWN].count += 1;\n\n          return;\n        }\n\n        const k = status?.summary.ready > 0 && status?.summary.desiredReady === status.summary.ready;\n\n        if (k) {\n          out.ready.count += 1;\n\n          return;\n        }\n\n        const state = metadata.state?.name?.toLowerCase();\n\n        if (state && out[state]) {\n          out[state].count += 1;\n\n          return;\n        }\n\n        const { conditions } = status;\n\n        const notReady = conditions.find(({ transitioning, message }) => {\n          return transitioning && !message.includes(STATES_ENUM.ERROR) && !message.toLowerCase().includes(STATES_ENUM.ERR_APPLIED);\n        });\n\n        if (!!notReady) {\n          out.notready.count += 1;\n\n          return;\n        }\n\n        // check conditions\n        const errApplied = conditions.find(({ error, message }) => !!error && message.toLowerCase().includes(STATES_ENUM.ERR_APPLIED));\n\n        if (errApplied) {\n          out[STATES_ENUM.ERR_APPLIED].count += 1;\n\n          return;\n        }\n\n        const errorState = conditions.find(({ error, message }) => !!error && message.toLowerCase().includes(STATES_ENUM.ERROR));\n\n        if (out[errorState]) {\n          out[errorState].count += 1;\n\n          return;\n        }\n\n        out.unknown.count += 1;\n      });\n\n      return Object.values(out).map((item) => {\n        item.value = item.count;\n\n        return item;\n      });\n    },\n\n    resourceCounts() {\n      const resources = this.value.status.resources || [];\n      const out = { ...getResourceDefaultState(this.$store.getters['i18n/withFallback'], this.stateKey) };\n\n      resources.forEach(({ state }) => {\n        const k = state?.toLowerCase();\n\n        if (out[k]) {\n          out[k].count += 1;\n\n          return;\n        }\n        out.unknown.count += 1;\n      });\n\n      return Object.values(out).map((item) => {\n        item.value = item.count;\n\n        return item;\n      });\n    },\n\n  },\n\n  methods: { capitalize },\n};\n</script>\n\n<template>\n  <div class=\"row flexwrap\">\n    <FleetStatus\n      v-if=\"bundleCounts.length\"\n      title=\"Bundles\"\n      :values=\"bundleCounts\"\n      value-key=\"count\"\n    />\n    <FleetStatus\n      title=\"Resources\"\n      :values=\"resourceCounts\"\n      value-key=\"count\"\n    />\n  </div>\n</template>\n<style lang=\"scss\" scoped>\n   .flexwrap .fleet-status {\n    max-width: 50%;\n    margin-right: 15px;\n\n    &:last-child {\n      margin: 0\n    }\n  }\n  .countbox {\n    min-width: 150px;\n    width: 12.5%;\n    margin-bottom: 10px;\n  }\n</style>\n"]}]}