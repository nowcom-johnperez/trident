{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/pages/rio/mesh.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/pages/rio/mesh.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["mesh.vue"],"names":[],"mappingsfile":"mesh.vue","sourceRoot":"node_modules/@rancher/shell/pages/rio","sourcesContent":["<script>\nimport { escapeHtml } from '@shell/utils/string';\n\nconst RADIUS = 5;\n\nconst INTERVAL = 10000;\n\n/*\nfunction randomStats() {\n  return {\n    'p50ms':       Math.random(),\n    'p90ms':       Math.random() * 2,\n    'p99ms':       Math.random() * 5,\n    'rps':         Math.random() * 100,\n    'successRate': Math.random(),\n  };\n}\n\nfunction randomItem(ary) {\n  const idx = Math.floor(Math.random() * ary.length);\n\n  return ary[idx];\n}\n\nfunction randomData() {\n  const nodes = [];\n  const edges = [];\n\n  ['foo', 'bar', 'baz', 'bat', 'qux'].forEach((name) => {\n    nodes.push({\n      'namespace': 'default',\n      'app':       name,\n      'version':   'v1',\n      'stats':     randomStats(),\n    });\n  });\n\n  ['a', 'b', 'c', 'd', 'e'].forEach((name) => {\n    nodes.push({\n      'namespace': 'another',\n      'app':       name,\n      'version':   'v1',\n      'stats':     randomStats(),\n    });\n  });\n\n  for ( let i = 0 ; i < 10 ; i++ ) {\n    const from = randomItem(nodes);\n    const crossNs = Math.random() < 0.2;\n    const toChoices = nodes.filter((x) => {\n      if ( x === from ) {\n        return false;\n      }\n\n      if ( crossNs ) {\n        return x.namespace !== from.namespace;\n      } else {\n        return x.namespace === from.namespace;\n      }\n    });\n    const to = randomItem(toChoices);\n\n    edges.push({\n      fromNamespace: from.namespace,\n      fromApp:       from.app,\n      fromVersion:   from.version,\n      toNamespace:   to.namespace,\n      toApp:         to.app,\n      toVersion:     to.version,\n      stats:         randomStats(),\n    });\n  }\n\n  return {\n    nodes,\n    edges\n  };\n}\n*/\n\nfunction nodeIdFor(obj) {\n  return `${ obj.namespace }:${ obj.app }@${ obj.version }`;\n}\n\nfunction fromId(obj) {\n  return `${ obj.fromNamespace }:${ obj.fromApp }@${ obj.fromVersion }`;\n}\n\nfunction toId(obj) {\n  return `${ obj.toNamespace }:${ obj.toApp }@${ obj.toVersion }`;\n}\n\nasync function loadData(store) {\n  const data = await store.dispatch('rancher/request', { url: '/v1-metrics/meshsummary' });\n\n  const known = {};\n\n  data.nodes = data.nodes.filter((x) => !!x.app && !!x.namespace);\n  data.nodes.forEach((x) => {\n    x.id = nodeIdFor(x);\n    known[x.id] = true;\n  });\n\n  data.edges = data.edges.filter((x) => known[fromId(x)] && known[toId(x)]);\n\n  return data;\n}\n\nfunction round3Digits(num) {\n  if ( !num ) {\n    return 0;\n  }\n\n  if ( num > 100 ) {\n    return Math.round(num);\n  } else if ( num > 10 ) {\n    return Math.round(num * 10) / 10;\n  } else {\n    return Math.round(num * 100) / 100;\n  }\n}\n\nexport default {\n\n  /* (\n  data() {\n    return {\n      loading: true,\n      ...randomData(),\n    };\n  },\n  */\n\n  async asyncData({ store }) {\n    const data = await loadData(store);\n\n    return data;\n  },\n  computed: {\n    namespaces() {\n      return this.$store.getters['namespaces']();\n    },\n\n    displayNodes() {\n      console.log('get displayNodes'); // eslint-disable-line no-console\n      const namespaces = this.namespaces;\n\n      const out = this.nodes.filter((x) => {\n        return namespaces[x.namespace];\n      });\n\n      return out;\n    },\n\n    displayEdges() {\n      console.log('get displayEdges'); // eslint-disable-line no-console\n      const namespaces = this.namespaces;\n\n      const out = this.edges.filter((x) => {\n        const ns1 = x.fromNamespace;\n        const ns2 = x.toNamespace;\n\n        return namespaces[ns1] && namespaces[ns2];\n      });\n\n      return out;\n    },\n  },\n\n  watch: {\n    // Nodes isn't watched, but gets updated at the same time...\n    nodes() {\n      console.log('nodes updated'); // eslint-disable-line no-console\n      this.updateGraph();\n      this.renderGraph();\n    },\n\n    namespaces() {\n      console.log('namespaces updated'); // eslint-disable-line no-console\n      this.updateGraph();\n      this.renderGraph();\n    },\n\n    edges() {\n      console.log('edges updated'); // eslint-disable-line no-console\n      this.updateGraph();\n      this.renderGraph();\n    },\n  },\n\n  async mounted() {\n    console.log('Mounted'); // eslint-disable-line no-console\n    this.timer = setInterval(() => {\n      console.log('Timer'); // eslint-disable-line no-console\n      this.refreshData();\n    }, INTERVAL);\n\n    await this.initGraph();\n    this.updateGraph();\n    this.renderGraph();\n\n    window.m = this;\n  },\n\n  beforeDestroy() {\n    clearInterval(this.timer);\n  },\n\n  methods: {\n    async refreshData() {\n      console.log('Refreshing...'); // eslint-disable-line no-console\n      const neu = await loadData(this.$store);\n\n      this.nodes = neu.nodes;\n      this.edges = neu.edges;\n      console.log('Refreshed'); // eslint-disable-line no-console\n    },\n\n    async initGraph() {\n      const d3 = await import('d3');\n      const dagreD3 = await import('dagre-d3');\n\n      const g = new dagreD3.graphlib.Graph({ compound: true });\n\n      g.setGraph({\n        marginx: 0,\n        marginy: 0,\n        rankdir: 'LR',\n        align:   'UL',\n        ranker:  'longest-path', // 'tight-tree',\n      });\n\n      g.setDefaultEdgeLabel(() => {\n        return {};\n      });\n\n      // Create the renderer\n      const render = new dagreD3.render();\n\n      // Add our custom arrow\n      render.arrows().smaller = function normal(parent, id, edge, type) {\n        const marker = parent.append('marker')\n          .attr('id', id)\n          .attr('viewBox', '0 0 12 12')\n          .attr('refX', 6)\n          .attr('refY', 6)\n          .attr('markerUnits', 'userSpaceOnUse')\n          .attr('markerWidth', 12)\n          .attr('markerHeight', 12)\n          .attr('orient', 'auto');\n        const path = marker.append('path')\n          .attr('class', 'arrowhead')\n          .attr('d', 'M 6 0 L 0 6 L 6 12 L 12 6 z')\n          .style('stroke-width', 1)\n          .style('stroke-dasharray', '1,0');\n\n        dagreD3.util.applyStyle(path, edge[`${ type }Style`]);\n      };\n\n      // Set up an SVG group so that we can translate the final graph.\n      const svg = d3.select(this.$refs.mesh);\n      const group = svg.append('g');\n\n      const zoom = d3.zoom().on('zoom', () => {\n        if ( d3.event.sourceEvent ) {\n          this.lastZoom = d3.event.transform;\n        }\n        group.attr('transform', d3.event.transform);\n      });\n\n      svg.call(zoom);\n\n      this.d3 = d3;\n      this.dagreD3 = dagreD3;\n      this.graph = g;\n      this.render = render;\n      this.group = group;\n      this.zoom = zoom;\n    },\n\n    updateGraph() {\n      // @TODO diff nodes/edges, remove unexpected and add missing ones\n      console.log('Updating...'); // eslint-disable-line no-console\n\n      const e = escapeHtml;\n      const g = this.graph;\n\n      const seenNamespaces = {};\n\n      for ( const node of this.displayNodes ) {\n        const nsId = ensureNamespace(node.namespace);\n        const id = nodeIdFor(node);\n\n        node.label = `${ node.app }@${ node.version }`;\n\n        let p99 = node.stats.p99ms;\n        let unit = 'ms';\n\n        if ( p99 > 1000 ) {\n          p99 /= 1000;\n          unit = 's';\n        }\n\n        const html = `\n          <div class=\"version\">\n            <h4>${ e(node.app) }@${ e(node.version) }</h4>\n            <div class=\"row\">\n              <div class=\"col span-4 sr\">\n                <span>${ round3Digits(node.stats.successRate * 100) }</span><span class=\"unit\">%</span>\n              </div>\n              <div class=\"col span-4 rps\">\n                <span>${ round3Digits(node.stats.rps) }</span>\n              </div>\n              <div class=\"col span-4 p99\">\n                <span>${ round3Digits(p99) }</span><span class=\"unit\">${ unit }</span>\n              </div>\n            </div>\n          </div>\n        `;\n\n        g.setNode(id, {\n          labelType: 'html',\n          label:     html,\n          width:     158,\n          height:    80,\n          rx:        RADIUS,\n          ry:        RADIUS,\n        });\n        g.setParent(id, nsId);\n      }\n\n      const rpses = this.displayEdges.map((x) => x.stats.rps);\n      const min = Math.min(...rpses);\n      const max = Math.max(...rpses);\n\n      for ( const edge of this.displayEdges ) {\n        ensureNamespace(edge.fromNamespace);\n        ensureNamespace(edge.toNamespace);\n        const weight = Math.floor(4 * (edge.stats.rps - min) / (max - min)) + 1;\n\n        g.setEdge(fromId(edge), toId(edge), {\n          arrowhead:      'smaller',\n          arrowheadClass: 'arrowhead',\n          class:          `weight${ weight }`,\n          curve:          this.d3.curveBasis,\n          weight,\n        });\n      }\n\n      function ensureNamespace(name) {\n        const id = `ns:${ name }`;\n\n        if ( !seenNamespaces[name] ) {\n          seenNamespaces[name] = true;\n          g.setNode(id, {\n            label:           `Namespace: ${ name }`,\n            clusterLabelPos: 'top',\n            rx:              RADIUS,\n            ry:              RADIUS\n          });\n        }\n\n        return id;\n      }\n    },\n\n    renderGraph() {\n      console.log('Rendering...'); // eslint-disable-line no-console\n\n      const d3 = this.d3;\n      const svg = this.d3.select(this.$refs.mesh);\n      const group = this.group;\n      const g = this.graph;\n      const render = this.render;\n      const zoom = this.zoom;\n\n      svg.call(zoom.transform, d3.zoomIdentity.translate(0, 0).scale(1));\n\n      // Run the renderer. This is what draws the final graph.\n      render(group, g);\n\n      const graphWidth = g.graph().width;\n      const graphHeight = g.graph().height;\n      const width = parseInt(svg.style('width').replace(/px/, ''));\n      const height = parseInt(svg.style('height').replace(/px/, ''));\n      const scale = Math.min(width / graphWidth, height / graphHeight);\n      const dX = (width / 2) - ((graphWidth * scale) / 2);\n      const dY = (height / 2) - ((graphHeight * scale) / 2);\n\n      console.log('render'); // eslint-disable-line no-console\n      if ( this.lastZoom ) {\n        svg.call(zoom.transform, d3.zoomIdentity.translate(this.lastZoom.x, this.lastZoom.y).scale(this.lastZoom.k));\n      } else {\n        svg.call(zoom.transform, d3.zoomIdentity.translate(dX, dY).scale(scale));\n      }\n\n      this.loading = false;\n    },\n\n    clicked(event) {\n      const path = event.target.closest('.edgePath');\n\n      console.log(path); // eslint-disable-line no-console\n    }\n  },\n};\n</script>\n<template>\n  <div class=\"mesh\">\n    <header>\n      <h1>App Mesh</h1>\n    </header>\n\n    <svg\n      id=\"mesh\"\n      ref=\"mesh\"\n      @click=\"clicked\"\n    />\n  </div>\n</template>\n\n<style lang=\"scss\">\n  #mesh {\n    width: 100%;\n    height: calc(100vh - 165px);\n\n    .version {\n      width: 158px;\n      height: 80px;\n      color: #b6b6c2;\n      text-align: center;\n\n      .row {\n        margin: 0;\n      }\n\n      H4 {\n        color: #b6b6c2;\n        display: block;\n        border-bottom: 1px solid #555;\n        text-align: left;\n        padding-bottom: 5px;\n        margin-bottom: 5px;\n      }\n\n      .sr, .rps, .p99 {\n        font-size: 20px;\n\n        .unit {\n          font-size: 12px;\n        }\n      }\n\n      .sr:before, .rps:before, .p99:before {\n        color: white;\n        font-weight: bold;\n        font-size: 15px;\n        display: block;\n      }\n\n      .sr:before {\n        content: 'SR';\n      }\n\n      .rps:before {\n        content: 'RPS';\n      }\n\n      .p99:before {\n        content: '99%';\n      }\n\n    }\n\n    .clusters .label text {\n      fill: #b6b6c2;\n      font-weight: bold;\n    }\n\n    .clusters RECT {\n      fill: #222;\n      stroke: #555;\n    }\n\n    .arrowhead {\n      fill: #6c6c76;\n    }\n\n    .node RECT {\n      fill: #111;\n      stroke: #555;\n    }\n\n    PATH {\n      stroke: #6c6c76;\n    }\n\n    .edgePath {\n      cursor: pointer;\n    }\n\n    .weight1 { stroke-width: 2px; }\n    .weight2 { stroke-width: 3px; }\n    .weight3 { stroke-width: 4px; }\n    .weight4 { stroke-width: 5px; }\n    .weight5 { stroke-width: 6px; }\n  }\n</style>\n"]}]}