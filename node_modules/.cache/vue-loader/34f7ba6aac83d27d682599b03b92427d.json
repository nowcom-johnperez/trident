{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/ResourceList/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/ResourceList/index.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBSZXNvdXJjZVRhYmxlIGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL1Jlc291cmNlVGFibGUnOwppbXBvcnQgTG9hZGluZyBmcm9tICdAc2hlbGwvY29tcG9uZW50cy9Mb2FkaW5nJzsKaW1wb3J0IE1hc3RoZWFkIGZyb20gJy4vTWFzdGhlYWQnOwppbXBvcnQgUmVzb3VyY2VMb2FkaW5nSW5kaWNhdG9yIGZyb20gJy4vUmVzb3VyY2VMb2FkaW5nSW5kaWNhdG9yJzsKaW1wb3J0IFJlc291cmNlRmV0Y2ggZnJvbSAnQHNoZWxsL21peGlucy9yZXNvdXJjZS1mZXRjaCc7CmltcG9ydCBJY29uTWVzc2FnZSBmcm9tICdAc2hlbGwvY29tcG9uZW50cy9JY29uTWVzc2FnZS52dWUnOwppbXBvcnQgeyBSZXNvdXJjZUxpc3RDb21wb25lbnROYW1lIH0gZnJvbSAnLi9yZXNvdXJjZS1saXN0LmNvbmZpZyc7CmltcG9ydCB7IFBhbmVsTG9jYXRpb24sIEV4dGVuc2lvblBvaW50IH0gZnJvbSAnQHNoZWxsL2NvcmUvdHlwZXMnOwppbXBvcnQgRXh0ZW5zaW9uUGFuZWwgZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvRXh0ZW5zaW9uUGFuZWwnOwppbXBvcnQgeyBzYW1lQ29udGVudHMgfSBmcm9tICdAc2hlbGwvdXRpbHMvYXJyYXknOwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6IFJlc291cmNlTGlzdENvbXBvbmVudE5hbWUsCgogIGNvbXBvbmVudHM6IHsKICAgIExvYWRpbmcsCiAgICBSZXNvdXJjZVRhYmxlLAogICAgTWFzdGhlYWQsCiAgICBSZXNvdXJjZUxvYWRpbmdJbmRpY2F0b3IsCiAgICBJY29uTWVzc2FnZSwKICAgIEV4dGVuc2lvblBhbmVsCiAgfSwKICBtaXhpbnM6IFtSZXNvdXJjZUZldGNoXSwKCiAgcHJvcHM6IHsKICAgIGhhc0FkdmFuY2VkRmlsdGVyaW5nOiB7CiAgICAgIHR5cGU6ICAgIEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAogICAgYWR2RmlsdGVySGlkZUxhYmVsc0FzQ29sczogewogICAgICB0eXBlOiAgICBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfSwKICAgIGFkdkZpbHRlclByZXZlbnRGaWx0ZXJpbmdMYWJlbHM6IHsKICAgICAgdHlwZTogICAgQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZmFsc2UKICAgIH0sCiAgfSwKCiAgYXN5bmMgZmV0Y2goKSB7CiAgICBjb25zdCBzdG9yZSA9IHRoaXMuJHN0b3JlOwogICAgY29uc3QgcmVzb3VyY2UgPSB0aGlzLnJlc291cmNlOwoKICAgIGNvbnN0IHNjaGVtYSA9IHRoaXMuc2NoZW1hOwoKICAgIGlmICggdGhpcy5oYXNMaXN0Q29tcG9uZW50ICkgewogICAgICAvLyBJZiB5b3UgcHJvdmlkZSB5b3VyIG93biBsaXN0IHRoZW4gY2FsbCBpdHMgYXN5bmNEYXRhCiAgICAgIGNvbnN0IGltcG9ydGVyID0gdGhpcy5saXN0Q29tcG9uZW50OwogICAgICBjb25zdCBjb21wb25lbnQgPSAoYXdhaXQgaW1wb3J0ZXIoKSk/LmRlZmF1bHQ7CgogICAgICBpZiAoIGNvbXBvbmVudD8udHlwZURpc3BsYXkgKSB7CiAgICAgICAgdGhpcy5jdXN0b21UeXBlRGlzcGxheSA9IGNvbXBvbmVudC50eXBlRGlzcGxheS5hcHBseSh0aGlzKTsKICAgICAgfQoKICAgICAgLy8gSWYgeW91ciBsaXN0IHBhZ2UgaGFzIGEgZmV0Y2ggdGhlbiBpdCdzIHJlc3BvbnNpYmxlIGZvciBwb3B1bGF0aW5nIHJvd3MgaXRzZWxmCiAgICAgIGlmICggY29tcG9uZW50Py5mZXRjaCApIHsKICAgICAgICB0aGlzLmhhc0ZldGNoID0gdHJ1ZTsKICAgICAgfQoKICAgICAgLy8gSWYgdGhlIGN1c3RvbSBjb21wb25lbnQgc3VwcG9ydHMgaXQsIGFzayBpdCB3aGF0IHJlc291cmNlcyBpdCBsb2Fkcywgc28gd2UgY2FuCiAgICAgIC8vIHVzZSB0aGUgaW5jcmVtZW50YWwgbG9hZGluZyBpbmRpY2F0b3Igd2hlbiBlbmFibGVkCiAgICAgIGlmIChjb21wb25lbnQ/LiRsb2FkaW5nUmVzb3VyY2VzKSB7CiAgICAgICAgY29uc3QgeyBsb2FkUmVzb3VyY2VzLCBsb2FkSW5kZXRlcm1pbmF0ZSB9ID0gY29tcG9uZW50Py4kbG9hZGluZ1Jlc291cmNlcyh0aGlzLiRyb3V0ZSwgdGhpcy4kc3RvcmUpOwoKICAgICAgICB0aGlzLmxvYWRSZXNvdXJjZXMgPSBsb2FkUmVzb3VyY2VzIHx8IFtyZXNvdXJjZV07CiAgICAgICAgdGhpcy5sb2FkSW5kZXRlcm1pbmF0ZSA9IGxvYWRJbmRldGVybWluYXRlIHx8IGZhbHNlOwogICAgICB9CiAgICB9CgogICAgaWYgKCAhdGhpcy5oYXNGZXRjaCApIHsKICAgICAgaWYgKCAhc2NoZW1hICkgewogICAgICAgIHN0b3JlLmRpc3BhdGNoKCdsb2FkaW5nRXJyb3InLCBuZXcgRXJyb3IodGhpcy50KCduYXYuZmFpbFdoYWxlLnJlc291cmNlTGlzdE5vdEZvdW5kJywgeyByZXNvdXJjZSB9LCB0cnVlKSkpOwoKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIC8vIFNlZSBjb21tZW50IGZvciBgbmFtZXNwYWNlRmlsdGVyUmVxdWlyZWRgIHdhdGNoZXIsIHNraXAgZmV0Y2ggaWYgd2UgZG9uJ3QgaGF2ZSBhIHZhbGlkIE5TCiAgICAgIGlmICghdGhpcy5uYW1lc3BhY2VGaWx0ZXJSZXF1aXJlZCkgewogICAgICAgIGF3YWl0IHRoaXMuJGZldGNoVHlwZShyZXNvdXJjZSk7CiAgICAgIH0KICAgIH0KICB9LAoKICBkYXRhKCkgewogICAgY29uc3QgZ2V0dGVycyA9IHRoaXMuJHN0b3JlLmdldHRlcnM7CiAgICBjb25zdCBwYXJhbXMgPSB7IC4uLnRoaXMuJHJvdXRlLnBhcmFtcyB9OwogICAgY29uc3QgcmVzb3VyY2UgPSBwYXJhbXMucmVzb3VyY2U7CgogICAgY29uc3QgaGFzTGlzdENvbXBvbmVudCA9IGdldHRlcnNbJ3R5cGUtbWFwL2hhc0N1c3RvbUxpc3QnXShyZXNvdXJjZSk7CgogICAgY29uc3QgaW5TdG9yZSA9IGdldHRlcnNbJ2N1cnJlbnRTdG9yZSddKHJlc291cmNlKTsKICAgIGNvbnN0IHNjaGVtYSA9IGdldHRlcnNbYCR7IGluU3RvcmUgfS9zY2hlbWFGb3JgXShyZXNvdXJjZSk7CgogICAgY29uc3Qgc2hvd01hc3RoZWFkID0gZ2V0dGVyc1tgdHlwZS1tYXAvb3B0aW9uc0ZvcmBdKHJlc291cmNlKS5zaG93TGlzdE1hc3RoZWFkOwoKICAgIHJldHVybiB7CiAgICAgIGluU3RvcmUsCiAgICAgIHNjaGVtYSwKICAgICAgaGFzTGlzdENvbXBvbmVudCwKICAgICAgc2hvd01hc3RoZWFkOiAgICAgICAgICAgICAgICAgICAgIHNob3dNYXN0aGVhZCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IHNob3dNYXN0aGVhZCwKICAgICAgcmVzb3VyY2UsCiAgICAgIGV4dGVuc2lvblR5cGU6ICAgICAgICAgICAgICAgICAgICBFeHRlbnNpb25Qb2ludC5QQU5FTCwKICAgICAgZXh0ZW5zaW9uTG9jYXRpb246ICAgICAgICAgICAgICAgIFBhbmVsTG9jYXRpb24uUkVTT1VSQ0VfTElTVCwKICAgICAgbG9hZFJlc291cmNlczogICAgICAgICAgICAgICAgICAgIFtyZXNvdXJjZV0sIC8vIExpc3Qgb2YgcmVzb3VyY2VzIHRoYXQgd2lsbCBiZSBsb2FkZWQsIHRoaXMgY291bGQgYmUgbWFueSAoYFdvcmtsb2Fkc2ApCiAgICAgIGhhc0ZldGNoOiAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZSwKICAgICAgLy8gbWFudWFsIHJlZnJlc2gKICAgICAgbWFudWFsUmVmcmVzaEluaXQ6ICAgICAgICAgICAgICAgIGZhbHNlLAogICAgICB3YXRjaDogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UsCiAgICAgIGZvcmNlOiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZSwKICAgICAgLy8gUHJvdmlkZWQgYnkgZmV0Y2ggbGF0ZXIKICAgICAgY3VzdG9tVHlwZURpc3BsYXk6ICAgICAgICAgICAgICAgIG51bGwsCiAgICAgIC8vIGluY3JlbWVudGFsIGxvYWRpbmcKICAgICAgbG9hZEluZGV0ZXJtaW5hdGU6ICAgICAgICAgICAgICAgIGZhbHNlLAogICAgICAvLyBxdWVyeSBwYXJhbSBmb3Igc2ltcGxlIGZpbHRlcmluZwogICAgICB1c2VRdWVyeVBhcmFtc0ZvclNpbXBsZUZpbHRlcmluZzogdHJ1ZQogICAgfTsKICB9LAoKICBjb21wdXRlZDogewogICAgaGVhZGVycygpIHsKICAgICAgaWYgKCB0aGlzLmhhc0xpc3RDb21wb25lbnQgfHwgIXRoaXMuc2NoZW1hICkgewogICAgICAgIC8vIEN1c3RvbSBsaXN0cyBmaWd1cmUgb3V0IHRoZWlyIG93biBoZWFkZXJzCiAgICAgICAgcmV0dXJuIFtdOwogICAgICB9CgogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVyc1sndHlwZS1tYXAvaGVhZGVyc0ZvciddKHRoaXMuc2NoZW1hKTsKICAgIH0sCgogICAgZ3JvdXBCeSgpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnNbJ3R5cGUtbWFwL2dyb3VwQnlGb3InXSh0aGlzLnNjaGVtYSk7CiAgICB9LAoKICAgIHNob3dJbmNyZW1lbnRhbExvYWRpbmdJbmRpY2F0b3IoKSB7CiAgICAgIHJldHVybiB0aGlzLnBlcmZDb25maWc/LmluY3JlbWVudGFsTG9hZGluZz8uZW5hYmxlZDsKICAgIH0sCgogIH0sCgogIHdhdGNoOiB7CiAgICAvKioKICAgICAqIFdoZW4gYSBOUyBmaWx0ZXIgaXMgcmVxdWlyZWQgYW5kIHRoZSB1c2VyIHNlbGVjdHMgYSBkaWZmZXJlbnQgb25lLCBraWNrIG9mZiBhIG5ldyBzZXQgb2YgQVBJIHJlcXVlc3RzCiAgICAgKgogICAgICogUmVzb3VyY2VMaXN0IGhhcyB0d28gbW9kZXMKICAgICAqIDEpIFJlc291cmNlTGlzdCBjb21wb25lbnQgaGFuZGxlcyBBUEkgcmVxdWVzdCB0byBmZXRjaCByZXNvdXJjZXMKICAgICAqIDIpIEN1c3RvbSBsaXN0IGNvbXBvbmVudCBoYW5kbGVzIEFQSSByZXF1ZXN0IHRvIGZldGNoIHJlc291cmNlcwogICAgICoKICAgICAqIFRoaXMgY292ZXJzIGNhc2UgMQogICAgICovCiAgICBuYW1lc3BhY2VGaWx0ZXIobmV1LCBvbGQpIHsKICAgICAgaWYgKHNhbWVDb250ZW50cyhuZXUsIG9sZCkpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmIChuZXUgJiYgIXRoaXMuaGFzRmV0Y2gpIHsKICAgICAgICB0aGlzLiRmZXRjaFR5cGUodGhpcy5yZXNvdXJjZSk7CiAgICAgIH0KICAgIH0KICB9LAoKICBjcmVhdGVkKCkgewogICAgbGV0IGxpc3RDb21wb25lbnQgPSBmYWxzZTsKCiAgICBjb25zdCByZXNvdXJjZSA9IHRoaXMuJHJvdXRlLnBhcmFtcy5yZXNvdXJjZTsKICAgIGNvbnN0IGhhc0xpc3RDb21wb25lbnQgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzWyd0eXBlLW1hcC9oYXNDdXN0b21MaXN0J10ocmVzb3VyY2UpOwoKICAgIGlmICggaGFzTGlzdENvbXBvbmVudCApIHsKICAgICAgbGlzdENvbXBvbmVudCA9IHRoaXMuJHN0b3JlLmdldHRlcnNbJ3R5cGUtbWFwL2ltcG9ydExpc3QnXShyZXNvdXJjZSk7CiAgICB9CgogICAgdGhpcy5saXN0Q29tcG9uZW50ID0gbGlzdENvbXBvbmVudDsKICB9LAp9Owo="},{"version":3,"sources":["index.vue"],"names":[],"mappingsfile":"index.vue","sourceRoot":"node_modules/@rancher/shell/components/ResourceList","sourcesContent":["<script>\nimport ResourceTable from '@shell/components/ResourceTable';\nimport Loading from '@shell/components/Loading';\nimport Masthead from './Masthead';\nimport ResourceLoadingIndicator from './ResourceLoadingIndicator';\nimport ResourceFetch from '@shell/mixins/resource-fetch';\nimport IconMessage from '@shell/components/IconMessage.vue';\nimport { ResourceListComponentName } from './resource-list.config';\nimport { PanelLocation, ExtensionPoint } from '@shell/core/types';\nimport ExtensionPanel from '@shell/components/ExtensionPanel';\nimport { sameContents } from '@shell/utils/array';\n\nexport default {\n  name: ResourceListComponentName,\n\n  components: {\n    Loading,\n    ResourceTable,\n    Masthead,\n    ResourceLoadingIndicator,\n    IconMessage,\n    ExtensionPanel\n  },\n  mixins: [ResourceFetch],\n\n  props: {\n    hasAdvancedFiltering: {\n      type:    Boolean,\n      default: false\n    },\n    advFilterHideLabelsAsCols: {\n      type:    Boolean,\n      default: false\n    },\n    advFilterPreventFilteringLabels: {\n      type:    Boolean,\n      default: false\n    },\n  },\n\n  async fetch() {\n    const store = this.$store;\n    const resource = this.resource;\n\n    const schema = this.schema;\n\n    if ( this.hasListComponent ) {\n      // If you provide your own list then call its asyncData\n      const importer = this.listComponent;\n      const component = (await importer())?.default;\n\n      if ( component?.typeDisplay ) {\n        this.customTypeDisplay = component.typeDisplay.apply(this);\n      }\n\n      // If your list page has a fetch then it's responsible for populating rows itself\n      if ( component?.fetch ) {\n        this.hasFetch = true;\n      }\n\n      // If the custom component supports it, ask it what resources it loads, so we can\n      // use the incremental loading indicator when enabled\n      if (component?.$loadingResources) {\n        const { loadResources, loadIndeterminate } = component?.$loadingResources(this.$route, this.$store);\n\n        this.loadResources = loadResources || [resource];\n        this.loadIndeterminate = loadIndeterminate || false;\n      }\n    }\n\n    if ( !this.hasFetch ) {\n      if ( !schema ) {\n        store.dispatch('loadingError', new Error(this.t('nav.failWhale.resourceListNotFound', { resource }, true)));\n\n        return;\n      }\n\n      // See comment for `namespaceFilterRequired` watcher, skip fetch if we don't have a valid NS\n      if (!this.namespaceFilterRequired) {\n        await this.$fetchType(resource);\n      }\n    }\n  },\n\n  data() {\n    const getters = this.$store.getters;\n    const params = { ...this.$route.params };\n    const resource = params.resource;\n\n    const hasListComponent = getters['type-map/hasCustomList'](resource);\n\n    const inStore = getters['currentStore'](resource);\n    const schema = getters[`${ inStore }/schemaFor`](resource);\n\n    const showMasthead = getters[`type-map/optionsFor`](resource).showListMasthead;\n\n    return {\n      inStore,\n      schema,\n      hasListComponent,\n      showMasthead:                     showMasthead === undefined ? true : showMasthead,\n      resource,\n      extensionType:                    ExtensionPoint.PANEL,\n      extensionLocation:                PanelLocation.RESOURCE_LIST,\n      loadResources:                    [resource], // List of resources that will be loaded, this could be many (`Workloads`)\n      hasFetch:                         false,\n      // manual refresh\n      manualRefreshInit:                false,\n      watch:                            false,\n      force:                            false,\n      // Provided by fetch later\n      customTypeDisplay:                null,\n      // incremental loading\n      loadIndeterminate:                false,\n      // query param for simple filtering\n      useQueryParamsForSimpleFiltering: true\n    };\n  },\n\n  computed: {\n    headers() {\n      if ( this.hasListComponent || !this.schema ) {\n        // Custom lists figure out their own headers\n        return [];\n      }\n\n      return this.$store.getters['type-map/headersFor'](this.schema);\n    },\n\n    groupBy() {\n      return this.$store.getters['type-map/groupByFor'](this.schema);\n    },\n\n    showIncrementalLoadingIndicator() {\n      return this.perfConfig?.incrementalLoading?.enabled;\n    },\n\n  },\n\n  watch: {\n    /**\n     * When a NS filter is required and the user selects a different one, kick off a new set of API requests\n     *\n     * ResourceList has two modes\n     * 1) ResourceList component handles API request to fetch resources\n     * 2) Custom list component handles API request to fetch resources\n     *\n     * This covers case 1\n     */\n    namespaceFilter(neu, old) {\n      if (sameContents(neu, old)) {\n        return;\n      }\n\n      if (neu && !this.hasFetch) {\n        this.$fetchType(this.resource);\n      }\n    }\n  },\n\n  created() {\n    let listComponent = false;\n\n    const resource = this.$route.params.resource;\n    const hasListComponent = this.$store.getters['type-map/hasCustomList'](resource);\n\n    if ( hasListComponent ) {\n      listComponent = this.$store.getters['type-map/importList'](resource);\n    }\n\n    this.listComponent = listComponent;\n  },\n};\n</script>\n\n<template>\n  <IconMessage\n    v-if=\"namespaceFilterRequired\"\n    :vertical=\"true\"\n    :subtle=\"false\"\n    icon=\"icon-filter_alt\"\n  >\n    <template #message>\n      {{ t('resourceList.nsFiltering') }}\n    </template>\n  </IconMessage>\n  <div v-else>\n    <Masthead\n      v-if=\"showMasthead\"\n      :type-display=\"customTypeDisplay\"\n      :schema=\"schema\"\n      :resource=\"resource\"\n      :show-incremental-loading-indicator=\"showIncrementalLoadingIndicator\"\n      :load-resources=\"loadResources\"\n      :load-indeterminate=\"loadIndeterminate\"\n    >\n      <template slot=\"extraActions\">\n        <slot name=\"extraActions\" />\n      </template>\n    </Masthead>\n    <!-- Extensions area -->\n    <ExtensionPanel\n      :resource=\"{}\"\n      :type=\"extensionType\"\n      :location=\"extensionLocation\"\n    />\n\n    <div v-if=\"hasListComponent\">\n      <component\n        :is=\"listComponent\"\n        :incremental-loading-indicator=\"showIncrementalLoadingIndicator\"\n        :rows=\"rows\"\n        v-bind=\"$data\"\n      />\n    </div>\n    <ResourceTable\n      v-else\n      :schema=\"schema\"\n      :rows=\"rows\"\n      :loading=\"loading\"\n      :headers=\"headers\"\n      :group-by=\"groupBy\"\n      :has-advanced-filtering=\"hasAdvancedFiltering\"\n      :adv-filter-hide-labels-as-cols=\"advFilterHideLabelsAsCols\"\n      :adv-filter-prevent-filtering-labels=\"advFilterPreventFilteringLabels\"\n      :use-query-params-for-simple-filtering=\"useQueryParamsForSimpleFiltering\"\n      :force-update-live-and-delayed=\"forceUpdateLiveAndDelayed\"\n    />\n  </div>\n</template>\n\n  <style lang=\"scss\" scoped>\n    .header {\n      position: relative;\n    }\n    H2 {\n      position: relative;\n      margin: 0 0 20px 0;\n    }\n    .filter{\n      line-height: 45px;\n    }\n    .right-action {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n    }\n  </style>\n"]}]}