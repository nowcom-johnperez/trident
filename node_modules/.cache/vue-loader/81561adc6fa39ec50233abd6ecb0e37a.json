{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/detail/namespace.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/detail/namespace.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBDcmVhdGVFZGl0VmlldyBmcm9tICdAc2hlbGwvbWl4aW5zL2NyZWF0ZS1lZGl0LXZpZXcnOwppbXBvcnQgUmVzb3VyY2VzU3VtbWFyeSBmcm9tICdAc2hlbGwvY29tcG9uZW50cy9mbGVldC9SZXNvdXJjZXNTdW1tYXJ5JzsKaW1wb3J0IFJlc291cmNlVGFicyBmcm9tICdAc2hlbGwvY29tcG9uZW50cy9mb3JtL1Jlc291cmNlVGFicyc7CmltcG9ydCB7IENPVU5ULCBXT1JLTE9BRF9UWVBFUyB9IGZyb20gJ0BzaGVsbC9jb25maWcvdHlwZXMnOwppbXBvcnQgeyBXT1JLTE9BRF9TQ0hFTUEgfSBmcm9tICdAc2hlbGwvY29uZmlnL3NjaGVtYSc7CmltcG9ydCB7IGdldFN0YXRlc0J5VHlwZSB9IGZyb20gJ0BzaGVsbC9wbHVnaW5zL2Rhc2hib2FyZC1zdG9yZS9yZXNvdXJjZS1jbGFzcyc7CmltcG9ydCBNb3ZlTW9kYWwgZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvTW92ZU1vZGFsJzsKaW1wb3J0IFRhYiBmcm9tICdAc2hlbGwvY29tcG9uZW50cy9UYWJiZWQvVGFiJzsKaW1wb3J0IFJlc291cmNlVGFibGUgZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvUmVzb3VyY2VUYWJsZSc7CmltcG9ydCBTb3J0YWJsZVRhYmxlIGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL1NvcnRhYmxlVGFibGUnOwppbXBvcnQgTG9hZGluZyBmcm9tICdAc2hlbGwvY29tcG9uZW50cy9Mb2FkaW5nJzsKaW1wb3J0IHsKICBmbGF0dGVuLCBjb21wYWN0LCBmaWx0ZXIsIGZpbmRLZXksIHZhbHVlcwp9IGZyb20gJ2xvZGFzaCc7CgpleHBvcnQgZGVmYXVsdCB7CiAgY29tcG9uZW50czogewogICAgUmVzb3VyY2VzU3VtbWFyeSwKICAgIFJlc291cmNlVGFibGUsCiAgICBSZXNvdXJjZVRhYnMsCiAgICBMb2FkaW5nLAogICAgTW92ZU1vZGFsLAogICAgVGFiLAogICAgU29ydGFibGVUYWJsZQogIH0sCgogIG1peGluczogW0NyZWF0ZUVkaXRWaWV3XSwKCiAgcHJvcHM6IHsKICAgIG1vZGU6IHsKICAgICAgZGVmYXVsdDogJ2NyZWF0ZScsCiAgICAgIHR5cGU6ICAgIFN0cmluZywKICAgIH0sCiAgICB2YWx1ZTogewogICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgdHlwZTogICAgIE9iamVjdCwKICAgIH0sCiAgfSwKCiAgZGF0YSgpIHsKICAgIGNvbnN0IGhlYWRlcnMgPSBbCiAgICAgIHsKICAgICAgICBuYW1lOiAgJ3R5cGUnLAogICAgICAgIGxhYmVsOiB0aGlzLnQoJ3RhYmxlSGVhZGVycy5zaW1wbGVUeXBlJyksCiAgICAgICAgdmFsdWU6ICd0eXBlJwogICAgICB9LAogICAgICB7CiAgICAgICAgbmFtZTogICAgICAnZXJyb3InLAogICAgICAgIGxhYmVsOiAgICAgdGhpcy50KCduYW1lc3BhY2UucmVzb3VyY2VTdGF0ZXMuZXJyb3InKSwKICAgICAgICB2YWx1ZTogICAgICdieVN0YXRlLmVycm9yJywKICAgICAgICBzb3J0OiAgICAgICdieVN0YXRlLmVycm9yOmRlc2MnLAogICAgICAgIGZvcm1hdHRlcjogJ051bWJlcicKICAgICAgfSwKICAgICAgewogICAgICAgIG5hbWU6ICAgICAgJ3dhcm5pbmcnLAogICAgICAgIGxhYmVsOiAgICAgdGhpcy50KCduYW1lc3BhY2UucmVzb3VyY2VTdGF0ZXMud2FybmluZycpLAogICAgICAgIHZhbHVlOiAgICAgJ2J5U3RhdGUud2FybmluZycsCiAgICAgICAgc29ydDogICAgICAnYnlTdGF0ZS53YXJuaW5nOmRlc2MnLAogICAgICAgIGZvcm1hdHRlcjogJ051bWJlcicKICAgICAgfSwKICAgICAgewogICAgICAgIG5hbWU6ICAgICAgJ3RyYW5zaXRpb25pbmcnLAogICAgICAgIGxhYmVsOiAgICAgdGhpcy50KCduYW1lc3BhY2UucmVzb3VyY2VTdGF0ZXMuaW5mbycpLAogICAgICAgIHZhbHVlOiAgICAgJ2J5U3RhdGUuaW5mbycsCiAgICAgICAgc29ydDogICAgICAnYnlTdGF0ZS5pbmZvOmRlc2MnLAogICAgICAgIGZvcm1hdHRlcjogJ051bWJlcicKICAgICAgfSwKICAgICAgewogICAgICAgIG5hbWU6ICAnYWN0aXZlJywKICAgICAgICBsYWJlbDogdGhpcy50KCduYW1lc3BhY2UucmVzb3VyY2VTdGF0ZXMuc3VjY2VzcycpLAogICAgICAgIHNvcnQ6ICAnYnlTdGF0ZS5zdWNjZXNzOmRlc2MnLAogICAgICAgIHZhbHVlOiAnYnlTdGF0ZS5zdWNjZXNzJywKICAgICAgfSwKICAgICAgewogICAgICAgIG5hbWU6ICAgICAgJ3Vua25vd24nLAogICAgICAgIGxhYmVsOiAgICAgdGhpcy50KCduYW1lc3BhY2UucmVzb3VyY2VTdGF0ZXMudW5rbm93bicpLAogICAgICAgIHNvcnQ6ICAgICAgJ2J5U3RhdGUudW5rbm93bjpkZXNjJywKICAgICAgICB2YWx1ZTogICAgICdieVN0YXRlLnVua25vd24nLAogICAgICAgIGZvcm1hdHRlcjogJ051bWJlcicKICAgICAgfSwKICAgICAgewogICAgICAgIG5hbWU6ICAndG90YWwnLAogICAgICAgIGxhYmVsOiB0aGlzLnQoJ25hbWVzcGFjZS50b3RhbCcpLAogICAgICAgIHNvcnQ6ICAndG90YWxDb3VudDpkZXNjJywKICAgICAgICB2YWx1ZTogJ3RvdGFsQ291bnQnLAogICAgICB9LAogICAgXTsKCiAgICByZXR1cm4gewogICAgICBhbGxXb3JrbG9hZHM6IHsKICAgICAgICBkZWZhdWx0OiAoKSA9PiAoW10pLAogICAgICAgIHR5cGU6ICAgIEFycmF5LAogICAgICB9LAogICAgICByZXNvdXJjZVR5cGVzOiAgW10sCiAgICAgIHN1bW1hcnlTdGF0ZXM6ICBbJ3N1Y2Nlc3MnLCAnaW5mbycsICd3YXJuaW5nJywgJ2Vycm9yJywgJ3Vua25vd24nXSwKICAgICAgaGVhZGVycywKICAgICAgd29ya2xvYWRTY2hlbWE6IFdPUktMT0FEX1NDSEVNQQogICAgfTsKICB9LAoKICBhc3luYyBmZXRjaCgpIHsKICAgIHRoaXMuYWxsV29ya2xvYWRzID0gYXdhaXQgdGhpcy5nZXRBbGxXb3JrbG9hZHMoKTsKICB9LAoKICBjb21wdXRlZDogewogICAgaW5TdG9yZSgpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnNbJ2N1cnJlbnRQcm9kdWN0J10uaW5TdG9yZTsKICAgIH0sCgogICAgbmFtZXNwYWNlZFJlc291cmNlQ291bnRzKCkgewogICAgICBjb25zdCBhbGxDbHVzdGVyUmVzb3VyY2VDb3VudHMgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzW2AkeyB0aGlzLmluU3RvcmUgfS9hbGxgXShDT1VOVClbMF0uY291bnRzOwoKICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGFsbENsdXN0ZXJSZXNvdXJjZUNvdW50cykucmVkdWNlKChuYW1lc3BhY2VkLCB0eXBlKSA9PiB7CiAgICAgICAgY29uc3QgdHlwZUNvdW50cyA9IGFsbENsdXN0ZXJSZXNvdXJjZUNvdW50c1t0eXBlXTsKCiAgICAgICAgaWYgKCF0eXBlQ291bnRzLm5hbWVzcGFjZXMgfHwgIXR5cGVDb3VudHMubmFtZXNwYWNlc1t0aGlzLnZhbHVlLmlkXSkgewogICAgICAgICAgcmV0dXJuIG5hbWVzcGFjZWQ7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGluTmFtZXNwYWNlID0gdHlwZUNvdW50cy5uYW1lc3BhY2VzW3RoaXMudmFsdWUuaWRdOwoKICAgICAgICBuYW1lc3BhY2VkLnB1c2goewogICAgICAgICAgdHlwZSwKICAgICAgICAgIGJ5U3RhdGU6ICAgIHRoaXMucmVkdWNlU3RhdGVzKGluTmFtZXNwYWNlLnN0YXRlcyB8fCB7fSwgaW5OYW1lc3BhY2UuY291bnQpLAogICAgICAgICAgdG90YWxDb3VudDogaW5OYW1lc3BhY2UuY291bnQsCiAgICAgICAgICBzY2hlbWE6ICAgICB0aGlzLnNjaGVtYUZvcih0eXBlKQogICAgICAgIH0pOwoKICAgICAgICByZXR1cm4gbmFtZXNwYWNlZDsKICAgICAgfSwgW10pOwogICAgfSwKCiAgICBhY2N1bXVsYXRlZFN0YXRlQ291bnRzKCkgewogICAgICBjb25zdCB0b3RhbHMgPSB7fTsKCiAgICAgIGZvciAoY29uc3Qgc3RhdGUgaW4gdGhpcy5zdGF0ZXNCeVR5cGUpIHsKICAgICAgICB0b3RhbHNbc3RhdGVdID0gMDsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMubmFtZXNwYWNlZFJlc291cmNlQ291bnRzLnJlZHVjZSgoc3VtLCB0eXBlKSA9PiB7CiAgICAgICAgZm9yIChjb25zdCBzdGF0ZSBpbiB0eXBlLmJ5U3RhdGUpIHsKICAgICAgICAgIHN1bVtzdGF0ZV0gKz0gdHlwZS5ieVN0YXRlW3N0YXRlXTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBzdW07CiAgICAgIH0sIHRvdGFscyk7CiAgICB9LAoKICAgIHN0YXRlc0J5VHlwZSgpIHsKICAgICAgcmV0dXJuIGdldFN0YXRlc0J5VHlwZSgpOwogICAgfSwKCiAgICAvKioKICAgICAqIFdvcmtsb2FkIHRhYmxlIGRhdGEgZm9yIGN1cnJlbnQgbmFtZXNwYWNlCiAgICAgKi8KICAgIHdvcmtsb2FkUm93cygpIHsKICAgICAgY29uc3QgcGFyYW1zID0gdGhpcy4kcm91dGUucGFyYW1zOwogICAgICBjb25zdCB7IGlkIH0gPSBwYXJhbXM7CiAgICAgIGNvbnN0IHJvd3MgPSBmbGF0dGVuKGNvbXBhY3QodGhpcy5hbGxXb3JrbG9hZHMpKS5maWx0ZXIoKHJvdykgPT4gIXJvdy5vd25lZEJ5V29ya2xvYWQpOwogICAgICBjb25zdCBuYW1lc3BhY2VkUm93cyA9IGZpbHRlcihyb3dzLCAoeyBtZXRhZGF0YTogeyBuYW1lc3BhY2UgfSB9KSA9PiBuYW1lc3BhY2UgPT09IGlkKTsKCiAgICAgIHJldHVybiBuYW1lc3BhY2VkUm93czsKICAgIH0KICB9LAoKICBtZXRob2RzOiB7CiAgICAvLyBzb3J0IHN0YXRlcyBpbnRvIDUgY29sb3ItZGVsaW5lYXRlZCBjYXRlZ29yaWVzOiBpbmZvLCBlcnJvciwgc3VjY2Vzcywgd2FybmluZywgdW5rbm93bgogICAgcmVkdWNlU3RhdGVzKHN0YXRlcywgdG90YWwpIHsKICAgICAgY29uc3Qgb3V0ID0geyBzdWNjZXNzOiB0b3RhbCB9OwoKICAgICAgT2JqZWN0LmtleXMoc3RhdGVzKS5mb3JFYWNoKChzdGF0ZSkgPT4gewogICAgICAgIG91dC5zdWNjZXNzIC09IHN0YXRlc1tzdGF0ZV07CiAgICAgICAgaWYgKCEhb3V0W3N0YXRlXSkgewogICAgICAgICAgb3V0W3N0YXRlXSArPSBzdGF0ZXNbc3RhdGVdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb25zdCBnZW5lcmljU3RhdGVLZXkgPSBmaW5kS2V5KAogICAgICAgICAgICB0aGlzLnN0YXRlc0J5VHlwZSwKICAgICAgICAgICAgKHN0YXRlTmFtZXMpID0+IHN0YXRlTmFtZXMuaW5jbHVkZXMoc3RhdGUpCiAgICAgICAgICApOwoKICAgICAgICAgIGlmIChnZW5lcmljU3RhdGVLZXkpIHsKICAgICAgICAgICAgb3V0W2dlbmVyaWNTdGF0ZUtleV0gPyBvdXRbZ2VuZXJpY1N0YXRlS2V5XSArPSBzdGF0ZXNbc3RhdGVdIDogb3V0W2dlbmVyaWNTdGF0ZUtleV0gPSBzdGF0ZXNbc3RhdGVdOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgb3V0LnVua25vd24gPyBvdXQudW5rbm93biArPSBzdGF0ZXNbc3RhdGVdIDogb3V0LnVua25vd24gPSBzdGF0ZXNbc3RhdGVdOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CgogICAgICByZXR1cm4gb3V0OwogICAgfSwKCiAgICAvKioKICAgICAqIFJldHJpZXZlIHdvcmtsb2FkcyBmb3IgdGhpcyBuYW1lc3BhY2UgYW5kIGVhY2ggdHlwZQogICAgICovCiAgICBnZXRBbGxXb3JrbG9hZHMoKSB7CiAgICAgIHJldHVybiBQcm9taXNlLmFsbCh2YWx1ZXMoV09SS0xPQURfVFlQRVMpCiAgICAgICAgLy8gWW91IG1heSBub3QgaGF2ZSBSQkFDIHRvIHNlZSBzb21lIG9mIHRoZSB0eXBlcwogICAgICAgIC5maWx0ZXIoKHR5cGUpID0+IEJvb2xlYW4odGhpcy5zY2hlbWFGb3IodHlwZSkpKQogICAgICAgIC5tYXAoKHR5cGUpID0+IHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdjbHVzdGVyL2ZpbmRBbGwnLCB7IHR5cGUgfSkpCiAgICAgICk7CiAgICB9LAoKICAgIHNjaGVtYUZvcih0eXBlKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzW2AkeyB0aGlzLmluU3RvcmUgfS9zY2hlbWFGb3JgXSh0eXBlKTsKICAgIH0sCgogICAgdHlwZUxpc3RMb2NhdGlvbihzY2hlbWEpIHsKICAgICAgaWYgKHNjaGVtYT8ubGlua3M/LmNvbGxlY3Rpb24pIHsKICAgICAgICBjb25zdCBsb2NhdGlvbiA9IHsKICAgICAgICAgIG5hbWU6ICAgJ2MtY2x1c3Rlci1wcm9kdWN0LXJlc291cmNlJywKICAgICAgICAgIHBhcmFtczogeyAuLi50aGlzLiRyb3V0ZS5wYXJhbXMsIHJlc291cmNlOiBzY2hlbWEuc2hvcnRJZCB9CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIGxvY2F0aW9uOwogICAgICB9CgogICAgICByZXR1cm4gbnVsbDsKICAgIH0sCiAgfQp9Owo="},{"version":3,"sources":["namespace.vue"],"names":[],"mappingsfile":"namespace.vue","sourceRoot":"node_modules/@rancher/shell/detail","sourcesContent":["<script>\nimport CreateEditView from '@shell/mixins/create-edit-view';\nimport ResourcesSummary from '@shell/components/fleet/ResourcesSummary';\nimport ResourceTabs from '@shell/components/form/ResourceTabs';\nimport { COUNT, WORKLOAD_TYPES } from '@shell/config/types';\nimport { WORKLOAD_SCHEMA } from '@shell/config/schema';\nimport { getStatesByType } from '@shell/plugins/dashboard-store/resource-class';\nimport MoveModal from '@shell/components/MoveModal';\nimport Tab from '@shell/components/Tabbed/Tab';\nimport ResourceTable from '@shell/components/ResourceTable';\nimport SortableTable from '@shell/components/SortableTable';\nimport Loading from '@shell/components/Loading';\nimport {\n  flatten, compact, filter, findKey, values\n} from 'lodash';\n\nexport default {\n  components: {\n    ResourcesSummary,\n    ResourceTable,\n    ResourceTabs,\n    Loading,\n    MoveModal,\n    Tab,\n    SortableTable\n  },\n\n  mixins: [CreateEditView],\n\n  props: {\n    mode: {\n      default: 'create',\n      type:    String,\n    },\n    value: {\n      required: true,\n      type:     Object,\n    },\n  },\n\n  data() {\n    const headers = [\n      {\n        name:  'type',\n        label: this.t('tableHeaders.simpleType'),\n        value: 'type'\n      },\n      {\n        name:      'error',\n        label:     this.t('namespace.resourceStates.error'),\n        value:     'byState.error',\n        sort:      'byState.error:desc',\n        formatter: 'Number'\n      },\n      {\n        name:      'warning',\n        label:     this.t('namespace.resourceStates.warning'),\n        value:     'byState.warning',\n        sort:      'byState.warning:desc',\n        formatter: 'Number'\n      },\n      {\n        name:      'transitioning',\n        label:     this.t('namespace.resourceStates.info'),\n        value:     'byState.info',\n        sort:      'byState.info:desc',\n        formatter: 'Number'\n      },\n      {\n        name:  'active',\n        label: this.t('namespace.resourceStates.success'),\n        sort:  'byState.success:desc',\n        value: 'byState.success',\n      },\n      {\n        name:      'unknown',\n        label:     this.t('namespace.resourceStates.unknown'),\n        sort:      'byState.unknown:desc',\n        value:     'byState.unknown',\n        formatter: 'Number'\n      },\n      {\n        name:  'total',\n        label: this.t('namespace.total'),\n        sort:  'totalCount:desc',\n        value: 'totalCount',\n      },\n    ];\n\n    return {\n      allWorkloads: {\n        default: () => ([]),\n        type:    Array,\n      },\n      resourceTypes:  [],\n      summaryStates:  ['success', 'info', 'warning', 'error', 'unknown'],\n      headers,\n      workloadSchema: WORKLOAD_SCHEMA\n    };\n  },\n\n  async fetch() {\n    this.allWorkloads = await this.getAllWorkloads();\n  },\n\n  computed: {\n    inStore() {\n      return this.$store.getters['currentProduct'].inStore;\n    },\n\n    namespacedResourceCounts() {\n      const allClusterResourceCounts = this.$store.getters[`${ this.inStore }/all`](COUNT)[0].counts;\n\n      return Object.keys(allClusterResourceCounts).reduce((namespaced, type) => {\n        const typeCounts = allClusterResourceCounts[type];\n\n        if (!typeCounts.namespaces || !typeCounts.namespaces[this.value.id]) {\n          return namespaced;\n        }\n        const inNamespace = typeCounts.namespaces[this.value.id];\n\n        namespaced.push({\n          type,\n          byState:    this.reduceStates(inNamespace.states || {}, inNamespace.count),\n          totalCount: inNamespace.count,\n          schema:     this.schemaFor(type)\n        });\n\n        return namespaced;\n      }, []);\n    },\n\n    accumulatedStateCounts() {\n      const totals = {};\n\n      for (const state in this.statesByType) {\n        totals[state] = 0;\n      }\n\n      return this.namespacedResourceCounts.reduce((sum, type) => {\n        for (const state in type.byState) {\n          sum[state] += type.byState[state];\n        }\n\n        return sum;\n      }, totals);\n    },\n\n    statesByType() {\n      return getStatesByType();\n    },\n\n    /**\n     * Workload table data for current namespace\n     */\n    workloadRows() {\n      const params = this.$route.params;\n      const { id } = params;\n      const rows = flatten(compact(this.allWorkloads)).filter((row) => !row.ownedByWorkload);\n      const namespacedRows = filter(rows, ({ metadata: { namespace } }) => namespace === id);\n\n      return namespacedRows;\n    }\n  },\n\n  methods: {\n    // sort states into 5 color-delineated categories: info, error, success, warning, unknown\n    reduceStates(states, total) {\n      const out = { success: total };\n\n      Object.keys(states).forEach((state) => {\n        out.success -= states[state];\n        if (!!out[state]) {\n          out[state] += states[state];\n        } else {\n          const genericStateKey = findKey(\n            this.statesByType,\n            (stateNames) => stateNames.includes(state)\n          );\n\n          if (genericStateKey) {\n            out[genericStateKey] ? out[genericStateKey] += states[state] : out[genericStateKey] = states[state];\n          } else {\n            out.unknown ? out.unknown += states[state] : out.unknown = states[state];\n          }\n        }\n      });\n\n      return out;\n    },\n\n    /**\n     * Retrieve workloads for this namespace and each type\n     */\n    getAllWorkloads() {\n      return Promise.all(values(WORKLOAD_TYPES)\n        // You may not have RBAC to see some of the types\n        .filter((type) => Boolean(this.schemaFor(type)))\n        .map((type) => this.$store.dispatch('cluster/findAll', { type }))\n      );\n    },\n\n    schemaFor(type) {\n      return this.$store.getters[`${ this.inStore }/schemaFor`](type);\n    },\n\n    typeListLocation(schema) {\n      if (schema?.links?.collection) {\n        const location = {\n          name:   'c-cluster-product-resource',\n          params: { ...this.$route.params, resource: schema.shortId }\n        };\n\n        return location;\n      }\n\n      return null;\n    },\n  }\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n  <div v-else>\n    <div class=\"mb-20\">\n      <h3>{{ t('namespace.resources') }}</h3>\n      <ResourcesSummary\n        state-key=\"namespace.resourceStates\"\n        :value=\"accumulatedStateCounts\"\n        :required-states=\"summaryStates\"\n      />\n    </div>\n    <ResourceTabs\n      v-model=\"value\"\n      :mode=\"mode\"\n    >\n      <Tab :name=\"t('namespace.resources')\">\n        <SortableTable\n          default-sort-by=\"error\"\n          :table-actions=\"false\"\n          :row-actions=\"false\"\n          :rows=\"namespacedResourceCounts\"\n          :headers=\"headers\"\n        >\n          <template #col:type=\"{row}\">\n            <td>\n              <n-link\n                v-if=\"typeListLocation(row.schema)\"\n                :to=\"typeListLocation(row.schema)\"\n              >\n                {{ row.schema.pluralName }}\n              </n-link>\n              <span v-else>{{ row.schema.pluralName }}</span>\n            </td>\n          </template>\n        </SortableTable>\n      </Tab>\n\n      <Tab :name=\"t('namespace.workloads')\">\n        <ResourceTable\n          name=\"workloads\"\n          :groupable=\"false\"\n          v-bind=\"$attrs\"\n          :schema=\"workloadSchema\"\n          :rows=\"workloadRows\"\n        />\n      </Tab>\n    </ResourceTabs>\n    <MoveModal />\n  </div>\n</template>\n"]}]}