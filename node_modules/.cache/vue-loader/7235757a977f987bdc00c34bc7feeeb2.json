{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/formatter/PodImages.vue?vue&type=style&index=0&id=dc068436&scoped=true&lang=css","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/formatter/PodImages.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5mb3JtYXR0ZXItcG9kLWltYWdlcyB7CiAgd29yZC1icmVhazogYnJlYWstYWxsOwp9Cg=="},{"version":3,"sources":["PodImages.vue"],"names":[],"mappings":";AAyEA;AACA;AACA","file":"PodImages.vue","sourceRoot":"node_modules/@rancher/shell/components/formatter","sourcesContent":["<script>\nimport { mapGetters } from 'vuex';\n\n// For the main image hat we show, use these to ignore istio proxy images so that\n// we are more likely to show the important main iamge and not the istio sidecar\nconst IGNORE_IMAGES = ['istio/proxy', 'gcr.io/istio-release/proxy', 'mirrored-istio-proxy'];\n\nexport default {\n  props: {\n    value: {\n      type:    [Array, String],\n      default: () => {\n        return [];\n      }\n    },\n\n    row: {\n      type:    Object,\n      default: () => {\n        return {};\n      }\n    }\n  },\n  computed: {\n    ...mapGetters({ t: 'i18n/t' }),\n    images() {\n      if ( this.row?.imageNames ) {\n        return this.row.imageNames;\n      } else {\n        return this.value;\n      }\n    },\n    imageLabels() {\n      if (Array.isArray(this.images) && this.images.length > 1) {\n        let imagesNames = '';\n\n        this.images.forEach((name, i) => {\n          imagesNames += `&#8226; ${ name }<br>`;\n        });\n\n        return imagesNames;\n      }\n\n      return null;\n    },\n    mainImage() {\n      const images = this.images;\n      const filter = images.filter((image) => !IGNORE_IMAGES.find((i) => image.includes(i)));\n\n      return filter.length > 0 ? filter[0] : images[0];\n    }\n  }\n\n};\n</script>\n\n<template>\n  <span class=\"formatter-pod-images\">\n    <span>{{ mainImage }}</span><br>\n    <span\n      v-if=\"images.length-1>0\"\n      v-clean-tooltip.bottom=\"imageLabels\"\n      class=\"plus-more\"\n    >{{ t('generic.plusMore', {n:images.length-1}) }}</span>\n  </span>\n</template>\n\n<style scoped>\n  .formatter-pod-images {\n    word-break: break-all;\n  }\n</style>\n"]}]}