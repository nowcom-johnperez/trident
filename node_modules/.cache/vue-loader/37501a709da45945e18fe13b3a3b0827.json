{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/fleet/ResourcesSummary.vue?vue&type=style&index=0&id=7a9736b6&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/fleet/ResourcesSummary.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5mbGV4d3JhcCB7CiAgZmxleC13cmFwOiB3cmFwOwp9Ci5jb3VudGJveCB7CiAgbWluLXdpZHRoOiAxNTBweDsKICB3aWR0aDogMTIuNSU7CiAgbWFyZ2luLWJvdHRvbTogMTBweDsKfQo="},{"version":3,"sources":["ResourcesSummary.vue"],"names":[],"mappings":";AA8FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ResourcesSummary.vue","sourceRoot":"node_modules/@rancher/shell/components/fleet","sourcesContent":["<script>\nimport capitalize from 'lodash/capitalize';\nimport CountBox from '@shell/components/CountBox';\nimport { STATES } from '@shell/plugins/dashboard-store/resource-class';\n\nexport default {\n\n  name: 'ResourcesSummary',\n\n  components: { CountBox },\n\n  props: {\n    value: {\n      type:     Object,\n      required: true,\n    },\n\n    stateKey: {\n      type:    String,\n      default: 'fleet.fleetSummary.state'\n    },\n\n    requiredStates: {\n      type:    Array,\n      default: () => []\n    }\n  },\n\n  computed: {\n    counts() {\n      const out = this.requiredStates.reduce((obj, state) => {\n        obj[state] = {\n          count: 0,\n          color: state,\n          label: this.$store.getters['i18n/withFallback'](`${ this.stateKey }.${ state }`, null, state)\n        };\n\n        return obj;\n      }, {});\n\n      for (const k in this.value) {\n        if (k.startsWith('desired')) {\n          continue;\n        }\n\n        const mapped = STATES[k] || STATES['other'];\n\n        if (out[k]) {\n          out[k].count += this.value[k] || 0;\n          out[k].color = mapped.color;\n        } else {\n          out[k] = {\n            count: this.value[k] || 0,\n            color: mapped.color,\n            label: this.$store.getters['i18n/withFallback'](`${ this.stateKey }.${ k }`, null, capitalize(k))\n          };\n        }\n      }\n\n      return out;\n    },\n  },\n\n  methods: { capitalize },\n};\n</script>\n\n<template>\n  <div class=\"row flexwrap\">\n    <div\n      v-for=\"(v, k) in counts\"\n      :key=\"k\"\n      class=\"col countbox\"\n    >\n      <CountBox\n        :compact=\"true\"\n        :count=\"v['count']\"\n        :name=\"v.label\"\n        :primary-color-var=\"'--sizzle-' + v.color\"\n      />\n    </div>\n  </div>\n</template>\n<style lang=\"scss\" scoped>\n  .flexwrap {\n    flex-wrap: wrap;\n  }\n  .countbox {\n    min-width: 150px;\n    width: 12.5%;\n    margin-bottom: 10px;\n  }\n</style>\n"]}]}