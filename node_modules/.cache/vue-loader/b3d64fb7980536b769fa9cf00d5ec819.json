{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/networking.k8s.io.ingress/Rule.vue?vue&type=style&index=0&id=69daddaa&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/networking.k8s.io.ingress/Rule.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiNob3N0IHsKICBhbGlnbi1zZWxmOiBjZW50ZXI7Cn0KLmNsb3NlIHsKICBmbG9hdDogcmlnaHQ7CiAgcGFkZGluZzogMHB4OwogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICB0b3A6IC0xMHB4OwogIHJpZ2h0OiAtMTBweDsKfQo="},{"version":3,"sources":["Rule.vue"],"names":[],"mappings":";AA8KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Rule.vue","sourceRoot":"node_modules/@rancher/shell/edit/networking.k8s.io.ingress","sourcesContent":["<script>\nimport RulePath from '@shell/edit/networking.k8s.io.ingress/RulePath';\nimport { LabeledInput } from '@components/Form/LabeledInput';\nimport { random32 } from '@shell/utils/string';\n\nexport default {\n  components: { RulePath, LabeledInput },\n  props:      {\n    value: {\n      type:    Object,\n      default: () => {\n        return {};\n      },\n    },\n    serviceTargets: {\n      type:    Array,\n      default: () => [],\n    },\n    ingress: {\n      type:     Object,\n      required: true\n    },\n    rules: {\n      default: () => ({\n        requestHost: [],\n        path:        [],\n        port:        [],\n        target:      []\n      }),\n      type: Object,\n    }\n  },\n  data() {\n    const { host = '', http = {} } = this.value;\n    const { paths = [{ id: random32(1) }] } = http;\n\n    return {\n      host,\n      paths,\n      ruleMode: this.value.asDefault ? 'asDefault' : 'setHost',\n    };\n  },\n  methods: {\n    update() {\n      const http = { paths: this.paths };\n      const out = { ...this.value, http };\n\n      if (this.host) {\n        out.host = this.host;\n      } else {\n        delete out.host;\n      }\n\n      this.$nextTick(() => {\n        if ((this.paths?.length === 1 && this.pathObjectIsEmpty(this.paths[0])) || this.paths?.length === 0) {\n          delete out.http;\n        }\n        this.$emit('input', out);\n      });\n    },\n    pathObjectIsEmpty(pathObject) {\n      const servicePort = Number.parseInt(pathObject.servicePort) || pathObject.servicePort;\n      const serviceName = pathObject.serviceName;\n      const path = pathObject.path;\n      const pathType = pathObject.pathType;\n\n      if (!servicePort && !serviceName && !path && pathType === 'Prefix') {\n        return true;\n      }\n\n      return false;\n    },\n    addPath(ev) {\n      if (ev) {\n        ev.preventDefault();\n      }\n      this.paths = [...this.paths, { id: random32(1) }];\n      this.$nextTick(() => {\n        if (this.$refs.paths && this.$refs.paths.length > 0) {\n          const path = this.$refs.paths[this.$refs.paths.length - 1];\n\n          path.focus();\n        }\n        this.update();\n      });\n    },\n    removePath(idx) {\n      const neu = [...this.paths];\n\n      neu.splice(idx, 1);\n      this.paths = neu;\n      this.update();\n    },\n    removeRule() {\n      this.$emit('remove');\n    },\n    focus() {\n      this.$refs.host.focus();\n    },\n    makePathKey(i) {\n      return JSON.stringify(this.paths[i]);\n    }\n  },\n};\n</script>\n\n<template>\n  <div class=\"rule\">\n    <div class=\"row mb-20\">\n      <div\n        id=\"host\"\n        class=\"col span-6\"\n      >\n        <LabeledInput\n          ref=\"host\"\n          v-model=\"host\"\n          :label=\"t('ingress.rules.requestHost.label')\"\n          :placeholder=\"t('ingress.rules.requestHost.placeholder')\"\n          :rules=\"rules.requestHost\"\n          @input=\"update\"\n        />\n      </div>\n      <div\n        id=\"spacer\"\n        class=\"col span-5\"\n      />\n    </div>\n    <div class=\"rule-path-headings row\">\n      <div\n        class=\"col\"\n        :class=\"{'span-6': ingress.showPathType, 'span-4': !ingress.showPathType}\"\n      >\n        <label>{{ t(\"ingress.rules.path.label\") }}</label>\n      </div>\n      <div\n        class=\"col\"\n        :class=\"{'span-3': ingress.showPathType, 'span-4': !ingress.showPathType}\"\n      >\n        <label>{{ t(\"ingress.rules.target.label\") }}</label>\n      </div>\n      <div\n        class=\"col\"\n        :class=\"{'span-2': ingress.showPathType, 'span-3': !ingress.showPathType}\"\n        :style=\"{ 'margin-right': '0px' }\"\n      >\n        <label>{{ t(\"ingress.rules.port.label\") }}</label>\n      </div>\n      <div class=\"col\" />\n    </div>\n    <template v-for=\"(path, i) in paths\">\n      <RulePath\n        ref=\"paths\"\n        :key=\"path.id\"\n        v-model=\"paths[i]\"\n        class=\"row mb-10\"\n        :rule-mode=\"ruleMode\"\n        :service-targets=\"serviceTargets\"\n        :ingress=\"ingress\"\n        :rules=\"{path: rules.path, port: rules.port, target: rules.target}\"\n        @remove=\"(e) => removePath(i)\"\n        @input=\"update\"\n      />\n    </template>\n    <button\n      v-if=\"ruleMode === 'setHost'\"\n      class=\"btn role-tertiary add\"\n      @click=\"addPath\"\n    >\n      {{ t(\"ingress.rules.addPath\") }}\n    </button>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n#host {\n  align-self: center;\n}\n.close {\n  float: right;\n  padding: 0px;\n  position: relative;\n  top: -10px;\n  right: -10px;\n}\n</style>\n"]}]}