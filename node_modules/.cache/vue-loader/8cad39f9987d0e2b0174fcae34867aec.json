{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/autoscaling.horizontalpodautoscaler/metric-target.vue?vue&type=style&index=0&id=30b28f3c&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/autoscaling.horizontalpodautoscaler/metric-target.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5tZXRyaWMtdGFyZ2V0IHsKICB3aWR0aDogMTAwJTsKfQo="},{"version":3,"sources":["metric-target.vue"],"names":[],"mappings":";AAwNA;AACA;AACA","file":"metric-target.vue","sourceRoot":"node_modules/@rancher/shell/edit/autoscaling.horizontalpodautoscaler","sourcesContent":["<script>\nimport LabeledSelect from '@shell/components/form/LabeledSelect';\nimport { LabeledInput } from '@components/Form/LabeledInput';\nimport { findBy } from '@shell/utils/array';\nimport filter from 'lodash/filter';\nimport UnitInput from '@shell/components/form/UnitInput';\nimport { parseSi } from '@shell/utils/units';\n\nexport default {\n  components: {\n    LabeledSelect,\n    LabeledInput,\n    UnitInput,\n  },\n  props: {\n    value: {\n      type:    Object,\n      default: () => ({}),\n    },\n\n    mode: {\n      type:    String,\n      default: 'create',\n    },\n\n    metricResource: {\n      type:     String,\n      required: true,\n    },\n\n    resourceName: {\n      type:    String,\n      default: null,\n    },\n  },\n  data() {\n    const out = [\n      {\n        label:      this.t('hpa.metricTarget.averageVal.label'),\n        value:      'AverageValue',\n        specKey:    'averageValue',\n        validTypes: ['resource', 'pod', 'object', 'external'],\n      },\n      {\n        label:      this.t('hpa.metricTarget.utilization.label'),\n        value:      'Utilization',\n        specKey:    'averageUtilization',\n        validTypes: ['resource'],\n        default:    80,\n      },\n      {\n        label:      this.t('hpa.metricTarget.value.label'),\n        value:      'Value',\n        specKey:    'value',\n        validTypes: ['object', 'external'],\n      },\n    ];\n\n    const targetTypes = filter(out, (item) => {\n      return item.validTypes.includes(this.metricResource);\n    });\n\n    const quantity = this.initQuantity();\n\n    return { targetTypes, quantity };\n  },\n  computed: {\n    isResourceMetricType() {\n      return this.metricResource === 'resource';\n    },\n  },\n\n  watch: {\n    resourceName(newRn, _oldRn) {\n      const {\n        value: { type: metricType },\n        targetTypes,\n      } = this;\n      const match = findBy(targetTypes, { value: metricType });\n      let nueDefault = match?.default ?? '80';\n\n      if (metricType !== 'Utilization') {\n        if (newRn === 'cpu') {\n          nueDefault = `${ nueDefault }m`;\n        } else if (newRn === 'memory') {\n          nueDefault = `${ nueDefault }Mi`;\n        }\n      }\n\n      this.$set(this.value, match?.specKey, nueDefault);\n      this.quantity = nueDefault;\n    },\n\n    'value.type'(targetType, oldType) {\n      const { targetTypes, resourceName } = this;\n      const toDelete = findBy(targetTypes, { value: oldType });\n      const nue = findBy(targetTypes, { value: targetType });\n      let nueDefault = nue?.default ?? '80';\n\n      if (targetType !== 'Utilization') {\n        if (resourceName === 'cpu') {\n          nueDefault = `${ nueDefault }m`;\n        } else if (resourceName === 'memory') {\n          nueDefault = `${ nueDefault }Mi`;\n        }\n      }\n\n      delete this.value[toDelete.specKey];\n\n      this.$set(this.value, nue?.specKey, nueDefault);\n      this.quantity = nueDefault;\n    },\n  },\n\n  methods: {\n    initQuantity() {\n      const { isResourceMetricType, mode, value } = this;\n      let quantity;\n\n      // only parse si on a metric type of Resource because that is the only item we know for sure has an SI suffix\n      // other wise users that created a HPA outside of UI will have something like 1k converted to 1000, which is accurate but is not what is represented in the yaml for example.\n      // this is also what ember ui does\n      if (mode === 'edit' && isResourceMetricType) {\n        if (value?.averageValue) {\n          quantity = parseSi(value.averageValue);\n        } else if (value?.averageUtilization) {\n          quantity = value.averageUtilization;\n        } else if (value?.value) {\n          quantity = parseSi(value.value);\n        }\n      } else {\n        quantity =\n          value?.averageValue || value?.averageUtilization || value?.value;\n      }\n\n      return quantity;\n    },\n    updateQuantityValue(val) {\n      if (this.value?.type === 'Value') {\n        this.$set(this.value, 'value', val);\n      } else {\n        this.$set(this.value, 'averageValue', val);\n      }\n    },\n  },\n};\n</script>\n\n<template>\n  <div class=\"metric-target\">\n    <div class=\"row\">\n      <div class=\"col span-6\">\n        <LabeledSelect\n          v-model=\"value.type\"\n          :mode=\"mode\"\n          :label=\"t('hpa.metricTarget.type.label')\"\n          :options=\"targetTypes\"\n        />\n      </div>\n      <div\n        v-if=\"isResourceMetricType\"\n        class=\"col span-6\"\n      >\n        <UnitInput\n          v-if=\"value.type === 'Utilization'\"\n          v-model=\"value.averageUtilization\"\n          :label=\"t('hpa.metricTarget.quantity.label')\"\n          :mode=\"mode\"\n          placeholder=\"80\"\n          :required=\"true\"\n          :suffix=\"t('suffix.percent')\"\n        />\n        <UnitInput\n          v-else-if=\"resourceName === 'cpu'\"\n          v-model=\"quantity\"\n          :input-exponent=\"-1\"\n          :label=\"t('hpa.metricTarget.quantity.label')\"\n          :mode=\"mode\"\n          :placeholder=\"t('containerResourceLimit.cpuPlaceholder')\"\n          :required=\"true\"\n          :base-unit=\"t('suffix.cpus')\"\n          :output-modifier=\"true\"\n          @input=\"updateQuantityValue\"\n        />\n        <UnitInput\n          v-else-if=\"resourceName === 'memory'\"\n          v-model=\"quantity\"\n          :input-exponent=\"2\"\n          :label=\"t('containerResourceLimit.requestsMemory')\"\n          :mode=\"mode\"\n          :placeholder=\"t('containerResourceLimit.memPlaceholder')\"\n          :required=\"true\"\n          :output-modifier=\"true\"\n          :increment=\"1024\"\n          @input=\"updateQuantityValue\"\n        />\n      </div>\n      <div\n        v-else\n        class=\"col span-6\"\n      >\n        <LabeledInput\n          v-model=\"quantity\"\n          placeholder=\"1\"\n          type=\"text\"\n          :label=\"t('hpa.metricTarget.quantity.label')\"\n          :mode=\"mode\"\n          :required=\"true\"\n          @input=\"updateQuantityValue\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.metric-target {\n  width: 100%;\n}\n</style>\n"]}]}