{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/provisioning.cattle.io.cluster/CustomCommand.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/provisioning.cattle.io.cluster/CustomCommand.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCB7IEJhbm5lciB9IGZyb20gJ0Bjb21wb25lbnRzL0Jhbm5lcic7CmltcG9ydCBJbmZvQm94IGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL0luZm9Cb3gnOwppbXBvcnQgeyBDaGVja2JveCB9IGZyb20gJ0Bjb21wb25lbnRzL0Zvcm0vQ2hlY2tib3gnOwppbXBvcnQgQ29weUNvZGUgZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvQ29weUNvZGUnOwppbXBvcnQgeyBMYWJlbGVkSW5wdXQgfSBmcm9tICdAY29tcG9uZW50cy9Gb3JtL0xhYmVsZWRJbnB1dCc7CmltcG9ydCBLZXlWYWx1ZSBmcm9tICdAc2hlbGwvY29tcG9uZW50cy9mb3JtL0tleVZhbHVlJzsKaW1wb3J0IFRhaW50cyBmcm9tICdAc2hlbGwvY29tcG9uZW50cy9mb3JtL1RhaW50cyc7CmltcG9ydCB7IE1BTkFHRU1FTlQgfSBmcm9tICdAc2hlbGwvY29uZmlnL3R5cGVzJzsKCmltcG9ydCB7IHNhbml0aXplS2V5LCBzYW5pdGl6ZUlQLCBzYW5pdGl6ZVZhbHVlIH0gZnJvbSAnQHNoZWxsL3V0aWxzL3N0cmluZyc7CgpleHBvcnQgZGVmYXVsdCB7CiAgY29tcG9uZW50czogewogICAgQmFubmVyLCBDaGVja2JveCwgQ29weUNvZGUsIEluZm9Cb3gsIEtleVZhbHVlLCBMYWJlbGVkSW5wdXQsIFRhaW50cwogIH0sCgogIHByb3BzOiB7CiAgICBjbHVzdGVyOiB7CiAgICAgIHR5cGU6ICAgICBPYmplY3QsCiAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgfSwKCiAgICBjbHVzdGVyVG9rZW46IHsKICAgICAgdHlwZTogICAgIE9iamVjdCwKICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICB9CiAgfSwKCiAgYXN5bmMgZmV0Y2goKSB7CiAgICBhd2FpdCB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnbWFuYWdlbWVudC9maW5kQWxsJywgeyB0eXBlOiBNQU5BR0VNRU5ULk5PREUgfSk7CiAgfSwKCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHNob3dBZHZhbmNlZDogICAgZmFsc2UsCiAgICAgIGV0Y2Q6ICAgICAgICAgICAgdHJ1ZSwKICAgICAgY29udHJvbFBsYW5lOiAgICB0cnVlLAogICAgICB3b3JrZXI6ICAgICAgICAgIHRydWUsCiAgICAgIGluc2VjdXJlOiAgICAgICAgZmFsc2UsCiAgICAgIGluc2VjdXJlV2luZG93czogZmFsc2UsCiAgICAgIGFkZHJlc3M6ICAgICAgICAgJycsCiAgICAgIGludGVybmFsQWRkcmVzczogJycsCiAgICAgIG5vZGVOYW1lOiAgICAgICAgJycsCiAgICAgIGxhYmVsczogICAgICAgICAge30sCiAgICAgIHRhaW50czogICAgICAgICAgW10KICAgIH07CiAgfSwKCiAgY29tcHV0ZWQ6IHsKICAgIGxpbnV4Q29tbWFuZCgpIHsKICAgICAgY29uc3Qgb3V0ID0gdGhpcy5pbnNlY3VyZSA/IFt0aGlzLmNsdXN0ZXJUb2tlbi5pbnNlY3VyZU5vZGVDb21tYW5kXSA6IFt0aGlzLmNsdXN0ZXJUb2tlbi5ub2RlQ29tbWFuZF07CgogICAgICB0aGlzLmV0Y2QgJiYgb3V0LnB1c2goJy0tZXRjZCcpOwogICAgICB0aGlzLmNvbnRyb2xQbGFuZSAmJiBvdXQucHVzaCgnLS1jb250cm9scGxhbmUnKTsKICAgICAgdGhpcy53b3JrZXIgJiYgb3V0LnB1c2goJy0td29ya2VyJyk7CiAgICAgIHRoaXMuYWRkcmVzcyAmJiBvdXQucHVzaChgLS1hZGRyZXNzICR7IHNhbml0aXplSVAodGhpcy5hZGRyZXNzKSB9YCk7CiAgICAgIHRoaXMuaW50ZXJuYWxBZGRyZXNzICYmIG91dC5wdXNoKGAtLWludGVybmFsLWFkZHJlc3MgJHsgc2FuaXRpemVWYWx1ZSh0aGlzLmludGVybmFsQWRkcmVzcykgfWApOwogICAgICB0aGlzLm5vZGVOYW1lICYmIG91dC5wdXNoKGAtLW5vZGUtbmFtZSAkeyBzYW5pdGl6ZVZhbHVlKHRoaXMubm9kZU5hbWUpIH1gKTsKCiAgICAgIGZvciAoIGNvbnN0IGtleSBpbiB0aGlzLmxhYmVscyApIHsKICAgICAgICBjb25zdCBrID0gc2FuaXRpemVLZXkoa2V5KTsKICAgICAgICBjb25zdCB2ID0gc2FuaXRpemVWYWx1ZSh0aGlzLmxhYmVsc1trXSk7CgogICAgICAgIGlmICggayAmJiB2ICkgewogICAgICAgICAgb3V0LnB1c2goYC0tbGFiZWwgJHsgayB9PSR7IHYgfWApOwogICAgICAgIH0KICAgICAgfQoKICAgICAgZm9yICggY29uc3QgdCBvZiB0aGlzLnRhaW50cyApIHsKICAgICAgICBjb25zdCBrID0gc2FuaXRpemVLZXkodC5rZXkpOwogICAgICAgIGNvbnN0IHYgPSBzYW5pdGl6ZVZhbHVlKHQudmFsdWUpOwogICAgICAgIGNvbnN0IGUgPSBzYW5pdGl6ZVZhbHVlKHQuZWZmZWN0KTsKCiAgICAgICAgaWYgKCBrICYmIHYgJiYgZSApIHsKICAgICAgICAgIG91dC5wdXNoKGAtLXRhaW50cyAkeyBrIH09JHsgdiB9OiR7IGUgfWApOwogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIG91dC5qb2luKCcgJyk7CiAgICB9LAoKICAgIHdpbmRvd3NDb21tYW5kKCkgewogICAgICBjb25zdCBvdXQgPSB0aGlzLmluc2VjdXJlV2luZG93cyA/IFt0aGlzLmNsdXN0ZXJUb2tlbi5pbnNlY3VyZVdpbmRvd3NOb2RlQ29tbWFuZF0gOiBbdGhpcy5jbHVzdGVyVG9rZW4ud2luZG93c05vZGVDb21tYW5kXTsKCiAgICAgIHRoaXMuYWRkcmVzcyAmJiBvdXQucHVzaChgLUFkZHJlc3MgIiR7IHNhbml0aXplVmFsdWUodGhpcy5hZGRyZXNzKSB9ImApOwogICAgICB0aGlzLmludGVybmFsQWRkcmVzcyAmJiBvdXQucHVzaChgLUludGVybmFsQWRkcmVzcyAiJHsgc2FuaXRpemVWYWx1ZSh0aGlzLmludGVybmFsQWRkcmVzcykgfSJgKTsKICAgICAgdGhpcy5ub2RlTmFtZSAmJiBvdXQucHVzaChgLU5vZGVOYW1lICIkeyBzYW5pdGl6ZVZhbHVlKHRoaXMubm9kZU5hbWUpIH0iYCk7CgogICAgICBmb3IgKCBjb25zdCBrZXkgaW4gdGhpcy5sYWJlbHMgKSB7CiAgICAgICAgY29uc3QgayA9IHNhbml0aXplS2V5KGtleSk7CiAgICAgICAgY29uc3QgdiA9IHNhbml0aXplVmFsdWUodGhpcy5sYWJlbHNba10pOwoKICAgICAgICBpZiAoIGsgJiYgdiApIHsKICAgICAgICAgIG91dC5wdXNoKGAtTGFiZWwgIiR7IGsgfT0keyB2IH0iYCk7CiAgICAgICAgfQogICAgICB9CgogICAgICBmb3IgKCBjb25zdCB0IG9mIHRoaXMudGFpbnRzICkgewogICAgICAgIGNvbnN0IGsgPSBzYW5pdGl6ZUtleSh0LmtleSk7CiAgICAgICAgY29uc3QgdiA9IHNhbml0aXplVmFsdWUodC52YWx1ZSk7CiAgICAgICAgY29uc3QgZSA9IHNhbml0aXplVmFsdWUodC5lZmZlY3QpOwoKICAgICAgICBpZiAoIGsgJiYgdiAmJiBlICkgewogICAgICAgICAgb3V0LnB1c2goYC1UYWludCAiJHsgayB9PSR7IHYgfTokeyBlIH0iYCk7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gb3V0LmpvaW4oJyAnKTsKICAgIH0sCgogICAgLy8gQ2x1c3RlcnMgbmVlZCBsaW51eCBub2RlcyB3aXRoIGV0Y2QsIGNvbnRyb2xwbGFuZSwgYW5kIHdvcmtlciByb2xlcyBiZWZvcmUgd2luZG93cyBub2RlcyBjYW4gYmUgcmVnaXN0cmF0aW9uCiAgICByZWFkeUZvcldpbmRvd3MoKSB7CiAgICAgIGlmICghdGhpcy5jbHVzdGVyLm1nbXQgfHwgIXRoaXMuY2x1c3Rlci5tZ210LmlzUmVhZHkpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgY29uc3Qgbm9kZXMgPSB0aGlzLmNsdXN0ZXIubm9kZXMgfHwgW107CgogICAgICBjb25zdCBhbGxSb2xlcyA9IG5vZGVzLnJlZHVjZSgoYWxsLCBub2RlKSA9PiB7CiAgICAgICAgY29uc3QgeyBpc1dvcmtlciwgaXNFdGNkLCBpc0NvbnRyb2xQbGFuZSB9ID0gbm9kZTsKCiAgICAgICAgaWYgKGlzV29ya2VyICYmICFhbGwuaW5jbHVkZXMoJ3dvcmtlcicpKSB7CiAgICAgICAgICBhbGwucHVzaCgnd29ya2VyJyk7CiAgICAgICAgfQogICAgICAgIGlmIChpc0V0Y2QgJiYgIWFsbC5pbmNsdWRlcygnZXRjZCcpKSB7CiAgICAgICAgICBhbGwucHVzaCgnZXRjZCcpOwogICAgICAgIH0KICAgICAgICBpZiAoaXNDb250cm9sUGxhbmUgJiYgIWFsbC5pbmNsdWRlcygnY29udHJvbFBsYW5lJykpIHsKICAgICAgICAgIGFsbC5wdXNoKCdjb250cm9sUGxhbmUnKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBhbGw7CiAgICAgIH0sIFtdKTsKCiAgICAgIHJldHVybiBhbGxSb2xlcy5sZW5ndGggPT09IDM7CiAgICB9CgogIH0sCgogIG1ldGhvZHM6IHsKICAgIHRvZ2dsZUFkdmFuY2VkKCkgewogICAgICB0aGlzLnNob3dBZHZhbmNlZCA9ICF0aGlzLnNob3dBZHZhbmNlZDsKICAgIH0sCgogICAgY29waWVkV2luZG93cygpIHsKICAgICAgdGhpcy4kZW1pdCgnY29waWVkLXdpbmRvd3MnKTsKICAgIH0KICB9LAp9OwoK"},{"version":3,"sources":["CustomCommand.vue"],"names":[],"mappingsfile":"CustomCommand.vue","sourceRoot":"node_modules/@rancher/shell/edit/provisioning.cattle.io.cluster","sourcesContent":["<script>\nimport { Banner } from '@components/Banner';\nimport InfoBox from '@shell/components/InfoBox';\nimport { Checkbox } from '@components/Form/Checkbox';\nimport CopyCode from '@shell/components/CopyCode';\nimport { LabeledInput } from '@components/Form/LabeledInput';\nimport KeyValue from '@shell/components/form/KeyValue';\nimport Taints from '@shell/components/form/Taints';\nimport { MANAGEMENT } from '@shell/config/types';\n\nimport { sanitizeKey, sanitizeIP, sanitizeValue } from '@shell/utils/string';\n\nexport default {\n  components: {\n    Banner, Checkbox, CopyCode, InfoBox, KeyValue, LabeledInput, Taints\n  },\n\n  props: {\n    cluster: {\n      type:     Object,\n      required: true,\n    },\n\n    clusterToken: {\n      type:     Object,\n      required: true,\n    }\n  },\n\n  async fetch() {\n    await this.$store.dispatch('management/findAll', { type: MANAGEMENT.NODE });\n  },\n\n  data() {\n    return {\n      showAdvanced:    false,\n      etcd:            true,\n      controlPlane:    true,\n      worker:          true,\n      insecure:        false,\n      insecureWindows: false,\n      address:         '',\n      internalAddress: '',\n      nodeName:        '',\n      labels:          {},\n      taints:          []\n    };\n  },\n\n  computed: {\n    linuxCommand() {\n      const out = this.insecure ? [this.clusterToken.insecureNodeCommand] : [this.clusterToken.nodeCommand];\n\n      this.etcd && out.push('--etcd');\n      this.controlPlane && out.push('--controlplane');\n      this.worker && out.push('--worker');\n      this.address && out.push(`--address ${ sanitizeIP(this.address) }`);\n      this.internalAddress && out.push(`--internal-address ${ sanitizeValue(this.internalAddress) }`);\n      this.nodeName && out.push(`--node-name ${ sanitizeValue(this.nodeName) }`);\n\n      for ( const key in this.labels ) {\n        const k = sanitizeKey(key);\n        const v = sanitizeValue(this.labels[k]);\n\n        if ( k && v ) {\n          out.push(`--label ${ k }=${ v }`);\n        }\n      }\n\n      for ( const t of this.taints ) {\n        const k = sanitizeKey(t.key);\n        const v = sanitizeValue(t.value);\n        const e = sanitizeValue(t.effect);\n\n        if ( k && v && e ) {\n          out.push(`--taints ${ k }=${ v }:${ e }`);\n        }\n      }\n\n      return out.join(' ');\n    },\n\n    windowsCommand() {\n      const out = this.insecureWindows ? [this.clusterToken.insecureWindowsNodeCommand] : [this.clusterToken.windowsNodeCommand];\n\n      this.address && out.push(`-Address \"${ sanitizeValue(this.address) }\"`);\n      this.internalAddress && out.push(`-InternalAddress \"${ sanitizeValue(this.internalAddress) }\"`);\n      this.nodeName && out.push(`-NodeName \"${ sanitizeValue(this.nodeName) }\"`);\n\n      for ( const key in this.labels ) {\n        const k = sanitizeKey(key);\n        const v = sanitizeValue(this.labels[k]);\n\n        if ( k && v ) {\n          out.push(`-Label \"${ k }=${ v }\"`);\n        }\n      }\n\n      for ( const t of this.taints ) {\n        const k = sanitizeKey(t.key);\n        const v = sanitizeValue(t.value);\n        const e = sanitizeValue(t.effect);\n\n        if ( k && v && e ) {\n          out.push(`-Taint \"${ k }=${ v }:${ e }\"`);\n        }\n      }\n\n      return out.join(' ');\n    },\n\n    // Clusters need linux nodes with etcd, controlplane, and worker roles before windows nodes can be registration\n    readyForWindows() {\n      if (!this.cluster.mgmt || !this.cluster.mgmt.isReady) {\n        return false;\n      }\n      const nodes = this.cluster.nodes || [];\n\n      const allRoles = nodes.reduce((all, node) => {\n        const { isWorker, isEtcd, isControlPlane } = node;\n\n        if (isWorker && !all.includes('worker')) {\n          all.push('worker');\n        }\n        if (isEtcd && !all.includes('etcd')) {\n          all.push('etcd');\n        }\n        if (isControlPlane && !all.includes('controlPlane')) {\n          all.push('controlPlane');\n        }\n\n        return all;\n      }, []);\n\n      return allRoles.length === 3;\n    }\n\n  },\n\n  methods: {\n    toggleAdvanced() {\n      this.showAdvanced = !this.showAdvanced;\n    },\n\n    copiedWindows() {\n      this.$emit('copied-windows');\n    }\n  },\n};\n\n</script>\n\n<template>\n  <div>\n    <InfoBox\n      :step=\"1\"\n      class=\"step-box\"\n    >\n      <h3 v-t=\"'cluster.custom.nodeRole.label'\" />\n      <h4 v-t=\"'cluster.custom.nodeRole.detail'\" />\n      <Checkbox\n        v-model=\"etcd\"\n        label-key=\"model.machine.role.etcd\"\n      />\n      <Checkbox\n        v-model=\"controlPlane\"\n        label-key=\"model.machine.role.controlPlane\"\n      />\n      <Checkbox\n        v-model=\"worker\"\n        label-key=\"model.machine.role.worker\"\n      />\n      <Banner\n        v-if=\"!etcd || !controlPlane || !worker\"\n        data-testid=\"node-role-warning\"\n        color=\"warning\"\n        :label=\"t('cluster.custom.nodeRole.warning')\"\n      />\n    </InfoBox>\n\n    <InfoBox\n      v-if=\"showAdvanced\"\n      :step=\"2\"\n      class=\"step-box\"\n    >\n      <h3 v-t=\"'cluster.custom.advanced.label'\" />\n      <h4 v-t=\"'cluster.custom.advanced.detail'\" />\n\n      <div class=\"row mb-10\">\n        <div class=\"col span-4\">\n          <LabeledInput\n            v-model=\"nodeName\"\n            label-key=\"cluster.custom.advanced.nodeName\"\n          />\n        </div>\n        <div class=\"col span-4\">\n          <LabeledInput\n            v-model=\"address\"\n            label-key=\"cluster.custom.advanced.publicIp\"\n          />\n        </div>\n        <div class=\"col span-4\">\n          <LabeledInput\n            v-model=\"internalAddress\"\n            label-key=\"cluster.custom.advanced.privateIp\"\n          />\n        </div>\n      </div>\n\n      <KeyValue\n        v-model=\"labels\"\n        class=\"mb-10\"\n        mode=\"edit\"\n        :title=\"t('cluster.custom.advanced.nodeLabel.title')\"\n        :add-label=\"t('cluster.custom.advanced.nodeLabel.label')\"\n        :read-allowed=\"false\"\n      />\n\n      <Taints\n        v-model=\"taints\"\n        class=\"mb-10\"\n        mode=\"edit\"\n        :value=\"taints\"\n      />\n\n      <a\n        v-t=\"'generic.hideAdvanced'\"\n        @click=\"toggleAdvanced\"\n      />\n    </InfoBox>\n\n    <div\n      v-else\n      class=\"mb-20\"\n    >\n      <a\n        v-t=\"'generic.showAdvanced'\"\n        @click=\"toggleAdvanced\"\n      />\n    </div>\n\n    <InfoBox\n      :step=\"showAdvanced ? 3 : 2\"\n      class=\"step-box\"\n    >\n      <h3 v-t=\"'cluster.custom.registrationCommand.label'\" />\n      <h4 v-t=\"'cluster.custom.registrationCommand.linuxDetail'\" />\n      <CopyCode\n        id=\"copiedLinux\"\n        class=\"m-10 p-10\"\n      >\n        {{ linuxCommand }}\n      </CopyCode>\n      <Checkbox\n        v-if=\"clusterToken.insecureNodeCommand\"\n        v-model=\"insecure\"\n        label-key=\"cluster.custom.registrationCommand.insecure\"\n      />\n\n      <template v-if=\"cluster.supportsWindows\">\n        <hr class=\"mt-20 mb-20\">\n        <h4 v-t=\"'cluster.custom.registrationCommand.windowsDetail'\" />\n        <Banner\n          v-if=\"cluster.isRke1\"\n          color=\"warning\"\n          :label=\"t('cluster.custom.registrationCommand.windowsDeprecatedForRKE1')\"\n        />\n        <template v-if=\"readyForWindows\">\n          <CopyCode\n            id=\"copiedWindows\"\n            class=\"m-10 p-10\"\n            @copied=\"copiedWindows\"\n          >\n            {{ windowsCommand }}\n          </CopyCode>\n          <Checkbox\n            v-if=\"clusterToken.insecureWindowsNodeCommand\"\n            v-model=\"insecureWindows\"\n            label-key=\"cluster.custom.registrationCommand.insecure\"\n          />\n          <Banner\n            color=\"info\"\n            :label=\"t('cluster.custom.registrationCommand.windowsWarning')\"\n          />\n        </template>\n        <Banner\n          v-else\n          color=\"info\"\n          :label=\"t('cluster.custom.registrationCommand.windowsNotReady')\"\n        />\n      </template>\n    </InfoBox>\n  </div>\n</template>\n"]}]}