{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/networking.k8s.io.ingress/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/networking.k8s.io.ingress/index.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappingsfile":"index.vue","sourceRoot":"node_modules/@rancher/shell/edit/networking.k8s.io.ingress","sourcesContent":["<script>\nimport { allHash } from '@shell/utils/promise';\nimport { SECRET, SERVICE, INGRESS_CLASS } from '@shell/config/types';\nimport NameNsDescription from '@shell/components/form/NameNsDescription';\nimport CreateEditView from '@shell/mixins/create-edit-view';\nimport FormValidation from '@shell/mixins/form-validation';\nimport Tab from '@shell/components/Tabbed/Tab';\nimport CruResource from '@shell/components/CruResource';\nimport Labels from '@shell/components/form/Labels';\nimport Error from '@shell/components/form/Error';\nimport Tabbed from '@shell/components/Tabbed';\nimport { get, set } from '@shell/utils/object';\nimport { SECRET_TYPES as TYPES } from '@shell/config/secret';\nimport DefaultBackend from './DefaultBackend';\nimport Certificates from './Certificates';\nimport Rules from './Rules';\nimport IngressClass from './IngressClass';\n\nexport default {\n  name:       'CRUIngress',\n  components: {\n    IngressClass,\n    Certificates,\n    CruResource,\n    DefaultBackend,\n    Labels,\n    NameNsDescription,\n    Rules,\n    Tab,\n    Tabbed,\n    Error\n  },\n  mixins: [CreateEditView, FormValidation],\n  props:  {\n    value: {\n      type:    Object,\n      default: () => {\n        return {};\n      }\n    },\n    mode: {\n      type:    String,\n      default: 'edit'\n    }\n  },\n  async fetch() {\n    this.ingressClassSchema = this.$store.getters[`cluster/schemaFor`](INGRESS_CLASS);\n    const hash = await allHash({\n      secrets:        this.$store.dispatch('cluster/findAll', { type: SECRET }),\n      services:       this.$store.dispatch('cluster/findAll', { type: SERVICE }),\n      ingressClasses: this.ingressClassSchema ? this.$store.dispatch('cluster/findAll', { type: INGRESS_CLASS }) : Promise.resolve([]),\n    });\n\n    this.allServices = hash.services;\n    this.allSecrets = hash.secrets;\n    this.allIngressClasses = hash.ingressClasses;\n  },\n  data() {\n    return {\n      ingressClassSchema: null,\n      allSecrets:         [],\n      allServices:        [],\n      allIngressClasses:  [],\n      fvFormRuleSets:     [\n        {\n          path: 'metadata.name', rules: ['required', 'hostname'], translationKey: 'nameNsDescription.name.label'\n        },\n        {\n          path: 'spec.rules.host', rules: ['wildcardHostname'], translationKey: 'ingress.rules.requestHost.label'\n        },\n        {\n          path: 'spec.rules.http.paths.path', rules: ['absolutePath'], translationKey: 'ingress.rules.path.label'\n        },\n        {\n          path: 'spec.rules.http.paths.backend.service.port.number', rules: ['required'], translationKey: 'ingress.rules.port.label'\n        },\n        {\n          path: 'spec.rules.http.paths.backend.service.name', rules: ['required'], translationKey: 'ingress.rules.target.label'\n        },\n        { path: 'spec', rules: ['backEndOrRules'] },\n        {\n          path: 'spec.defaultBackend.service.name', rules: ['required'], translationKey: 'ingress.defaultBackend.targetService.label'\n        },\n        {\n          path: 'spec.defaultBackend.service.port.number', rules: ['required', 'requiredInt', 'portNumber'], translationKey: 'ingress.defaultBackend.port.label'\n        },\n        { path: 'spec.tls.hosts', rules: ['required', 'wildcardHostname'] }\n      ],\n      fvReportedValidationPaths: ['spec.rules.http.paths.backend.service.port.number', 'spec.rules.http.paths.path', 'spec.rules.http.paths.backend.service.name']\n    };\n  },\n  computed: {\n    fvExtraRules() {\n      const backEndOrRules = (spec) => {\n        const { rules = [], defaultBackend } = spec;\n\n        const validRules = rules.length > 0;\n        const validDefaultBackend = !!defaultBackend?.service;\n\n        if (!validRules && !validDefaultBackend) {\n          return this.t('ingress.rulesOrBackendSpecified');\n        }\n      };\n\n      return { backEndOrRules };\n    },\n    tabErrors() {\n      return {\n        rules:          this.fvGetPathErrors(['spec.rules.host', 'spec.rules.http.paths.path', 'spec.rules.http.paths.backend.service.port.number', 'spec.rules.http.paths.backend.service.name'])?.length > 0,\n        defaultBackend: this.fvGetPathErrors(['spec.defaultBackend.service.name', 'spec.defaultBackend.service.port.number'])?.length > 0\n      };\n    },\n    rulesPathRules() {\n      return {\n        requestHost: this.fvGetAndReportPathRules('spec.rules.host'),\n        path:        this.fvGetAndReportPathRules('spec.rules.http.paths.path'),\n        port:        this.fvGetAndReportPathRules('spec.rules.http.paths.backend.service.port.number'),\n        target:      this.fvGetAndReportPathRules('spec.rules.http.paths.backend.service.name'),\n\n      };\n    },\n    defaultBackendPathRules() {\n      const rulesExist = (this.value?.spec?.rules || []).length > 0;\n      const defaultBackendExist = !!this.value?.spec?.defaultBackend?.service;\n\n      if (!rulesExist || defaultBackendExist) {\n        return {\n          name: this.fvGetAndReportPathRules('spec.defaultBackend.service.name'),\n          port: this.fvGetAndReportPathRules('spec.defaultBackend.service.port.number'),\n        };\n      }\n\n      return { name: [], port: [] };\n    },\n    serviceTargets() {\n      return this.filterByCurrentResourceNamespace(this.allServices)\n        .map((service) => ({\n          label: service.metadata.name,\n          value: service.metadata.name,\n          ports: service.spec.ports?.map((p) => p.port)\n        }));\n    },\n    firstTabLabel() {\n      return this.isView ? this.t('ingress.rulesAndCertificates.title') : this.t('ingress.rules.title');\n    },\n    certificates() {\n      return this.filterByCurrentResourceNamespace(this.allSecrets.filter((secret) => secret._type === TYPES.TLS)).map((secret) => {\n        const { id } = secret;\n\n        return id.slice(id.indexOf('/') + 1);\n      });\n    },\n    ingressClasses() {\n      return this.allIngressClasses.map((ingressClass) => ({\n        label: ingressClass.metadata.name,\n        value: ingressClass.metadata.name,\n      }));\n    },\n  },\n  created() {\n    this.$set(this.value, 'spec', this.value.spec || {});\n    this.$set(this.value.spec, 'rules', this.value.spec.rules || [{}]);\n    this.$set(this.value.spec, 'backend', this.value.spec.backend || {});\n\n    if (!this.value.spec.tls || Object.keys(this.value.spec.tls[0] || {}).length === 0) {\n      this.$set(this.value.spec, 'tls', []);\n    }\n\n    this.registerBeforeHook(this.willSave, 'willSave');\n  },\n  methods: {\n    filterByCurrentResourceNamespace(resources) {\n      // When configuring an Ingress, the options for Secrets and\n      // default backend Services are limited to the namespace of the Ingress.\n      return resources.filter((resource) => {\n        return resource.metadata.namespace === this.value.metadata.namespace;\n      });\n    },\n    willSave() {\n      const backend = get(this.value.spec, this.value.defaultBackendPath);\n      const serviceName = get(backend, this.value.serviceNamePath);\n      const servicePort = get(backend, this.value.servicePortPath);\n\n      if (backend && (!serviceName || !servicePort)) {\n        const path = this.value.defaultBackendPath;\n\n        set(this.value.spec, path, null);\n      }\n    },\n  }\n};\n</script>\n<template>\n  <CruResource\n    :done-route=\"doneRoute\"\n    :mode=\"mode\"\n    :resource=\"value\"\n    :subtypes=\"[]\"\n    :validation-passed=\"fvFormIsValid\"\n    :errors=\"fvUnreportedValidationErrors\"\n    :description=\"t('ingress.description')\"\n    @error=\"e=>errors = e\"\n    @finish=\"save\"\n    @cancel=\"done\"\n  >\n    <NameNsDescription\n      v-if=\"!isView\"\n      :value=\"value\"\n      :rules=\"{name: fvGetAndReportPathRules('metadata.name'), namespace: fvGetAndReportPathRules('metadata.namespace'), description: []}\"\n      :mode=\"mode\"\n      :register-before-hook=\"registerBeforeHook\"\n    />\n    <Error\n      :value=\"value.spec\"\n      :rules=\"fvGetAndReportPathRules('spec')\"\n      as-banner\n    />\n    <Tabbed :side-tabs=\"true\">\n      <Tab\n        :label=\"firstTabLabel\"\n        name=\"rules\"\n        :weight=\"4\"\n        :error=\"tabErrors.rules\"\n      >\n        <Rules\n          v-model=\"value\"\n          :mode=\"mode\"\n          :service-targets=\"serviceTargets\"\n          :certificates=\"certificates\"\n          :rules=\"rulesPathRules\"\n        />\n      </Tab>\n      <Tab\n        :label=\"t('ingress.defaultBackend.label')\"\n        name=\"default-backend\"\n        :weight=\"3\"\n        :error=\"tabErrors.defaultBackend\"\n      >\n        <DefaultBackend\n          v-model=\"value\"\n          :service-targets=\"serviceTargets\"\n          :mode=\"mode\"\n          :rules=\"defaultBackendPathRules\"\n        />\n      </Tab>\n      <Tab\n        v-if=\"!isView\"\n        :label=\"t('ingress.certificates.label')\"\n        name=\"certificates\"\n        :weight=\"2\"\n      >\n        <Certificates\n          v-model=\"value\"\n          :mode=\"mode\"\n          :certificates=\"certificates\"\n          :rules=\"{host: fvGetAndReportPathRules('spec.tls.hosts')}\"\n        />\n      </Tab>\n      <Tab\n        :label=\"t('ingress.ingressClass.label')\"\n        name=\"ingress-class\"\n        :weight=\"1\"\n      >\n        <IngressClass\n          v-model=\"value\"\n          :mode=\"mode\"\n          :ingress-classes=\"ingressClasses\"\n        />\n      </Tab>\n      <Tab\n        v-if=\"!isView\"\n        name=\"labels-and-annotations\"\n        label-key=\"generic.labelsAndAnnotations\"\n        :weight=\"0\"\n      >\n        <Labels\n          default-container-class=\"labels-and-annotations-container\"\n          :value=\"value\"\n          :mode=\"mode\"\n          :display-side-by-side=\"false\"\n        />\n      </Tab>\n    </Tabbed>\n  </CruResource>\n</template>\n"]}]}