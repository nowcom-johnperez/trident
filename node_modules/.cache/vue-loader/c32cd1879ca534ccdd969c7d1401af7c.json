{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/pkg/nowcom/pages/createnetwork.vue?vue&type=style&index=0&id=2c40a9b4&scoped=true&lang=css","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/pkg/nowcom/pages/createnetwork.vue","mtime":1716430386794},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgovKiBub3RpZiAqLwovKiBZb3VyIGV4aXN0aW5nIHN0eWxlIGNvZGUgKi8KCi5ub3RpZmljYXRpb24gewogIHBvc2l0aW9uOiBmaXhlZDsKICB0b3A6IDEwcHg7CiAgcmlnaHQ6IDEwcHg7CiAgcGFkZGluZzogMTBweDsKICBib3JkZXItcmFkaXVzOiA1cHg7CiAgY29sb3I6ICNmZmY7CiAgZm9udC13ZWlnaHQ6IGJvbGQ7Cn0KCi8qIFN0eWxlIGZvciB0YWIgY29udGVudCAqLwovKiBoMiB7CiAgY29sb3I6ICMwMDdiZmY7Cn0gKi8KLyogQWRkIHRoaXMgc3R5bGUgdG8gcG9zaXRpb24gdGhlIGJ1dHRvbnMgYXQgdGhlIGJvdHRvbSAqLwouZm9vdGVyIHsKICBwb3NpdGlvbjogZml4ZWQ7CiAgYm90dG9tOiAwOwogIGJvcmRlci10b3A6IDJweCBzb2xpZCAjOWM5MzkzOwogIHdpZHRoOiA3MCU7CiAgcGFkZGluZzogMjBweCAwOwogIGJhY2tncm91bmQtY29sb3I6ICNmZmY7Cn0KCi50aGVtZS1kYXJrIC5mb290ZXIgewogIGJhY2tncm91bmQtY29sb3I6ICMxYjFjMjE7Cn0KCi5mb3JtLWNvbHVtbi1ib3R0b20gewogIGRpc3BsYXk6IGZsZXg7CiAganVzdGlmeS1jb250ZW50OiBzdGFydDsKfQo="},{"version":3,"sources":["createnetwork.vue"],"names":[],"mappings":";;AAwVA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"createnetwork.vue","sourceRoot":"pkg/nowcom/pages","sourcesContent":["<template>\n  <div class=\"base create-base\">\n    <Loading :loading=\"isLoading\" />\n    <div class=\"create-content\">\n      <h1>Create VNET Network</h1>\n      <!-- <p>This is page is for the creation of VNET</p> -->\n      <br />\n      <Tabs :list=\"tabList\" :current=\"currentTab\" @set-active=\"changeTab\" />\n      <div class=\"tab-content-container mt-10\">\n        <div class=\"tab-content\" :class=\"{ 'show': currentTab === 0 }\">\n          <p>\n            Nowcom Virtual Network (VNet) is the fundamental building block for your private network in Nowcom Cloud.\n            VNet enables many types of Nowcom resources, such as Nowcom Virtual Machines (VM),\n            to securely communicate with each other, the internet, and on-premises networks.\n            VNet is similar to a traditional network that you'd operate in your own data center,\n            but brings with it additional benefits of Nowcom's infrastructure such as scale, availability, and\n            isolation.\n          </p>\n          <br />\n          <!-- Updated select input with \"Create New VNET\" option -->\n          <!-- <select v-model=\"selectedVnetName\" @change=\"handleSelectChange\">\n                    <option value=\"\">Select Network Name</option>\n                    <option v-for=\"network in networks\" :value=\"network.vnet_name\">{{ network.vnet_name }}</option>\n                    <option value=\"Create VNET\">Create New VNET</option>\n                </select> -->\n          <div class=\"input-container\">\n            <label for=\"vnet\">VNet Name</label>\n            <input type=\"text\" class=\"mt-10\" name=\"vnet\" v-model=\"selectedVnetName\" placeholder=\"e.g. vnet\" required />\n            <span class=\"info-icon\">\n              <i class=\"fa fa-info-circle\" aria-hidden=\"true\"></i>\n            </span>\n            <div class=\"tooltip\">Nowcom Virtual Network (VNet) is the fundamental building block for your private network in Nowcom Cloud.\n            VNet enables many types of Nowcom resources, such as Nowcom Virtual Machines (VM),\n            to securely communicate with each other, the internet, and on-premises networks.\n            VNet is similar to a traditional network that you'd operate in your own data center,\n            but brings with it additional benefits of Nowcom's infrastructure such as scale, availability, and\n            isolation.</div>\n          </div>\n\n          <div class=\"checkbox-content mt-20\">\n            <input type=\"checkbox\" id=\"dhcp\" v-model=\"dhcpEnabled\" />\n            <label for=\"dhcp\">DHCP Enabled?</label>\n          </div>\n          \n          <div class=\"checkbox-content mt-20\">\n            <input type=\"checkbox\" id=\"dhcp\" v-model=\"externalDNSenabled\" />\n            <label for=\"dhcp\">External DNS</label>\n          </div>\n\n          <div class=\"mt-20\">\n            <p>\n              Configure your virtual network address space with the IPv4 and IPv6 addresses and subnets you need.\n            </p>\n            <p class=\"mt-5\">\n              Define the address space of your virtual network with one or more IPv4 or IPv6 address ranges.\n              Create subnets to segment the virtual network address space into smaller ranges for use by your\n              applications.\n              When you deploy resources into a subnet, Nowcom assigns the resource an IP address from the subnet.\n            </p>\n            <div class=\"mt-20\">\n              <div v-for=\"(subnet, index) in selectedVnetSubnets\" :key=\"`subnet_${index}`\" class=\"row mt-10\" style=\"justify-content: space-between; gap: 5px; align-items: center;\">\n                <div>\n                  <input v-model=\"selectedSubnetName[index]\" type=\"text\" placeholder=\"Subnet Name\"\n                  title=\"Please enter a valid IP address\" @input=\"handleSubnetInput(index)\" />\n                </div>\n                <div>\n                  <input v-model=\"selectedVnetSubnets[index]\" type=\"text\" placeholder=\"Enter subnet (e.g., 10.0.0.0)\"\n                    pattern=\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\" title=\"Please enter a valid IP address\"\n                    @input=\"handleSubnetInput(index)\" />\n                </div>\n                <div class=\"subnet-suffix\">\n                  <p>/24</p>\n                </div>\n                <div class=\"form-column\" align=\"left\">\n                  <cButton v-if=\"index > 0\" class=\"btn-icon\" @click=\"removeSubnet(index)\">\n                    <i class=\"fa fa-trash fa-lg text-danger\"></i>\n                  </cButton>\n                </div>\n              </div>\n            </div>\n            <div class=\"form-row ml-5\">\n              <div class=\"form-column\" align=\"left\">\n                <cButton class=\"cbtn btn-light\" @click=\"addSubnet\">\n                  <i class=\"fa fa-plus mr-5\"></i>\n                  Add Subnet\n                </cButton>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"input-container\">\n            <label for=\"tags\">Tags</label>\n            <input type=\"text\" class=\"mt-10\" name=\"tags\" v-model=\"newTag\" placeholder=\"Type and press Enter to add tags\" @keydown.enter.prevent=\"addTag\" />\n            <span class=\"info-icon\">\n              <i class=\"fa fa-info-circle\" aria-hidden=\"true\"></i>\n            </span>\n            <div class=\"tooltip\">Tooltip text</div>\n          </div>\n          <Tag v-for=\"(tag, index) in tags\" :key=\"index\" :show-delete=\"true\" @delete=\"removeTag(index)\" class=\"mt-10\">{{tag}}</Tag>\n\n          <!-- New input field that appears when \"Create New VNET\" is selected -->\n          <!-- Modal for creating a new network -->\n          <!-- <Modal v-if=\"creatingNewNetwork\">\n            <template v-slot:content>\n              <h2>Create New Network</h2>\n              <input v-model=\"newNetworkName\" value=\"Vrf-\" placeholder=\"Enter new network name\" @input=\"handleNewNetworkInput\" />\n            </template>\n\n            <template v-slot:footer>\n              <cButton class=\"cbtn btn-primary\" @click=\"deleteNetwork\" label=\"Save\" />\n              <cButton class=\"cbtn btn-light\" @click=\"closeModal\" label=\"Cancel\" />\n            </template>\n          </Modal> -->\n        </div>\n\n        <Modal size=\"lg\" v-if=\"reviewModalState\">\n          <template #header>\n            <h1 class=\"mb-0\">Review</h1>\n          </template>\n          <template v-slot:content>\n            \n            <div>\n              <h2>Configure</h2>\n              <p>\n                Virtual Network Name: &nbsp; <span class=\"text-bold\" :style=\"{ color: selectedVnetName ? '' : 'red', 'font-size': '1.3rem' }\">{{ selectedVnetName || 'empty' }}</span>\n              </p>\n              <p>\n                DHCP Enabled: {{ dhcpEnabled }}\n              </p>\n              <p>\n                External DNS: {{ externalDNSenabled }}\n              </p>\n            </div>\n            \n            <div class=\"mt-30\">\n              <h2>Tags</h2>\n              <div class=\"mt-10\">\n                <template v-if=\"tags.length > 0\">\n                  <Tag v-for=\"(tag, index) in tags\" :key=\"index\">{{tag}}</Tag>\n                </template>\n                <p v-else>No Tags</p>\n              </div>\n            </div>\n\n            <div class=\"mt-30\">\n              <h2>Subnet</h2>\n              <Subnet v-for=\"(name, index) in selectedSubnetName\" :key=\"index\" :name=\"name\" :current-address=\"selectedVnetSubnets[index] || 'empty'\" :ip-list=\"selectedVnetSubnets\" />\n            </div>\n          </template>\n\n          <template v-slot:footer>\n            <cButton class=\"cbtn btn-primary\" @click=\"createNetwork\" :disabled=\"!selectedVnetName || hasInvalidIPAddress || hasDuplicateIPAddress || isLoading\" label=\"Create\" />\n            <cButton class=\"cbtn btn-light\" @click=\"reviewModalState = false\" label=\"Cancel\" />\n          </template>\n        </Modal>\n      </div>\n    </div>\n    <div class=\"footer\">\n      <div class=\"form-column-bottom\">\n        <!-- <button class=\"cbtn btn-light mr-10\" :disabled=\"currentTab === 0\" @click=\"previousTab\">Previous</button>\n        <button class=\"cbtn btn-light\" :disabled=\"currentTab === 3\" @click=\"nextTab\">Next</button> -->\n        <!-- Conditionally render the button based on the current tab -->\n        <button class=\"cbtn btn-primary ml-10\" @click=\"reviewModalState = true\">\n          Review\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport Tabs from '../components/common/Tabs'\nimport Subnet from '../components/Subnet'\nimport Tag from '../components/common/Tag'\nimport Loading from '../components/common/Loading'\nimport cButton from '../components/common/Button'\nimport Modal from '../components/common/Modal'\nimport { isValidIP, combineArraysIntoObjects } from '../services/helpers/utils'\nimport { PRODUCT_NAME, LIST_NETWORK, BLANK_CLUSTER } from '../config/constants'\n\nexport default {\n  name: \"CreateNetwork\",\n  // layout: 'home',\n  data() {\n    return {\n      reviewModalState: false,\n      selectedVnetName: \"\", // Dropdown for network name\n      selectedVnetSubnets: [\"10.55.0.0\"], // Network Address (disabled and readonly)\n      selectedSubnetName: [\"default\"],\n      isLoading: false,\n      apiResponse: null, // New data property to store the API response\n      apiResponseMessage: null, // New data property to store the API response\n      apiError: null,\n      newNetworkName: \"\", // New data property for the new network name\n      creatingNewNetwork: false, // New data property to track if creating a new network\n      apiResponseUpdate: \"\", //response for update\n      currentTab: 0, // Initial tab\n      tabList: ['Configure'],\n      newTag: \"\",\n      tags: [],\n      dhcpEnabled: false,\n      externalDNSenabled: false,\n      externalDNSsource: ''\n    };\n  },\n  components: {\n    Tabs,\n    Loading,\n    cButton,\n    Modal,\n    Tag,\n    Subnet\n  },\n  computed: {\n    hasDuplicateIPAddress() {\n      const uniqueIPAddresses = new Set(this.selectedVnetSubnets);\n      return this.selectedVnetSubnets.length !== uniqueIPAddresses.size;\n    },\n    hasInvalidIPAddress() {\n      return this.selectedVnetSubnets.some(ip => !isValidIP(ip));\n    }\n  },\n  methods: {\n    addTag() {\n      const trimmedTag = this.newTag.trim();\n      if (trimmedTag) {\n        this.tags.push(trimmedTag);\n        this.newTag = \"\"; // Clear the input field after adding a tag\n      }\n    },\n    removeTag(index) {\n      this.tags.splice(index, 1);\n    },\n    showSpinner() {\n      this.isLoading = true;\n      // Hide the spinner after 2 seconds\n      setTimeout(() => {\n        this.isLoading = false;\n      }, 2000);\n    },\n    routeListNetwork() {\n      this.$router.push(`/${PRODUCT_NAME}/c/${BLANK_CLUSTER}/${LIST_NETWORK}`); // Assuming '/create-network' is the route for the Create Network page\n    },\n    changeTab(tabIndex) {\n      this.currentTab = tabIndex;\n    },\n    addSubnet() {\n      // Add a new empty subnet field\n      this.$set(\n        this.selectedVnetSubnets,\n        this.selectedVnetSubnets.length,\n        \"10.55.0.0\"\n      );\n      this.$set(\n        this.selectedSubnetName,\n        this.selectedSubnetName.length,\n        \"\"\n      );\n    },\n\n    removeSubnet(index) {\n      // Remove the subnet at the specified index\n      this.selectedVnetSubnets.splice(index, 1);\n      this.selectedSubnetName.splice(index, 1);\n    },\n    async createNetwork() {\n      // loading\n      try {\n        this.isLoading = true;\n        const combinedObjects = combineArraysIntoObjects(\n          this.selectedVnetSubnets,\n          this.selectedSubnetName\n        );\n\n        const vnet_data = {\n          apiVersion: \"packetlifter.dev/v1\",\n          kind: \"Vnet\",\n          // vnet_vlan: this.selectedVnetVlan,\n          metadata: {\n            name: this.selectedVnetName.toLowerCase(),\n            namespace: \"default\"\n          },\n          spec: {\n            name: this.selectedVnetName.toLowerCase(),\n            subnets: combinedObjects,\n          }\n        };\n        // const vnet_data_string = JSON.stringify(vnet_data);\n        console.log(\"send to API\", vnet_data);\n\n        const response = await this.$store.dispatch(`${PRODUCT_NAME}/create`, vnet_data);\n        console.log(\"Network created:\", response.data);\n        \n        // Set the API response data in the component\n        this.apiResponse = response.data;\n        console.log(\"response from create networks\", this.apiResponse);\n\n        this.apiResponseMessage = \"VNET Successfully Added\";\n\n        this.apiError = null; // Reset error state\n\n        this.isLoading = false;\n        this.routeListNetwork();\n      } catch (error) {\n        console.error(\"Error creating network:\", error);\n        this.isLoading = false;\n        this.apiResponseMessage = \"Error\";\n        // Set the API error in the component\n        this.apiError = \"Error creating VRF\";\n        this.apiResponse = 1; // Reset response state\n      }\n    },\n\n    getGatewayForSubnet(subnet) {\n      // Find the network with the selected subnet and return its gateway\n      const network = this.networks.find(\n        (net) => net.network_address === subnet\n      );\n      return network ? network.gateway : \"\";\n    },\n\n    populateFields(selectedVnetName) {\n      this.apiResponse = \"\";\n      // Find the selected network by name and populate other fields\n      const network = this.networks.find(\n        (net) => net.vnet_name === selectedVnetName\n      );\n      if (network) {\n        this.selectedVnetName = network.vnet_name;\n        //this.selectedVnetVlan = network.vnet_vlan;\n        this.selectedVnetSubnets = [\"10.55.0.0\"];\n      } else {\n        // Reset other fields if the network is not found\n        this.selectedVnetName = selectedVnetName;\n        //this.selectedVnetVlan = 'Vlan';\n        this.selectedVnetSubnets = [\"10.55.0.0\"];\n      }\n    },\n  },\n\n};\n</script>\n    \n<style scoped>\n\n/* notif */\n/* Your existing style code */\n\n.notification {\n  position: fixed;\n  top: 10px;\n  right: 10px;\n  padding: 10px;\n  border-radius: 5px;\n  color: #fff;\n  font-weight: bold;\n}\n\n/* Style for tab content */\n/* h2 {\n  color: #007bff;\n} */\n/* Add this style to position the buttons at the bottom */\n.footer {\n  position: fixed;\n  bottom: 0;\n  border-top: 2px solid #9c9393;\n  width: 70%;\n  padding: 20px 0;\n  background-color: #fff;\n}\n\n.theme-dark .footer {\n  background-color: #1b1c21;\n}\n\n.form-column-bottom {\n  display: flex;\n  justify-content: start;\n}\n</style>"]}]}