{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/management.cattle.io.projectroletemplatebinding.vue?vue&type=style&index=0&id=18d0640e&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/management.cattle.io.projectroletemplatebinding.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQpsYWJlbC5yYWRpbyB7DQogIGZvbnQtc2l6ZTogMTZweDsNCn0NCg0KLmN1c3RvbS1wZXJtaXNzaW9ucyB7DQogIGRpc3BsYXk6IGdyaWQ7DQogIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmciAxZnI7DQp9DQo="},{"version":3,"sources":["management.cattle.io.projectroletemplatebinding.vue"],"names":[],"mappings":";AAsFA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"management.cattle.io.projectroletemplatebinding.vue","sourceRoot":"node_modules/@rancher/shell/edit","sourcesContent":["<script>\r\nimport CreateEditView from '@shell/mixins/create-edit-view';\r\nimport CruResource from '@shell/components/CruResource';\r\nimport { MANAGEMENT } from '@shell/config/types';\r\nimport { PROJECT_ID } from '@shell/config/query-params';\r\nimport ProjectMemberEditor from '@shell/components/form/ProjectMemberEditor';\r\n\r\nexport default {\r\n  components: {\r\n    CruResource,\r\n    ProjectMemberEditor,\r\n  },\r\n\r\n  mixins: [CreateEditView],\r\n  async fetch() {\r\n    await this.$store.dispatch('management/findAll', { type: MANAGEMENT.USER });\r\n    this.projects = await this.$store.dispatch('management/findAll', { type: MANAGEMENT.PROJECT });\r\n    this.$set(this.binding, 'projectId', this.binding.projectId || this.projects[0]?.id.replace('/', ':'));\r\n  },\r\n  data() {\r\n    return {\r\n      binding: {\r\n        permissionGroup: 'member',\r\n        custom:          {},\r\n        principalId:     '',\r\n        projectId:       this.$route.query[PROJECT_ID],\r\n      },\r\n    };\r\n  },\r\n  computed: {\r\n    doneLocationOverride() {\r\n      if (this.$route.query[PROJECT_ID]) {\r\n        return {\r\n          name:   'c-cluster-product-resource-id',\r\n          params: {\r\n            resource: MANAGEMENT.PROJECT,\r\n            id:       this.$route.query[PROJECT_ID].replace(':', '/')\r\n          }\r\n        };\r\n      }\r\n\r\n      return this.value.listLocation;\r\n    },\r\n  },\r\n  methods: {\r\n    onAdd(principalId) {\r\n      this.$set(this, 'principalId', principalId);\r\n    },\r\n    async saveOverride() {\r\n      const asyncBindings = this.binding.roleTemplateIds.map((roleTemplateId) => this.$store.dispatch(`management/create`, {\r\n        type:             MANAGEMENT.PROJECT_ROLE_TEMPLATE_BINDING,\r\n        roleTemplateName: roleTemplateId,\r\n        principalName:    this.member.principalId,\r\n        projectName:      this.member.projectId,\r\n      }));\r\n\r\n      const bindings = await Promise.all(asyncBindings);\r\n\r\n      await Promise.all(bindings.map((binding) => binding.save()));\r\n      await this.$store.dispatch(`management/findAll`, { type: MANAGEMENT.PROJECT_ROLE_TEMPLATE_BINDING, opt: { force: true } });\r\n\r\n      this.$router.replace(this.doneLocationOverride);\r\n    }\r\n  }\r\n};\r\n\r\n</script>\r\n\r\n<template>\r\n  <CruResource\r\n    class=\"cluster-role-template-binding\"\r\n    :errors=\"errors\"\r\n    :mode=\"mode\"\r\n    :resource=\"value\"\r\n    :subtypes=\"[]\"\r\n    :can-yaml=\"false\"\r\n    :cancel-event=\"true\"\r\n    :validation-passed=\"!!binding.principalId && !!binding.projectId\"\r\n    @error=\"e=>errors = e\"\r\n    @finish=\"saveOverride\"\r\n    @cancel=\"done\"\r\n  >\r\n    <ProjectMemberEditor v-model=\"binding\" />\r\n  </CruResource>\r\n</template>\r\n<style lang=\"scss\" scoped>\r\nlabel.radio {\r\n  font-size: 16px;\r\n}\r\n\r\n.custom-permissions {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr;\r\n}\r\n</style>\r\n"]}]}