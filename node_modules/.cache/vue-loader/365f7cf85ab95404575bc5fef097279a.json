{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/chart/monitoring/steps/uninstall-v1.vue?vue&type=style&index=0&id=24b5abee&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/chart/monitoring/steps/uninstall-v1.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci52MS1tb25pdG9yaW5nIHsKICBkaXNwbGF5OiBmbGV4OwogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICB3aWR0aDogMTAwJTsKICBwIHsKICAgIG1heC13aWR0aDogOTAwcHg7CiAgfQogIC5idG4gewogICAgbWluLXdpZHRoOiAyMDBweDsKICB9Cn0K"},{"version":3,"sources":["uninstall-v1.vue"],"names":[],"mappings":";AA0HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"uninstall-v1.vue","sourceRoot":"node_modules/@rancher/shell/chart/monitoring/steps","sourcesContent":["\n<script>\nimport { haveV1Monitoring, haveV1MonitoringWorkloads } from '@shell/utils/monitoring';\nimport AsyncButton from '@shell/components/AsyncButton';\nimport IconMessage from '@shell/components/IconMessage';\n\nfunction delay(t, v) {\n  return new Promise((resolve) => {\n    setTimeout(resolve.bind(null, v), t);\n  });\n}\n\nexport default {\n\n  label:   'monitoring.installSteps.uninstallV1.stepTitle',\n  subtext: 'monitoring.installSteps.uninstallV1.stepSubtext',\n  weight:  100,\n\n  components: {\n    AsyncButton,\n    IconMessage\n  },\n\n  data() {\n    return {\n      haveV1Monitoring: false,\n      error:            null,\n    };\n  },\n\n  mounted() {\n    this.haveV1Monitoring = haveV1Monitoring(this.$store.getters);\n    this.$emit('update', {\n      loading: false,\n      ready:   false,\n      hidden:  !this.haveV1Monitoring,\n    });\n  },\n\n  methods: {\n    uninstall(buttonCb) {\n      this.$store.dispatch('cluster/promptModal', {\n        component:      'GenericPrompt',\n        componentProps: {\n          applyMode:   'uninstall',\n          applyAction: async(buttonDone) => {\n            await this.$store.getters['currentCluster'].doAction('disableMonitoring');\n\n            for (let index = 0; index < 30; index++) {\n            // Wait 30 seconds for the containers to go\n              const hasV1Monitoring = haveV1Monitoring(this.$store.getters);\n              const hasV1MonitoringWorkloads = await haveV1MonitoringWorkloads(this.$store);\n\n              if ((!hasV1Monitoring && !hasV1MonitoringWorkloads)) {\n                this.$emit('update', { ready: true, hidden: true });\n                this.haveV1Monitoring = false;\n\n                buttonDone(true);\n\n                return;\n              }\n              await delay(1000);\n            }\n\n            throw new Error(`Failed to uninstall: timed out`);\n          },\n          title: this.t('promptRemove.title', {}, true),\n          body:  this.t('monitoring.installSteps.uninstallV1.promptDescription', {}, true),\n        },\n      });\n      buttonCb(true);\n    },\n  }\n};\n\n</script>\n<template>\n  <div class=\"v1-monitoring\">\n    <template v-if=\"haveV1Monitoring\">\n      <IconMessage\n        class=\"mt-40 mb-20\"\n        icon=\"icon-warning\"\n        :vertical=\"true\"\n        icon-state=\"warning\"\n      >\n        <template #message>\n          <p>\n            {{ t('monitoring.installSteps.uninstallV1.warning1') }}\n          </p>\n          <p\n            v-clean-html=\"t('monitoring.installSteps.uninstallV1.warning2', {}, true)\"\n            class=\"mt-10\"\n          />\n        </template>\n      </IconMessage>\n      <AsyncButton\n        mode=\"uninstall\"\n        :delay=\"0\"\n        @click=\"uninstall\"\n      />\n    </template>\n    <IconMessage\n      v-else\n      class=\"mt-40\"\n      icon=\"icon-checkmark\"\n      :vertical=\"true\"\n      icon-state=\"success\"\n    >\n      <template #message>\n        <p class=\"\">\n          {{ t('monitoring.installSteps.uninstallV1.success1') }}\n        </p>\n        <p\n          v-clean-html=\"t('monitoring.installSteps.uninstallV1.success2')\"\n          class=\"mt-10\"\n        />\n      </template>\n    </IconMessage>\n  </div>\n</template>\n\n<style lang='scss' scoped>\n.v1-monitoring {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  p {\n    max-width: 900px;\n  }\n  .btn {\n    min-width: 200px;\n  }\n}\n</style>\n"]}]}