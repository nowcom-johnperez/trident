{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/form/ResourceQuota/NamespaceRow.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/form/ResourceQuota/NamespaceRow.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBTZWxlY3QgZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvZm9ybS9TZWxlY3QnOwppbXBvcnQgVW5pdElucHV0IGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL2Zvcm0vVW5pdElucHV0JzsKaW1wb3J0IFBlcmNlbnRhZ2VCYXIgZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvUGVyY2VudGFnZUJhcic7CmltcG9ydCB7IGZvcm1hdFNpLCBwYXJzZVNpIH0gZnJvbSAnQHNoZWxsL3V0aWxzL3VuaXRzJzsKaW1wb3J0IHsgUk9XX0NPTVBVVEVEIH0gZnJvbSAnLi9zaGFyZWQnOwoKZXhwb3J0IGRlZmF1bHQgewogIGNvbXBvbmVudHM6IHsKICAgIFNlbGVjdCwgUGVyY2VudGFnZUJhciwgVW5pdElucHV0CiAgfSwKCiAgcHJvcHM6IHsKICAgIG1vZGU6IHsKICAgICAgdHlwZTogICAgIFN0cmluZywKICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICB9LAogICAgdHlwZXM6IHsKICAgICAgdHlwZTogICAgQXJyYXksCiAgICAgIGRlZmF1bHQ6ICgpID0+IFtdCiAgICB9LAogICAgdHlwZTogewogICAgICB0eXBlOiAgICAgU3RyaW5nLAogICAgICByZXF1aXJlZDogdHJ1ZQogICAgfSwKICAgIHZhbHVlOiB7CiAgICAgIHR5cGU6ICAgIE9iamVjdCwKICAgICAgZGVmYXVsdDogKCkgPT4gewogICAgICAgIHJldHVybiB7fTsKICAgICAgfQogICAgfSwKICAgIG5hbWVzcGFjZTogewogICAgICB0eXBlOiAgICBPYmplY3QsCiAgICAgIGRlZmF1bHQ6ICgpID0+IHsKICAgICAgICByZXR1cm4ge307CiAgICAgIH0KICAgIH0sCiAgICBwcm9qZWN0UmVzb3VyY2VRdW90YUxpbWl0czogewogICAgICB0eXBlOiAgICBPYmplY3QsCiAgICAgIGRlZmF1bHQ6ICgpID0+IHsKICAgICAgICByZXR1cm4ge307CiAgICAgIH0KICAgIH0sCiAgICBuYW1lc3BhY2VSZXNvdXJjZVF1b3RhTGltaXRzOiB7CiAgICAgIHR5cGU6ICAgIEFycmF5LAogICAgICBkZWZhdWx0OiAoKSA9PiB7CiAgICAgICAgcmV0dXJuIFtdOwogICAgICB9CiAgICB9LAogICAgZGVmYXVsdFJlc291cmNlUXVvdGFMaW1pdHM6IHsKICAgICAgdHlwZTogICAgT2JqZWN0LAogICAgICBkZWZhdWx0OiAoKSA9PiB7CiAgICAgICAgcmV0dXJuIHt9OwogICAgICB9CiAgICB9CiAgfSwKCiAgbW91bnRlZCgpIHsKICAgIC8vIFdlIHdhbnQgdG8gdXBkYXRlIHRoZSB2YWx1ZSBmaXJzdCBzbyB0aGF0IHRoZSB2YWx1ZSB3aWxsIGJlIHJvdW5kZWQgdG8gdGhlIHByb2plY3QgbGltaXQuCiAgICAvLyBUaGlzIGlzIHJlbGV2YW50IHdoZW4gc3dpdGNoaW5nIHByb2plY3RzLiBJZiB0aGUgdmFsdWUgaXMgMTIwMCBhbmQgdGhlIHByb2plY3QgdGhhdCBpdCB3YXMKICAgIC8vIHN3aXRjaGVkIHRvIG9ubHkgaGFzIGNhcGFjaXR5IGZvciA4MDAgbW9yZSB0aGlzIHdpbGwgZm9yY2UgdGhlIHZhbHVlIHRvIGJlIHNldCB0byA4MDAuCiAgICBpZiAodGhpcy52YWx1ZT8ubGltaXQ/Llt0aGlzLnR5cGVdKSB7CiAgICAgIHRoaXMudXBkYXRlKHRoaXMudmFsdWUubGltaXRbdGhpcy50eXBlXSk7CiAgICB9CgogICAgaWYgKCF0aGlzLnZhbHVlPy5saW1pdD8uW3RoaXMudHlwZV0pIHsKICAgICAgdGhpcy51cGRhdGUodGhpcy5kZWZhdWx0UmVzb3VyY2VRdW90YUxpbWl0c1t0aGlzLnR5cGVdKTsKICAgIH0KICB9LAoKICBjb21wdXRlZDogewogICAgLi4uUk9XX0NPTVBVVEVELAogICAgbGltaXRWYWx1ZSgpIHsKICAgICAgcmV0dXJuIHBhcnNlU2kodGhpcy5wcm9qZWN0UmVzb3VyY2VRdW90YUxpbWl0c1t0aGlzLnR5cGVdKTsKICAgIH0sCiAgICBzaU9wdGlvbnMoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgbWF4RXhwb25lbnQ6IHRoaXMudHlwZU9wdGlvbi5pbnB1dEV4cG9uZW50LAogICAgICAgIG1pbkV4cG9uZW50OiB0aGlzLnR5cGVPcHRpb24uaW5wdXRFeHBvbmVudCwKICAgICAgICBpbmNyZW1lbnQ6ICAgdGhpcy50eXBlT3B0aW9uLmluY3JlbWVudCwKICAgICAgICBzdWZmaXg6ICAgICAgdGhpcy50eXBlT3B0aW9uLmluY3JlbWVudCA9PT0gMTAyNCA/ICdpJyA6ICcnCiAgICAgIH07CiAgICB9LAogICAgbmFtZXNwYWNlTGltaXRzKCkgewogICAgICByZXR1cm4gdGhpcy5uYW1lc3BhY2VSZXNvdXJjZVF1b3RhTGltaXRzCiAgICAgICAgLmZpbHRlcigocmVzb3VyY2VRdW90YSkgPT4gcmVzb3VyY2VRdW90YVt0aGlzLnR5cGVdICYmIHJlc291cmNlUXVvdGEuaWQgIT09IHRoaXMubmFtZXNwYWNlLmlkKQogICAgICAgIC5tYXAoKHJlc291cmNlUXVvdGEpID0+IHBhcnNlU2kocmVzb3VyY2VRdW90YVt0aGlzLnR5cGVdLCB0aGlzLnNpT3B0aW9ucykpOwogICAgfSwKICAgIG5hbWVzcGFjZUNvbnRyaWJ1dGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMubmFtZXNwYWNlTGltaXRzLnJlZHVjZSgoc3VtLCBsaW1pdCkgPT4gc3VtICsgbGltaXQsIDApOwogICAgfSwKICAgIHRvdGFsQ29udHJpYnV0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5uYW1lc3BhY2VDb250cmlidXRpb24gKyBwYXJzZVNpKHRoaXMudmFsdWUubGltaXRbdGhpcy50eXBlXSB8fCAnMCcsIHRoaXMuc2lPcHRpb25zKTsKICAgIH0sCiAgICBwZXJjZW50YWdlVXNlZCgpIHsKICAgICAgcmV0dXJuIE1hdGgubWluKHRoaXMudG90YWxDb250cmlidXRpb24gKiAxMDAgLyB0aGlzLnByb2plY3RMaW1pdCwgMTAwKTsKICAgIH0sCiAgICBwcm9qZWN0TGltaXQoKSB7CiAgICAgIHJldHVybiBwYXJzZVNpKHRoaXMucHJvamVjdFJlc291cmNlUXVvdGFMaW1pdHNbdGhpcy50eXBlXSB8fCAwLCB0aGlzLnNpT3B0aW9ucyk7CiAgICB9LAogICAgbWF4KCkgewogICAgICByZXR1cm4gdGhpcy5wcm9qZWN0TGltaXQgLSB0aGlzLm5hbWVzcGFjZUNvbnRyaWJ1dGlvbjsKICAgIH0sCiAgICBhdmFpbGFibGVSZXNvdXJjZVF1b3RhcygpIHsKICAgICAgcmV0dXJuIGZvcm1hdFNpKHRoaXMucHJvamVjdExpbWl0IC0gdGhpcy50b3RhbENvbnRyaWJ1dGlvbiwgeyAuLi50aGlzLnNpT3B0aW9ucywgYWRkU3VmZml4U3BhY2U6IGZhbHNlIH0pOwogICAgfSwKICAgIHNsaWNlcygpIHsKICAgICAgY29uc3Qgb3V0ID0gW107CgogICAgICB0aGlzLm5hbWVzcGFjZUxpbWl0cy5mb3JFYWNoKChsaW1pdCwgaSkgPT4gewogICAgICAgIGNvbnN0IGxhc3RWYWx1ZSA9IGkgPiAwID8gdGhpcy5uYW1lc3BhY2VMaW1pdHNbaSAtIDFdIDogMDsKICAgICAgICBjb25zdCBzbGljZVRvdGFsID0gbGFzdFZhbHVlICsgbGltaXQ7CgogICAgICAgIG91dC5wdXNoKHNsaWNlVG90YWwgKiAxMDAgLyB0aGlzLnByb2plY3RMaW1pdCk7CiAgICAgIH0pOwoKICAgICAgcmV0dXJuIG91dDsKICAgIH0sCiAgICB0b29sdGlwKCkgewogICAgICBjb25zdCB0ID0gdGhpcy4kc3RvcmUuZ2V0dGVyc1snaTE4bi90J107CiAgICAgIGNvbnN0IG91dCA9IFsKICAgICAgICB7CiAgICAgICAgICBsYWJlbDogdCgncmVzb3VyY2VRdW90YS50b29sdGlwLnJlc2VydmVkJyksCiAgICAgICAgICB2YWx1ZTogZm9ybWF0U2kodGhpcy5uYW1lc3BhY2VDb250cmlidXRpb24sIHsgLi4udGhpcy5zaU9wdGlvbnMsIGFkZFN1ZmZpeFNwYWNlOiBmYWxzZSB9KSwKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIGxhYmVsOiB0KCdyZXNvdXJjZVF1b3RhLnRvb2x0aXAubmFtZXNwYWNlJyksCiAgICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZS5saW1pdFt0aGlzLnR5cGVdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBsYWJlbDogdCgncmVzb3VyY2VRdW90YS50b29sdGlwLmF2YWlsYWJsZScpLAogICAgICAgICAgdmFsdWU6IHRoaXMuYXZhaWxhYmxlUmVzb3VyY2VRdW90YXMKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIGxhYmVsOiB0KCdyZXNvdXJjZVF1b3RhLnRvb2x0aXAubWF4JyksCiAgICAgICAgICB2YWx1ZTogdGhpcy5wcm9qZWN0UmVzb3VyY2VRdW90YUxpbWl0c1t0aGlzLnR5cGVdCiAgICAgICAgfQogICAgICBdOwoKICAgICAgbGV0IGZvcm1hdHRlZFRvb2x0aXAgPSAnPGRpdiBjbGFzcz0icXVvdGEtcGVyY2VudGFnZS10b29sdGlwIj4nOwoKICAgICAgKG91dCB8fCBbXSkuZm9yRWFjaCgodikgPT4gewogICAgICAgIGZvcm1hdHRlZFRvb2x0aXAgKz0gYAogICAgICAgIDxkaXYgc3R5bGU9J21hcmdpbi10b3A6IDVweDsgZGlzcGxheTogZmxleDsganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOyc+CiAgICAgICAgICAkeyB2LmxhYmVsIH0KICAgICAgICAgIDxzcGFuIHN0eWxlPSdtYXJnaW4tbGVmdDogMjBweDsnPiR7IHYudmFsdWUgfTwvc3Bhbj4KICAgICAgICA8L2Rpdj5gOwogICAgICB9KTsKICAgICAgZm9ybWF0dGVkVG9vbHRpcCArPSAnPC9kaXY+JzsKCiAgICAgIHJldHVybiBmb3JtYXR0ZWRUb29sdGlwOwogICAgfSwKCiAgfSwKCiAgbWV0aG9kczogewogICAgdXBkYXRlKG5ld1ZhbHVlKSB7CiAgICAgIGNvbnN0IHBhcnNlZE5ld1ZhbHVlID0gcGFyc2VTaShuZXdWYWx1ZSwgdGhpcy5zaU9wdGlvbnMpIHx8IDA7CiAgICAgIGNvbnN0IG1pbiA9IE1hdGgubWF4KHBhcnNlZE5ld1ZhbHVlLCAwKTsKICAgICAgY29uc3QgbWF4ID0gTWF0aC5taW4obWluLCB0aGlzLm1heCk7CiAgICAgIGNvbnN0IHZhbHVlID0gZm9ybWF0U2kobWF4LCB7CiAgICAgICAgLi4udGhpcy5zaU9wdGlvbnMsCiAgICAgICAgYWRkU3VmZml4U3BhY2U6IGZhbHNlCiAgICAgIH0pOwoKICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLCB0aGlzLnR5cGUsIHZhbHVlKTsKICAgIH0KICB9Cn07Cg=="},{"version":3,"sources":["NamespaceRow.vue"],"names":[],"mappingsfile":"NamespaceRow.vue","sourceRoot":"node_modules/@rancher/shell/components/form/ResourceQuota","sourcesContent":["<script>\nimport Select from '@shell/components/form/Select';\nimport UnitInput from '@shell/components/form/UnitInput';\nimport PercentageBar from '@shell/components/PercentageBar';\nimport { formatSi, parseSi } from '@shell/utils/units';\nimport { ROW_COMPUTED } from './shared';\n\nexport default {\n  components: {\n    Select, PercentageBar, UnitInput\n  },\n\n  props: {\n    mode: {\n      type:     String,\n      required: true,\n    },\n    types: {\n      type:    Array,\n      default: () => []\n    },\n    type: {\n      type:     String,\n      required: true\n    },\n    value: {\n      type:    Object,\n      default: () => {\n        return {};\n      }\n    },\n    namespace: {\n      type:    Object,\n      default: () => {\n        return {};\n      }\n    },\n    projectResourceQuotaLimits: {\n      type:    Object,\n      default: () => {\n        return {};\n      }\n    },\n    namespaceResourceQuotaLimits: {\n      type:    Array,\n      default: () => {\n        return [];\n      }\n    },\n    defaultResourceQuotaLimits: {\n      type:    Object,\n      default: () => {\n        return {};\n      }\n    }\n  },\n\n  mounted() {\n    // We want to update the value first so that the value will be rounded to the project limit.\n    // This is relevant when switching projects. If the value is 1200 and the project that it was\n    // switched to only has capacity for 800 more this will force the value to be set to 800.\n    if (this.value?.limit?.[this.type]) {\n      this.update(this.value.limit[this.type]);\n    }\n\n    if (!this.value?.limit?.[this.type]) {\n      this.update(this.defaultResourceQuotaLimits[this.type]);\n    }\n  },\n\n  computed: {\n    ...ROW_COMPUTED,\n    limitValue() {\n      return parseSi(this.projectResourceQuotaLimits[this.type]);\n    },\n    siOptions() {\n      return {\n        maxExponent: this.typeOption.inputExponent,\n        minExponent: this.typeOption.inputExponent,\n        increment:   this.typeOption.increment,\n        suffix:      this.typeOption.increment === 1024 ? 'i' : ''\n      };\n    },\n    namespaceLimits() {\n      return this.namespaceResourceQuotaLimits\n        .filter((resourceQuota) => resourceQuota[this.type] && resourceQuota.id !== this.namespace.id)\n        .map((resourceQuota) => parseSi(resourceQuota[this.type], this.siOptions));\n    },\n    namespaceContribution() {\n      return this.namespaceLimits.reduce((sum, limit) => sum + limit, 0);\n    },\n    totalContribution() {\n      return this.namespaceContribution + parseSi(this.value.limit[this.type] || '0', this.siOptions);\n    },\n    percentageUsed() {\n      return Math.min(this.totalContribution * 100 / this.projectLimit, 100);\n    },\n    projectLimit() {\n      return parseSi(this.projectResourceQuotaLimits[this.type] || 0, this.siOptions);\n    },\n    max() {\n      return this.projectLimit - this.namespaceContribution;\n    },\n    availableResourceQuotas() {\n      return formatSi(this.projectLimit - this.totalContribution, { ...this.siOptions, addSuffixSpace: false });\n    },\n    slices() {\n      const out = [];\n\n      this.namespaceLimits.forEach((limit, i) => {\n        const lastValue = i > 0 ? this.namespaceLimits[i - 1] : 0;\n        const sliceTotal = lastValue + limit;\n\n        out.push(sliceTotal * 100 / this.projectLimit);\n      });\n\n      return out;\n    },\n    tooltip() {\n      const t = this.$store.getters['i18n/t'];\n      const out = [\n        {\n          label: t('resourceQuota.tooltip.reserved'),\n          value: formatSi(this.namespaceContribution, { ...this.siOptions, addSuffixSpace: false }),\n        },\n        {\n          label: t('resourceQuota.tooltip.namespace'),\n          value: this.value.limit[this.type]\n        },\n        {\n          label: t('resourceQuota.tooltip.available'),\n          value: this.availableResourceQuotas\n        },\n        {\n          label: t('resourceQuota.tooltip.max'),\n          value: this.projectResourceQuotaLimits[this.type]\n        }\n      ];\n\n      let formattedTooltip = '<div class=\"quota-percentage-tooltip\">';\n\n      (out || []).forEach((v) => {\n        formattedTooltip += `\n        <div style='margin-top: 5px; display: flex; justify-content: space-between;'>\n          ${ v.label }\n          <span style='margin-left: 20px;'>${ v.value }</span>\n        </div>`;\n      });\n      formattedTooltip += '</div>';\n\n      return formattedTooltip;\n    },\n\n  },\n\n  methods: {\n    update(newValue) {\n      const parsedNewValue = parseSi(newValue, this.siOptions) || 0;\n      const min = Math.max(parsedNewValue, 0);\n      const max = Math.min(min, this.max);\n      const value = formatSi(max, {\n        ...this.siOptions,\n        addSuffixSpace: false\n      });\n\n      this.$emit('input', this.type, value);\n    }\n  }\n};\n</script>\n<template>\n  <div\n    v-if=\"typeOption\"\n    class=\"row\"\n  >\n    <Select\n      class=\"mr-10\"\n      :mode=\"mode\"\n      :value=\"type\"\n      :disabled=\"true\"\n      :options=\"types\"\n    />\n    <div class=\"resource-availability mr-10\">\n      <PercentageBar\n        v-clean-tooltip=\"tooltip\"\n        class=\"percentage-bar\"\n        :value=\"percentageUsed\"\n        :slices=\"slices\"\n        :color-stops=\"{'100': '--primary'}\"\n      />\n    </div>\n    <UnitInput\n      :value=\"value.limit[type]\"\n      :mode=\"mode\"\n      :placeholder=\"typeOption.placeholder\"\n      :increment=\"typeOption.increment\"\n      :input-exponent=\"typeOption.inputExponent\"\n      :base-unit=\"typeOption.baseUnit\"\n      :output-modifier=\"true\"\n      @input=\"update\"\n    />\n  </div>\n</template>\n\n<style lang='scss' scoped>\n  .resource-availability {\n    align-self: center;\n  }\n  .row {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n\n    & > * {\n      width: 100%;\n    }\n  }\n</style>\n"]}]}