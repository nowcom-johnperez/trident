{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/AssignTo.vue?vue&type=style&index=0&id=65a9934d&lang=scss","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/AssignTo.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5hc3NpZ24tbW9kYWwgewogIGJvcmRlci1yYWRpdXM6IHZhcigtLWJvcmRlci1yYWRpdXMpOwogIG92ZXJmbG93OiBzY3JvbGw7CiAgbWF4LWhlaWdodDogMTAwdmg7CiAgJiA6Oi13ZWJraXQtc2Nyb2xsYmFyLWNvcm5lciB7CiAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsMCwwLDApOwogIH0KfQo="},{"version":3,"sources":["AssignTo.vue"],"names":[],"mappings":";AAqLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AssignTo.vue","sourceRoot":"node_modules/@rancher/shell/components","sourcesContent":["<script>\nimport { mapState, mapGetters } from 'vuex';\nimport { FLEET, NORMAN } from '@shell/config/types';\nimport LabeledSelect from '@shell/components/form/LabeledSelect';\nimport KeyValue from '@shell/components/form/KeyValue';\nimport AsyncButton from '@shell/components/AsyncButton';\nimport { Card } from '@components/Card';\nimport { Banner } from '@components/Banner';\nimport { exceptionToErrorsArray } from '@shell/utils/error';\nimport { set } from '@shell/utils/object';\n\nexport default {\n  components: {\n    Card,\n    LabeledSelect,\n    KeyValue,\n    AsyncButton,\n    Banner,\n  },\n\n  data() {\n    return {\n      errors:        [],\n      labels:        {},\n      moveTo:        this.workspace,\n      loaded:        false,\n      allWorkspaces: [],\n    };\n  },\n\n  computed: {\n    ...mapState('action-menu', ['showAssignTo', 'toAssign']),\n    ...mapGetters({ t: 'i18n/t' }),\n    ...mapGetters(['workspace']),\n\n    workspaceOptions() {\n      const out = this.allWorkspaces.map((x) => x.metadata?.name).filter((x) => !!x && x !== 'fleet-local');\n\n      return out;\n    },\n\n    resourceCount() {\n      return this.toAssign?.length || 0;\n    }\n  },\n\n  watch: {\n    async showAssignTo(show) {\n      if (show) {\n        await this.$store.dispatch('rancher/findAll', { type: NORMAN.CLUSTER });\n        this.allWorkspaces = await this.$store.dispatch('management/findAll', { type: FLEET.WORKSPACE });\n        this.moveTo = this.workspace;\n        this.loaded = true;\n        this.$modal.show('assignTo');\n      } else {\n        this.$modal.hide('assignTo');\n      }\n    }\n  },\n\n  methods: {\n    close() {\n      this.errors = [];\n      this.labels = {};\n      this.moveTo = this.workspace;\n      this.$store.commit('action-menu/toggleAssignTo');\n    },\n\n    async apply(buttonDone) {\n      const promises = [];\n\n      this.errors = [];\n\n      for ( const fleetCluster of this.toAssign ) {\n        const c = await this.$store.dispatch(`rancher/clone`, { resource: fleetCluster.norman });\n\n        if ( !c ) {\n          continue;\n        }\n\n        c.fleetWorkspaceName = this.moveTo;\n\n        for ( const k of Object.keys(this.labels) ) {\n          if ( !c._labels ) {\n            set(c, '_labels', {});\n          }\n\n          set(c._labels, k, this.labels[k]);\n        }\n\n        promises.push(c.save());\n      }\n\n      try {\n        await Promise.all(promises);\n        buttonDone(true);\n        this.close();\n      } catch (e) {\n        this.errors = exceptionToErrorsArray(e);\n        buttonDone(false);\n      }\n    }\n  }\n};\n</script>\n\n<template>\n  <modal\n    class=\"assign-modal\"\n    name=\"assignTo\"\n    styles=\"background-color: var(--nav-bg); border-radius: var(--border-radius); max-height: 100vh;\"\n    height=\"auto\"\n    :scrollable=\"true\"\n  >\n    <Card\n      v-if=\"loaded\"\n      :show-highlight-border=\"false\"\n    >\n      <h4\n        slot=\"title\"\n        v-clean-html=\"t('assignTo.title', {count: resourceCount}, true)\"\n        class=\"text-default-text\"\n      />\n\n      <div\n        slot=\"body\"\n        class=\"pl-10 pr-10\"\n      >\n        <form>\n          <LabeledSelect\n            v-model=\"moveTo\"\n            :label=\"t('assignTo.workspace')\"\n            :options=\"workspaceOptions\"\n            placement=\"bottom\"\n          />\n\n          <KeyValue\n            key=\"labels\"\n            v-model=\"labels\"\n            class=\"mt-20\"\n            :add-label=\"t('labels.addSetLabel')\"\n            :read-allowed=\"false\"\n          />\n\n          <Banner\n            v-for=\"(err, i) in errors\"\n            :key=\"i\"\n            color=\"error\"\n            :label=\"err\"\n          />\n        </form>\n      </div>\n\n      <div slot=\"actions\">\n        <button\n          class=\"btn role-secondary\"\n          @click=\"close\"\n        >\n          {{ t('generic.cancel') }}\n        </button>\n\n        <AsyncButton\n          mode=\"apply\"\n          @click=\"apply\"\n        />\n      </div>\n    </Card>\n  </modal>\n</template>\n\n<style lang='scss'>\n  .assign-modal {\n    border-radius: var(--border-radius);\n    overflow: scroll;\n    max-height: 100vh;\n    & ::-webkit-scrollbar-corner {\n      background: rgba(0,0,0,0);\n    }\n  }\n</style>\n"]}]}