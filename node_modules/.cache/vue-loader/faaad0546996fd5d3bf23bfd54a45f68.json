{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/LandingPagePreference.vue?vue&type=style&index=0&id=b47e8664&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/LandingPagePreference.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXN0b20tcGFnZSB7CiAgLmN1c3RvbS1wYWdlLW9wdGlvbnMgewogICAgbWFyZ2luOiA1cHggMCAwIDIwcHg7CiAgICBtaW4td2lkdGg6IDMyMHB4OwogICAgd2lkdGg6IGZpdC1jb250ZW50OwogIH0KfQouc2V0LWxhbmRpbmctbGVhZGluIHsKICBwYWRkaW5nLWJvdHRvbTogMTBweDsKfQo="},{"version":3,"sources":["LandingPagePreference.vue"],"names":[],"mappings":";AAyJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"LandingPagePreference.vue","sourceRoot":"node_modules/@rancher/shell/components","sourcesContent":["<script>\nimport { mapPref, AFTER_LOGIN_ROUTE } from '@shell/store/prefs';\nimport { mapFeature, MULTI_CLUSTER } from '@shell/store/features';\nimport { RadioGroup, RadioButton } from '@components/Form/Radio';\n\nimport Select from '@shell/components/form/Select';\nimport { MANAGEMENT } from '@shell/config/types';\nimport { filterHiddenLocalCluster, filterOnlyKubernetesClusters } from '@shell/utils/cluster';\n\nexport default {\n  components: {\n    RadioGroup,\n    RadioButton,\n    Select,\n  },\n\n  async fetch() {\n    this.clusters = await this.$store.dispatch('management/findAll', {\n      type: MANAGEMENT.CLUSTER,\n      opt:  { url: MANAGEMENT.CLUSTER }\n    });\n  },\n\n  data() {\n    // Store the route as it was on page load (before the user may have changed it)\n    const customRoute = this.$store.getters['prefs/get'](AFTER_LOGIN_ROUTE);\n\n    return { clusters: [], customRoute };\n  },\n\n  computed: {\n    afterLoginRoute: mapPref(AFTER_LOGIN_ROUTE),\n    mcm:             mapFeature(MULTI_CLUSTER),\n\n    routeFromDropdown: {\n      get() {\n        const route = this.customRoute || {};\n        const out = this.routeDropdownOptions.find((opt) => opt.value.name === route.name && opt.value.params?.cluster === route.params?.cluster);\n\n        return out || this.routeDropdownOptions[0];\n      },\n      set(neu) {\n        this.customRoute = neu;\n        this.afterLoginRoute = neu;\n      }\n    },\n\n    routeRadioOptions() {\n      const options = [\n        {\n          label: this.t('landing.landingPrefs.options.homePage'),\n          value: 'home'\n        },\n        {\n          label: this.t('landing.landingPrefs.options.lastVisited'),\n          value: 'last-visited'\n        },\n        {\n          label: this.t('landing.landingPrefs.options.custom'),\n          value: 'dropdown'\n        }\n      ];\n\n      // Remove the last option if not multi-cluster\n      if (!this.mcm) {\n        options.pop();\n      }\n\n      return options;\n    },\n\n    routeDropdownOptions() {\n      // Drop-down shows list of clusters that can ber set as login landing page\n      const out = [];\n      const kubeClusters = filterHiddenLocalCluster(filterOnlyKubernetesClusters(this.clusters, this.$store), this.$store);\n\n      kubeClusters.forEach((c) => {\n        if (c.isReady) {\n          out.push({\n            label: c.nameDisplay,\n            value: {\n              name:   'c-cluster',\n              params: { cluster: c.id }\n            }\n          });\n        }\n      });\n\n      out.sort((a, b) => (a.label > b.label) ? 1 : ((b.label > a.label) ? -1 : 0));\n\n      return out;\n    }\n  },\n\n  methods: {\n    updateLoginRoute(neu) {\n      if (neu) {\n        this.afterLoginRoute = neu;\n      } else {\n        this.afterLoginRoute = this.routeFromDropdown?.value;\n      }\n    },\n  }\n};\n</script>\n\n<template>\n  <div>\n    <p class=\"set-landing-leadin\">\n      {{ t('landing.landingPrefs.body') }}\n    </p>\n    <RadioGroup\n      id=\"login-route\"\n      :value=\"afterLoginRoute\"\n      name=\"login-route\"\n      :options=\"routeRadioOptions\"\n      @input=\"updateLoginRoute\"\n    >\n      <template #2=\"{option, listeners}\">\n        <div class=\"custom-page\">\n          <RadioButton\n            :label=\"option.label\"\n            :val=\"false\"\n            :value=\"afterLoginRoute=== 'home' || afterLoginRoute === 'last-visited'\"\n            v-on=\"listeners\"\n          />\n          <Select\n            v-model=\"routeFromDropdown\"\n            :searchable=\"true\"\n            :disabled=\"afterLoginRoute === 'home' || afterLoginRoute === 'last-visited'\"\n            :clearable=\"false\"\n            :options=\"routeDropdownOptions\"\n            class=\"custom-page-options\"\n          />\n        </div>\n      </template>\n    </RadioGroup>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n  .custom-page {\n    .custom-page-options {\n      margin: 5px 0 0 20px;\n      min-width: 320px;\n      width: fit-content;\n    }\n  }\n  .set-landing-leadin {\n    padding-bottom: 10px;\n  }\n</style>\n"]}]}