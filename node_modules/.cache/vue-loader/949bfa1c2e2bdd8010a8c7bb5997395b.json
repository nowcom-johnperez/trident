{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/pages/c/_cluster/navlinks/_group.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/pages/c/_cluster/navlinks/_group.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCB7IFVJIH0gZnJvbSAnQHNoZWxsL2NvbmZpZy90eXBlcyc7CmltcG9ydCB7IGZpbHRlckJ5IH0gZnJvbSAnQHNoZWxsL3V0aWxzL2FycmF5JzsKaW1wb3J0IFNlbGVjdEljb25HcmlkIGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL1NlbGVjdEljb25HcmlkJzsKCmV4cG9ydCBkZWZhdWx0IHsKICBjb21wb25lbnRzOiB7IFNlbGVjdEljb25HcmlkIH0sCgogIGNvbXB1dGVkOiB7CiAgICBncm91cFNsdWcoKSB7CiAgICAgIHJldHVybiB0aGlzLiRyb3V0ZS5wYXJhbXMuZ3JvdXA7CiAgICB9LAoKICAgIGVudHJpZXMoKSB7CiAgICAgIGNvbnN0IGFsbCA9IHRoaXMuJHN0b3JlLmdldHRlcnNbJ2NsdXN0ZXIvYWxsJ10oVUkuTkFWX0xJTkspOwoKICAgICAgcmV0dXJuIGZpbHRlckJ5KGFsbCwgJ25vcm1hbGl6ZWRHcm91cCcsIHRoaXMuZ3JvdXBTbHVnKTsKICAgIH0sCgogICAgZ3JvdXBOYW1lKCkgewogICAgICByZXR1cm4gdGhpcy5lbnRyaWVzWzBdPy5zcGVjPy5ncm91cCB8fCB0aGlzLmdyb3VwU2x1ZzsKICAgIH0KICB9LAp9Owo="},{"version":3,"sources":["_group.vue"],"names":[],"mappings":";AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"_group.vue","sourceRoot":"node_modules/@rancher/shell/pages/c/_cluster/navlinks","sourcesContent":["<script>\nimport { UI } from '@shell/config/types';\nimport { filterBy } from '@shell/utils/array';\nimport SelectIconGrid from '@shell/components/SelectIconGrid';\n\nexport default {\n  components: { SelectIconGrid },\n\n  computed: {\n    groupSlug() {\n      return this.$route.params.group;\n    },\n\n    entries() {\n      const all = this.$store.getters['cluster/all'](UI.NAV_LINK);\n\n      return filterBy(all, 'normalizedGroup', this.groupSlug);\n    },\n\n    groupName() {\n      return this.entries[0]?.spec?.group || this.groupSlug;\n    }\n  },\n};\n</script>\n\n<template>\n  <div>\n    <h1>{{ groupName }}</h1>\n    <SelectIconGrid\n      :rows=\"entries\"\n      name-field=\"labelDisplay\"\n      description-field=\"spec.description\"\n      key-field=\"_key\"\n      icon-field=\"spec.iconSrc\"\n      side-label-field=\"spec.sideLabel\"\n      :as-link=\"true\"\n      target-field=\"actualTarget\"\n      :color-for=\"() => 'color1'\"\n    />\n  </div>\n</template>\n"]}]}