{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/pages/c/_cluster/uiplugins/InstallDialog.vue?vue&type=style&index=0&id=6381e649&lang=scss&scoped=true","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/pages/c/_cluster/uiplugins/InstallDialog.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1716430467357},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1716430467929},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/postcss-loader/src/index.js","mtime":1716430467882},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/sass-loader/dist/cjs.js","mtime":1716430453705},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5wbHVnaW4taW5zdGFsbC1kaWFsb2cgewogIHBhZGRpbmc6IDEwcHg7CgogIGg0IHsKICAgIGZvbnQtd2VpZ2h0OiBib2xkOwogIH0KCiAgLmRpYWxvZy1wYW5lbCB7CiAgICBkaXNwbGF5OiBmbGV4OwogICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICAgIG1pbi1oZWlnaHQ6IDEwMHB4OwoKICAgIHAgewogICAgICBtYXJnaW4tYm90dG9tOiA1cHg7CiAgICB9CgogICAgLmRpYWxvZy1pbmZvIHsKICAgICAgZmxleDogMTsKICAgIH0KCiAgICAudG9nZ2xlLWFkdmFuY2VkIHsKICAgICAgZGlzcGxheTogZmxleDsKICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgICBtYXJnaW46IDEwcHggMDsKCiAgICAgICY6aG92ZXIgewogICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKICAgICAgICBjb2xvcjogdmFyKC0tbGluayk7CiAgICAgIH0KICAgIH0KCiAgICAudmVyc2lvbi1zZWxlY3RvciB7CiAgICAgIG1hcmdpbjogMCAxMHB4IDEwcHggMTBweDsKICAgICAgd2lkdGg6IGF1dG87CiAgICB9CiAgfQoKICAuZGlhbG9nLWJ1dHRvbnMgewogICAgZGlzcGxheTogZmxleDsKICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7CiAgICBtYXJnaW4tdG9wOiAxMHB4OwoKICAgID4gKjpub3QoOmxhc3QtY2hpbGQpIHsKICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4OwogICAgfQogIH0KfQo="},{"version":3,"sources":["InstallDialog.vue"],"names":[],"mappings":";AAkUA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"InstallDialog.vue","sourceRoot":"node_modules/@rancher/shell/pages/c/_cluster/uiplugins","sourcesContent":["<script>\nimport AsyncButton from '@shell/components/AsyncButton';\nimport LabeledSelect from '@shell/components/form/LabeledSelect';\nimport { CATALOG, MANAGEMENT } from '@shell/config/types';\nimport { CATALOG as CATALOG_ANNOTATIONS } from '@shell/config/labels-annotations';\nimport { UI_PLUGIN_NAMESPACE } from '@shell/config/uiplugins';\nimport Banner from '@components/Banner/Banner.vue';\n\n// Note: This dialog handles installation and update of a plugin\n\nexport default {\n  components: {\n    AsyncButton,\n    Banner,\n    LabeledSelect,\n  },\n\n  async fetch() {\n    this.defaultRegistrySetting = await this.$store.dispatch('management/find', {\n      type: MANAGEMENT.SETTING,\n      id:   'system-default-registry'\n    });\n  },\n\n  data() {\n    return {\n      currentVersion:         '',\n      defaultRegistrySetting: null,\n      plugin:                 undefined,\n      busy:                   false,\n      version:                '',\n      update:                 false,\n      mode:                   '',\n    };\n  },\n\n  computed: {\n    showVersionSelector() {\n      return this.versionOptions?.length > 1;\n    },\n\n    versionOptions() {\n      if (!this.plugin) {\n        return [];\n      }\n\n      // Don't allow update/rollback to current version\n      const versions = this.plugin?.installableVersions?.filter((v) => {\n        if (this.currentVersion) {\n          return v.version !== this.currentVersion;\n        }\n\n        return true;\n      });\n\n      return versions.map((version) => {\n        return {\n          label: version.version,\n          value: version.version,\n        };\n      });\n    },\n\n    buttonMode() {\n      return this.update ? 'update' : 'install';\n    }\n  },\n\n  methods: {\n    showDialog(plugin, mode) {\n      this.plugin = plugin;\n      this.mode = mode;\n\n      // Default to latest version on install (this is default on the plugin)\n      this.version = plugin.displayVersion;\n\n      if (mode === 'update') {\n        this.currentVersion = plugin.displayVersion;\n\n        // Update to latest version, so take the first version\n        if (plugin.installableVersions?.length > 0) {\n          this.version = plugin.installableVersions?.[0]?.version;\n        }\n      } else if (mode === 'rollback') {\n        // Find the newest version once we remove the current version\n        const versionNames = plugin.installableVersions.filter((v) => v.version !== plugin.displayVersion);\n\n        this.currentVersion = plugin.displayVersion;\n\n        if (versionNames.length > 0) {\n          this.version = versionNames[0].version;\n        }\n      }\n\n      // Make sure we have the version available\n      const versionChart = plugin.installableVersions?.find((v) => v.version === this.version);\n\n      if (!versionChart) {\n        this.version = plugin.installableVersions?.[0]?.version;\n      }\n\n      this.busy = false;\n      this.update = mode !== 'install';\n      this.$modal.show('installPluginDialog');\n    },\n\n    closeDialog(result) {\n      this.$modal.hide('installPluginDialog');\n      this.$emit('closed', result);\n    },\n\n    async install() {\n      this.busy = true;\n\n      const plugin = this.plugin;\n\n      this.$emit('update', plugin.name, 'install');\n\n      // Find the version that the user wants to install\n      const version = plugin.versions?.find((v) => v.version === this.version);\n\n      if (!version) {\n        this.busy = false;\n\n        return;\n      }\n\n      // is the image used by the chart in the rancher org?\n      let isRancherImage = false;\n\n      try {\n        const chartVersionInfo = await this.$store.dispatch('catalog/getVersionInfo', {\n          repoType:    version.repoType,\n          repoName:    version.repoName,\n          chartName:   plugin.chart.chartName,\n          versionName: this.version,\n        });\n\n        const image = chartVersionInfo?.values?.image?.repository || '';\n\n        isRancherImage = image.startsWith('rancher/');\n      } catch (e) {}\n\n      // See if there is already a plugin with this name\n      let exists = false;\n\n      try {\n        const app = await this.$store.dispatch('management/find', {\n          type: CATALOG.APP,\n          id:   `${ UI_PLUGIN_NAMESPACE }/${ plugin.chart.chartName }`,\n          opt:  { force: true },\n        });\n\n        exists = !!app;\n      } catch (e) {}\n\n      const repoType = version.repoType;\n      const repoName = version.repoName;\n      const repo = this.$store.getters['catalog/repo']({ repoType, repoName });\n\n      const chart = {\n        chartName:   plugin.chart.chartName,\n        version:     this.version,\n        releaseName: plugin.chart.chartName,\n        annotations: {\n          [CATALOG_ANNOTATIONS.SOURCE_REPO_TYPE]: plugin.repoType,\n          [CATALOG_ANNOTATIONS.SOURCE_REPO_NAME]: plugin.repoName\n        },\n        values: {}\n      };\n\n      // Pass in the system default registry property if set - only if the image is in the rancher org\n      const defaultRegistry = this.defaultRegistrySetting?.value || '';\n\n      if (isRancherImage && defaultRegistry) {\n        chart.values.global = chart.values.global || {};\n        chart.values.global.cattle = chart.values.global.cattle || {};\n        chart.values.global.cattle.systemDefaultRegistry = defaultRegistry;\n      }\n\n      const input = {\n        charts:    [chart],\n        // timeout:   this.cmdOptions.timeout > 0 ? `${ this.cmdOptions.timeout }s` : null,\n        // wait:      this.cmdOptions.wait === true,\n        namespace: UI_PLUGIN_NAMESPACE,\n      };\n\n      // Helm action\n      const action = (exists || this.update) ? 'upgrade' : 'install';\n\n      try {\n        const res = await repo.doAction(action, input);\n        const operationId = `${ res.operationNamespace }/${ res.operationName }`;\n\n        this.closeDialog(plugin);\n\n        await repo.waitForOperation(operationId);\n\n        await this.$store.dispatch(`management/find`, {\n          type: CATALOG.OPERATION,\n          id:   operationId\n        });\n      } catch (e) {\n        this.$store.dispatch('growl/error', {\n          title:   this.t('plugins.error.generic'),\n          message: e.message ? e.message : e,\n          timeout: 10000\n        }, { root: true });\n\n        this.closeDialog(plugin);\n      }\n    }\n  }\n};\n</script>\n\n<template>\n  <modal\n    name=\"installPluginDialog\"\n    height=\"auto\"\n    :scrollable=\"true\"\n  >\n    <div\n      v-if=\"plugin\"\n      class=\"plugin-install-dialog\"\n    >\n      <h4 class=\"mt-10\">\n        {{ t(`plugins.${ mode }.title`, { name: plugin.label }) }}\n      </h4>\n      <div class=\"custom mt-10\">\n        <div class=\"dialog-panel\">\n          <p>\n            {{ t(`plugins.${ mode }.prompt`) }}\n          </p>\n          <Banner\n            v-if=\"!plugin.certified\"\n            color=\"warning\"\n            :label=\"t('plugins.install.warnNotCertified')\"\n          />\n          <LabeledSelect\n            v-if=\"showVersionSelector\"\n            v-model=\"version\"\n            label-key=\"plugins.install.version\"\n            :options=\"versionOptions\"\n            class=\"version-selector mt-10\"\n            data-testid=\"install-ext-modal-select-version\"\n          />\n          <div v-else>\n            {{ t('plugins.install.version') }} {{ version }}\n          </div>\n        </div>\n        <div class=\"dialog-buttons\">\n          <button\n            :disabled=\"busy\"\n            class=\"btn role-secondary\"\n            data-testid=\"install-ext-modal-cancel-btn\"\n            @click=\"closeDialog(false)\"\n          >\n            {{ t('generic.cancel') }}\n          </button>\n          <AsyncButton\n            :mode=\"buttonMode\"\n            data-testid=\"install-ext-modal-install-btn\"\n            @click=\"install\"\n          />\n        </div>\n      </div>\n    </div>\n  </modal>\n</template>\n\n<style lang=\"scss\" scoped>\n  .plugin-install-dialog {\n    padding: 10px;\n\n    h4 {\n      font-weight: bold;\n    }\n\n    .dialog-panel {\n      display: flex;\n      flex-direction: column;\n      min-height: 100px;\n\n      p {\n        margin-bottom: 5px;\n      }\n\n      .dialog-info {\n        flex: 1;\n      }\n\n      .toggle-advanced {\n        display: flex;\n        align-items: center;\n        cursor: pointer;\n        margin: 10px 0;\n\n        &:hover {\n          text-decoration: none;\n          color: var(--link);\n        }\n      }\n\n      .version-selector {\n        margin: 0 10px 10px 10px;\n        width: auto;\n      }\n    }\n\n    .dialog-buttons {\n      display: flex;\n      justify-content: flex-end;\n      margin-top: 10px;\n\n      > *:not(:last-child) {\n        margin-right: 10px;\n      }\n    }\n  }\n</style>\n"]}]}