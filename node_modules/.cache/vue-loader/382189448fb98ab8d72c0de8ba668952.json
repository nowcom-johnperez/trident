{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/pages/diagnostic.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/pages/diagnostic.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["diagnostic.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"diagnostic.vue","sourceRoot":"node_modules/@rancher/shell/pages","sourcesContent":["<script>\nimport { CAPI, MANAGEMENT } from '@shell/config/types';\nimport AsyncButton from '@shell/components/AsyncButton';\nimport PromptModal from '@shell/components/PromptModal';\nimport { downloadFile } from '@shell/utils/download';\nimport { filterOnlyKubernetesClusters, filterHiddenLocalCluster } from '@shell/utils/cluster';\nimport { sortBy } from '@shell/utils/sort';\n\nexport default {\n  name:   'Diagnostic',\n  layout: 'plain',\n\n  components: { AsyncButton, PromptModal },\n\n  async fetch() {\n    const provClusters = await this.$store.dispatch('management/findAll', { type: CAPI.RANCHER_CLUSTER });\n    const readyClusters = provClusters.filter((c) => c.mgmt?.isReady);\n    const clusterForCounts = filterHiddenLocalCluster(filterOnlyKubernetesClusters(readyClusters, this.$store), this.$store);\n    const finalCounts = [];\n    const promises = [];\n    const topFifteenForResponseTime = [];\n\n    clusterForCounts.forEach((cluster, i) => {\n      // Necessary to retrieve the proper display name of the cluster\n      const mgmtCluster = this.$store.getters['management/byId'](MANAGEMENT.CLUSTER, cluster.metadata.name);\n\n      finalCounts.push({\n        id:             cluster.id,\n        name:           mgmtCluster?.spec?.displayName || cluster.metadata?.name,\n        namespace:      cluster.metadata?.namespace,\n        capiId:         cluster.mgmt?.id,\n        counts:         null,\n        isTableVisible: !!(i === 0 && clusterForCounts.length === 1)\n      });\n      promises.push(this.$store.dispatch('management/request', { url: `/k8s/clusters/${ cluster.mgmt?.id }/v1/counts` }));\n    });\n\n    const countsPerCluster = await Promise.all(promises);\n\n    countsPerCluster.forEach((clusterCount, index) => {\n      const counts = clusterCount.data?.[0]?.counts;\n\n      if (counts) {\n        const sanitizedCount = [];\n        let finalCount = [];\n\n        Object.keys(counts).forEach((key) => {\n          sanitizedCount[key] = counts[key].summary?.count;\n          sanitizedCount.push({\n            resource: key,\n            count:    counts[key].summary?.count || 0,\n          });\n        });\n\n        const sortedCount = sortBy(sanitizedCount, 'count:desc');\n\n        finalCount = finalCount.concat(sortedCount);\n        finalCount = sortBy(finalCount, 'count:desc');\n        finalCount = finalCount.splice(0, 15);\n\n        finalCount.forEach((item, i) => {\n          finalCount[i].id = finalCounts[index].id;\n          finalCount[i].capiId = finalCounts[index].capiId;\n        });\n\n        topFifteenForResponseTime.push(finalCount);\n\n        finalCounts[index].counts = sortedCount;\n      }\n    });\n\n    this.topFifteenForResponseTime = topFifteenForResponseTime;\n    this.finalCounts = finalCounts;\n  },\n\n  data() {\n    const {\n      userAgent,\n      userAgentData,\n      language,\n      cookieEnabled,\n      hardwareConcurrency,\n      deviceMemory\n    } = window?.navigator;\n\n    const systemInformation = {\n      browser: {\n        label: this.t('about.diagnostic.systemInformation.browser'),\n        value: this.t('about.diagnostic.systemInformation.browserInfo', {\n          userAgent, language, cookieEnabled\n        })\n      },\n      system: {\n        label: this.t('about.diagnostic.systemInformation.system'),\n        value: this.t('about.diagnostic.systemInformation.hardwareConcurrency', { hardwareConcurrency })\n      },\n      jsMemory: {\n        label: this.t('about.diagnostic.systemInformation.jsMemory'),\n        value: ''\n      }\n    };\n\n    if ( userAgentData?.platform ) {\n      systemInformation.system.value = systemInformation.system.value.concat(', ', this.t('about.diagnostic.systemInformation.os', { platform: userAgentData.platform }));\n    }\n\n    if ( deviceMemory ) {\n      systemInformation.system.value = systemInformation.system.value.concat(', ', this.t('about.diagnostic.systemInformation.deviceMemory', { deviceMemory }));\n    }\n\n    if ( window?.performance?.memory?.jsHeapSizeLimit ) {\n      systemInformation.jsMemory.value += this.t('about.diagnostic.systemInformation.memJsHeapLimit', { jsHeapSizeLimit: window?.performance?.memory?.jsHeapSizeLimit });\n    }\n\n    if ( window?.performance?.memory?.totalJSHeapSize ) {\n      systemInformation.jsMemory.value += `, ${ this.t('about.diagnostic.systemInformation.memTotalJsHeapSize', { totalJSHeapSize: window?.performance?.memory?.totalJSHeapSize }) }`;\n    }\n\n    if ( window?.performance?.memory?.usedJSHeapSize ) {\n      systemInformation.jsMemory.value += `, ${ this.t('about.diagnostic.systemInformation.memUsedJsHeapSize', { usedJSHeapSize: window?.performance?.memory?.usedJSHeapSize }) }`;\n    }\n\n    return {\n      systemInformation,\n      topFifteenForResponseTime: null,\n      responseTimes:             null,\n      finalCounts:               null,\n      includeResponseTimes:      true,\n      storeMapping:              this.$store?._modules?.root?.state,\n    };\n  },\n\n  computed: {\n    clusterCount() {\n      return this.finalCounts?.length;\n    }\n  },\n\n  methods: {\n    generateKey(data) {\n      const randomize = Math.random() * 10000;\n\n      return `key_${ randomize }_${ data }`;\n    },\n\n    downloadData(btnCb) {\n      // simplify filename due to e2e tests\n      const fileName = 'rancher-diagnostic-data.json';\n      const data = {\n        systemInformation: this.systemInformation,\n        storeMapping:      this.parseStoreData(this.storeMapping),\n        resourceCounts:    this.finalCounts,\n        responseTimes:     this.responseTimes\n      };\n\n      downloadFile(fileName, JSON.stringify(data), 'application/json')\n        .then(() => btnCb(true))\n        .catch(() => btnCb(false));\n    },\n\n    setResourceResponseTiming(responseTimes) {\n      responseTimes?.forEach((res) => {\n        if ( res.outcome === 'success' ) {\n          const cluster = this.finalCounts.find((c) => c.capiId === res.item.capiId);\n          const countIndex = cluster?.counts?.findIndex((c) => c.resource === res.item.resource);\n\n          if ( (countIndex && countIndex !== -1) || countIndex === 0 ) {\n            this.$set(cluster?.counts[countIndex], 'durationMs', res.durationMs);\n          }\n        }\n      });\n    },\n\n    sumResourceCount(counts) {\n      return counts.reduce((a, b) => (a + b.count), 0);\n    },\n\n    nodeCount(counts) {\n      const resource = counts.findIndex((c) => c.resource === 'node');\n\n      return counts[resource]?.count;\n    },\n\n    toggleTable(area) {\n      const itemIndex = this.finalCounts.findIndex((item) => item.id === area);\n\n      this.finalCounts[itemIndex].isTableVisible = !this.finalCounts[itemIndex].isTableVisible;\n    },\n\n    async gatherResponseTimes(btnCb) {\n      const promises = this.topFifteenForResponseTime.flatMap((cluster) => {\n        return cluster.map((item) => {\n          const t = Date.now();\n\n          return this.$store.dispatch('management/request', { url: `/k8s/clusters/${ item.capiId }/v1/${ item.resource }` })\n            .then(() => ({\n              outcome: 'success', item, durationMs: Date.now() - t\n            }))\n            .catch(() => ({\n              outcome: 'error', item, durationMs: Date.now() - t\n            }));\n        });\n      });\n\n      return await Promise.all(promises).then((responseTimes) => {\n        this.responseTimes = responseTimes;\n        this.setResourceResponseTiming(responseTimes);\n        btnCb(true);\n      }).catch(() => btnCb(false));\n    },\n\n    parseStoreData(rootStore) {\n      // clear potential sensitive data\n      const disallowedDataKeys = [\n        'aws',\n        'digitalocean',\n        'linode',\n        'targetRoute', // contains circular references, isn't useful (added later to store)\n      ];\n\n      const clearListsKeys = [\n        'management',\n        'rancher',\n        'cluster',\n        'harvester',\n        'epinio',\n        'elemental',\n      ];\n\n      const cleanRootStore = {};\n\n      Object.entries(rootStore).forEach(([storeKey, store]) => {\n        if (disallowedDataKeys.includes(storeKey)) {\n          // Ignore any root store in the disallowed list\n          return;\n        }\n\n        // Remove all `list` keys, for example `management.types['management.cattle.io.cluster'].list`\n\n        if (!clearListsKeys.includes(storeKey)) {\n          // This is only done for some store namespaces, if not just save the raw entry\n          cleanRootStore[storeKey] = store;\n\n          return;\n        }\n\n        // if there's no types property to clear, just save the raw entry\n        if (!Object.keys(store.types || {}).length) {\n          cleanRootStore[storeKey] = store;\n\n          return;\n        }\n\n        // Save the root entry with empty types prop\n        cleanRootStore[storeKey] = {\n          ...store,\n          types: {},\n        };\n\n        // Save the root entries type's entries without the list property\n        Object.entries(store.types).forEach(([type, entry]) => {\n          const { list, ...otherProps } = entry;\n\n          cleanRootStore[storeKey].types[type] = {\n            ...otherProps,\n            count: list.length,\n          };\n        });\n      });\n\n      return cleanRootStore;\n    },\n\n    promptDownload(btnCb) {\n      if ( !this.responseTimes ) {\n        this.$store.dispatch('management/promptModal', {\n          component:      'DiagnosticTimingsDialog',\n          componentProps: {\n            downloadData:        this.downloadData,\n            gatherResponseTimes: this.gatherResponseTimes\n          }\n        })\n          .then(() => btnCb(true))\n          .catch(() => btnCb(false));\n      } else {\n        this.downloadData(btnCb);\n      }\n    }\n  },\n};\n</script>\n\n<template>\n  <div>\n    <div class=\"title-block mt-20 mb-40\">\n      <div>\n        <AsyncButton\n          mode=\"timing\"\n          class=\"mr-20\"\n          data-testid=\"diagnostics-generate-response-times\"\n          @click=\"gatherResponseTimes\"\n        />\n        <AsyncButton\n          mode=\"diagnostic\"\n          data-testid=\"diagnostics-download-diagnostic-package\"\n          @click=\"promptDownload\"\n        />\n      </div>\n    </div>\n\n    <!-- System info -->\n    <div class=\"mb-40\">\n      <h2 class=\"mb-20\">\n        {{ t('about.diagnostic.systemInformation.subtitle') }}\n      </h2>\n      <table class=\"full-width\">\n        <thead>\n          <tr>\n            <th>Type</th>\n            <th>Value</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr\n            v-for=\"(item, objKey) in systemInformation\"\n            :key=\"objKey\"\n          >\n            <template v-if=\"item.value.length\">\n              <td>{{ item.label }}</td>\n              <td>{{ item.value }}</td>\n            </template>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <!-- Resources -->\n    <div class=\"mb-40\">\n      <h2 class=\"mb-20\">\n        {{ t('about.diagnostic.resourceCounts', { count: clusterCount }) }}\n      </h2>\n      <div class=\"resources-count-container\">\n        <table\n          v-for=\"cluster in finalCounts\"\n          :key=\"cluster.id\"\n          class=\"full-width\"\n        >\n          <thead @click=\"toggleTable(cluster.id)\">\n            <th colspan=\"4\">\n              <div class=\"cluster-row\">\n                <span>Cluster: <b>{{ cluster.name }}</b></span>\n                <span>Namespace: <b>{{ cluster.namespace }}</b></span>\n                <span>Total Resources: <b>{{ sumResourceCount(cluster.counts) }}</b></span>\n                <span>Nodes: <b>{{ nodeCount(cluster.counts) }}</b></span>\n                <i\n                  class=\"icon\"\n                  :class=\"{\n                    'icon-chevron-down': !cluster.isTableVisible,\n                    'icon-chevron-up': cluster.isTableVisible\n                  }\"\n                />\n              </div>\n            </th>\n          </thead>\n          <tbody v-show=\"cluster.isTableVisible\">\n            <tr>\n              <th>\n                Resource\n              </th>\n              <th>\n                Count\n              </th>\n              <th>\n                Resource Timing (ms)\n              </th>\n            </tr>\n\n            <tr\n              v-for=\"item in cluster.counts\"\n              :key=\"item.resource\"\n            >\n              <template v-if=\"item.count > 0\">\n                <td scope=\"row\">\n                  {{ item.resource }}\n                </td>\n                <td>{{ item.count }}</td>\n                <td>{{ item.durationMs || '-' }}</td>\n              </template>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n\n    <PromptModal />\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.title-block {\n  display: flex;\n  justify-content: right;\n  align-items: center;\n\n  h1 {\n    margin: 0 !important;\n  }\n\n  div {\n    display: flex;\n    align-items: center;\n  }\n}\n\ntable {\n  border-collapse: collapse;\n  overflow: hidden;\n  border-radius: var(--border-radius);\n\n  &.full-width {\n    border-radius: 0 !important;\n    min-width: 60%;\n\n    thead {\n      cursor: pointer;\n\n      th div {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n      }\n    }\n\n    tbody {\n      border-bottom: 1px solid var(--sortable-table-top-divider);\n    }\n  }\n\n  tr > td:first-of-type {\n    width: 20%;\n  }\n\n  th, td {\n    border: 1px solid var(--border);\n    padding: 8px 5px;\n    min-width: 150px;\n    text-align: left;\n  }\n\n  th {\n    background-color: var(--sortable-table-top-divider);\n    border-bottom: 1px solid var(--sortable-table-header-bg);\n  }\n\n  a {\n    cursor: pointer;\n  }\n\n  .os {\n    display: flex;\n    align-items: center;\n  }\n}\n\n.logs-container {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  background-color: #FFF;\n  border: 1px solid var(--body-text);\n  height: 300px;\n  overflow-x: hidden;\n  overflow-y: auto;\n\n  li {\n    font-family: $mono-font;\n    font-size: 12px;\n    margin: 0;\n    padding: 10px 20px;\n    border-bottom: 1px solid #ccc;\n\n    &.log {\n      color: #000;\n    }\n\n    &.warn {\n      background-color: LightGoldenRodYellow;\n      color: SaddleBrown;\n    }\n\n    &.info {\n      background-color: Azure;\n      color: blue;\n    }\n\n    &.error {\n      background-color: MistyRose;\n      color: red;\n    }\n\n    &:last-child {\n      border-bottom: none;\n    }\n\n    .log-entry-type {\n      font-weight: bold;\n    }\n  }\n}\n\n.resources-count-container {\n  .cluster-row {\n    display: grid;\n    grid-template-columns: repeat(4, 1fr) 20px;\n    grid-template-rows: 1fr;\n    align-content: center;\n    font-weight: normal;\n  }\n\n  tbody tr, tbody tr th {\n    background-color: var(--sortable-table-header-bg);\n  }\n\n  tbody tr th {\n    border-bottom: 1px solid var(--sortable-table-top-divider);\n  }\n\n  tbody tr:hover {\n    background-color: var(--sortable-table-top-divider);\n  }\n}\n</style>\n"]}]}