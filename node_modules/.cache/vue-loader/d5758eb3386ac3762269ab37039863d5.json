{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/graph/Circle.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/graph/Circle.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmxldCBpZCA9IDA7CgpleHBvcnQgZGVmYXVsdCB7CiAgcHJvcHM6IHsKICAgIHBlcmNlbnRhZ2U6IHsKICAgICAgdHlwZTogICAgTnVtYmVyLAogICAgICBkZWZhdWx0OiAwLjc1CiAgICB9LAogICAgc3Ryb2tlV2lkdGg6IHsKICAgICAgdHlwZTogICAgTnVtYmVyLAogICAgICBkZWZhdWx0OiAyMgogICAgfSwKICAgIHByaW1hcnlTdHJva2VDb2xvcjogewogICAgICB0eXBlOiAgICAgU3RyaW5nLAogICAgICByZXF1aXJlZDogdHJ1ZQogICAgfSwKICAgIHByaW1hcnlTdHJva2VHcmFkaWVudENvbG9yOiB7CiAgICAgIHR5cGU6ICAgIFN0cmluZywKICAgICAgZGVmYXVsdDogbnVsbAogICAgfSwKICAgIHNlY29uZGFyeVN0cm9rZUNvbG9yOiB7CiAgICAgIHR5cGU6ICAgICBTdHJpbmcsCiAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9LAogICAgc2Vjb25kYXJ5U3Ryb2tlR3JhZGllbnRDb2xvcjogewogICAgICB0eXBlOiAgICBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6IG51bGwKICAgIH0sCiAgICByb3RhdGU6IHsKICAgICAgdHlwZTogICAgTnVtYmVyLAogICAgICBkZWZhdWx0OiA5MAogICAgfSwKICAgIHNob3dUZXh0OiB7CiAgICAgIHR5cGU6ICAgIEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7IGlkOiBpZCsrIH07CiAgfSwKICBjb21wdXRlZDogewogICAgdmlld3BvcnRTaXplKCkgewogICAgICByZXR1cm4gMTAwOwogICAgfSwKICAgIHJhZGl1cygpIHsKICAgICAgY29uc3Qgb3V0ZXJSYWRpdXMgPSB0aGlzLnZpZXdwb3J0U2l6ZSAvIDI7CiAgICAgIGNvbnN0IGhhbGZTdHJva2VXaWR0aCA9IHRoaXMuc3Ryb2tlV2lkdGggLyAyOwoKICAgICAgcmV0dXJuIG91dGVyUmFkaXVzIC0gaGFsZlN0cm9rZVdpZHRoOwogICAgfSwKICAgIGNlbnRlcigpIHsKICAgICAgcmV0dXJuIHRoaXMudmlld3BvcnRTaXplIC8gMjsKICAgIH0sCiAgICB2aWV3Qm94KCkgewogICAgICByZXR1cm4gYDAgMCAkeyB0aGlzLnZpZXdwb3J0U2l6ZSB9ICR7IHRoaXMudmlld3BvcnRTaXplIH1gOwogICAgfSwKICAgIGNpcmN1bWZlcmVuY2UoKSB7CiAgICAgIHJldHVybiAyICogTWF0aC5QSSAqIHRoaXMucmFkaXVzOwogICAgfSwKICAgIHRyYW5zZm9ybSgpIHsKICAgICAgcmV0dXJuIGByb3RhdGUoJHsgdGhpcy5yb3RhdGUgfSwgJHsgdGhpcy5jZW50ZXIgfSwgJHsgdGhpcy5jZW50ZXIgfSlgOwogICAgfSwKICAgIHN0cm9rZURhc2hhcnJheSgpIHsKICAgICAgLy8gVGhpcyBuZWVkcyB0byBiZSB0aGUgY2lyY3VtZmVyZW5jZSBvZiB0aGUgY2lyY2xlIGluIG9yZGVyIHRvIGFsbG93IHRoZSBwYXRoIHRvIGJlIGZpbGxlZAogICAgICByZXR1cm4gdGhpcy5jaXJjdW1mZXJlbmNlOwogICAgfSwKICAgIHN0cm9rZURhc2hvZmZzZXQoKSB7CiAgICAgIC8vIFRoaXMgbmVlZHMgdG8gYmUgdGhlIHBlcmNlbnRhZ2Ugb2YgdGhlIGNpcmN1bWZlcmVuY2UgdGhhdCB3ZSB3b24ndCBzaG93IGFzIGl0IHdpbGwgaGlkZSB0aGF0IHBvcnRpb24gb2YgdGhlIHBhdGgKICAgICAgcmV0dXJuIHRoaXMuY2lyY3VtZmVyZW5jZSAqICgxIC0gdGhpcy5wZXJjZW50YWdlKTsKICAgIH0sCiAgICBwcmltYXJ5U3Ryb2tlQ29sb3JJZCgpIHsKICAgICAgcmV0dXJuIGBwcmltYXJ5LSR7IGlkIH1gOwogICAgfSwKICAgIHNlY29uZGFyeVN0cm9rZUNvbG9ySWQoKSB7CiAgICAgIHJldHVybiBgc2Vjb25kYXJ5LSR7IGlkIH1gOwogICAgfSwKICAgIHBhcnNlUGVyY2VudGFnZSgpIHsKICAgICAgcmV0dXJuIHBhcnNlSW50KHRoaXMucGVyY2VudGFnZSAqIDEwMCkgfHwgMDsKICAgIH0sCiAgfQp9OwoK"},{"version":3,"sources":["Circle.vue"],"names":[],"mappings":";AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Circle.vue","sourceRoot":"node_modules/@rancher/shell/components/graph","sourcesContent":["<script>\nlet id = 0;\n\nexport default {\n  props: {\n    percentage: {\n      type:    Number,\n      default: 0.75\n    },\n    strokeWidth: {\n      type:    Number,\n      default: 22\n    },\n    primaryStrokeColor: {\n      type:     String,\n      required: true\n    },\n    primaryStrokeGradientColor: {\n      type:    String,\n      default: null\n    },\n    secondaryStrokeColor: {\n      type:     String,\n      required: true\n    },\n    secondaryStrokeGradientColor: {\n      type:    String,\n      default: null\n    },\n    rotate: {\n      type:    Number,\n      default: 90\n    },\n    showText: {\n      type:    Boolean,\n      default: false\n    },\n  },\n  data() {\n    return { id: id++ };\n  },\n  computed: {\n    viewportSize() {\n      return 100;\n    },\n    radius() {\n      const outerRadius = this.viewportSize / 2;\n      const halfStrokeWidth = this.strokeWidth / 2;\n\n      return outerRadius - halfStrokeWidth;\n    },\n    center() {\n      return this.viewportSize / 2;\n    },\n    viewBox() {\n      return `0 0 ${ this.viewportSize } ${ this.viewportSize }`;\n    },\n    circumference() {\n      return 2 * Math.PI * this.radius;\n    },\n    transform() {\n      return `rotate(${ this.rotate }, ${ this.center }, ${ this.center })`;\n    },\n    strokeDasharray() {\n      // This needs to be the circumference of the circle in order to allow the path to be filled\n      return this.circumference;\n    },\n    strokeDashoffset() {\n      // This needs to be the percentage of the circumference that we won't show as it will hide that portion of the path\n      return this.circumference * (1 - this.percentage);\n    },\n    primaryStrokeColorId() {\n      return `primary-${ id }`;\n    },\n    secondaryStrokeColorId() {\n      return `secondary-${ id }`;\n    },\n    parsePercentage() {\n      return parseInt(this.percentage * 100) || 0;\n    },\n  }\n};\n\n</script>\n\n<template>\n  <svg\n    class=\"circle\"\n    width=\"100%\"\n    height=\"100%\"\n    :viewBox=\"viewBox\"\n  >\n    <g :transform=\"transform\">\n      <defs>\n        <linearGradient\n          :id=\"primaryStrokeColorId\"\n          x1=\"0%\"\n          y1=\"0%\"\n          x2=\"100%\"\n          y2=\"0%\"\n        >\n          <stop\n            offset=\"50%\"\n            :stop-color=\"primaryStrokeGradientColor || primaryStrokeColor\"\n          />\n          <stop\n            offset=\"100%\"\n            :stop-color=\"primaryStrokeColor\"\n          />\n        </linearGradient>\n        <linearGradient\n          :id=\"secondaryStrokeColorId\"\n          x1=\"0%\"\n          y1=\"0%\"\n          x2=\"100%\"\n          y2=\"0%\"\n        >\n          <stop\n            offset=\"50%\"\n            :stop-color=\"secondaryStrokeGradientColor || secondaryStrokeColor\"\n          />\n          <stop\n            offset=\"100%\"\n            :stop-color=\"secondaryStrokeColor\"\n          />\n        </linearGradient>\n      </defs>\n      <circle\n        :r=\"radius\"\n        :cy=\"center\"\n        :cx=\"center\"\n        :stroke-width=\"strokeWidth\"\n        :stroke=\"`url(#${secondaryStrokeColorId})`\"\n        fill=\"none\"\n      />\n      <circle\n        :r=\"radius\"\n        :cy=\"center\"\n        :cx=\"center\"\n        :stroke-width=\"strokeWidth\"\n        :stroke=\"`url(#${primaryStrokeColorId})`\"\n        :stroke-dasharray=\"circumference\"\n        :stroke-dashoffset=\"circumference * (1 - percentage)\"\n        fill=\"none\"\n      />\n    </g>\n\n    <text\n      v-if=\"showText\"\n      :x=\"center\"\n      :y=\"center\"\n      style=\"font-size: 25; dominant-baseline:  middle; text-anchor:middle;\"\n      :fill=\"`url(#${primaryStrokeColorId})`\"\n    >\n      {{ parsePercentage }}%\n    </text>\n  </svg>\n</template>\n\n<style lang=\"scss\" scoped>\nsvg.text {\n  fill: red\n}\n</style>\n"]}]}