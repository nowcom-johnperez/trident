{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/object.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/object.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["cloneDeep","flattenDeep","compact","JSONPath","Vue","transform","isObject","isArray","isEqual","difference","splitObjectPath","joinObjectPath","addObject","set","obj","path","value","ptr","parts","i","length","key","getAllValues","keysInOrder","split","currentValue","forEach","currentKey","map","indexValue","Array","arr","flat","filter","val","get","Error","startsWith","json","wrap","e","console","log","includes","_obj","remove","parentAry","undefined","leafKey","pop","parent","getter","clone","isEmpty","Object","keys","isSimpleKeyValue","_typeof","values","every","v","cleanUp","each","definedKeys","subkey","concat","diff","from","to","out","res","toVal","k","fromVal","fromKeys","toKeys","missing","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","f","isEqualBasic","fromValue","toValue","changeset","parentPath","arguments","_toConsumableArray","op","_objectSpread","changesetConflicts","a","b","sort","seen","_iterator2","_step2","ok","aa","bb","_iterator4","parentKeys","_step4","parentKey","_iterator3","_step3","_iterator5","_step5","push","applyChangeset","entry","pickBy","predicate","entries","reduce","_ref","_ref2","_slicedToArray","toDictionary","array","callback","assign","apply","item","_defineProperty"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/object.js"],"sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport flattenDeep from 'lodash/flattenDeep';\nimport compact from 'lodash/compact';\nimport { JSONPath } from 'jsonpath-plus';\nimport Vue from 'vue';\nimport transform from 'lodash/transform';\nimport isObject from 'lodash/isObject';\nimport isArray from 'lodash/isArray';\nimport isEqual from 'lodash/isEqual';\nimport difference from 'lodash/difference';\nimport { splitObjectPath, joinObjectPath } from '@shell/utils/string';\nimport { addObject } from '@shell/utils/array';\n\nexport function set(obj, path, value) {\n  let ptr = obj;\n\n  if (!ptr) {\n    return;\n  }\n\n  const parts = splitObjectPath(path);\n\n  for (let i = 0; i < parts.length; i++) {\n    const key = parts[i];\n\n    if ( i === parts.length - 1 ) {\n      Vue.set(ptr, key, value);\n    } else if ( !ptr[key] ) {\n      // Make sure parent keys exist\n      Vue.set(ptr, key, {});\n    }\n\n    ptr = ptr[key];\n  }\n\n  return obj;\n}\n\nexport function getAllValues(obj, path) {\n  const keysInOrder = path.split('.');\n  let currentValue = [obj];\n\n  keysInOrder.forEach((currentKey) => {\n    currentValue = currentValue.map((indexValue) => {\n      if (Array.isArray(indexValue)) {\n        return indexValue.map((arr) => arr[currentKey]).flat();\n      } else if (indexValue) {\n        return indexValue[currentKey];\n      } else {\n        return null;\n      }\n    }).flat();\n  });\n\n  return currentValue.filter((val) => val !== null);\n}\n\nexport function get(obj, path) {\n  if ( !path) {\n    throw new Error('Cannot translate an empty input. The t function requires a string.');\n  }\n  if ( path.startsWith('$') ) {\n    try {\n      return JSONPath({\n        path,\n        json: obj,\n        wrap: false,\n      });\n    } catch (e) {\n      console.log('JSON Path error', e, path, obj); // eslint-disable-line no-console\n\n      return '(JSON Path err)';\n    }\n  }\n  if ( !path.includes('.') ) {\n    return obj?.[path];\n  }\n\n  const parts = splitObjectPath(path);\n\n  for (let i = 0; i < parts.length; i++) {\n    if (!obj) {\n      return;\n    }\n\n    obj = obj[parts[i]];\n  }\n\n  return obj;\n}\n\nexport function remove(obj, path) {\n  const parentAry = splitObjectPath(path);\n\n  // Remove the very last part of the path\n\n  if (parentAry.length === 1) {\n    Vue.set(obj, path, undefined);\n    delete obj[path];\n  } else {\n    const leafKey = parentAry.pop();\n    const parent = get(obj, joinObjectPath(parentAry));\n\n    if ( parent ) {\n      Vue.set(parent, leafKey, undefined);\n      delete parent[leafKey];\n    }\n  }\n\n  return obj;\n}\n\nexport function getter(path) {\n  return function(obj) {\n    return get(obj, path);\n  };\n}\n\nexport function clone(obj) {\n  return cloneDeep(obj);\n}\n\nexport function isEmpty(obj) {\n  if ( !obj ) {\n    return true;\n  }\n\n  return !Object.keys(obj).length;\n}\n\n/**\n * Checks to see if the object is a simple key value pair where all values are\n * just primitives.\n * @param {any} obj\n */\nexport function isSimpleKeyValue(obj) {\n  return obj !== null &&\n    !Array.isArray(obj) &&\n    typeof obj === 'object' &&\n    Object.values(obj || {}).every((v) => typeof v !== 'object');\n}\n\n/*\nreturns an object with no key/value pairs (including nested) where the value is:\n  empty array\n  empty object\n  null\n  undefined\n*/\nexport function cleanUp(obj) {\n  Object.keys(obj).map((key) => {\n    const val = obj[key];\n\n    if ( Array.isArray(val) ) {\n      obj[key] = val.map((each) => {\n        if (each !== null && each !== undefined) {\n          return cleanUp(each);\n        }\n      });\n      if (obj[key].length === 0) {\n        delete obj[key];\n      }\n    } else if (typeof val === 'undefined' || val === null) {\n      delete obj[key];\n    } else if ( isObject(val) ) {\n      if (isEmpty(val)) {\n        delete obj[key];\n      }\n      obj[key] = cleanUp(val);\n    }\n  });\n\n  return obj;\n}\n\nexport function definedKeys(obj) {\n  const keys = Object.keys(obj).map((key) => {\n    const val = obj[key];\n\n    if ( Array.isArray(val) ) {\n      return key;\n    } else if ( isObject(val) ) {\n      return ( definedKeys(val) || [] ).map((subkey) => `${ key }.${ subkey }`);\n    } else {\n      return key;\n    }\n  });\n\n  return compact(flattenDeep(keys));\n}\n\nexport function diff(from, to) {\n  from = from || {};\n  to = to || {};\n\n  // Copy values in 'to' that are different than from\n  const out = transform(to, (res, toVal, k) => {\n    const fromVal = from[k];\n\n    if ( isEqual(toVal, fromVal) ) {\n      return;\n    }\n\n    if ( Array.isArray(toVal) || Array.isArray(fromVal) ) {\n      // Don't diff arrays, just use the whole value\n      res[k] = toVal;\n    } else if ( isObject(toVal) && isObject(from[k]) ) {\n      res[k] = diff(fromVal, toVal);\n    } else {\n      res[k] = toVal;\n    }\n  });\n\n  const fromKeys = definedKeys(from);\n  const toKeys = definedKeys(to);\n\n  // Return keys that are in 'from' but not 'to.'\n  const missing = difference(fromKeys, toKeys);\n\n  for ( const k of missing ) {\n    set(out, k, null);\n  }\n\n  return out;\n}\n\n/**\n * Super simple lodash isEqual equivalent.\n *\n * Only checks root properties for strict equality\n */\nfunction isEqualBasic(from, to) {\n  const fromKeys = Object.keys(from || {});\n  const toKeys = Object.keys(to || {});\n\n  if (fromKeys.length !== toKeys.length) {\n    return false;\n  }\n\n  for (let i = 0; i < fromKeys.length; i++) {\n    const fromValue = from[fromKeys[i]];\n    const toValue = to[fromKeys[i]];\n\n    if (fromValue !== toValue) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport { isEqualBasic as isEqual };\n\nexport function changeset(from, to, parentPath = []) {\n  let out = {};\n\n  if ( isEqual(from, to) ) {\n    return out;\n  }\n\n  for ( const k in from ) {\n    const path = joinObjectPath([...parentPath, k]);\n\n    if ( !(k in to) ) {\n      out[path] = { op: 'remove', path };\n    } else if ( (isObject(from[k]) && isObject(to[k])) || (isArray(from[k]) && isArray(to[k])) ) {\n      out = { ...out, ...changeset(from[k], to[k], [...parentPath, k]) };\n    } else if ( !isEqual(from[k], to[k]) ) {\n      out[path] = {\n        op: 'change', from: from[k], value: to[k]\n      };\n    }\n  }\n\n  for ( const k in to ) {\n    if ( !(k in from) ) {\n      const path = joinObjectPath([...parentPath, k]);\n\n      out[path] = { op: 'add', value: to[k] };\n    }\n  }\n\n  return out;\n}\n\nexport function changesetConflicts(a, b) {\n  let keys = Object.keys(a).sort();\n  const out = [];\n  const seen = {};\n\n  for ( const k of keys ) {\n    let ok = true;\n    const aa = a[k];\n    const bb = b[k];\n\n    // If we've seen a change for a parent of this key before (e.g. looking at `spec.replicas` and there's already been a change to `spec`), assume they conflict\n    for ( const parentKey of parentKeys(k) ) {\n      if ( seen[parentKey] ) {\n        ok = false;\n        break;\n      }\n    }\n\n    seen[k] = true;\n\n    if ( ok && bb ) {\n      switch ( `${ aa.op }-${ bb.op }` ) {\n      case 'add-add':\n      case 'add-change':\n      case 'change-add':\n      case 'change-change':\n        ok = isEqual(aa.value, bb.value);\n        break;\n\n      case 'add-remove':\n      case 'change-remove':\n      case 'remove-add':\n      case 'remove-change':\n        ok = false;\n        break;\n\n      case 'remove-remove':\n      default:\n        ok = true;\n        break;\n      }\n    }\n\n    if ( !ok ) {\n      addObject(out, k);\n    }\n  }\n\n  // Check parent keys going the other way\n  keys = Object.keys(b).sort();\n  for ( const k of keys ) {\n    let ok = true;\n\n    for ( const parentKey of parentKeys(k) ) {\n      if ( seen[parentKey] ) {\n        ok = false;\n        break;\n      }\n    }\n\n    seen[k] = true;\n\n    if ( !ok ) {\n      addObject(out, k);\n    }\n  }\n\n  return out.sort();\n\n  function parentKeys(k) {\n    const out = [];\n    const parts = splitObjectPath(k);\n\n    parts.pop();\n\n    while ( parts.length ) {\n      const path = joinObjectPath(parts);\n\n      out.push(path);\n      parts.pop();\n    }\n\n    return out;\n  }\n}\n\nexport function applyChangeset(obj, changeset) {\n  let entry;\n\n  for ( const path in changeset ) {\n    entry = changeset[path];\n\n    if ( entry.op === 'add' || entry.op === 'change' ) {\n      set(obj, path, entry.value);\n    } else if ( entry.op === 'remove' ) {\n      remove(obj, path);\n    } else {\n      throw new Error(`Unknown operation:${ entry.op }`);\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Creates an object composed of the `object` properties `predicate` returns\n */\nexport function pickBy(obj = {}, predicate = (value, key) => false) {\n  return Object.entries(obj)\n    .reduce((res, [key, value]) => {\n      if (predicate(value, key)) {\n        res[key] = value;\n      }\n\n      return res;\n    }, {});\n}\n\n/**\n * Convert list to dictionary from a given function\n * @param {*} array\n * @param {*} callback\n * @returns\n */\nexport const toDictionary = (array, callback) => Object.assign(\n  {}, ...array.map((item) => ({ [item]: callback(item) }))\n);\n"],"mappings":"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"}]}