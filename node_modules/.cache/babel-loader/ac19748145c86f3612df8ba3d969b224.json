{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/middleware/authenticated.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/middleware/authenticated.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["REDIRECTED","NAME","EXPLORER","SETUP","TIMED_OUT","UPGRADED","_FLAGGED","_UNFLAG","SETTING","MANAGEMENT","NORMAN","DEFAULT_WORKSPACE","_ALL_IF_AUTHED","applyProducts","findBy","ClusterNotFoundError","get","setFavIcon","haveSetFavIcon","dynamicPluginLoader","AFTER_LOGIN_ROUTE","WORKSPACE","BACK_TO","FLEET_NAME","canViewResource","getPackageFromRoute","route","_arraySafe$find","meta","arraySafe","Array","isArray","find","m","pkg","getResourceFromRoute","to","_to$params","resource","params","findMeta","beforeEachSetup","key","i","length","undefined","getClusterFromRoute","_to$params2","cluster","getProductFromRoute","_to$params3","product","_to$name","match","name","setProduct","store","redirect","_store$getters$curren","_store$getters$curren2","matched","path","getters","dispatch","Error","productNotFound","oldProduct","oldStore","inStore","commit","neuStore","invalidResource","_x","_ref2","apply","arguments","_asyncToGenerator","regeneratorRuntime","mark","_callee","_ref","app","$cookies","req","isDev","from","$plugin","next","upgraded","initialPass","firstLogin","res","plSetting","_res","_plSetting","ok","isLoggedIn","notLoggedIn","noAuth","v3User","fromHeader","me","_me","status","backTo","localCheckResource","redirected","_route$matched","clusterId","oldPkg","oldPkgPlugin","always","newPkgPlugin","newLocation","resolvedRoute","_redirected","_redirected2","isSingleProduct","_isSingleProduct$afte","value","wrap","_callee$","_context","prev","_noAuth","_notLoggedIn","concat","_isLoggedIn","id","startsWith","abrupt","set","sameSite","secure","query","router","applyQuery","_defineProperty","title","message","timeout","type","opt","load","url","redirectUnauthorized","FIRST_LOGIN","PL","t0","sent","t1","tryInitialSetup","mustChangePassword","findMe","t2","_status","error","locationError","process","server","window","localStorage","getItem","removeItem","location","href","beforeEach","client","afterEach","setTimeout","_popStateDetected","Object","values","getPlugins","p","onLeave","oldIsExt","fullPath","Promise","all","onEnter","check","resolve","newPkg","targetRoute","afterLoginRoute","_objectSpread","t3","stop","_x2","_findMe","_callee2","principals","_callee2$","_context2","PRINCIPAL","_x3","_tryInitialSetup","_callee3","password","_args3","_callee3$","_context3","provider","body","username","console"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/middleware/authenticated.js"],"sourcesContent":["import { REDIRECTED } from '@shell/config/cookies';\nimport { NAME as EXPLORER } from '@shell/config/product/explorer';\nimport {\n  SETUP, TIMED_OUT, UPGRADED, _FLAGGED, _UNFLAG\n} from '@shell/config/query-params';\nimport { SETTING } from '@shell/config/settings';\nimport { MANAGEMENT, NORMAN, DEFAULT_WORKSPACE } from '@shell/config/types';\nimport { _ALL_IF_AUTHED } from '@shell/plugins/dashboard-store/actions';\nimport { applyProducts } from '@shell/store/type-map';\nimport { findBy } from '@shell/utils/array';\nimport { ClusterNotFoundError } from '@shell/utils/error';\nimport { get } from '@shell/utils/object';\nimport { setFavIcon, haveSetFavIcon } from '@shell/utils/favicon';\nimport dynamicPluginLoader from '@shell/pkg/dynamic-plugin-loader';\nimport { AFTER_LOGIN_ROUTE, WORKSPACE } from '@shell/store/prefs';\nimport { BACK_TO } from '@shell/config/local-storage';\nimport { NAME as FLEET_NAME } from '@shell/config/product/fleet.js';\nimport { canViewResource } from '@shell/utils/auth';\n\nconst getPackageFromRoute = (route) => {\n  if (!route?.meta) {\n    return;\n  }\n  // Sometimes meta is an array... sometimes not\n  const arraySafe = Array.isArray(route.meta) ? route.meta : [route.meta];\n\n  return arraySafe.find((m) => !!m.pkg)?.pkg;\n};\n\nconst getResourceFromRoute = (to) => {\n  let resource = to.params?.resource;\n\n  if (!resource) {\n    resource = findMeta(to, 'resource');\n  }\n\n  return resource;\n};\n\nlet beforeEachSetup = false;\n\nfunction findMeta(route, key) {\n  if (route?.meta) {\n    const meta = Array.isArray(route.meta) ? route.meta : [route.meta];\n\n    for (let i = 0; i < meta.length; i++) {\n      if (meta[i][key]) {\n        return meta[i][key];\n      }\n    }\n  }\n\n  return undefined;\n}\n\nexport function getClusterFromRoute(to) {\n  let cluster = to.params?.cluster;\n\n  if (!cluster) {\n    cluster = findMeta(to, 'cluster');\n  }\n\n  return cluster;\n}\n\nexport function getProductFromRoute(to) {\n  let product = to.params?.product;\n\n  if ( !product ) {\n    const match = to.name?.match(/^c-cluster-([^-]+)/);\n\n    if ( match ) {\n      product = match[1];\n    }\n  }\n\n  // If still no product, see if the route indicates the product via route metadata\n  if (!product) {\n    product = findMeta(to, 'product');\n  }\n\n  return product;\n}\n\nfunction setProduct(store, to, redirect) {\n  let product = getProductFromRoute(to);\n\n  // since all products are hardcoded as routes (ex: c-local-explorer), if we match the wildcard route it means that the product does not exist\n  if ((product && (!to.matched.length || (to.matched.length && to.matched[0].path === '/c/:cluster/:product'))) ||\n  // if the product grabbed from the route is not registered, then we don't have it!\n  (product && !store.getters['type-map/isProductRegistered'](product))) {\n    store.dispatch('loadingError', new Error(store.getters['i18n/t']('nav.failWhale.productNotFound', { productNotFound: product }, true)));\n\n    return () => redirect(302, '/fail-whale');\n  }\n\n  if ( !product ) {\n    product = EXPLORER;\n  }\n\n  const oldProduct = store.getters['productId'];\n  const oldStore = store.getters['currentProduct']?.inStore;\n\n  if ( product !== oldProduct ) {\n    store.commit('setProduct', product);\n  }\n\n  const neuStore = store.getters['currentProduct']?.inStore;\n\n  if ( neuStore !== oldStore ) {\n    // If the product store changes, clear the catalog.\n    // There might be management catalog items in it vs cluster.\n    store.commit('catalog/reset');\n  }\n\n  return false;\n}\n\n/**\n * Check that the resource is valid, if not redirect to fail whale\n *\n * This requires that\n * - product is set\n * - product's store is set and setup (so we can check schema's within it)\n * - product's store has the schemaFor getter (extension stores might not have it)\n * - there's a resource associated with route (meta or param)\n */\nfunction invalidResource(store, to, redirect) {\n  const product = store.getters['currentProduct'];\n  const resource = getResourceFromRoute(to);\n\n  // In order to check a resource is valid we need these\n  if (!product || !resource) {\n    return false;\n  }\n\n  if (canViewResource(store, resource)) {\n    return false;\n  }\n\n  // Unknown resource, redirect to fail whale\n\n  store.dispatch('loadingError', new Error(store.getters['i18n/t']('nav.failWhale.resourceNotFound', { resource }, true)));\n\n  return () => redirect(302, '/fail-whale');\n}\n\nexport default async function({\n  route, app, store, redirect, $cookies, req, isDev, from, $plugin, next\n}) {\n  if ( route.path && typeof route.path === 'string') {\n    // Ignore webpack hot module reload requests\n    if ( route.path.startsWith('/__webpack_hmr/') ) {\n      return;\n    }\n\n    // Ignore the error page\n    if ( route.path.startsWith('/fail-whale') ) {\n      return;\n    }\n  }\n\n  // This tells Ember not to redirect back to us once you've already been to dashboard once.\n  if ( !$cookies.get(REDIRECTED) ) {\n    $cookies.set(REDIRECTED, 'true', {\n      path:     '/',\n      sameSite: true,\n      secure:   true,\n    });\n  }\n\n  const upgraded = route.query[UPGRADED] === _FLAGGED;\n\n  if ( upgraded ) {\n    app.router.applyQuery({ [UPGRADED]: _UNFLAG });\n\n    store.dispatch('growl/success', {\n      title:   store.getters['i18n/t']('serverUpgrade.title'),\n      message: store.getters['i18n/t']('serverUpgrade.message'),\n      timeout: 0,\n    });\n  }\n\n  // Initial ?setup=admin-password can technically be on any route\n  let initialPass = route.query[SETUP];\n  let firstLogin = null;\n\n  try {\n    // Load settings, which will either be just the public ones if not logged in, or all if you are\n    await store.dispatch('management/findAll', {\n      type: MANAGEMENT.SETTING,\n      opt:  {\n        load: _ALL_IF_AUTHED, url: `/v1/${ MANAGEMENT.SETTING }`, redirectUnauthorized: false\n      }\n    });\n\n    // Set the favicon - use custom one from store if set\n    if (!haveSetFavIcon()) {\n      setFavIcon(store);\n    }\n\n    const res = store.getters['management/byId'](MANAGEMENT.SETTING, SETTING.FIRST_LOGIN);\n    const plSetting = store.getters['management/byId'](MANAGEMENT.SETTING, SETTING.PL);\n\n    firstLogin = res?.value === 'true';\n\n    if (!initialPass && plSetting?.value === 'Harvester') {\n      initialPass = 'admin';\n    }\n  } catch (e) {\n  }\n\n  if ( firstLogin === null ) {\n    try {\n      const res = await store.dispatch('rancher/find', {\n        type: 'setting',\n        id:   SETTING.FIRST_LOGIN,\n        opt:  { url: `/v3/settings/${ SETTING.FIRST_LOGIN }` }\n      });\n\n      firstLogin = res?.value === 'true';\n\n      const plSetting = await store.dispatch('rancher/find', {\n        type: 'setting',\n        id:   SETTING.PL,\n        opt:  { url: `/v3/settings/${ SETTING.PL }` }\n      });\n\n      if (!initialPass && plSetting?.value === 'Harvester') {\n        initialPass = 'admin';\n      }\n    } catch (e) {\n    }\n  }\n\n  // TODO show error if firstLogin and default pass doesn't work\n  if ( firstLogin ) {\n    const ok = await tryInitialSetup(store, initialPass);\n\n    if (ok) {\n      if (initialPass) {\n        store.dispatch('auth/setInitialPass', initialPass);\n      }\n\n      return redirect({ name: 'auth-setup' });\n    } else {\n      return redirect({ name: 'auth-login' });\n    }\n  }\n\n  // Make sure you're actually logged in\n  function isLoggedIn(me) {\n    store.commit('auth/hasAuth', true);\n    store.commit('auth/loggedInAs', me.id);\n  }\n\n  function notLoggedIn() {\n    store.commit('auth/hasAuth', true);\n\n    if ( route.name === 'index' ) {\n      return redirect(302, '/auth/login');\n    } else {\n      return redirect(302, `/auth/login?${ TIMED_OUT }`);\n    }\n  }\n\n  function noAuth() {\n    store.commit('auth/hasAuth', false);\n  }\n\n  if ( store.getters['auth/enabled'] !== false && !store.getters['auth/loggedIn'] ) {\n    // `await` so we have one successfully request whilst possibly logged in (ensures fromHeader is populated from `x-api-cattle-auth`)\n    await store.dispatch('auth/getUser');\n\n    const v3User = store.getters['auth/v3User'] || {};\n\n    if (v3User?.mustChangePassword) {\n      return redirect({ name: 'auth-setup' });\n    }\n\n    // In newer versions the API calls return the auth state instead of having to make a new call all the time.\n    const fromHeader = store.getters['auth/fromHeader'];\n\n    if ( fromHeader === 'none' ) {\n      noAuth();\n    } else if ( fromHeader === 'true' ) {\n      const me = await findMe(store);\n\n      isLoggedIn(me);\n    } else if ( fromHeader === 'false' ) {\n      notLoggedIn();\n    } else {\n      // Older versions look at principals and see what happens\n      try {\n        const me = await findMe(store);\n\n        isLoggedIn(me);\n      } catch (e) {\n        const status = e?._status;\n\n        if ( status === 404 ) {\n          noAuth();\n        } else {\n          if ( status === 401 ) {\n            notLoggedIn();\n          } else {\n            store.commit('setError', { error: e, locationError: new Error('Auth Middleware') });\n            if ( process.server ) {\n              redirect(302, '/fail-whale');\n            }\n          }\n\n          return;\n        }\n      }\n    }\n\n    store.dispatch('gcStartIntervals');\n  }\n\n  if (!process.server) {\n    const backTo = window.localStorage.getItem(BACK_TO);\n\n    if (backTo) {\n      window.localStorage.removeItem(BACK_TO);\n\n      window.location.href = backTo;\n    }\n  }\n\n  // GC should be notified of route change before any find/get request is made that might be used for that page\n  store.dispatch('gcRouteChanged', route);\n\n  // Load stuff\n  let localCheckResource = false;\n\n  await applyProducts(store, $plugin);\n\n  // Setup a beforeEach hook once to keep track of the current product\n  if ( !beforeEachSetup ) {\n    beforeEachSetup = true;\n    // This only needs to happen when beforeEach hook hasn't run (the initial load)\n    localCheckResource = true;\n\n    store.app.router.beforeEach((to, from, next) => {\n      // NOTE - This beforeEach runs AFTER this middleware. So anything in this middleware that requires it must set it manually\n      let redirected = setProduct(store, to, redirect);\n\n      if (redirected) {\n        return redirected();\n      }\n\n      redirected = invalidResource(store, to, redirect);\n\n      if (redirected) {\n        return redirected();\n      }\n\n      next();\n    });\n\n    // Call it for the initial pageload\n    const redirected = setProduct(store, route, redirect);\n\n    if (redirected) {\n      return redirected();\n    }\n\n    if (process.client) {\n      store.app.router.afterEach((to, from) => {\n        // Clear state used to record if back button was used for navigation\n        setTimeout(() => {\n          window._popStateDetected = false;\n        }, 1);\n      });\n    }\n  }\n\n  try {\n    let clusterId = get(route, 'params.cluster');\n\n    // Route can provide cluster ID via metadata\n    if (!clusterId && route) {\n      clusterId = getClusterFromRoute(route);\n    }\n\n    const pkg = getPackageFromRoute(route);\n    const product = getProductFromRoute(route);\n\n    const oldPkg = getPackageFromRoute(from);\n    const oldProduct = getProductFromRoute(from);\n\n    // Leave an old pkg where we weren't before?\n    const oldPkgPlugin = oldPkg ? Object.values($plugin.getPlugins()).find((p) => p.name === oldPkg) : null;\n\n    if (oldPkg && oldPkg !== pkg ) {\n      // Execute anything optional the plugin wants to. For example resetting it's store to remove data\n      await oldPkgPlugin.onLeave(store, {\n        clusterId,\n        product,\n        oldProduct,\n        oldIsExt: !!oldPkg\n      });\n    }\n\n    // Sometimes this needs to happen before or alongside other things... but is always needed\n    const always = [\n      store.dispatch('loadManagement')\n    ];\n\n    // Entering a new package where we weren't before?\n    const newPkgPlugin = pkg ? Object.values($plugin.getPlugins()).find((p) => p.name === pkg) : null;\n\n    // Note - We can't block on oldPkg !== newPkg because on a fresh load the `from` route equals the `to` route\n    if (pkg && (oldPkg !== pkg || from.fullPath === route.fullPath)) {\n      // Execute mandatory store actions\n      await Promise.all(always);\n\n      // Execute anything optional the plugin wants to\n      await newPkgPlugin.onEnter(store, {\n        clusterId,\n        product,\n        oldProduct,\n        oldIsExt: !!oldPkg\n      });\n    }\n\n    if (!route.matched?.length) {\n      // If there are no matching routes we could be trying to nav to a page belonging to a dynamic plugin which needs loading\n      await Promise.all([\n        ...always,\n      ]);\n\n      // If a plugin claims the route and is loaded correctly we'll get a route back\n      const newLocation = await dynamicPluginLoader.check({ route, store });\n\n      // If we have a new location, double check that it's actually valid\n      const resolvedRoute = newLocation ? store.app.router.resolve(newLocation) : null;\n\n      if (resolvedRoute?.route.matched.length) {\n        // Note - don't use `redirect` or `store.app.route` (breaks feature by failing to run middleware in default layout)\n        return next(newLocation);\n      }\n    }\n\n    // Ensure that the activeNamespaceCache is updated given the change of context either from or to a place where it uses workspaces\n    // When fleet moves to it's own package this should be moved to pkg onEnter/onLeave\n    if ((oldProduct === FLEET_NAME || product === FLEET_NAME) && oldProduct !== product) {\n      // See note above for store.app.router.beforeEach, need to setProduct manually, for the moment do this in a targeted way\n      const redirected = setProduct(store, route, redirect);\n\n      if (redirected) {\n        return redirected();\n      }\n\n      store.commit('updateWorkspace', {\n        value:   store.getters['prefs/get'](WORKSPACE) || DEFAULT_WORKSPACE,\n        getters: store.getters\n      });\n    }\n\n    // Always run loadCluster, it handles 'unload' as well\n    // Run them in parallel\n    await Promise.all([\n      ...always,\n      store.dispatch('loadCluster', {\n        id:          clusterId,\n        oldPkg:      oldPkgPlugin,\n        newPkg:      newPkgPlugin,\n        product,\n        oldProduct,\n        targetRoute: route\n      })\n    ]);\n\n    if (localCheckResource) {\n      const redirected = invalidResource(store, route, redirect);\n\n      if (redirected) {\n        return redirected();\n      }\n    }\n\n    if (!clusterId) {\n      clusterId = store.getters['defaultClusterId']; // This needs the cluster list, so no parallel\n      const isSingleProduct = store.getters['isSingleProduct'];\n\n      if (isSingleProduct?.afterLoginRoute) {\n        const value = {\n          name:   'c-cluster-product',\n          ...isSingleProduct.afterLoginRoute,\n          params: {\n            cluster: clusterId,\n            ...isSingleProduct.afterLoginRoute?.params\n          },\n        };\n\n        await store.dispatch('prefs/set', {\n          key: AFTER_LOGIN_ROUTE,\n          value,\n        });\n      }\n    }\n  } catch (e) {\n    if ( e instanceof ClusterNotFoundError ) {\n      return redirect(302, '/home');\n    } else {\n      // Sets error 500 if lost connection to API\n      store.commit('setError', { error: e, locationError: new Error(store.getters['i18n/t']('nav.failWhale.authMiddleware')) });\n\n      return redirect(302, '/fail-whale');\n    }\n  }\n}\n\nasync function findMe(store) {\n  // First thing we do in loadManagement is fetch principals anyway.... so don't ?me=true here\n  const principals = await store.dispatch('rancher/findAll', {\n    type: NORMAN.PRINCIPAL,\n    opt:  {\n      url:                  '/v3/principals',\n      redirectUnauthorized: false,\n    }\n  });\n\n  const me = findBy(principals, 'me', true);\n\n  return me;\n}\n\nasync function tryInitialSetup(store, password = 'admin') {\n  try {\n    const res = await store.dispatch('auth/login', {\n      provider: 'local',\n      body:     {\n        username: 'admin',\n        password\n      },\n    });\n\n    return res._status === 200;\n  } catch (e) {\n    console.error('Error trying initial setup', e); // eslint-disable-line no-console\n\n    return false;\n  }\n}\n"],"mappings":"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"}]}