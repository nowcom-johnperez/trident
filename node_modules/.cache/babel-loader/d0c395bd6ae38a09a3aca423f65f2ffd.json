{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/models/management.cattle.io.cluster.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/models/management.cattle.io.cluster.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["Vue","CATALOG","CLUSTER_BADGE","NODE","FLEET","MANAGEMENT","CAPI","insertAt","addObject","removeObject","downloadFile","parseSi","parseColor","textColor","jsyaml","eachLimit","addParams","isEmpty","HARVESTER_NAME","HARVESTER","isHarvesterCluster","HybridModel","LINUX","WINDOWS","KONTAINER_TO_DRIVER","PINNED_CLUSTERS","PROVIDER_LOGO_OVERRIDE","findRelationship","verb","type","_relationships$find","relationships","arguments","length","undefined","from","concat","id","find","r","MgmtCluster","_HybridModel","_inherits","_super","_createSuper","_classCallCheck","apply","_createClass","key","get","out","label","content","provisionerDisplay","machineProviderDisplay","kubernetesVersion","_get","_getPrototypeOf","prototype","action","t","icon","enabled","links","shell","bulkAction","bulkable","$rootGetters","hasAction","_this$spec","hasLink","spec","internal","_this","pools","$getters","NODE_POOL","filter","x","_x$spec","clusterName","_this$status","status","driver","_this$machinePools","_this$spec2","kind","machinePools","provider","replace","toLowerCase","_this$spec3","clusterTemplateRevisionName","provisioner","_this$machinePools2","_this$machinePools$","nodeTemplate","endsWith","clusterTemplateRevision","rkeTemplateVersion","providerForEmberParam","qp","eksConfig","gkeConfig","importProvider","clusterTemplateRevisionId","path","escape","hasCondition","isCondition","_this$status2","_this$spec4","fromStatus","version","gitVersion","fromSpec","kubernetesVersionRaw","match","_this$status3","require","providerOs","_this$status4","_this$status5","rke2WindowsWorkers","windowsWorkerCount","rke2LinuxWorkers","linuxWorkerCount","push","_this$spec5","providers","includes","_this$status6","isHarvester","prv","split","logo","e","console","warn","providerLogo","_this$metadata","_this$metadata2","_this$metadata3","text","metadata","annotations","TEXT","color","COLOR","iconText","ICON_TEXT","substr","isLocal","_MANAGEMENT","_DOWNSTREAM","value","setClusterNameLabel","andSave","_this$ownerReferences","_this$metadata4","ownerReferences","labels","CLUSTER_NAME","save","_this$status$requeste","_this$status$allocata","reserved","requested","cpu","allocatable","Math","max","_this$status$requeste2","_this$status$allocata2","memory","openShell","$dispatch","name","nameDisplay","component","attrs","cluster","pod","root","_generateKubeConfig","_asyncToGenerator","regeneratorRuntime","mark","_callee","res","wrap","_callee$","_context","prev","next","doAction","sent","abrupt","config","stop","generateKubeConfig","_downloadKubeConfig","_callee2","_callee2$","_context2","downloadKubeConfig","_downloadKubeConfigBulk","_callee3","items","obj","first","_callee3$","_context3","item","idx","then","entry","load","_obj$clusters","_obj$users","_obj$contexts","clusters","_toConsumableArray","users","contexts","dump","downloadKubeConfigBulk","_x","_copyKubeConfig","_callee4","_callee4$","_context4","$copyText","copyKubeConfig","_fetchNodeMetrics","_callee5","nodes","nodeMetrics","someNonWorkerRoles","metrics","initialAggregation","_callee5$","_context5","some","node","hasARole","isWorker","metric","nd","reduce","agg","_metric$usage","_metric$usage2","usage","fetchNodeMetrics","_this2","startsWith","_this$spec6","_this$metadata5","_this$metadata6","isRKE1","rancherKubernetesEngineConfig","isHostedKubernetesProvider","RANCHER_CLUSTER","pin","types","unpin","default"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/models/management.cattle.io.cluster.js"],"sourcesContent":["import Vue from 'vue';\nimport { CATALOG, CLUSTER_BADGE } from '@shell/config/labels-annotations';\nimport { NODE, FLEET, MANAGEMENT, CAPI } from '@shell/config/types';\nimport { insertAt, addObject, removeObject } from '@shell/utils/array';\nimport { downloadFile } from '@shell/utils/download';\nimport { parseSi } from '@shell/utils/units';\nimport { parseColor, textColor } from '@shell/utils/color';\nimport jsyaml from 'js-yaml';\nimport { eachLimit } from '@shell/utils/promise';\nimport { addParams } from '@shell/utils/url';\nimport { isEmpty } from '@shell/utils/object';\nimport { HARVESTER_NAME as HARVESTER } from '@shell/config/features';\nimport { isHarvesterCluster } from '@shell/utils/cluster';\nimport HybridModel from '@shell/plugins/steve/hybrid-class';\nimport { LINUX, WINDOWS } from '@shell/store/catalog';\nimport { KONTAINER_TO_DRIVER } from './management.cattle.io.kontainerdriver';\nimport { PINNED_CLUSTERS } from '@shell/store/prefs';\n\n// See translation file cluster.providers for list of providers\n// If the logo is not named with the provider name, add an override here\nconst PROVIDER_LOGO_OVERRIDE = {};\n\nfunction findRelationship(verb, type, relationships = []) {\n  const from = `${ verb }Type`;\n  const id = `${ verb }Id`;\n\n  return relationships.find((r) => r[from] === type)?.[id];\n}\n\nexport default class MgmtCluster extends HybridModel {\n  get details() {\n    const out = [\n      {\n        label:   'Provisioner',\n        content: this.provisionerDisplay\n      },\n      {\n        label:   'Machine Provider',\n        content: this.machineProviderDisplay\n      },\n      {\n        label:   'Kubernetes Version',\n        content: this.kubernetesVersion,\n      },\n    ];\n\n    return out;\n  }\n\n  get _availableActions() {\n    const out = super._availableActions;\n\n    insertAt(out, 0, {\n      action:  'openShell',\n      label:   this.t('nav.shell'),\n      icon:    'icon icon-terminal',\n      enabled: !!this.links.shell,\n    });\n\n    insertAt(out, 1, {\n      action:     'downloadKubeConfig',\n      bulkAction: 'downloadKubeConfigBulk',\n      label:      this.t('nav.kubeconfig.download'),\n      icon:       'icon icon-download',\n      bulkable:   true,\n      enabled:    this.$rootGetters['isRancher'] && this.hasAction('generateKubeconfig'),\n    });\n\n    insertAt(out, 2, {\n      action:   'copyKubeConfig',\n      label:    this.t('cluster.copyConfig'),\n      bulkable: false,\n      enabled:  this.$rootGetters['isRancher'] && this.hasAction('generateKubeconfig'),\n      icon:     'icon icon-copy',\n    });\n\n    return out;\n  }\n\n  get canDelete() {\n    return this.hasLink('remove') && !this?.spec?.internal;\n  }\n\n  get machinePools() {\n    const pools = this.$getters['all'](MANAGEMENT.NODE_POOL);\n\n    return pools.filter((x) => x.spec?.clusterName === this.id);\n  }\n\n  get provisioner() {\n    // For imported K3s clusters, this.status.driver is 'k3s.'\n    return this.status?.driver ? this.status.driver : 'imported';\n  }\n\n  get machineProvider() {\n    const kind = this.machinePools?.[0]?.provider;\n\n    if ( kind ) {\n      return kind.replace(/config$/i, '').toLowerCase();\n    } else if ( this.spec?.internal ) {\n      return 'local';\n    }\n\n    return null;\n  }\n\n  get rkeTemplateVersion() {\n    return this.spec?.clusterTemplateRevisionName;\n  }\n\n  get providerForEmberParam() {\n    // Ember wants one word called provider to tell what component to show, but has much indirect mapping to figure out what it is.\n    let provider;\n    // Provisioner is the \"<something>Config\" in the model\n    const provisioner = KONTAINER_TO_DRIVER[(this.provisioner || '').toLowerCase()] || this.provisioner;\n\n    if ( provisioner === 'rancherKubernetesEngine' ) {\n      // Look for a cloud provider in one of the node templates\n      if ( this.machinePools?.[0] ) {\n        provider = this.machinePools[0]?.nodeTemplate?.spec?.driver || null;\n      } else {\n        provider = 'custom';\n      }\n    } else if ( this.driver ) {\n      provider = this.driver;\n    } else if ( provisioner && provisioner.endsWith('v2') ) {\n      provider = provisioner;\n    } else {\n      provider = 'import';\n    }\n\n    return provider;\n  }\n\n  get emberEditPath() {\n    let clusterTemplateRevision;\n\n    // If the RKE1 cluster is created from an RKE template, we need\n    // to get the template version to pass into the Ember UI for\n    // the iFramed edit cluster form\n    if (this.rkeTemplateVersion) {\n      clusterTemplateRevision = this.rkeTemplateVersion;\n    }\n    const provider = this.providerForEmberParam;\n\n    // Avoid passing falsy values as query parameters\n    const qp = { };\n\n    if (provider) {\n      qp['provider'] = provider;\n    }\n\n    if (clusterTemplateRevision) {\n      qp['clusterTemplateRevision'] = clusterTemplateRevision;\n    }\n\n    // Copied out of https://github.com/rancher/ui/blob/20f56dc54c4fc09b5f911e533cb751c13609adaf/app/models/cluster.js#L844\n    if ( provider === 'import' && isEmpty(this.eksConfig) && isEmpty(this.gkeConfig) ) {\n      qp.importProvider = 'other';\n    } else if (\n      (provider === 'amazoneks' && !isEmpty(this.eksConfig) ) ||\n       (provider === 'gke' && !isEmpty(this.gkeConfig) )\n       // || something for aks v2\n    ) {\n      qp.importProvider = KONTAINER_TO_DRIVER[provider];\n    }\n\n    if ( this.clusterTemplateRevisionId ) {\n      qp.clusterTemplateRevision = this.clusterTemplateRevisionId;\n    }\n\n    const path = addParams(`/c/${ escape(this.id) }/edit`, qp);\n\n    return path;\n  }\n\n  get groupByLabel() {\n    return this.$rootGetters['i18n/t']('resourceTable.groupLabel.notInAWorkspace');\n  }\n\n  get isReady() {\n    // If the Connected condition exists, use that (2.6+)\n    if ( this.hasCondition('Connected') ) {\n      return this.isCondition('Connected');\n    }\n\n    // Otherwise use Ready (older)\n    return this.isCondition('Ready');\n  }\n\n  get kubernetesVersionRaw() {\n    const fromStatus = this.status?.version?.gitVersion;\n    const fromSpec = this.spec?.[`${ this.provisioner }Config`]?.kubernetesVersion;\n\n    return fromStatus || fromSpec;\n  }\n\n  get kubernetesVersion() {\n    return this.kubernetesVersionRaw || this.$rootGetters['i18n/t']('generic.provisioning');\n  }\n\n  get kubernetesVersionBase() {\n    return this.kubernetesVersion.replace(/[+-].*$/, '');\n  }\n\n  get kubernetesVersionExtension() {\n    if ( this.kubernetesVersion.match(/[+-]/) ) {\n      return this.kubernetesVersion.replace(/^.*([+-])/, '$1');\n    }\n\n    return '';\n  }\n\n  get providerOs() {\n    if ( this.status?.provider.endsWith('.windows')) {\n      return 'windows';\n    }\n\n    return 'linux';\n  }\n\n  get providerOsLogo() {\n    return require(`~shell/assets/images/vendor/${ this.providerOs }.svg`);\n  }\n\n  get workerOSs() {\n    // rke1 clusters have windows support defined on create\n    // rke2 clusters report linux workers in mgmt cluster status\n    const rke2WindowsWorkers = this.status?.windowsWorkerCount;\n    const rke2LinuxWorkers = this.status?.linuxWorkerCount;\n\n    if (rke2WindowsWorkers || rke2LinuxWorkers ) {\n      const out = [];\n\n      if (rke2WindowsWorkers) {\n        out.push(WINDOWS);\n      }\n      if (rke2LinuxWorkers) {\n        out.push(LINUX);\n      }\n\n      return out;\n    } else if (this.providerOs === WINDOWS) {\n      return [WINDOWS];\n    }\n\n    return [LINUX];\n  }\n\n  get isLocal() {\n    return this.spec?.internal === true;\n  }\n\n  get isHarvester() {\n    return isHarvesterCluster(this);\n  }\n\n  get isHostedKubernetesProvider() {\n    const providers = ['AKS', 'EKS', 'GKE'];\n\n    return providers.includes(this.provisioner);\n  }\n\n  get providerLogo() {\n    let provider = this.status?.provider || 'kubernetes';\n\n    if (this.isHarvester) {\n      provider = HARVESTER;\n    }\n    // Only interested in the part before the period\n    const prv = provider.split('.')[0];\n    // Allow overrides if needed\n    const logo = PROVIDER_LOGO_OVERRIDE[prv] || prv;\n\n    let icon;\n\n    try {\n      icon = require(`~shell/assets/images/providers/${ prv }.svg`);\n    } catch (e) {\n      console.warn(`Can not find provider logo for provider ${ logo }`); // eslint-disable-line no-console\n      // Use fallback generic Kubernetes icon\n      icon = require(`~shell/assets/images/providers/kubernetes.svg`);\n    }\n\n    return icon;\n  }\n\n  get providerMenuLogo() {\n    return this.providerLogo;\n  }\n\n  get providerNavLogo() {\n    return this.providerLogo;\n  }\n\n  // Custom badge to show for the Cluster (if the appropriate annotations are set)\n  get badge() {\n    const text = this.metadata?.annotations?.[CLUSTER_BADGE.TEXT];\n\n    if (!text) {\n      return undefined;\n    }\n\n    const color = this.metadata?.annotations[CLUSTER_BADGE.COLOR] || '#7f7f7f';\n    const iconText = this.metadata?.annotations[CLUSTER_BADGE.ICON_TEXT] || '';\n\n    return {\n      text,\n      color,\n      textColor: textColor(parseColor(color)),\n      iconText:  iconText.substr(0, 2)\n    };\n  }\n\n  get scope() {\n    return this.isLocal ? CATALOG._MANAGEMENT : CATALOG._DOWNSTREAM;\n  }\n\n  setClusterNameLabel(andSave) {\n    if ( this.ownerReferences?.length || this.metadata?.labels?.[FLEET.CLUSTER_NAME] === this.id ) {\n      return;\n    }\n\n    this.metadata = this.metadata || {};\n    this.metadata.labels = this.metadata.labels || {};\n    this.metadata.labels[FLEET.CLUSTER_NAME] = this.id;\n\n    if ( andSave ) {\n      return this.save();\n    }\n  }\n\n  get availableCpu() {\n    const reserved = parseSi(this.status.requested?.cpu);\n    const allocatable = parseSi(this.status.allocatable?.cpu);\n\n    if ( allocatable > 0 && reserved >= 0 ) {\n      return Math.max(0, allocatable - reserved);\n    } else {\n      return null;\n    }\n  }\n\n  get availableMemory() {\n    const reserved = parseSi(this.status.requested?.memory);\n    const allocatable = parseSi(this.status.allocatable?.memory);\n\n    if ( allocatable > 0 && reserved >= 0 ) {\n      return Math.max(0, allocatable - reserved);\n    } else {\n      return null;\n    }\n  }\n\n  openShell() {\n    this.$dispatch('wm/open', {\n      id:        `kubectl-${ this.id }`,\n      label:     this.$rootGetters['i18n/t']('wm.kubectlShell.title', { name: this.nameDisplay }),\n      icon:      'terminal',\n      component: 'KubectlShell',\n      attrs:     {\n        cluster: this,\n        pod:     {}\n      }\n    }, { root: true });\n  }\n\n  async generateKubeConfig() {\n    const res = await this.doAction('generateKubeconfig');\n\n    return res.config;\n  }\n\n  async downloadKubeConfig() {\n    const config = await this.generateKubeConfig();\n\n    downloadFile(`${ this.nameDisplay }.yaml`, config, 'application/yaml');\n  }\n\n  async downloadKubeConfigBulk(items) {\n    let obj = {};\n    let first = true;\n\n    await eachLimit(items, 10, (item, idx) => {\n      return item.generateKubeConfig().then((config) => {\n        const entry = jsyaml.load(config);\n\n        if ( first ) {\n          obj = entry;\n          first = false;\n        } else {\n          obj.clusters.push(...entry.clusters);\n          obj.users.push(...entry.users);\n          obj.contexts.push(...entry.contexts);\n        }\n      });\n    });\n\n    delete obj['current-context'];\n\n    const out = jsyaml.dump(obj);\n\n    downloadFile('kubeconfig.yaml', out, 'application/yaml');\n  }\n\n  async copyKubeConfig() {\n    const config = await this.generateKubeConfig();\n\n    Vue.prototype.$copyText(config);\n  }\n\n  async fetchNodeMetrics() {\n    const nodes = await this.$dispatch('cluster/findAll', { type: NODE }, { root: true });\n    const nodeMetrics = await this.$dispatch('cluster/findAll', { type: NODE }, { root: true });\n\n    const someNonWorkerRoles = nodes.some((node) => node.hasARole && !node.isWorker);\n\n    const metrics = nodeMetrics.filter((metric) => {\n      const node = nodes.find((nd) => nd.id === metric.id);\n\n      return node && (!someNonWorkerRoles || node.isWorker);\n    });\n    const initialAggregation = {\n      cpu:    0,\n      memory: 0\n    };\n\n    if (isEmpty(metrics)) {\n      return null;\n    }\n\n    return metrics.reduce((agg, metric) => {\n      agg.cpu += parseSi(metric?.usage?.cpu);\n      agg.memory += parseSi(metric?.usage?.memory);\n\n      return agg;\n    }, initialAggregation);\n  }\n\n  get nodes() {\n    return this.$getters['all'](MANAGEMENT.NODE).filter((node) => node.id.startsWith(this.id));\n  }\n\n  get provClusterId() {\n    const isRKE1 = !!this.spec?.rancherKubernetesEngineConfig;\n    // Note: RKE1 provisioning cluster IDs are in a different format. For example,\n    // RKE2 cluster IDs include the name - fleet-default/cluster-name - whereas an RKE1\n    // cluster has the less human readable management cluster ID in it: fleet-default/c-khk48\n\n    const verb = this.isLocal || isRKE1 || this.isHostedKubernetesProvider ? 'to' : 'from';\n    const res = findRelationship(verb, CAPI.RANCHER_CLUSTER, this.metadata?.relationships);\n\n    if (res) {\n      return res;\n    }\n\n    return findRelationship(verb === 'to' ? 'from' : 'to', CAPI.RANCHER_CLUSTER, this.metadata?.relationships);\n  }\n\n  get pinned() {\n    return this.$rootGetters['prefs/get'](PINNED_CLUSTERS).includes(this.id);\n  }\n\n  pin() {\n    const types = this.$rootGetters['prefs/get'](PINNED_CLUSTERS) || [];\n\n    addObject(types, this.id);\n\n    this.$dispatch('prefs/set', { key: PINNED_CLUSTERS, value: types }, { root: true });\n  }\n\n  unpin() {\n    const types = this.$rootGetters['prefs/get'](PINNED_CLUSTERS) || [];\n\n    removeObject(types, this.id);\n\n    this.$dispatch('prefs/set', { key: PINNED_CLUSTERS, value: types }, { root: true });\n  }\n}\n"],"mappings":"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"}]}