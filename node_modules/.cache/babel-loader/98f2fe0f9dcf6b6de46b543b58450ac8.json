{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/validators/service.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/validators/service.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5jb25zdHJ1Y3Rvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzIjsKaW1wb3J0IGlzRW1wdHkgZnJvbSAnbG9kYXNoL2lzRW1wdHknOwppbXBvcnQgeyB2YWxpZGF0ZURuc0xhYmVsLCB2YWxpZGF0ZUhvc3RuYW1lIH0gZnJvbSAnQHNoZWxsL3V0aWxzL3ZhbGlkYXRvcnMnOwpleHBvcnQgZnVuY3Rpb24gc2VydmljZVBvcnQoc3BlYywgZ2V0dGVycywgZXJyb3JzLCB2YWxpZGF0b3JBcmdzKSB7CiAgdmFyIHBvcnRzID0gc3BlYy5wb3J0cywKICAgIHNlcnZpY2VUeXBlID0gc3BlYy50eXBlOwogIGlmIChzZXJ2aWNlVHlwZSA9PT0gJ0V4dGVybmFsTmFtZScpIHsKICAgIHJldHVybiBlcnJvcnM7CiAgfQogIGlmIChpc0VtcHR5KHBvcnRzKSkgewogICAgZXJyb3JzLnB1c2goZ2V0dGVyc1snaTE4bi90J10oJ3ZhbGlkYXRpb24ucmVxdWlyZWQnLCB7CiAgICAgIGtleTogJ1BvcnQgUnVsZXMnCiAgICB9KSk7CiAgICByZXR1cm4gZXJyb3JzOwogIH0KICBwb3J0cy5mb3JFYWNoKGZ1bmN0aW9uIChwb3J0LCBpbmQsIGFyeSkgewogICAgdmFyIG5hbWUgPSBwb3J0Lm5hbWUsCiAgICAgIG5vZGVQb3J0ID0gcG9ydC5ub2RlUG9ydCwKICAgICAgcFBvcnQgPSBwb3J0LnBvcnQsCiAgICAgIHRhcmdldFBvcnQgPSBwb3J0LnRhcmdldFBvcnQ7CiAgICB2YXIgaWR4ID0gaW5kICsgMTsKICAgIGlmIChhcnkubGVuZ3RoID4gMSAmJiBpc0VtcHR5KG5hbWUpKSB7CiAgICAgIGVycm9ycy5wdXNoKGdldHRlcnNbJ2kxOG4vdCddKCd2YWxpZGF0aW9uLnNlcnZpY2UucG9ydHMubmFtZS5yZXF1aXJlZCcsIHsKICAgICAgICBwb3NpdGlvbjogaWR4CiAgICAgIH0pKTsKICAgIH0KICAgIGlmICghaXNFbXB0eShuYW1lKSkgewogICAgICB2YXIgbmFtZUVycm9ycyA9IHZhbGlkYXRlRG5zTGFiZWwobmFtZSwgJ25hbWUnLCBnZXR0ZXJzLCB1bmRlZmluZWQsIGVycm9ycyk7CiAgICAgIGlmICghaXNFbXB0eShuYW1lRXJyb3JzKSkgewogICAgICAgIGlmIChlcnJvcnMubGVuZ3RoICYmIGVycm9ycy5sZW5ndGggPiAwKSB7CiAgICAgICAgICBlcnJvcnMgPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGVycm9ycyksIF90b0NvbnN1bWFibGVBcnJheShuYW1lRXJyb3JzKSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGVycm9ycyA9IG5hbWVFcnJvcnM7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBpZiAobm9kZVBvcnQpIHsKICAgICAgdmFyIG5wID0gcGFyc2VJbnQobm9kZVBvcnQsIDEwKTsKICAgICAgaWYgKGlzTmFOKG5wKSkgewogICAgICAgIGVycm9ycy5wdXNoKGdldHRlcnNbJ2kxOG4vdCddKCd2YWxpZGF0aW9uLnNlcnZpY2UucG9ydHMubm9kZVBvcnQucmVxdWlyZWRJbnQnLCB7CiAgICAgICAgICBwb3NpdGlvbjogaWR4CiAgICAgICAgfSkpOwogICAgICB9CiAgICB9CiAgICBpZiAocFBvcnQpIHsKICAgICAgdmFyIHAgPSBwYXJzZUludChwUG9ydCwgMTApOwogICAgICBpZiAoaXNOYU4ocCkpIHsKICAgICAgICBlcnJvcnMucHVzaChnZXR0ZXJzWydpMThuL3QnXSgndmFsaWRhdGlvbi5zZXJ2aWNlLnBvcnRzLnBvcnQucmVxdWlyZWRJbnQnLCB7CiAgICAgICAgICBwb3NpdGlvbjogaWR4CiAgICAgICAgfSkpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBlcnJvcnMucHVzaChnZXR0ZXJzWydpMThuL3QnXSgndmFsaWRhdGlvbi5zZXJ2aWNlLnBvcnRzLnBvcnQucmVxdWlyZWQnLCB7CiAgICAgICAgcG9zaXRpb246IGlkeAogICAgICB9KSk7CiAgICB9CiAgICBpZiAodGFyZ2V0UG9ydCkgewogICAgICB2YXIgdHBJYW5hRGlzcGxheUtleSA9IGdldHRlcnNbJ2kxOG4vdCddKCd2YWxpZGF0aW9uLnNlcnZpY2UucG9ydHMudGFyZ2V0UG9ydC5pYW5hQXQnLCB7CiAgICAgICAgcG9zaXRpb246IGlkeAogICAgICB9KTsKICAgICAgdmFyIHRwID0gcGFyc2VJbnQodGFyZ2V0UG9ydCwgMTApOwogICAgICB2YXIgdHBUZXN0ID0gbmV3IFJlZ0V4cCgnXlxcZCskJyk7CiAgICAgIHZhciB0YXJnZXRQb3J0SXNOdW1iZXIgPSB0cFRlc3QudGVzdCh0YXJnZXRQb3J0KTsKICAgICAgaWYgKCF0YXJnZXRQb3J0SXNOdW1iZXIpIHsKICAgICAgICAvLyBub3QgYSBudW1iZXIKICAgICAgICAvKiBbcmZjNjMzNV0oaHR0cHM6Ly90b29scy5pZXRmLm9yZy9yZmMvcmZjNjMzNS50eHQpIHBvcnQgbmFtZSAoSUFOQV9TVkNfTkFNRSkKICAgICAgICAgIEFuIGFscGhhbnVtZXJpYyAoYS16LCBhbmQgMC05KSBzdHJpbmcsIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiAxNSBjaGFyYWN0ZXJzLAogICAgICAgICAgd2l0aCB0aGUgJy0nIGNoYXJhY3RlciBhbGxvd2VkIGFueXdoZXJlIGV4Y2VwdCB0aGUgZmlyc3Qgb3IgdGhlIGxhc3QgY2hhcmFjdGVyIG9yIGFkamFjZW50IHRvIGFub3RoZXIgJy0nIGNoYXJhY3RlciwKICAgICAgICAgIGl0IG11c3QgY29udGFpbiBhdCBsZWFzdCBhKGEgLSB6KSBjaGFyYWN0ZXIKICAgICAgICAgIHZhbGlkYXRlQ2hhcnMoc3RyLCB7IHZhbGlkQ2hhcnM6ICdBLVphLXowLTlfLi0nIH0sIGRpc3BsYXlLZXksIGludGwsIGVycm9ycyk7ICovCiAgICAgICAgdmFyIG9wdHMgPSB7CiAgICAgICAgICBpYW5hU2VydmljZU5hbWU6IHRydWUsCiAgICAgICAgICBtYXhMZW5ndGg6IDE1LAogICAgICAgICAgdmFsaWRDaGFyczogJ0EtWmEtejAtOS0nCiAgICAgICAgfTsKICAgICAgICB2YXIgaXNJYW5hU2VydmljZU5hbWVFcnJvcnMgPSB2YWxpZGF0ZURuc0xhYmVsKHRhcmdldFBvcnQsIHRwSWFuYURpc3BsYXlLZXksIGdldHRlcnMsIG9wdHMsIGVycm9ycyk7CiAgICAgICAgaWYgKCFpc0VtcHR5KGlzSWFuYVNlcnZpY2VOYW1lRXJyb3JzKSkgewogICAgICAgICAgdmFyIF9lcnJvcnM7CiAgICAgICAgICAoX2Vycm9ycyA9IGVycm9ycykucHVzaC5hcHBseShfZXJyb3JzLCBfdG9Db25zdW1hYmxlQXJyYXkoaXNJYW5hU2VydmljZU5hbWVFcnJvcnMpKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAodHAgPCAxIHx8IHRwID4gNjU1MzUpIHsKICAgICAgICBlcnJvcnMucHVzaChnZXR0ZXJzWydpMThuL3QnXSgndmFsaWRhdGlvbi5zZXJ2aWNlLnBvcnRzLnRhcmdldFBvcnQuYmV0d2VlbicsIHsKICAgICAgICAgIHBvc2l0aW9uOiBpZHgKICAgICAgICB9KSk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGVycm9ycy5wdXNoKGdldHRlcnNbJ2kxOG4vdCddKCd2YWxpZGF0aW9uLnNlcnZpY2UucG9ydHMudGFyZ2V0UG9ydC5yZXF1aXJlZCcsIHsKICAgICAgICBwb3NpdGlvbjogaWR4CiAgICAgIH0pKTsKICAgIH0KICB9KTsKICByZXR1cm4gZXJyb3JzOwp9CmV4cG9ydCBmdW5jdGlvbiBjbHVzdGVySXAoc3BlYywgZ2V0dGVycywgZXJyb3JzLCB2YWxpZGF0b3JBcmdzKSB7CiAgLyoKICAgIGNsdXN0ZXJJUCBpcyB0aGUgSVAgYWRkcmVzcyBvZiB0aGUgc2VydmljZSBhbmQgaXMgdXN1YWxseSBhc3NpZ25lZCByYW5kb21seSBieSB0aGUgbWFzdGVyLgogICAgSWYgYW4gYWRkcmVzcyBpcyBzcGVjaWZpZWQgbWFudWFsbHkgYW5kIGlzIG5vdCBpbiB1c2UgYnkgb3RoZXJzLCBpdCB3aWxsIGJlIGFsbG9jYXRlZCB0byB0aGUgc2VydmljZTsgb3RoZXJ3aXNlLCBjcmVhdGlvbiBvZiB0aGUgc2VydmljZSB3aWxsIGZhaWwuCiAgICBUaGlzIGZpZWxkIGNhbiBub3QgYmUgY2hhbmdlZCB0aHJvdWdoIHVwZGF0ZXMuCiAgICBWYWxpZCB2YWx1ZXMgYXJlIFwiTm9uZVwiLCBlbXB0eSBzdHJpbmcgKFwiXCIpLCBvciBhIHZhbGlkIElQIGFkZHJlc3MuIFwiTm9uZVwiIGNhbiBiZSBzcGVjaWZpZWQgZm9yIGhlYWRsZXNzIHNlcnZpY2VzIHdoZW4gcHJveHlpbmcgaXMgbm90IHJlcXVpcmVkLgogICAgT25seSBhcHBsaWVzIHRvIHR5cGVzIENsdXN0ZXJJUCwgTm9kZVBvcnQsIGFuZCBMb2FkQmFsYW5jZXIuIElnbm9yZWQgaWYgdHlwZSBpcyBFeHRlcm5hbE5hbWUuCiAgICBNb3JlIGluZm86IGh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL2NvbmNlcHRzL3NlcnZpY2VzLW5ldHdvcmtpbmcvc2VydmljZS8jdmlydHVhbC1pcHMtYW5kLXNlcnZpY2UtcHJveGllcwogICovCiAgdmFyIHR5cGVzVG9DaGVjayA9IFsnQ2x1c3RlcklQJywgJ05vZGVQb3J0JywgJ0xvYWRCYWxhbmNlciddOwogIHZhciBzZXJ2aWNlVHlwZSA9IHNwZWMgPT09IG51bGwgfHwgc3BlYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogc3BlYy50eXBlOwogIGlmICghdHlwZXNUb0NoZWNrLmluY2x1ZGVzKHNlcnZpY2VUeXBlKSkgewogICAgLy8gdmFsaWRhdGlvbiBvbmx5IGFwcGxpZXMgdG8gc2VydmljZXMgaW4gdGhlIHR5cGVzIHRvIGNoZWNrCiAgICByZXR1cm4gZXJyb3JzOwogIH0KICByZXR1cm4gZXJyb3JzOwp9CmV4cG9ydCBmdW5jdGlvbiBleHRlcm5hbE5hbWUoc3BlYywgZ2V0dGVycywgZXJyb3JzLCB2YWxpZGF0b3JBcmdzKSB7CiAgLyoKICBleHRlcm5hbE5hbWUgaXMgdGhlIGV4dGVybmFsIHJlZmVyZW5jZSB0aGF0IGt1YmVkbnMgb3IgZXF1aXZhbGVudCB3aWxsIHJldHVybiBhcyBhIENOQU1FIHJlY29yZCBmb3IgdGhpcyBzZXJ2aWNlLgogIE5vIHByb3h5aW5nIHdpbGwgYmUgaW52b2x2ZWQuCiAgTXVzdCBiZSBhIHZhbGlkIFJGQy0xMTIzIGhvc3RuYW1lIChodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMTEyMykgYW5kIHJlcXVpcmVzIFR5cGUgdG8gYmUgRXh0ZXJuYWxOYW1lLgogICovCiAgaWYgKChzcGVjID09PSBudWxsIHx8IHNwZWMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNwZWMudHlwZSkgPT09ICdFeHRlcm5hbE5hbWUnKSB7CiAgICBpZiAoaXNFbXB0eShzcGVjID09PSBudWxsIHx8IHNwZWMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNwZWMuZXh0ZXJuYWxOYW1lKSkgewogICAgICBlcnJvcnMucHVzaChnZXR0ZXJzWydpMThuL3QnXSgndmFsaWRhdGlvbi5zZXJ2aWNlLmV4dGVybmFsTmFtZS5ub25lJykpOwogICAgfSBlbHNlIHsKICAgICAgdmFyIGhvc3ROYW1lRXJyb3JzID0gdmFsaWRhdGVIb3N0bmFtZShzcGVjLmV4dGVybmFsTmFtZSwgJ0V4dGVybmFsTmFtZScsIGdldHRlcnMsIHVuZGVmaW5lZCwgZXJyb3JzKTsKICAgICAgaWYgKCFpc0VtcHR5KGhvc3ROYW1lRXJyb3JzKSkgewogICAgICAgIGlmIChlcnJvcnMubGVuZ3RoICYmIGVycm9ycy5sZW5ndGggPiAwKSB7CiAgICAgICAgICBlcnJvcnMgPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGVycm9ycyksIF90b0NvbnN1bWFibGVBcnJheShob3N0TmFtZUVycm9ycykpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBlcnJvcnMgPSBob3N0TmFtZUVycm9yczsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CiAgcmV0dXJuIGVycm9yczsKfQ=="},{"version":3,"names":["isEmpty","validateDnsLabel","validateHostname","servicePort","spec","getters","errors","validatorArgs","ports","serviceType","type","push","key","forEach","port","ind","ary","name","nodePort","pPort","targetPort","idx","length","position","nameErrors","undefined","concat","_toConsumableArray","np","parseInt","isNaN","p","tpIanaDisplayKey","tp","tpTest","RegExp","targetPortIsNumber","test","opts","ianaServiceName","maxLength","validChars","isIanaServiceNameErrors","_errors","apply","clusterIp","typesToCheck","includes","externalName","hostNameErrors"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/validators/service.js"],"sourcesContent":["import isEmpty from 'lodash/isEmpty';\nimport { validateDnsLabel, validateHostname } from '@shell/utils/validators';\n\nexport function servicePort(spec, getters, errors, validatorArgs) {\n  const { ports, type: serviceType } = spec;\n\n  if (serviceType === 'ExternalName') {\n    return errors;\n  }\n\n  if (isEmpty(ports)) {\n    errors.push(getters['i18n/t']('validation.required', { key: 'Port Rules' }));\n\n    return errors;\n  }\n\n  ports.forEach((port, ind, ary) => {\n    const {\n      name,\n      nodePort,\n      port: pPort,\n      targetPort,\n    } = port;\n    const idx = ind + 1;\n\n    if (ary.length > 1 && isEmpty(name)) {\n      errors.push(getters['i18n/t']('validation.service.ports.name.required', { position: idx }));\n    }\n\n    if (!isEmpty(name)) {\n      const nameErrors = validateDnsLabel(name, 'name', getters, undefined, errors);\n\n      if (!isEmpty(nameErrors)) {\n        if (errors.length && errors.length > 0) {\n          errors = [...errors, ...nameErrors];\n        } else {\n          errors = nameErrors;\n        }\n      }\n    }\n\n    if (nodePort) {\n      const np = parseInt(nodePort, 10);\n\n      if (isNaN(np)) {\n        errors.push(getters['i18n/t']('validation.service.ports.nodePort.requiredInt', { position: idx }));\n      }\n    }\n\n    if (pPort) {\n      const p = parseInt(pPort, 10);\n\n      if (isNaN(p)) {\n        errors.push(getters['i18n/t']('validation.service.ports.port.requiredInt', { position: idx }));\n      }\n    } else {\n      errors.push(getters['i18n/t']('validation.service.ports.port.required', { position: idx }));\n    }\n\n    if (targetPort) {\n      const tpIanaDisplayKey = getters['i18n/t']('validation.service.ports.targetPort.ianaAt', { position: idx });\n      const tp = parseInt(targetPort, 10);\n      const tpTest = new RegExp('^\\\\d+$');\n      const targetPortIsNumber = tpTest.test(targetPort);\n\n      if (!targetPortIsNumber) { // not a number\n        /* [rfc6335](https://tools.ietf.org/rfc/rfc6335.txt) port name (IANA_SVC_NAME)\n          An alphanumeric (a-z, and 0-9) string, with a maximum length of 15 characters,\n          with the '-' character allowed anywhere except the first or the last character or adjacent to another '-' character,\n          it must contain at least a(a - z) character\n          validateChars(str, { validChars: 'A-Za-z0-9_.-' }, displayKey, intl, errors); */\n        const opts = {\n          ianaServiceName: true,\n          maxLength:       15,\n          validChars:      'A-Za-z0-9-',\n        };\n        const isIanaServiceNameErrors = validateDnsLabel(targetPort, tpIanaDisplayKey, getters, opts, errors);\n\n        if (!isEmpty(isIanaServiceNameErrors)) {\n          errors.push(...isIanaServiceNameErrors);\n        }\n      } else if (tp < 1 || tp > 65535) {\n        errors.push(getters['i18n/t']('validation.service.ports.targetPort.between', { position: idx }));\n      }\n    } else {\n      errors.push(getters['i18n/t']('validation.service.ports.targetPort.required', { position: idx }));\n    }\n  });\n\n  return errors;\n}\n\nexport function clusterIp(spec, getters, errors, validatorArgs) {\n  /*\n    clusterIP is the IP address of the service and is usually assigned randomly by the master.\n    If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail.\n    This field can not be changed through updates.\n    Valid values are \\\"None\\\", empty string (\\\"\\\"), or a valid IP address. \\\"None\\\" can be specified for headless services when proxying is not required.\n    Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName.\n    More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n  */\n  const typesToCheck = ['ClusterIP', 'NodePort', 'LoadBalancer'];\n  const serviceType = spec?.type;\n\n  if (!typesToCheck.includes(serviceType)) {\n    // validation only applies to services in the types to check\n    return errors;\n  }\n\n  return errors;\n}\n\nexport function externalName(spec, getters, errors, validatorArgs) {\n  /*\n  externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service.\n  No proxying will be involved.\n  Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.\n  */\n  if (spec?.type === 'ExternalName') {\n    if (isEmpty(spec?.externalName)) {\n      errors.push(getters['i18n/t']('validation.service.externalName.none'));\n    } else {\n      const hostNameErrors = validateHostname(spec.externalName, 'ExternalName', getters, undefined, errors);\n\n      if (!isEmpty(hostNameErrors)) {\n        if (errors.length && errors.length > 0) {\n          errors = [...errors, ...hostNameErrors];\n        } else {\n          errors = hostNameErrors;\n        }\n      }\n    }\n  }\n\n  return errors;\n}\n"],"mappings":"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"}]}