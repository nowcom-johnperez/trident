{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js??ref--17-0!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js??ref--17-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/config/pod-security-admission.ts","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/config/pod-security-admission.ts","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js","mtime":1716430466133}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eSI7CmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSAiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmFzc2lnbi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7Ci8qKgogKiBBbGwgdGhlIFBTQSBsYWJlbHMgYXJlIGNyZWF0ZWQgd2l0aCB0aGlzIHByZWZpeCwgc28gd2UgY2FuIHVzZSB0aGlzIHRvIGlkZW50aWZ5IHRoZW0KICovCmV4cG9ydCB2YXIgUFNBTGFiZWxQcmVmaXggPSAncG9kLXNlY3VyaXR5Lmt1YmVybmV0ZXMuaW8vJzsKLyoqCiAqIERlZmF1bHQgbW9kZXMgb2YgcmVzdHJpY3Rpb25zIHVzZWQgZm9yIFBTQQogKi8KZXhwb3J0IHZhciBQU0FNb2RlcyA9IFsnZW5mb3JjZScsICdhdWRpdCcsICd3YXJuJ107Ci8qKgogKiBMZXZlbHMgb2YgcmVzdHJpY3Rpb25zIGZvciB0aGUgUFNBCiAqLwpleHBvcnQgdmFyIFBTQUxldmVscyA9IFsncHJpdmlsZWdlZCcsICdiYXNlbGluZScsICdyZXN0cmljdGVkJ107Ci8qKgogKiBVc2VkIGZvciByZXN0cmljdGlvbnMgaW4gdGVtcGxhdGVzCiAqLwpleHBvcnQgdmFyIFBTQURpbWVuc2lvbnMgPSBbJ3VzZXJuYW1lcycsICdydW50aW1lQ2xhc3NlcycsICduYW1lc3BhY2VzJ107Ci8qKgogKiBGb3IgdGhlIFVJLCB3ZSBwcmVmZXIgdXNlIHRoaXMgdmFsdWUgYXMgZGVmYXVsdCBvbmUKICovCmV4cG9ydCB2YXIgUFNBRGVmYXVsdExldmVsID0gUFNBTGV2ZWxzWzBdOwovKioKICogRGVmYXVsdCB2YWx1ZXMgZm9yIFBTQSBzaG91bGQgYWx3YXlzIGJlIHRoaXMgb25lCiAqLwpleHBvcnQgdmFyIFBTQURlZmF1bHRWZXJzaW9uID0gJ2xhdGVzdCc7Ci8qKgogKiBQU0EgbGFiZWxzIGZvciBuYW1lc3BhY2VzLgogKiBNT0RFIG11c3QgYmUgb25lIG9mIGBlbmZvcmNlYCwgYGF1ZGl0YCwgb3IgYHdhcm5gLgogKiBMRVZFTCBtdXN0IGJlIG9uZSBvZiBgcHJpdmlsZWdlZGAsIGBiYXNlbGluZWAsIG9yIGByZXN0cmljdGVkYC4KICogcG9kLXNlY3VyaXR5Lmt1YmVybmV0ZXMuaW8vPE1PREU+OiA8TEVWRUw+CiAqCiAqIE9wdGlvbmFsOiBwZXItbW9kZSB2ZXJzaW9uIGxhYmVsIHRoYXQgY2FuIGJlIHVzZWQgdG8gcGluIHRoZSBwb2xpY3kgdG8gdGhlCiAqIHZlcnNpb24gdGhhdCBzaGlwcGVkIHdpdGggYSBnaXZlbiBLdWJlcm5ldGVzIG1pbm9yIHZlcnNpb24gKGZvciBleGFtcGxlIHYxLjI1KS4KICoKICogaHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvc2VjdXJpdHkvcG9kLXNlY3VyaXR5LWFkbWlzc2lvbi8jcG9kLXNlY3VyaXR5LWFkbWlzc2lvbi1sYWJlbHMtZm9yLW5hbWVzcGFjZXMKICovCmV4cG9ydCB2YXIgUFNBTGFiZWxzTmFtZXNwYWNlTW9kZSA9IFBTQU1vZGVzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBtb2RlKSB7CiAgcmV0dXJuIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYWNjKSwgWyIiLmNvbmNhdChQU0FMYWJlbFByZWZpeCkuY29uY2F0KG1vZGUpXSk7Cn0sIFtdKTsKLyoqCiAqIFBTQSBsYWJlbHMgZm9yIG5hbWVzcGFjZXMuCiAqIE1PREUgbXVzdCBiZSBvbmUgb2YgYGVuZm9yY2VgLCBgYXVkaXRgLCBvciBgd2FybmAuCiAqIFZFUlNJT04gbXVzdCBiZSBhIHZhbGlkIEt1YmVybmV0ZXMgbWlub3IgdmVyc2lvbiwgb3IgYGxhdGVzdGAuCiAqIHBvZC1zZWN1cml0eS5rdWJlcm5ldGVzLmlvLzxNT0RFPi12ZXJzaW9uOiA8VkVSU0lPTj4KICoKICogaHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvc2VjdXJpdHkvcG9kLXNlY3VyaXR5LWFkbWlzc2lvbi8jcG9kLXNlY3VyaXR5LWFkbWlzc2lvbi1sYWJlbHMtZm9yLW5hbWVzcGFjZXMKICovCmV4cG9ydCB2YXIgUFNBTGFiZWxzTmFtZXNwYWNlVmVyc2lvbiA9IFBTQU1vZGVzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBtb2RlKSB7CiAgcmV0dXJuIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYWNjKSwgWyIiLmNvbmNhdChQU0FMYWJlbFByZWZpeCkuY29uY2F0KG1vZGUsICItdmVyc2lvbiIpXSk7Cn0sIFtdKTsKLyoqCiAqIFBTQSBsYWJlbHMgZm9yIG5hbWVzcGFjZXMuCiAqIE1PREUgbXVzdCBiZSBvbmUgb2YgYGVuZm9yY2VgLCBgYXVkaXRgLCBvciBgd2FybmAuCiAqIExFVkVMIG11c3QgYmUgb25lIG9mIGBwcml2aWxlZ2VkYCwgYGJhc2VsaW5lYCwgb3IgYHJlc3RyaWN0ZWRgLgogKiBwb2Qtc2VjdXJpdHkua3ViZXJuZXRlcy5pby88TU9ERT46IDxMRVZFTD4KICoKICogT3B0aW9uYWw6IHBlci1tb2RlIHZlcnNpb24gbGFiZWwgdGhhdCBjYW4gYmUgdXNlZCB0byBwaW4gdGhlIHBvbGljeSB0byB0aGUKICogdmVyc2lvbiB0aGF0IHNoaXBwZWQgd2l0aCBhIGdpdmVuIEt1YmVybmV0ZXMgbWlub3IgdmVyc2lvbiAoZm9yIGV4YW1wbGUgdjEuMjUpLgogKgogKiBNT0RFIG11c3QgYmUgb25lIG9mIGBlbmZvcmNlYCwgYGF1ZGl0YCwgb3IgYHdhcm5gLgogKiBWRVJTSU9OIG11c3QgYmUgYSB2YWxpZCBLdWJlcm5ldGVzIG1pbm9yIHZlcnNpb24sIG9yIGBsYXRlc3RgLgogKiBwb2Qtc2VjdXJpdHkua3ViZXJuZXRlcy5pby88TU9ERT4tdmVyc2lvbjogPFZFUlNJT04+CiAqCiAqIGh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL2NvbmNlcHRzL3NlY3VyaXR5L3BvZC1zZWN1cml0eS1hZG1pc3Npb24vI3BvZC1zZWN1cml0eS1hZG1pc3Npb24tbGFiZWxzLWZvci1uYW1lc3BhY2VzCiAqLwpleHBvcnQgdmFyIFBTQUxhYmVsc05hbWVzcGFjZXMgPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KFBTQUxhYmVsc05hbWVzcGFjZU1vZGUpLCBfdG9Db25zdW1hYmxlQXJyYXkoUFNBTGFiZWxzTmFtZXNwYWNlVmVyc2lvbikpOwovKioKICogR2VuZXJhdGVkIHRhYmxlIG9mIGljb25zIHdpdGggb3IgaGFyZGNvZGVkIGdlbmVyYXRlZCBQU0EgbGFiZWxzCiAqLwpleHBvcnQgdmFyIFBTQUljb25zRGlzcGxheSA9IE9iamVjdC5hc3NpZ24uYXBwbHkoT2JqZWN0LCBbe31dLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoUFNBTGFiZWxzTmFtZXNwYWNlcy5tYXAoZnVuY3Rpb24gKHBzYSkgewogIHJldHVybiBfZGVmaW5lUHJvcGVydHkoe30sIHBzYSwgJ2ljb24tcG9kX3NlY3VyaXR5Jyk7Cn0pKSkpOw=="},{"version":3,"names":["PSALabelPrefix","PSAModes","PSALevels","PSADimensions","PSADefaultLevel","PSADefaultVersion","PSALabelsNamespaceMode","reduce","acc","mode","concat","_toConsumableArray","PSALabelsNamespaceVersion","PSALabelsNamespaces","PSAIconsDisplay","Object","assign","apply","map","psa","_defineProperty"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/config/pod-security-admission.ts"],"sourcesContent":["import { PSADimension, PSALevel, PSAMode } from '@shell/types/pod-security-admission';\n\n/**\n * All the PSA labels are created with this prefix, so we can use this to identify them\n */\nexport const PSALabelPrefix = 'pod-security.kubernetes.io/';\n\n/**\n * Default modes of restrictions used for PSA\n */\nexport const PSAModes: PSAMode[] = ['enforce', 'audit', 'warn'];\n\n/**\n * Levels of restrictions for the PSA\n */\nexport const PSALevels: PSALevel[] = ['privileged', 'baseline', 'restricted'];\n\n/**\n * Used for restrictions in templates\n */\nexport const PSADimensions: PSADimension[] = ['usernames', 'runtimeClasses', 'namespaces'];\n\n/**\n * For the UI, we prefer use this value as default one\n */\nexport const PSADefaultLevel = PSALevels[0];\n\n/**\n * Default values for PSA should always be this one\n */\nexport const PSADefaultVersion = 'latest';\n\n/**\n * PSA labels for namespaces.\n * MODE must be one of `enforce`, `audit`, or `warn`.\n * LEVEL must be one of `privileged`, `baseline`, or `restricted`.\n * pod-security.kubernetes.io/<MODE>: <LEVEL>\n *\n * Optional: per-mode version label that can be used to pin the policy to the\n * version that shipped with a given Kubernetes minor version (for example v1.25).\n *\n * https://kubernetes.io/docs/concepts/security/pod-security-admission/#pod-security-admission-labels-for-namespaces\n */\nexport const PSALabelsNamespaceMode = PSAModes.reduce((acc, mode) => [\n  ...acc,\n  `${ PSALabelPrefix }${ mode }`,\n], [] as string[]);\n\n/**\n * PSA labels for namespaces.\n * MODE must be one of `enforce`, `audit`, or `warn`.\n * VERSION must be a valid Kubernetes minor version, or `latest`.\n * pod-security.kubernetes.io/<MODE>-version: <VERSION>\n *\n * https://kubernetes.io/docs/concepts/security/pod-security-admission/#pod-security-admission-labels-for-namespaces\n */\nexport const PSALabelsNamespaceVersion = PSAModes.reduce((acc, mode) => [\n  ...acc,\n  `${ PSALabelPrefix }${ mode }-version`\n], [] as string[]);\n\n/**\n * PSA labels for namespaces.\n * MODE must be one of `enforce`, `audit`, or `warn`.\n * LEVEL must be one of `privileged`, `baseline`, or `restricted`.\n * pod-security.kubernetes.io/<MODE>: <LEVEL>\n *\n * Optional: per-mode version label that can be used to pin the policy to the\n * version that shipped with a given Kubernetes minor version (for example v1.25).\n *\n * MODE must be one of `enforce`, `audit`, or `warn`.\n * VERSION must be a valid Kubernetes minor version, or `latest`.\n * pod-security.kubernetes.io/<MODE>-version: <VERSION>\n *\n * https://kubernetes.io/docs/concepts/security/pod-security-admission/#pod-security-admission-labels-for-namespaces\n */\nexport const PSALabelsNamespaces: string[] = [...PSALabelsNamespaceMode, ...PSALabelsNamespaceVersion];\n\n/**\n * Generated table of icons with or hardcoded generated PSA labels\n */\nexport const PSAIconsDisplay: Record<string, string> = Object.assign({}, ...PSALabelsNamespaces.map((psa) => ({ [psa]: 'icon-pod_security' })));\n"],"mappings":";;;;;;AAEA;;;AAGA,OAAO,IAAMA,cAAc,GAAG,6BAA6B;AAE3D;;;AAGA,OAAO,IAAMC,QAAQ,GAAc,CAAC,SAAS,EAAE,OAAO,EAAE,MAAM,CAAC;AAE/D;;;AAGA,OAAO,IAAMC,SAAS,GAAe,CAAC,YAAY,EAAE,UAAU,EAAE,YAAY,CAAC;AAE7E;;;AAGA,OAAO,IAAMC,aAAa,GAAmB,CAAC,WAAW,EAAE,gBAAgB,EAAE,YAAY,CAAC;AAE1F;;;AAGA,OAAO,IAAMC,eAAe,GAAGF,SAAS,CAAC,CAAC,CAAC;AAE3C;;;AAGA,OAAO,IAAMG,iBAAiB,GAAG,QAAQ;AAEzC;;;;;;;;;;;AAWA,OAAO,IAAMC,sBAAsB,GAAGL,QAAQ,CAACM,MAAM,CAAC,UAACC,GAAG,EAAEC,IAAI;EAAA,UAAAC,MAAA,CAAAC,kBAAA,CAC3DH,GAAG,OAAAE,MAAA,CACFV,cAAe,EAAAU,MAAA,CAAID,IAAK;AAAA,CAC7B,EAAE,EAAc,CAAC;AAElB;;;;;;;;AAQA,OAAO,IAAMG,yBAAyB,GAAGX,QAAQ,CAACM,MAAM,CAAC,UAACC,GAAG,EAAEC,IAAI;EAAA,UAAAC,MAAA,CAAAC,kBAAA,CAC9DH,GAAG,OAAAE,MAAA,CACFV,cAAe,EAAAU,MAAA,CAAID,IAAK;AAAA,CAC7B,EAAE,EAAc,CAAC;AAElB;;;;;;;;;;;;;;;AAeA,OAAO,IAAMI,mBAAmB,MAAAH,MAAA,CAAAC,kBAAA,CAAiBL,sBAAsB,GAAAK,kBAAA,CAAKC,yBAAyB,EAAC;AAEtG;;;AAGA,OAAO,IAAME,eAAe,GAA2BC,MAAM,CAACC,MAAM,CAAAC,KAAA,CAAbF,MAAM,GAAQ,EAAE,EAAAL,MAAA,CAAAC,kBAAA,CAAKE,mBAAmB,CAACK,GAAG,CAAC,UAACC,GAAG;EAAA,OAAAC,eAAA,KAASD,GAAG,EAAG,mBAAmB;AAAA,CAAG,CAAC,GAAC"}]}