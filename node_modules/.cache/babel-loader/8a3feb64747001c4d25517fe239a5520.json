{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/RelatedResources.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/RelatedResources.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["ResourceTable","colorForState","stateDisplay","NAME","NAMESPACE","STATE","TYPE","sortableNumericSuffix","EXPLORER","BadgeState","components","props","value","type","Object","required","rel","String","default","direction","ignoreTypes","Array","_default","data","loadedResources","computed","filteredRelationships","_this$value","_this","all","metadata","relationships","filter","relationship","concat","includes","rows","cluster","$store","getters","inStore","out","_iterator","_createForOfIteratorHelper","_step","s","n","done","r","state","stateColor","error","transitioning","schema","name","namespace","idx","indexOf","key","substr","detailLocation","params","product","resource","id","push","real","_key","nameDisplay","nameSort","toLowerCase","typeDisplay","stateBackground","replace","groupByLabel","err","e","f","headers","methods","getRealResources","_this2","_asyncToGenerator","regeneratorRuntime","mark","_callee","res","i","wrap","_callee$","_context","prev","next","Promise","allSettled","map","row","dispatch","sent","length","status","abrupt","stop"],"sources":["node_modules/@rancher/shell/components/RelatedResources.vue"],"sourcesContent":["<script>\nimport ResourceTable from '@shell/components/ResourceTable';\nimport { colorForState, stateDisplay } from '@shell/plugins/dashboard-store/resource-class';\nimport { NAME, NAMESPACE, STATE, TYPE } from '@shell/config/table-headers';\nimport { sortableNumericSuffix } from '@shell/utils/sort';\nimport { NAME as EXPLORER } from '@shell/config/product/explorer';\nimport { BadgeState } from '@components/BadgeState';\n\nexport default {\n  components: { ResourceTable, BadgeState },\n\n  props: {\n    value: {\n      type:     Object,\n      required: true,\n    },\n\n    rel: {\n      type:    String,\n      default: null,\n    },\n\n    direction: {\n      type:    String,\n      default: 'to'\n    },\n\n    ignoreTypes: {\n      type:    Array,\n      default: () => []\n    }\n  },\n\n  data() {\n    return { loadedResources: 1 };\n  },\n\n  computed: {\n    filteredRelationships() {\n      let all = this.value?.metadata?.relationships || [];\n\n      // @TODO probably will need more flexible filtering here for\n      // related resources other than helm app resources...\n\n      all = all.filter((relationship) => {\n        const type = relationship[`${ this.direction }Type`];\n\n        if (!type || this.ignoreTypes.includes(type)) {\n          return false;\n        }\n\n        if (this.rel && relationship.rel !== this.rel) {\n          return false;\n        }\n\n        return true;\n      });\n\n      return all;\n    },\n\n    rows() {\n      if ( this.loadedResources < 1 ) {\n        // This does nothing except force recompute when loaded resources change below\n        return;\n      }\n\n      const cluster = this.$store.getters['clusterId'];\n      const inStore = this.$store.getters['currentStore']();\n      const out = [];\n\n      for ( const r of this.filteredRelationships) {\n        const state = r.state || 'active';\n        const stateColor = colorForState(state, r.error, r.transitioning);\n        const type = r[`${ this.direction }Type`];\n        const schema = this.$store.getters[`${ inStore }/schemaFor`](type);\n\n        let name = r[`${ this.direction }Id`];\n\n        // Skip things like toType/toNamespace+selector for now\n        if ( !name ) {\n          continue;\n        }\n\n        let namespace = null;\n        const idx = name.indexOf('/');\n        const key = `${ type }/${ namespace }/${ name }`;\n\n        if ( idx > 0 ) {\n          namespace = name.substr(0, idx);\n          name = name.substr(idx + 1);\n        }\n\n        const detailLocation = {\n          name:   `c-cluster-product-resource${ namespace ? '-namespace' : '' }-id`,\n          params: {\n            product:  EXPLORER,\n            cluster:  inStore === 'management' ? 'local' : cluster,\n            resource: type,\n            namespace,\n            id:       name,\n          }\n        };\n\n        out.push({\n          type,\n          real:     this.$store.getters[`${ inStore }/byId`](type, r[`${ this.direction }Id`]),\n          id:       r[`${ this.direction }Id`],\n          state,\n          metadata: { namespace, name },\n          _key:     key,\n\n          name,\n          namespace,\n          nameDisplay: name,\n          nameSort:    sortableNumericSuffix(name).toLowerCase(),\n\n          stateColor,\n          detailLocation,\n          typeDisplay:     this.$store.getters['type-map/labelFor'](schema),\n          stateDisplay:    stateDisplay(state),\n          stateBackground: stateColor.replace('text-', 'bg-'),\n          groupByLabel:    namespace,\n        });\n      }\n\n      return out;\n    },\n\n    headers() {\n      return [\n        STATE,\n        TYPE,\n        NAME,\n        NAMESPACE,\n      ];\n    },\n  },\n\n  methods: {\n    async getRealResources(rows) {\n      const inStore = this.$store.getters['currentStore']();\n\n      const res = await Promise.allSettled(rows.map((row) => {\n        return this.$store.dispatch(`${ inStore }/find`, { type: row.type, id: row.id });\n      }));\n\n      const out = [];\n\n      for ( let i = 0 ; i < res.length ; i++ ) {\n        if ( res[i].status === 'fulfilled' ) {\n          out.push(res[i].value);\n        }\n      }\n\n      this.loadedResources++;\n\n      return out;\n    }\n  },\n};\n</script>\n\n<template>\n  <ResourceTable\n    :schema=\"null\"\n    :rows=\"rows\"\n    :headers=\"headers\"\n    :search=\"false\"\n    :table-actions=\"false\"\n    :namespaced=\"true\"\n    :mangle-action-resources=\"getRealResources\"\n    paging-label=\"sortableTable.paging.generic\"\n    :groupable=\"false\"\n  >\n    <template #cell:state=\"{row}\">\n      <BadgeState\n        v-if=\"row.real\"\n        :value=\"row.real\"\n      />\n      <BadgeState\n        v-else\n        :value=\"row\"\n      />\n    </template>\n  </ResourceTable>\n</template>\n"],"mappings":"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"}]}