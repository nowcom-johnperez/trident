{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/detail/provisioning.cattle.io.cluster.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/detail/provisioning.cattle.io.cluster.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["Loading","Banner","ResourceTable","defaultTableSortGenerationFn","ResourceTabs","SortableTable","CopyCode","Tab","allHash","CAPI","MANAGEMENT","NORMAN","SNAPSHOT","STATE","NAME","NAME_COL","AGE","AGE_NORMAN","INTERNAL_EXTERNAL_IP","STATE_NORMAN","ROLES","MACHINE_NODE_OS","MANAGEMENT_NODE_OS","STATES_ENUM","CustomCommand","AsyncButton","AnsiUp","day","addParams","base64Decode","DATE_FORMAT","TIME_FORMAT","SCALE_POOL_PROMPT","escapeHtml","MachineSummaryGraph","Socket","EVENT_CONNECTED","EVENT_DISCONNECTED","EVENT_MESSAGE","EVENT_CONNECT_ERROR","get","CapiMachineDeployment","isAlternate","lastId","ansiup","EmptyCapiMachineDeployment","_CapiMachineDeploymen","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","_clusterSpec","_cluster","_template","components","props","value","type","Object","default","_default","fetch","_this","_asyncToGenerator","regeneratorRuntime","mark","_callee","_thisClusterMachines$","extClass","fetchOne","fetchOneRes","fetchTwo","thisClusterMachines","machineDeploymentTemplateType","fetchTwoRes","wrap","_callee$","_context","prev","next","waitForProvisioner","$plugin","getDynamic","machineProvider","extProvider","dispatch","$store","getters","axios","$axios","app","$t","t","extDetailTabs","_objectSpread","detailTabs","extCustomParams","provider","MACHINE_DEPLOYMENT","machineDeployments","MACHINE","machines","snapshots","isImported","isCustom","isHostedKubernetesProvider","clusterToken","getOrCreateToken","CLUSTER","normanClusters","isRke1","etcdBackups","ETCD_BACKUP","normanNodePools","NODE_POOL","sent","allMachines","allMachineDeployments","haveMachines","haveDeployments","hasLocalAccess","find","c","internal","filter","deployment","_deployment$spec","spec","clusterName","metadata","name","templateType","mdtt","showMachines","NODE","allNodes","allNodePools","NODE_TEMPLATE","nodeTemplates","haveNodes","haveNodePools","machineTemplates","RKE_TEMPLATE","RKE_TEMPLATE_REVISION","stop","created","showLog","connectLog","beforeDestroy","logSocket","disconnect","data","mgmtNodeSchema","machineSchema","logOpen","logs","registration","related","events","conditions","showWindowsWarning","watch","showNodes","neu","computed","defaultTab","showRegistration","_this$machines","_this$nodes","isRke2","length","nodes","poolSummaryInfo","_this$value","info","pools","forEach","p","group","concat","id","fakeMachines","_this$value$spec$rkeC","_this2","machineNameFn","machinePoolName","emptyPools","rkeConfig","machinePools","mp","machineFullName","machine","_machine$spec","_machine$spec2","_machine$metadata","_machine$metadata2","isElementalCluster","infrastructureRef","apiVersion","startsWith","machinePoolInfName","includes","machineLabelClusterName","labels","machineLabelPoolName","manchineLabelFullName","map","i","pool","nameDisplay","namespace","rootGetters","$root","templateNamePrefix","poolId","mainRowKey","availableActions","_toConsumableArray","_this3","x","mgmtClusterId","fakeNodes","_this4","emptyNodePools","quantity","np","nodePoolName","replace","showSnapshots","showEksNodeGroupWarning","provisioner","state","ACTIVE","desiredTotal","eksNodeGroups","g","desiredSize","machineHeaders","labelKey","sort","formatter","formatterOpts","reference","dashIfEmpty","mgmtNodeSchemaHeaders","rke1Snapshots","_this$value$mgmt","mgmtId","mgmt","clusterId","rke2Snapshots","etcdSnapshots","rke1SnapshotHeaders","canBeVariable","width","align","rke2SnapshotHeaders","arbitrary","_this$value$mgmt2","isReady","isClusterReady","_this$value$mgmt3","_this$value$mgmt4","hasLink","dateTimeFormatStr","dateFormat","timeFormatStr","hasWindowsMachine","some","snapshotsGroupBy","mounted","window","methods","toggleScaleDownModal","event","resources","alt","showScalePoolPrompt","component","modalWidth","scalePool","takeSnapshot","btnCb","_this5","_callee2","_callee2$","_context2","setTimeout","t0","title","err","showPoolAction","commit","elem","target","showPoolActionButton","_pool$availableAction","_this6","_callee3","_this6$value$mgmt","params","url","_callee3$","_context3","follow","timestamps","pretty","linkFor","addEventListener","e","console","error","line","detail","msg","time","idx","indexOf","timeStr","substr","date","Date","isNaN","getSeconds","toISOString","push","ansi_to_html","rawMsg","connect","format","val","today","machineSortGenerationFn","base","nodeSortGenerationFn"],"sources":["node_modules/@rancher/shell/detail/provisioning.cattle.io.cluster.vue"],"sourcesContent":["<script>\nimport Loading from '@shell/components/Loading';\nimport { Banner } from '@components/Banner';\nimport ResourceTable, { defaultTableSortGenerationFn } from '@shell/components/ResourceTable';\nimport ResourceTabs from '@shell/components/form/ResourceTabs';\nimport SortableTable from '@shell/components/SortableTable';\nimport CopyCode from '@shell/components/CopyCode';\nimport Tab from '@shell/components/Tabbed/Tab';\nimport { allHash } from '@shell/utils/promise';\nimport { CAPI, MANAGEMENT, NORMAN, SNAPSHOT } from '@shell/config/types';\nimport {\n  STATE, NAME as NAME_COL, AGE, AGE_NORMAN, INTERNAL_EXTERNAL_IP, STATE_NORMAN, ROLES, MACHINE_NODE_OS, MANAGEMENT_NODE_OS, NAME,\n} from '@shell/config/table-headers';\nimport { STATES_ENUM } from '@shell/plugins/dashboard-store/resource-class';\nimport CustomCommand from '@shell/edit/provisioning.cattle.io.cluster/CustomCommand';\nimport AsyncButton from '@shell/components/AsyncButton.vue';\nimport AnsiUp from 'ansi_up';\nimport day from 'dayjs';\nimport { addParams } from '@shell/utils/url';\nimport { base64Decode } from '@shell/utils/crypto';\nimport { DATE_FORMAT, TIME_FORMAT, SCALE_POOL_PROMPT } from '@shell/store/prefs';\nimport { escapeHtml } from '@shell/utils/string';\nimport MachineSummaryGraph from '@shell/components/formatter/MachineSummaryGraph';\nimport Socket, {\n  EVENT_CONNECTED,\n  EVENT_DISCONNECTED,\n  EVENT_MESSAGE,\n  //  EVENT_FRAME_TIMEOUT,\n  EVENT_CONNECT_ERROR\n} from '@shell/utils/socket';\nimport { get } from '@shell/utils/object';\nimport CapiMachineDeployment from '@shell/models/cluster.x-k8s.io.machinedeployment';\nimport { isAlternate } from '@shell/utils/platform';\n\nlet lastId = 1;\nconst ansiup = new AnsiUp();\n\n/**\n * Machine Deployment has a reference to the 'template' used to create that deployment\n * For an empty machine pool, we (obviously) don't get any machine deployments for that pool.\n *\n * This class allows us to fake a machine deployment - when created, we set additional properties (_cluster etc)\n * and use these in the getters.\n **/\nclass EmptyCapiMachineDeployment extends CapiMachineDeployment {\n  get inClusterSpec() {\n    return this._clusterSpec;\n  }\n\n  get cluster() {\n    return this._cluster;\n  }\n\n  get template() {\n    return this._template;\n  }\n}\n\nexport default {\n  components: {\n    Loading,\n    Banner,\n    ResourceTable,\n    ResourceTabs,\n    SortableTable,\n    Tab,\n    CopyCode,\n    CustomCommand,\n    AsyncButton,\n    MachineSummaryGraph,\n  },\n\n  props: {\n    value: {\n      type:    Object,\n      default: () => {\n        return {};\n      }\n    }\n  },\n\n  async fetch() {\n    await this.value.waitForProvisioner();\n\n    const extClass = this.$plugin.getDynamic('provisioner', this.value.machineProvider);\n\n    if (extClass) {\n      this.extProvider = new extClass({\n        dispatch: this.$store.dispatch,\n        getters:  this.$store.getters,\n        axios:    this.$store.$axios,\n        $plugin:  this.$store.app.$plugin,\n        $t:       this.t\n      });\n      this.extDetailTabs = {\n        ...this.extDetailTabs,\n        ...this.extProvider.detailTabs\n      };\n      this.extCustomParams = { provider: this.value.machineProvider };\n    }\n\n    const fetchOne = {};\n\n    if ( this.$store.getters['management/canList'](CAPI.MACHINE_DEPLOYMENT) ) {\n      fetchOne.machineDeployments = this.$store.dispatch('management/findAll', { type: CAPI.MACHINE_DEPLOYMENT });\n    }\n\n    if ( this.$store.getters['management/canList'](CAPI.MACHINE) ) {\n      fetchOne.machines = this.$store.dispatch('management/findAll', { type: CAPI.MACHINE });\n    }\n\n    if ( this.$store.getters['management/canList'](SNAPSHOT) ) {\n      fetchOne.snapshots = this.$store.dispatch('management/findAll', { type: SNAPSHOT });\n    }\n\n    if ( this.value.isImported || this.value.isCustom || this.value.isHostedKubernetesProvider ) {\n      fetchOne.clusterToken = this.value.getOrCreateToken();\n    }\n\n    // Need to get Norman clusters so that we can check if user has permissions to access the local cluster\n    if ( this.$store.getters['rancher/canList'](NORMAN.CLUSTER) ) {\n      fetchOne.normanClusters = this.$store.dispatch('rancher/findAll', { type: NORMAN.CLUSTER });\n    }\n\n    if ( this.value.isRke1 && this.$store.getters['isRancher'] ) {\n      fetchOne.etcdBackups = this.$store.dispatch('rancher/findAll', { type: NORMAN.ETCD_BACKUP });\n\n      fetchOne.normanNodePools = this.$store.dispatch('rancher/findAll', { type: NORMAN.NODE_POOL });\n    }\n\n    const fetchOneRes = await allHash(fetchOne);\n\n    this.allMachines = fetchOneRes.machines || [];\n    this.allMachineDeployments = fetchOneRes.machineDeployments || [];\n    this.haveMachines = !!fetchOneRes.machines;\n    this.haveDeployments = !!fetchOneRes.machineDeployments;\n    this.clusterToken = fetchOneRes.clusterToken;\n    this.etcdBackups = fetchOneRes.etcdBackups;\n\n    if (fetchOneRes.normanClusters) {\n      // Does the user have access to the local cluster? Need to in order to be able to show the 'Related Resources' tab\n      this.hasLocalAccess = !!fetchOneRes.normanClusters.find((c) => c.internal);\n    }\n\n    const fetchTwo = {};\n\n    const thisClusterMachines = this.allMachineDeployments.filter((deployment) => {\n      return deployment?.spec?.clusterName === this.value.metadata.name;\n    });\n\n    const machineDeploymentTemplateType = thisClusterMachines?.[0]?.templateType;\n\n    if (machineDeploymentTemplateType && this.$store.getters['management/schemaFor'](machineDeploymentTemplateType) ) {\n      fetchTwo.mdtt = this.$store.dispatch('management/findAll', { type: machineDeploymentTemplateType });\n    }\n\n    if (!this.showMachines) {\n      if ( this.$store.getters['management/canList'](MANAGEMENT.NODE) ) {\n        fetchTwo.allNodes = this.$store.dispatch('management/findAll', { type: MANAGEMENT.NODE });\n      }\n\n      if ( this.$store.getters['management/canList'](MANAGEMENT.NODE_POOL) ) {\n        fetchTwo.allNodePools = this.$store.dispatch('management/findAll', { type: MANAGEMENT.NODE_POOL });\n      }\n\n      if ( this.$store.getters['management/canList'](MANAGEMENT.NODE_TEMPLATE) ) {\n        fetchTwo.nodeTemplates = this.$store.dispatch('management/findAll', { type: MANAGEMENT.NODE_TEMPLATE });\n      }\n    }\n\n    const fetchTwoRes = await allHash(fetchTwo);\n\n    this.allNodes = fetchTwoRes.allNodes || [];\n    this.haveNodes = !!fetchTwoRes.allNodes;\n    this.allNodePools = fetchTwoRes.allNodePools || [];\n    this.haveNodePools = !!fetchTwoRes.allNodePools;\n    this.machineTemplates = fetchTwoRes.mdtt || [];\n\n    // Fetch RKE template revisions so we can show when an updated template is available\n    // This request does not need to be blocking\n    if ( this.$store.getters['management/canList'](MANAGEMENT.RKE_TEMPLATE) ) {\n      this.$store.dispatch('management/findAll', { type: MANAGEMENT.RKE_TEMPLATE });\n    }\n\n    if ( this.$store.getters['management/canList'](MANAGEMENT.RKE_TEMPLATE_REVISION) ) {\n      this.$store.dispatch('management/findAll', { type: MANAGEMENT.RKE_TEMPLATE_REVISION });\n    }\n  },\n\n  created() {\n    if ( this.showLog ) {\n      this.connectLog();\n    }\n  },\n\n  beforeDestroy() {\n    if ( this.logSocket ) {\n      this.logSocket.disconnect();\n      this.logSocket = null;\n    }\n  },\n\n  data() {\n    return {\n\n      allMachines:           [],\n      allMachineDeployments: [],\n      allNodes:              [],\n      allNodePools:          [],\n\n      haveMachines:    false,\n      haveDeployments: false,\n      haveNodes:       false,\n      haveNodePools:   false,\n      hasLocalAccess:  false,\n\n      mgmtNodeSchema: this.$store.getters[`management/schemaFor`](MANAGEMENT.NODE),\n      machineSchema:  this.$store.getters[`management/schemaFor`](CAPI.MACHINE),\n\n      clusterToken: null,\n      etcdBackups:  null,\n\n      logOpen:   false,\n      logSocket: null,\n      logs:      [],\n\n      extProvider:     null,\n      extCustomParams: null,\n      extDetailTabs:   {\n        machines:     true, // in this component\n        logs:         true, // in this component\n        registration: true, // in this component\n        snapshots:    true, // in this component\n        related:      true, // in ResourceTabs\n        events:       true, // in ResourceTabs\n        conditions:   true, // in ResourceTabs\n      },\n\n      showWindowsWarning: false\n    };\n  },\n\n  watch: {\n    showNodes(neu) {\n      if (neu) {\n        this.$store.dispatch('rancher/findAll', { type: NORMAN.NODE });\n      }\n    },\n  },\n\n  computed: {\n    defaultTab() {\n      if (this.showRegistration) {\n        if (this.value.isRke2 ? !this.machines?.length : !this.nodes?.length) {\n          return 'registration';\n        }\n      }\n\n      if (this.showMachines) {\n        return 'machine-pools';\n      }\n\n      if (this.showNodes) {\n        return 'node-pools';\n      }\n\n      return '';\n    },\n\n    // Used to show summary graph for each node pool group in the machine pool table\n    poolSummaryInfo() {\n      const info = {};\n\n      this.value?.pools.forEach((p) => {\n        const group = `[${ p.type }: ${ p.id }]`;\n\n        info[group] = p;\n      });\n\n      return info;\n    },\n\n    fakeMachines() {\n      const machineNameFn = (clusterName, machinePoolName) => `${ clusterName }-${ machinePoolName }`;\n\n      // When we scale up, the quantity will change to N+1 - so from 0 to 1, the quantity changes,\n      // but it takes tiem for the machine to appear, so the pool is empty, but if we just go off on a non-zero quqntity\n      // then the pool would be hidden - so we find empty pool by checking the machines\n      const emptyPools = (this.value.spec.rkeConfig?.machinePools || []).filter((mp) => {\n        const machineFullName = machineNameFn(this.value.name, mp.name);\n\n        const machines = this.value.machines.filter((machine) => {\n          const isElementalCluster = machine.spec?.infrastructureRef?.apiVersion.startsWith('elemental.cattle.io');\n          const machinePoolInfName = machine.spec?.infrastructureRef?.name;\n\n          if (isElementalCluster) {\n            return machinePoolInfName.includes(machineFullName);\n          }\n\n          // if labels exist, then the machineFullName must unequivocally be equal to manchineLabelFullName (based on labels)\n          const machineLabelClusterName = machine.metadata?.labels?.['cluster.x-k8s.io/cluster-name'];\n          const machineLabelPoolName = machine.metadata?.labels?.['rke.cattle.io/rke-machine-pool-name'];\n\n          if (machineLabelClusterName && machineLabelPoolName) {\n            const manchineLabelFullName = machineNameFn(machineLabelClusterName, machineLabelPoolName);\n\n            return machineFullName === manchineLabelFullName;\n          }\n\n          return machinePoolInfName.startsWith(machineFullName);\n        });\n\n        return machines.length === 0;\n      });\n\n      // When a deployment has no machines it's not shown.... so add a fake machine to it\n      // This is a catch all scenario seen in older node pool world but not deployments\n      return emptyPools.map((mp, i) => {\n        const pool = new EmptyCapiMachineDeployment(\n          {\n            id:       i,\n            metadata: {\n              name:      `${ this.value.nameDisplay }-${ mp.name }`,\n              namespace: this.value.namespace,\n            },\n            spec: {}\n          },\n          {\n            getters:     this.$store.getters,\n            rootGetters: this.$root.$store.getters,\n          }\n        );\n\n        const templateNamePrefix = `${ pool.metadata.name }-`;\n\n        // All of these properties are needed to ensure the pool displays correctly and that we can scale up and down\n        pool._template = this.machineTemplates.find((t) => t.metadata.name.startsWith(templateNamePrefix));\n        pool._cluster = this.value;\n        pool._clusterSpec = mp;\n\n        return {\n          poolId:           pool.id,\n          mainRowKey:       'isFake',\n          pool,\n          availableActions: []\n        };\n      });\n    },\n\n    machines() {\n      return [...this.value.machines, ...this.fakeMachines];\n    },\n\n    nodes() {\n      const nodes = this.allNodes.filter((x) => x.mgmtClusterId === this.value.mgmtClusterId);\n\n      return [...nodes, ...this.fakeNodes];\n    },\n\n    fakeNodes() {\n      // When a pool has no nodes it's not shown.... so add a fake node to it\n      const emptyNodePools = this.allNodePools.filter((x) => x.spec.clusterName === this.value.mgmtClusterId && x.spec.quantity === 0);\n\n      return emptyNodePools.map((np) => ({\n        spec:             { nodePoolName: np.id.replace('/', ':') },\n        mainRowKey:       'isFake',\n        pool:             np,\n        availableActions: []\n      }));\n    },\n\n    showMachines() {\n      const showMachines = this.haveMachines && (this.value.isRke2 || !!this.machines.length);\n\n      return showMachines && this.extDetailTabs.machines;\n    },\n\n    showNodes() {\n      return !this.showMachines && this.haveNodes && !!this.nodes.length;\n    },\n\n    showSnapshots() {\n      if (this.value.isRke1) {\n        return this.$store.getters['rancher/canList'](NORMAN.ETCD_BACKUP) && this.extDetailTabs.snapshots;\n      } else if (this.value.isRke2) {\n        return this.$store.getters['management/canList'](SNAPSHOT) && this.extDetailTabs.snapshots;\n      }\n\n      return false;\n    },\n\n    showEksNodeGroupWarning() {\n      if ( this.value.provisioner === 'EKS' && this.value.state !== STATES_ENUM.ACTIVE) {\n        const desiredTotal = this.value.eksNodeGroups.filter((g) => g.desiredSize === 0);\n\n        if ( desiredTotal.length === this.value.eksNodeGroups.length ) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    machineHeaders() {\n      return [\n        STATE,\n        NAME_COL,\n        {\n          name:          'node-name',\n          labelKey:      'tableHeaders.machineNodeName',\n          sort:          'status.nodeRef.name',\n          value:         'status.nodeRef.name',\n          formatter:     'LinkDetail',\n          formatterOpts: { reference: 'kubeNodeDetailLocation' },\n          dashIfEmpty:   true,\n        },\n        INTERNAL_EXTERNAL_IP,\n        MACHINE_NODE_OS,\n        ROLES,\n        AGE,\n      ];\n    },\n\n    mgmtNodeSchemaHeaders() {\n      return [\n        STATE, NAME_COL,\n        {\n          name:          'node-name',\n          labelKey:      'tableHeaders.machineNodeName',\n          sort:          'kubeNodeName',\n          value:         'kubeNodeName',\n          formatter:     'LinkDetail',\n          formatterOpts: { reference: 'kubeNodeDetailLocation' },\n          dashIfEmpty:   true,\n        },\n        INTERNAL_EXTERNAL_IP,\n        MANAGEMENT_NODE_OS,\n        ROLES,\n        AGE\n      ];\n    },\n\n    rke1Snapshots() {\n      const mgmtId = this.value.mgmt?.id;\n\n      if ( !mgmtId ) {\n        return [];\n      }\n\n      return (this.etcdBackups || []).filter((x) => x.clusterId === mgmtId);\n    },\n\n    rke2Snapshots() {\n      return this.value.etcdSnapshots;\n    },\n\n    rke1SnapshotHeaders() {\n      return [\n        STATE_NORMAN,\n        {\n          name:          'name',\n          labelKey:      'tableHeaders.name',\n          value:         'nameDisplay',\n          sort:          ['nameSort'],\n          canBeVariable: true,\n        },\n        {\n          name:     'version',\n          labelKey: 'tableHeaders.version',\n          value:    'status.kubernetesVersion',\n          sort:     'status.kubernetesVersion',\n          width:    150,\n        },\n        { ...AGE_NORMAN, canBeVariable: true },\n        {\n          name:      'manual',\n          labelKey:  'tableHeaders.manual',\n          value:     'manual',\n          formatter: 'Checked',\n          sort:      ['manual'],\n          align:     'center',\n          width:     50,\n        },\n      ];\n    },\n\n    rke2SnapshotHeaders() {\n      return [\n        {\n          ...STATE_NORMAN, value: 'snapshotFile.status', formatterOpts: { arbitrary: true }\n        },\n        NAME,\n        {\n          name:      'size',\n          labelKey:  'tableHeaders.size',\n          value:     'snapshotFile.size',\n          sort:      'snapshotFile.size',\n          formatter: 'Si',\n          width:     150,\n        },\n        {\n          ...AGE,\n          sort:          'snapshotFile.createdAt:desc',\n          canBeVariable: true\n        },\n      ];\n    },\n\n    showRegistration() {\n      if ( !this.clusterToken ) {\n        return false;\n      }\n\n      if ( this.value.isImported ) {\n        return !this.value.mgmt?.isReady && this.extDetailTabs.registration;\n      }\n\n      if ( this.value.isCustom ) {\n        return this.extDetailTabs.registration;\n      }\n\n      if ( this.value.isHostedKubernetesProvider && !this.isClusterReady ) {\n        return this.extDetailTabs.registration;\n      }\n\n      return false;\n    },\n\n    isClusterReady() {\n      return this.value.mgmt?.isReady;\n    },\n\n    showLog() {\n      const showLog = this.value.mgmt?.hasLink('log');\n\n      return showLog && this.extDetailTabs.logs;\n    },\n\n    dateTimeFormatStr() {\n      const dateFormat = escapeHtml( this.$store.getters['prefs/get'](DATE_FORMAT));\n\n      return `${ dateFormat } ${ this.timeFormatStr }`;\n    },\n\n    timeFormatStr() {\n      return escapeHtml( this.$store.getters['prefs/get'](TIME_FORMAT));\n    },\n\n    hasWindowsMachine() {\n      return this.machines.some((machine) => get(machine, 'status.nodeInfo.operatingSystem') === 'windows');\n    },\n\n    snapshotsGroupBy() {\n      return 'backupLocation';\n    }\n  },\n\n  mounted() {\n    window.c = this;\n  },\n\n  methods: {\n    toggleScaleDownModal( event, resources ) {\n      // Check if the user held alt key when an action is clicked.\n      const alt = isAlternate(event);\n      const showScalePoolPrompt = this.$store.getters['prefs/get'](SCALE_POOL_PROMPT);\n\n      // Prompt if showScalePoolPrompt pref not store and user did not held alt key\n      if (!alt && !showScalePoolPrompt) {\n        this.$store.dispatch('management/promptModal', {\n          component:  'ScalePoolDownDialog',\n          resources,\n          modalWidth: '450px'\n        });\n      } else {\n        // User held alt key, so don't prompt\n        resources.scalePool(-1);\n      }\n    },\n\n    async takeSnapshot(btnCb) {\n      try {\n        await this.value.takeSnapshot();\n\n        // Give the change event some time to show up\n        setTimeout(() => {\n          btnCb(true);\n        }, 1000);\n      } catch (err) {\n        this.$store.dispatch('growl/fromError', { title: 'Error creating snapshot', err });\n        btnCb(false);\n      }\n    },\n\n    showPoolAction(event, pool) {\n      this.$store.commit(`action-menu/show`, {\n        resources: [pool],\n        elem:      event.target\n      });\n    },\n\n    showPoolActionButton(pool) {\n      return !!pool.availableActions?.length;\n    },\n\n    async connectLog() {\n      if ( this.logSocket ) {\n        await this.logSocket.disconnect();\n        this.logSocket = null;\n      }\n\n      const params = {\n        follow:     true,\n        timestamps: true,\n        pretty:     true,\n      };\n\n      let url = this.value.mgmt?.linkFor('log');\n\n      url = addParams(url.replace(/^http/, 'ws'), params);\n\n      this.logSocket = new Socket(url, true, 0);\n      this.logSocket.addEventListener(EVENT_CONNECTED, (e) => {\n        this.logs = [];\n        this.logOpen = true;\n      });\n\n      this.logSocket.addEventListener(EVENT_DISCONNECTED, (e) => {\n        this.logOpen = false;\n      });\n\n      this.logSocket.addEventListener(EVENT_CONNECT_ERROR, (e) => {\n        this.logOpen = false;\n        console.error('Connect Error', e); // eslint-disable-line no-console\n      });\n\n      this.logSocket.addEventListener(EVENT_MESSAGE, (e) => {\n        const line = base64Decode(e.detail.data);\n\n        let msg = line;\n        let time = null;\n\n        const idx = line.indexOf(' ');\n\n        if ( idx > 0 ) {\n          const timeStr = line.substr(0, idx);\n          const date = new Date(timeStr);\n\n          if ( !isNaN(date.getSeconds()) ) {\n            time = date.toISOString();\n            msg = line.substr(idx + 1);\n          }\n        }\n\n        this.logs.push({\n          id:     lastId++,\n          msg:    ansiup.ansi_to_html(msg),\n          rawMsg: msg,\n          time,\n        });\n      });\n\n      this.logSocket.connect();\n    },\n\n    format(time) {\n      if ( !time ) {\n        return '';\n      }\n\n      const val = day(time);\n      const today = day().format('YYYY-MM-DD');\n\n      if ( val.format('YYYY-MM-DD') === today ) {\n        return day(time).format(this.timeFormatStr);\n      } else {\n        return day(time).format(this.dateTimeFormatStr);\n      }\n    },\n\n    machineSortGenerationFn() {\n      // The sort generation function creates a unique value and is used to create a key including sort details.\n      // The unique key determines if the list is redrawn or a cached version is shown.\n      // Because we ensure the 'not in a pool' group is there via a row, and timing issues, the unqiue key doesn't change\n      // after a machine is added/removed... so the list won't update... so we need to inject a string to ensure the key is fresh\n      const base = defaultTableSortGenerationFn(this.machineSchema, this.$store);\n\n      return base + (!!this.fakeMachines.length ? '-fake' : '');\n    },\n\n    nodeSortGenerationFn() {\n      // The sort generation function creates a unique value and is used to create a key including sort details.\n      // The unique key determines if the list is redrawn or a cached version is shown.\n      // Because we ensure the 'not in a pool' group is there via a row, and timing issues, the unqiue key doesn't change\n      // after a machine is added/removed... so the list won't update... so we need to inject a string to ensure the key is fresh\n      const base = defaultTableSortGenerationFn(this.mgmtNodeSchema, this.$store);\n\n      return base + (!!this.fakeNodes.length ? '-fake' : '');\n    },\n  }\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n  <div v-else>\n    <Banner\n      v-if=\"showWindowsWarning\"\n      color=\"error\"\n      :label=\"t('cluster.banner.os', { newOS: 'Windows', existingOS: 'Linux' })\"\n    />\n    <Banner\n      v-if=\"showEksNodeGroupWarning\"\n      color=\"error\"\n      :label=\"t('cluster.banner.desiredNodeGroupWarning')\"\n    />\n\n    <Banner\n      v-if=\"$fetchState.error\"\n      color=\"error\"\n      :label=\"$fetchState.error\"\n    />\n    <ResourceTabs\n      v-model=\"value\"\n      :default-tab=\"defaultTab\"\n      :need-related=\"hasLocalAccess\"\n      :extension-params=\"extCustomParams\"\n      :needRelated=\"extDetailTabs.related\"\n      :needEvents=\"extDetailTabs.events\"\n      :needConditions=\"extDetailTabs.conditions\"\n    >\n      <Tab\n        v-if=\"showMachines\"\n        name=\"machine-pools\"\n        :label-key=\"value.isCustom ? 'cluster.tabs.machines' : 'cluster.tabs.machinePools'\"\n        :weight=\"4\"\n      >\n        <ResourceTable\n          :rows=\"machines\"\n          :schema=\"machineSchema\"\n          :headers=\"machineHeaders\"\n          default-sort-by=\"name\"\n          :groupable=\"false\"\n          :group-by=\"value.isCustom ? null : 'poolId'\"\n          group-ref=\"pool\"\n          :group-sort=\"['pool.nameDisplay']\"\n          :sort-generation-fn=\"machineSortGenerationFn\"\n        >\n          <template #main-row:isFake=\"{fullColspan}\">\n            <tr class=\"main-row\">\n              <td\n                :colspan=\"fullColspan\"\n                class=\"no-entries\"\n              >\n                {{ t('node.list.noNodes') }}\n              </td>\n            </tr>\n          </template>\n\n          <template #group-by=\"{group}\">\n            <div\n              class=\"pool-row\"\n              :class=\"{'has-description':group.ref && group.ref.template}\"\n            >\n              <div\n                v-trim-whitespace\n                class=\"group-tab\"\n              >\n                <div\n                  v-if=\"group && group.ref\"\n                  v-clean-html=\"group.ref.groupByPoolShortLabel\"\n                />\n                <div\n                  v-else\n                  v-clean-html=\"t('resourceTable.groupLabel.notInANodePool')\"\n                />\n                <div\n                  v-if=\"group.ref && group.ref.template\"\n                  class=\"description text-muted text-small\"\n                >\n                  {{ group.ref.providerDisplay }} &ndash;  {{ group.ref.providerLocation }} / {{ group.ref.providerSize }} ({{ group.ref.providerName }})\n                </div>\n              </div>\n              <div\n                v-if=\"group.ref && poolSummaryInfo[group.ref]\"\n                class=\"right group-header-buttons mr-20\"\n              >\n                <MachineSummaryGraph\n                  :row=\"poolSummaryInfo[group.ref]\"\n                  :horizontal=\"true\"\n                  class=\"mr-20\"\n                />\n                <template v-if=\"value.hasLink('update') && group.ref.showScalePool\">\n                  <button\n                    v-clean-tooltip=\"t('node.list.scaleDown')\"\n                    :disabled=\"!group.ref.canScaleDownPool()\"\n                    type=\"button\"\n                    class=\"btn btn-sm role-secondary\"\n                    @click=\"toggleScaleDownModal($event, group.ref)\"\n                  >\n                    <i class=\"icon icon-sm icon-minus\" />\n                  </button>\n                  <button\n                    v-clean-tooltip=\"t('node.list.scaleUp')\"\n                    :disabled=\"!group.ref.canScaleUpPool()\"\n                    type=\"button\"\n                    class=\"btn btn-sm role-secondary ml-10\"\n                    @click=\"group.ref.scalePool(1)\"\n                  >\n                    <i class=\"icon icon-sm icon-plus\" />\n                  </button>\n                </template>\n              </div>\n            </div>\n          </template>\n        </ResourceTable>\n      </Tab>\n\n      <Tab\n        v-else-if=\"showNodes\"\n        name=\"node-pools\"\n        :label-key=\"value.isCustom ? 'cluster.tabs.machines' : 'cluster.tabs.machinePools'\"\n        :weight=\"4\"\n      >\n        <ResourceTable\n          :schema=\"mgmtNodeSchema\"\n          :headers=\"mgmtNodeSchemaHeaders\"\n          :rows=\"nodes\"\n          :groupable=\"false\"\n          :group-by=\"value.isCustom ? null : 'spec.nodePoolName'\"\n          group-ref=\"pool\"\n          :group-sort=\"['pool.nameDisplay']\"\n          :sort-generation-fn=\"nodeSortGenerationFn\"\n        >\n          <template #main-row:isFake=\"{fullColspan}\">\n            <tr class=\"main-row\">\n              <td\n                :colspan=\"fullColspan\"\n                class=\"no-entries\"\n              >\n                {{ t('node.list.noNodes') }}\n              </td>\n            </tr>\n          </template>\n\n          <template #group-by=\"{group}\">\n            <div\n              class=\"pool-row\"\n              :class=\"{'has-description':group.ref && group.ref.nodeTemplate}\"\n            >\n              <div\n                v-trim-whitespace\n                class=\"group-tab\"\n              >\n                <div\n                  v-if=\"group.ref\"\n                  v-clean-html=\"t('resourceTable.groupLabel.nodePool', { name: group.ref.spec.hostnamePrefix}, true)\"\n                />\n                <div\n                  v-else\n                  v-clean-html=\"t('resourceTable.groupLabel.notInANodePool')\"\n                />\n                <div\n                  v-if=\"group.ref && group.ref.nodeTemplate\"\n                  class=\"description text-muted text-small\"\n                >\n                  {{ group.ref.providerDisplay }} &ndash;  {{ group.ref.providerLocation }} / {{ group.ref.providerSize }} ({{ group.ref.providerName }})\n                </div>\n              </div>\n              <div\n                v-if=\"group.ref\"\n                class=\"right group-header-buttons\"\n              >\n                <MachineSummaryGraph\n                  :row=\"poolSummaryInfo[group.ref]\"\n                  :horizontal=\"true\"\n                  class=\"mr-20\"\n                />\n                <template v-if=\"group.ref.hasLink('update')\">\n                  <button\n                    v-clean-tooltip=\"t('node.list.scaleDown')\"\n                    :disabled=\"group.ref.spec.quantity < 2\"\n                    type=\"button\"\n                    class=\"btn btn-sm role-secondary\"\n                    @click=\"toggleScaleDownModal($event, group.ref)\"\n                  >\n                    <i class=\"icon icon-sm icon-minus\" />\n                  </button>\n                  <button\n                    v-clean-tooltip=\"t('node.list.scaleUp')\"\n                    type=\"button\"\n                    class=\"btn btn-sm role-secondary ml-10\"\n                    @click=\"group.ref.scalePool(1)\"\n                  >\n                    <i class=\"icon icon-sm icon-plus\" />\n                  </button>\n                </template>\n\n                <button\n                  type=\"button\"\n                  class=\"project-action btn btn-sm role-multi-action actions mr-5 ml-15\"\n                  :class=\"{invisible: !showPoolActionButton(group.ref)}\"\n                  @click=\"showPoolAction($event, group.ref)\"\n                >\n                  <i class=\"icon icon-actions\" />\n                </button>\n              </div>\n            </div>\n          </template>\n        </ResourceTable>\n      </Tab>\n\n      <Tab\n        v-if=\"showLog\"\n        name=\"log\"\n        :label=\"t('cluster.tabs.log')\"\n        :weight=\"3\"\n        class=\"logs-container\"\n      >\n        <table\n          class=\"fixed\"\n          cellpadding=\"0\"\n          cellspacing=\"0\"\n        >\n          <tbody class=\"logs-body\">\n            <template v-if=\"logs.length\">\n              <tr\n                v-for=\"line in logs\"\n                :key=\"line.id\"\n              >\n                <td\n                  :key=\"line.id + '-time'\"\n                  v-clean-html=\"format(line.time)\"\n                  class=\"time\"\n                />\n                <td\n                  :key=\"line.id + '-msg'\"\n                  v-clean-html=\"line.msg\"\n                  class=\"msg\"\n                />\n              </tr>\n            </template>\n            <tr\n              v-else-if=\"!logOpen\"\n              v-t=\"'cluster.log.connecting'\"\n              colspan=\"2\"\n              class=\"msg text-muted\"\n            />\n            <tr\n              v-else\n              v-t=\"'cluster.log.noData'\"\n              colspan=\"2\"\n              class=\"msg text-muted\"\n            />\n          </tbody>\n        </table>\n      </Tab>\n\n      <Tab\n        v-if=\"showRegistration\"\n        name=\"registration\"\n        :label=\"t('cluster.tabs.registration')\"\n        :weight=\"2\"\n      >\n        <Banner\n          v-if=\"!value.isCustom\"\n          color=\"warning\"\n          :label=\"t('cluster.import.warningBanner')\"\n        />\n        <CustomCommand\n          v-if=\"value.isCustom\"\n          :cluster-token=\"clusterToken\"\n          :cluster=\"value\"\n          @copied-windows=\"hasWindowsMachine ? null : showWindowsWarning = true\"\n        />\n        <template v-else>\n          <h4 v-clean-html=\"t('cluster.import.commandInstructions', null, true)\" />\n          <CopyCode class=\"m-10 p-10\">\n            {{ clusterToken.command }}\n          </CopyCode>\n\n          <h4\n            v-clean-html=\"t('cluster.import.commandInstructionsInsecure', null, true)\"\n            class=\"mt-10\"\n          />\n          <CopyCode class=\"m-10 p-10\">\n            {{ clusterToken.insecureCommand }}\n          </CopyCode>\n\n          <h4\n            v-clean-html=\"t('cluster.import.clusterRoleBindingInstructions', null, true)\"\n            class=\"mt-10\"\n          />\n          <CopyCode class=\"m-10 p-10\">\n            {{ t('cluster.import.clusterRoleBindingCommand', null, true) }}\n          </CopyCode>\n        </template>\n      </Tab>\n\n      <Tab\n        v-if=\"showSnapshots\"\n        name=\"snapshots\"\n        label=\"Snapshots\"\n        :weight=\"1\"\n      >\n        <SortableTable\n          class=\"snapshots\"\n          :headers=\"value.isRke1 ? rke1SnapshotHeaders : rke2SnapshotHeaders\"\n          default-sort-by=\"age\"\n          :table-actions=\"value.isRke1\"\n          :rows=\"value.isRke1 ? rke1Snapshots : rke2Snapshots\"\n          :search=\"false\"\n          :groupable=\"true\"\n          :group-by=\"snapshotsGroupBy\"\n        >\n          <template #header-right>\n            <AsyncButton\n              mode=\"snapshot\"\n              class=\"btn role-primary\"\n              :disabled=\"!isClusterReady\"\n              @click=\"takeSnapshot\"\n            />\n          </template>\n          <template #group-by=\"{group}\">\n            <div class=\"group-bar\">\n              <div class=\"group-tab\">\n                {{ t('cluster.snapshot.groupLabel') }}: {{ group.key }}\n              </div>\n            </div>\n          </template>\n        </SortableTable>\n      </Tab>\n    </ResourceTabs>\n  </div>\n</template>\n\n<style lang='scss' scoped>\n.main-row .no-entries {\n  text-align: center;\n}\n\n.pool-row {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  &.has-description {\n    .group-tab {\n      &, &::after {\n          height: 50px;\n      }\n\n      &::after {\n          right: -20px;\n      }\n\n      .description {\n          margin-top: -20px;\n      }\n    }\n  }\n  .group-header-buttons {\n    align-items: center;\n    display: flex;\n  }\n}\n\n.logs-container {\n  height: 100%;\n  overflow: auto;\n  padding: 5px;\n  background-color: var(--logs-bg);\n  font-family: Menlo,Consolas,monospace;\n  color: var(--logs-text);\n\n  .closed {\n    opacity: 0.25;\n  }\n\n  .time {\n    white-space: nowrap;\n    width: auto;\n    padding-right: 15px;\n    user-select: none;\n  }\n\n  .msg {\n    white-space: normal;\n\n    .highlight {\n      color: var(--logs-highlight);\n      background-color: var(--logs-highlight-bg);\n    }\n  }\n}\n\n.snapshots ::v-deep .state-description{\n  font-size: .8em;\n  color: var(--error);\n}\n\n</style>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAAA,OAAA;AACA,SAAAC,MAAA;AACA,OAAAC,aAAA,IAAAC,4BAAA;AACA,OAAAC,YAAA;AACA,OAAAC,aAAA;AACA,OAAAC,QAAA;AACA,OAAAC,GAAA;AACA,SAAAC,OAAA;AACA,SAAAC,IAAA,EAAAC,UAAA,EAAAC,MAAA,EAAAC,QAAA;AACA,SACAC,KAAA,EAAAC,IAAA,IAAAC,QAAA,EAAAC,GAAA,EAAAC,UAAA,EAAAC,oBAAA,EAAAC,YAAA,EAAAC,KAAA,EAAAC,eAAA,EAAAC,kBAAA,EAAAR,IAAA,QACA;AACA,SAAAS,WAAA;AACA,OAAAC,aAAA;AACA,OAAAC,WAAA;AACA,OAAAC,MAAA;AACA,OAAAC,GAAA;AACA,SAAAC,SAAA;AACA,SAAAC,YAAA;AACA,SAAAC,WAAA,EAAAC,WAAA,EAAAC,iBAAA;AACA,SAAAC,UAAA;AACA,OAAAC,mBAAA;AACA,OAAAC,MAAA,IACAC,eAAA,EACAC,kBAAA,EACAC,aAAA;AACA;AACAC,mBAAA,QACA;AACA,SAAAC,GAAA;AACA,OAAAC,qBAAA;AACA,SAAAC,WAAA;AAEA,IAAAC,MAAA;AACA,IAAAC,MAAA,OAAAlB,MAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA,IAOAmB,0BAAA,0BAAAC,qBAAA;EAAAC,SAAA,CAAAF,0BAAA,EAAAC,qBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,0BAAA;EAAA,SAAAA,2BAAA;IAAAK,eAAA,OAAAL,0BAAA;IAAA,OAAAG,MAAA,CAAAG,KAAA,OAAAC,SAAA;EAAA;EAAAC,YAAA,CAAAR,0BAAA;IAAAS,GAAA;IAAAd,GAAA,EACA,SAAAA,IAAA;MACA,YAAAe,YAAA;IACA;EAAA;IAAAD,GAAA;IAAAd,GAAA,EAEA,SAAAA,IAAA;MACA,YAAAgB,QAAA;IACA;EAAA;IAAAF,GAAA;IAAAd,GAAA,EAEA,SAAAA,IAAA;MACA,YAAAiB,SAAA;IACA;EAAA;EAAA,OAAAZ,0BAAA;AAAA,EAXAJ,qBAAA;AAcA;EACAiB,UAAA;IACA1D,OAAA,EAAAA,OAAA;IACAC,MAAA,EAAAA,MAAA;IACAC,aAAA,EAAAA,aAAA;IACAE,YAAA,EAAAA,YAAA;IACAC,aAAA,EAAAA,aAAA;IACAE,GAAA,EAAAA,GAAA;IACAD,QAAA,EAAAA,QAAA;IACAkB,aAAA,EAAAA,aAAA;IACAC,WAAA,EAAAA,WAAA;IACAS,mBAAA,EAAAA;EACA;EAEAyB,KAAA;IACAC,KAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,OAAA,WAAAC,SAAA;QACA;MACA;IACA;EACA;EAEAC,KAAA,WAAAA,MAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA,eAAAC,kBAAA,CAAAC,IAAA,UAAAC,QAAA;MAAA,IAAAC,qBAAA;MAAA,IAAAC,QAAA,EAAAC,QAAA,EAAAC,WAAA,EAAAC,QAAA,EAAAC,mBAAA,EAAAC,6BAAA,EAAAC,WAAA;MAAA,OAAAV,kBAAA,CAAAW,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAAF,QAAA,CAAAE,IAAA;YAAA,OACAjB,KAAA,CAAAN,KAAA,CAAAwB,kBAAA;UAAA;YAEAZ,QAAA,GAAAN,KAAA,CAAAmB,OAAA,CAAAC,UAAA,gBAAApB,KAAA,CAAAN,KAAA,CAAA2B,eAAA;YAEA,IAAAf,QAAA;cACAN,KAAA,CAAAsB,WAAA,OAAAhB,QAAA;gBACAiB,QAAA,EAAAvB,KAAA,CAAAwB,MAAA,CAAAD,QAAA;gBACAE,OAAA,EAAAzB,KAAA,CAAAwB,MAAA,CAAAC,OAAA;gBACAC,KAAA,EAAA1B,KAAA,CAAAwB,MAAA,CAAAG,MAAA;gBACAR,OAAA,EAAAnB,KAAA,CAAAwB,MAAA,CAAAI,GAAA,CAAAT,OAAA;gBACAU,EAAA,EAAA7B,KAAA,CAAA8B;cACA;cACA9B,KAAA,CAAA+B,aAAA,GAAAC,aAAA,CAAAA,aAAA,KACAhC,KAAA,CAAA+B,aAAA,GACA/B,KAAA,CAAAsB,WAAA,CAAAW,UAAA,CACA;cACAjC,KAAA,CAAAkC,eAAA;gBAAAC,QAAA,EAAAnC,KAAA,CAAAN,KAAA,CAAA2B;cAAA;YACA;YAEAd,QAAA;YAEA,IAAAP,KAAA,CAAAwB,MAAA,CAAAC,OAAA,uBAAAlF,IAAA,CAAA6F,kBAAA;cACA7B,QAAA,CAAA8B,kBAAA,GAAArC,KAAA,CAAAwB,MAAA,CAAAD,QAAA;gBAAA5B,IAAA,EAAApD,IAAA,CAAA6F;cAAA;YACA;YAEA,IAAApC,KAAA,CAAAwB,MAAA,CAAAC,OAAA,uBAAAlF,IAAA,CAAA+F,OAAA;cACA/B,QAAA,CAAAgC,QAAA,GAAAvC,KAAA,CAAAwB,MAAA,CAAAD,QAAA;gBAAA5B,IAAA,EAAApD,IAAA,CAAA+F;cAAA;YACA;YAEA,IAAAtC,KAAA,CAAAwB,MAAA,CAAAC,OAAA,uBAAA/E,QAAA;cACA6D,QAAA,CAAAiC,SAAA,GAAAxC,KAAA,CAAAwB,MAAA,CAAAD,QAAA;gBAAA5B,IAAA,EAAAjD;cAAA;YACA;YAEA,IAAAsD,KAAA,CAAAN,KAAA,CAAA+C,UAAA,IAAAzC,KAAA,CAAAN,KAAA,CAAAgD,QAAA,IAAA1C,KAAA,CAAAN,KAAA,CAAAiD,0BAAA;cACApC,QAAA,CAAAqC,YAAA,GAAA5C,KAAA,CAAAN,KAAA,CAAAmD,gBAAA;YACA;;YAEA;YACA,IAAA7C,KAAA,CAAAwB,MAAA,CAAAC,OAAA,oBAAAhF,MAAA,CAAAqG,OAAA;cACAvC,QAAA,CAAAwC,cAAA,GAAA/C,KAAA,CAAAwB,MAAA,CAAAD,QAAA;gBAAA5B,IAAA,EAAAlD,MAAA,CAAAqG;cAAA;YACA;YAEA,IAAA9C,KAAA,CAAAN,KAAA,CAAAsD,MAAA,IAAAhD,KAAA,CAAAwB,MAAA,CAAAC,OAAA;cACAlB,QAAA,CAAA0C,WAAA,GAAAjD,KAAA,CAAAwB,MAAA,CAAAD,QAAA;gBAAA5B,IAAA,EAAAlD,MAAA,CAAAyG;cAAA;cAEA3C,QAAA,CAAA4C,eAAA,GAAAnD,KAAA,CAAAwB,MAAA,CAAAD,QAAA;gBAAA5B,IAAA,EAAAlD,MAAA,CAAA2G;cAAA;YACA;YAAArC,QAAA,CAAAE,IAAA;YAAA,OAEA3E,OAAA,CAAAiE,QAAA;UAAA;YAAAC,WAAA,GAAAO,QAAA,CAAAsC,IAAA;YAEArD,KAAA,CAAAsD,WAAA,GAAA9C,WAAA,CAAA+B,QAAA;YACAvC,KAAA,CAAAuD,qBAAA,GAAA/C,WAAA,CAAA6B,kBAAA;YACArC,KAAA,CAAAwD,YAAA,KAAAhD,WAAA,CAAA+B,QAAA;YACAvC,KAAA,CAAAyD,eAAA,KAAAjD,WAAA,CAAA6B,kBAAA;YACArC,KAAA,CAAA4C,YAAA,GAAApC,WAAA,CAAAoC,YAAA;YACA5C,KAAA,CAAAiD,WAAA,GAAAzC,WAAA,CAAAyC,WAAA;YAEA,IAAAzC,WAAA,CAAAuC,cAAA;cACA;cACA/C,KAAA,CAAA0D,cAAA,KAAAlD,WAAA,CAAAuC,cAAA,CAAAY,IAAA,WAAAC,CAAA;gBAAA,OAAAA,CAAA,CAAAC,QAAA;cAAA;YACA;YAEApD,QAAA;YAEAC,mBAAA,GAAAV,KAAA,CAAAuD,qBAAA,CAAAO,MAAA,WAAAC,UAAA;cAAA,IAAAC,gBAAA;cACA,QAAAD,UAAA,aAAAA,UAAA,gBAAAC,gBAAA,GAAAD,UAAA,CAAAE,IAAA,cAAAD,gBAAA,uBAAAA,gBAAA,CAAAE,WAAA,MAAAlE,KAAA,CAAAN,KAAA,CAAAyE,QAAA,CAAAC,IAAA;YACA;YAEAzD,6BAAA,GAAAD,mBAAA,aAAAA,mBAAA,gBAAAL,qBAAA,GAAAK,mBAAA,iBAAAL,qBAAA,uBAAAA,qBAAA,CAAAgE,YAAA;YAEA,IAAA1D,6BAAA,IAAAX,KAAA,CAAAwB,MAAA,CAAAC,OAAA,yBAAAd,6BAAA;cACAF,QAAA,CAAA6D,IAAA,GAAAtE,KAAA,CAAAwB,MAAA,CAAAD,QAAA;gBAAA5B,IAAA,EAAAgB;cAAA;YACA;YAEA,KAAAX,KAAA,CAAAuE,YAAA;cACA,IAAAvE,KAAA,CAAAwB,MAAA,CAAAC,OAAA,uBAAAjF,UAAA,CAAAgI,IAAA;gBACA/D,QAAA,CAAAgE,QAAA,GAAAzE,KAAA,CAAAwB,MAAA,CAAAD,QAAA;kBAAA5B,IAAA,EAAAnD,UAAA,CAAAgI;gBAAA;cACA;cAEA,IAAAxE,KAAA,CAAAwB,MAAA,CAAAC,OAAA,uBAAAjF,UAAA,CAAA4G,SAAA;gBACA3C,QAAA,CAAAiE,YAAA,GAAA1E,KAAA,CAAAwB,MAAA,CAAAD,QAAA;kBAAA5B,IAAA,EAAAnD,UAAA,CAAA4G;gBAAA;cACA;cAEA,IAAApD,KAAA,CAAAwB,MAAA,CAAAC,OAAA,uBAAAjF,UAAA,CAAAmI,aAAA;gBACAlE,QAAA,CAAAmE,aAAA,GAAA5E,KAAA,CAAAwB,MAAA,CAAAD,QAAA;kBAAA5B,IAAA,EAAAnD,UAAA,CAAAmI;gBAAA;cACA;YACA;YAAA5D,QAAA,CAAAE,IAAA;YAAA,OAEA3E,OAAA,CAAAmE,QAAA;UAAA;YAAAG,WAAA,GAAAG,QAAA,CAAAsC,IAAA;YAEArD,KAAA,CAAAyE,QAAA,GAAA7D,WAAA,CAAA6D,QAAA;YACAzE,KAAA,CAAA6E,SAAA,KAAAjE,WAAA,CAAA6D,QAAA;YACAzE,KAAA,CAAA0E,YAAA,GAAA9D,WAAA,CAAA8D,YAAA;YACA1E,KAAA,CAAA8E,aAAA,KAAAlE,WAAA,CAAA8D,YAAA;YACA1E,KAAA,CAAA+E,gBAAA,GAAAnE,WAAA,CAAA0D,IAAA;;YAEA;YACA;YACA,IAAAtE,KAAA,CAAAwB,MAAA,CAAAC,OAAA,uBAAAjF,UAAA,CAAAwI,YAAA;cACAhF,KAAA,CAAAwB,MAAA,CAAAD,QAAA;gBAAA5B,IAAA,EAAAnD,UAAA,CAAAwI;cAAA;YACA;YAEA,IAAAhF,KAAA,CAAAwB,MAAA,CAAAC,OAAA,uBAAAjF,UAAA,CAAAyI,qBAAA;cACAjF,KAAA,CAAAwB,MAAA,CAAAD,QAAA;gBAAA5B,IAAA,EAAAnD,UAAA,CAAAyI;cAAA;YACA;UAAA;UAAA;YAAA,OAAAlE,QAAA,CAAAmE,IAAA;QAAA;MAAA,GAAA9E,OAAA;IAAA;EACA;EAEA+E,OAAA,WAAAA,QAAA;IACA,SAAAC,OAAA;MACA,KAAAC,UAAA;IACA;EACA;EAEAC,aAAA,WAAAA,cAAA;IACA,SAAAC,SAAA;MACA,KAAAA,SAAA,CAAAC,UAAA;MACA,KAAAD,SAAA;IACA;EACA;EAEAE,IAAA,WAAAA,KAAA;IACA;MAEAnC,WAAA;MACAC,qBAAA;MACAkB,QAAA;MACAC,YAAA;MAEAlB,YAAA;MACAC,eAAA;MACAoB,SAAA;MACAC,aAAA;MACApB,cAAA;MAEAgC,cAAA,OAAAlE,MAAA,CAAAC,OAAA,yBAAAjF,UAAA,CAAAgI,IAAA;MACAmB,aAAA,OAAAnE,MAAA,CAAAC,OAAA,yBAAAlF,IAAA,CAAA+F,OAAA;MAEAM,YAAA;MACAK,WAAA;MAEA2C,OAAA;MACAL,SAAA;MACAM,IAAA;MAEAvE,WAAA;MACAY,eAAA;MACAH,aAAA;QACAQ,QAAA;QAAA;QACAsD,IAAA;QAAA;QACAC,YAAA;QAAA;QACAtD,SAAA;QAAA;QACAuD,OAAA;QAAA;QACAC,MAAA;QAAA;QACAC,UAAA;MACA;MAEAC,kBAAA;IACA;EACA;EAEAC,KAAA;IACAC,SAAA,WAAAA,UAAAC,GAAA;MACA,IAAAA,GAAA;QACA,KAAA7E,MAAA,CAAAD,QAAA;UAAA5B,IAAA,EAAAlD,MAAA,CAAA+H;QAAA;MACA;IACA;EACA;EAEA8B,QAAA;IACAC,UAAA,WAAAA,WAAA;MACA,SAAAC,gBAAA;QAAA,IAAAC,cAAA,EAAAC,WAAA;QACA,SAAAhH,KAAA,CAAAiH,MAAA,MAAAF,cAAA,QAAAlE,QAAA,cAAAkE,cAAA,eAAAA,cAAA,CAAAG,MAAA,OAAAF,WAAA,QAAAG,KAAA,cAAAH,WAAA,eAAAA,WAAA,CAAAE,MAAA;UACA;QACA;MACA;MAEA,SAAArC,YAAA;QACA;MACA;MAEA,SAAA6B,SAAA;QACA;MACA;MAEA;IACA;IAEA;IACAU,eAAA,WAAAA,gBAAA;MAAA,IAAAC,WAAA;MACA,IAAAC,IAAA;MAEA,CAAAD,WAAA,QAAArH,KAAA,cAAAqH,WAAA,eAAAA,WAAA,CAAAE,KAAA,CAAAC,OAAA,WAAAC,CAAA;QACA,IAAAC,KAAA,OAAAC,MAAA,CAAAF,CAAA,CAAAxH,IAAA,QAAA0H,MAAA,CAAAF,CAAA,CAAAG,EAAA;QAEAN,IAAA,CAAAI,KAAA,IAAAD,CAAA;MACA;MAEA,OAAAH,IAAA;IACA;IAEAO,YAAA,WAAAA,aAAA;MAAA,IAAAC,qBAAA;QAAAC,MAAA;MACA,IAAAC,aAAA,YAAAA,cAAAxD,WAAA,EAAAyD,eAAA;QAAA,UAAAN,MAAA,CAAAnD,WAAA,OAAAmD,MAAA,CAAAM,eAAA;MAAA;;MAEA;MACA;MACA;MACA,IAAAC,UAAA,MAAAJ,qBAAA,QAAA9H,KAAA,CAAAuE,IAAA,CAAA4D,SAAA,cAAAL,qBAAA,uBAAAA,qBAAA,CAAAM,YAAA,SAAAhE,MAAA,WAAAiE,EAAA;QACA,IAAAC,eAAA,GAAAN,aAAA,CAAAD,MAAA,CAAA/H,KAAA,CAAA0E,IAAA,EAAA2D,EAAA,CAAA3D,IAAA;QAEA,IAAA7B,QAAA,GAAAkF,MAAA,CAAA/H,KAAA,CAAA6C,QAAA,CAAAuB,MAAA,WAAAmE,OAAA;UAAA,IAAAC,aAAA,EAAAC,cAAA,EAAAC,iBAAA,EAAAC,kBAAA;UACA,IAAAC,kBAAA,IAAAJ,aAAA,GAAAD,OAAA,CAAAhE,IAAA,cAAAiE,aAAA,gBAAAA,aAAA,GAAAA,aAAA,CAAAK,iBAAA,cAAAL,aAAA,uBAAAA,aAAA,CAAAM,UAAA,CAAAC,UAAA;UACA,IAAAC,kBAAA,IAAAP,cAAA,GAAAF,OAAA,CAAAhE,IAAA,cAAAkE,cAAA,gBAAAA,cAAA,GAAAA,cAAA,CAAAI,iBAAA,cAAAJ,cAAA,uBAAAA,cAAA,CAAA/D,IAAA;UAEA,IAAAkE,kBAAA;YACA,OAAAI,kBAAA,CAAAC,QAAA,CAAAX,eAAA;UACA;;UAEA;UACA,IAAAY,uBAAA,IAAAR,iBAAA,GAAAH,OAAA,CAAA9D,QAAA,cAAAiE,iBAAA,gBAAAA,iBAAA,GAAAA,iBAAA,CAAAS,MAAA,cAAAT,iBAAA,uBAAAA,iBAAA;UACA,IAAAU,oBAAA,IAAAT,kBAAA,GAAAJ,OAAA,CAAA9D,QAAA,cAAAkE,kBAAA,gBAAAA,kBAAA,GAAAA,kBAAA,CAAAQ,MAAA,cAAAR,kBAAA,uBAAAA,kBAAA;UAEA,IAAAO,uBAAA,IAAAE,oBAAA;YACA,IAAAC,qBAAA,GAAArB,aAAA,CAAAkB,uBAAA,EAAAE,oBAAA;YAEA,OAAAd,eAAA,KAAAe,qBAAA;UACA;UAEA,OAAAL,kBAAA,CAAAD,UAAA,CAAAT,eAAA;QACA;QAEA,OAAAzF,QAAA,CAAAqE,MAAA;MACA;;MAEA;MACA;MACA,OAAAgB,UAAA,CAAAoB,GAAA,WAAAjB,EAAA,EAAAkB,CAAA;QACA,IAAAC,IAAA,OAAAvK,0BAAA,CACA;UACA2I,EAAA,EAAA2B,CAAA;UACA9E,QAAA;YACAC,IAAA,KAAAiD,MAAA,CAAAI,MAAA,CAAA/H,KAAA,CAAAyJ,WAAA,OAAA9B,MAAA,CAAAU,EAAA,CAAA3D,IAAA;YACAgF,SAAA,EAAA3B,MAAA,CAAA/H,KAAA,CAAA0J;UACA;UACAnF,IAAA;QACA,GACA;UACAxC,OAAA,EAAAgG,MAAA,CAAAjG,MAAA,CAAAC,OAAA;UACA4H,WAAA,EAAA5B,MAAA,CAAA6B,KAAA,CAAA9H,MAAA,CAAAC;QACA,CACA;QAEA,IAAA8H,kBAAA,MAAAlC,MAAA,CAAA6B,IAAA,CAAA/E,QAAA,CAAAC,IAAA;;QAEA;QACA8E,IAAA,CAAA3J,SAAA,GAAAkI,MAAA,CAAA1C,gBAAA,CAAApB,IAAA,WAAA7B,CAAA;UAAA,OAAAA,CAAA,CAAAqC,QAAA,CAAAC,IAAA,CAAAqE,UAAA,CAAAc,kBAAA;QAAA;QACAL,IAAA,CAAA5J,QAAA,GAAAmI,MAAA,CAAA/H,KAAA;QACAwJ,IAAA,CAAA7J,YAAA,GAAA0I,EAAA;QAEA;UACAyB,MAAA,EAAAN,IAAA,CAAA5B,EAAA;UACAmC,UAAA;UACAP,IAAA,EAAAA,IAAA;UACAQ,gBAAA;QACA;MACA;IACA;IAEAnH,QAAA,WAAAA,SAAA;MACA,UAAA8E,MAAA,CAAAsC,kBAAA,MAAAjK,KAAA,CAAA6C,QAAA,GAAAoH,kBAAA,MAAApC,YAAA;IACA;IAEAV,KAAA,WAAAA,MAAA;MAAA,IAAA+C,MAAA;MACA,IAAA/C,KAAA,QAAApC,QAAA,CAAAX,MAAA,WAAA+F,CAAA;QAAA,OAAAA,CAAA,CAAAC,aAAA,KAAAF,MAAA,CAAAlK,KAAA,CAAAoK,aAAA;MAAA;MAEA,UAAAzC,MAAA,CAAAsC,kBAAA,CAAA9C,KAAA,GAAA8C,kBAAA,MAAAI,SAAA;IACA;IAEAA,SAAA,WAAAA,UAAA;MAAA,IAAAC,MAAA;MACA;MACA,IAAAC,cAAA,QAAAvF,YAAA,CAAAZ,MAAA,WAAA+F,CAAA;QAAA,OAAAA,CAAA,CAAA5F,IAAA,CAAAC,WAAA,KAAA8F,MAAA,CAAAtK,KAAA,CAAAoK,aAAA,IAAAD,CAAA,CAAA5F,IAAA,CAAAiG,QAAA;MAAA;MAEA,OAAAD,cAAA,CAAAjB,GAAA,WAAAmB,EAAA;QAAA;UACAlG,IAAA;YAAAmG,YAAA,EAAAD,EAAA,CAAA7C,EAAA,CAAA+C,OAAA;UAAA;UACAZ,UAAA;UACAP,IAAA,EAAAiB,EAAA;UACAT,gBAAA;QACA;MAAA;IACA;IAEAnF,YAAA,WAAAA,aAAA;MACA,IAAAA,YAAA,QAAAf,YAAA,UAAA9D,KAAA,CAAAiH,MAAA,WAAApE,QAAA,CAAAqE,MAAA;MAEA,OAAArC,YAAA,SAAAxC,aAAA,CAAAQ,QAAA;IACA;IAEA6D,SAAA,WAAAA,UAAA;MACA,aAAA7B,YAAA,SAAAM,SAAA,WAAAgC,KAAA,CAAAD,MAAA;IACA;IAEA0D,aAAA,WAAAA,cAAA;MACA,SAAA5K,KAAA,CAAAsD,MAAA;QACA,YAAAxB,MAAA,CAAAC,OAAA,oBAAAhF,MAAA,CAAAyG,WAAA,UAAAnB,aAAA,CAAAS,SAAA;MACA,gBAAA9C,KAAA,CAAAiH,MAAA;QACA,YAAAnF,MAAA,CAAAC,OAAA,uBAAA/E,QAAA,UAAAqF,aAAA,CAAAS,SAAA;MACA;MAEA;IACA;IAEA+H,uBAAA,WAAAA,wBAAA;MACA,SAAA7K,KAAA,CAAA8K,WAAA,mBAAA9K,KAAA,CAAA+K,KAAA,KAAApN,WAAA,CAAAqN,MAAA;QACA,IAAAC,YAAA,QAAAjL,KAAA,CAAAkL,aAAA,CAAA9G,MAAA,WAAA+G,CAAA;UAAA,OAAAA,CAAA,CAAAC,WAAA;QAAA;QAEA,IAAAH,YAAA,CAAA/D,MAAA,UAAAlH,KAAA,CAAAkL,aAAA,CAAAhE,MAAA;UACA;QACA;MACA;MAEA;IACA;IAEAmE,cAAA,WAAAA,eAAA;MACA,QACApO,KAAA,EACAE,QAAA,EACA;QACAuH,IAAA;QACA4G,QAAA;QACAC,IAAA;QACAvL,KAAA;QACAwL,SAAA;QACAC,aAAA;UAAAC,SAAA;QAAA;QACAC,WAAA;MACA,GACArO,oBAAA,EACAG,eAAA,EACAD,KAAA,EACAJ,GAAA,CACA;IACA;IAEAwO,qBAAA,WAAAA,sBAAA;MACA,QACA3O,KAAA,EAAAE,QAAA,EACA;QACAuH,IAAA;QACA4G,QAAA;QACAC,IAAA;QACAvL,KAAA;QACAwL,SAAA;QACAC,aAAA;UAAAC,SAAA;QAAA;QACAC,WAAA;MACA,GACArO,oBAAA,EACAI,kBAAA,EACAF,KAAA,EACAJ,GAAA,CACA;IACA;IAEAyO,aAAA,WAAAA,cAAA;MAAA,IAAAC,gBAAA;MACA,IAAAC,MAAA,IAAAD,gBAAA,QAAA9L,KAAA,CAAAgM,IAAA,cAAAF,gBAAA,uBAAAA,gBAAA,CAAAlE,EAAA;MAEA,KAAAmE,MAAA;QACA;MACA;MAEA,aAAAxI,WAAA,QAAAa,MAAA,WAAA+F,CAAA;QAAA,OAAAA,CAAA,CAAA8B,SAAA,KAAAF,MAAA;MAAA;IACA;IAEAG,aAAA,WAAAA,cAAA;MACA,YAAAlM,KAAA,CAAAmM,aAAA;IACA;IAEAC,mBAAA,WAAAA,oBAAA;MACA,QACA7O,YAAA,EACA;QACAmH,IAAA;QACA4G,QAAA;QACAtL,KAAA;QACAuL,IAAA;QACAc,aAAA;MACA,GACA;QACA3H,IAAA;QACA4G,QAAA;QACAtL,KAAA;QACAuL,IAAA;QACAe,KAAA;MACA,GAAAhK,aAAA,CAAAA,aAAA,KACAjF,UAAA;QAAAgP,aAAA;MAAA,IACA;QACA3H,IAAA;QACA4G,QAAA;QACAtL,KAAA;QACAwL,SAAA;QACAD,IAAA;QACAgB,KAAA;QACAD,KAAA;MACA,EACA;IACA;IAEAE,mBAAA,WAAAA,oBAAA;MACA,QAAAlK,aAAA,CAAAA,aAAA,KAEA/E,YAAA;QAAAyC,KAAA;QAAAyL,aAAA;UAAAgB,SAAA;QAAA;MAAA,IAEAvP,IAAA,EACA;QACAwH,IAAA;QACA4G,QAAA;QACAtL,KAAA;QACAuL,IAAA;QACAC,SAAA;QACAc,KAAA;MACA,GAAAhK,aAAA,CAAAA,aAAA,KAEAlF,GAAA;QACAmO,IAAA;QACAc,aAAA;MAAA,GAEA;IACA;IAEAvF,gBAAA,WAAAA,iBAAA;MACA,UAAA5D,YAAA;QACA;MACA;MAEA,SAAAlD,KAAA,CAAA+C,UAAA;QAAA,IAAA2J,iBAAA;QACA,UAAAA,iBAAA,QAAA1M,KAAA,CAAAgM,IAAA,cAAAU,iBAAA,eAAAA,iBAAA,CAAAC,OAAA,UAAAtK,aAAA,CAAA+D,YAAA;MACA;MAEA,SAAApG,KAAA,CAAAgD,QAAA;QACA,YAAAX,aAAA,CAAA+D,YAAA;MACA;MAEA,SAAApG,KAAA,CAAAiD,0BAAA,UAAA2J,cAAA;QACA,YAAAvK,aAAA,CAAA+D,YAAA;MACA;MAEA;IACA;IAEAwG,cAAA,WAAAA,eAAA;MAAA,IAAAC,iBAAA;MACA,QAAAA,iBAAA,QAAA7M,KAAA,CAAAgM,IAAA,cAAAa,iBAAA,uBAAAA,iBAAA,CAAAF,OAAA;IACA;IAEAjH,OAAA,WAAAA,QAAA;MAAA,IAAAoH,iBAAA;MACA,IAAApH,OAAA,IAAAoH,iBAAA,QAAA9M,KAAA,CAAAgM,IAAA,cAAAc,iBAAA,uBAAAA,iBAAA,CAAAC,OAAA;MAEA,OAAArH,OAAA,SAAArD,aAAA,CAAA8D,IAAA;IACA;IAEA6G,iBAAA,WAAAA,kBAAA;MACA,IAAAC,UAAA,GAAA5O,UAAA,MAAAyD,MAAA,CAAAC,OAAA,cAAA7D,WAAA;MAEA,UAAAyJ,MAAA,CAAAsF,UAAA,OAAAtF,MAAA,MAAAuF,aAAA;IACA;IAEAA,aAAA,WAAAA,cAAA;MACA,OAAA7O,UAAA,MAAAyD,MAAA,CAAAC,OAAA,cAAA5D,WAAA;IACA;IAEAgP,iBAAA,WAAAA,kBAAA;MACA,YAAAtK,QAAA,CAAAuK,IAAA,WAAA7E,OAAA;QAAA,OAAA3J,GAAA,CAAA2J,OAAA;MAAA;IACA;IAEA8E,gBAAA,WAAAA,iBAAA;MACA;IACA;EACA;EAEAC,OAAA,WAAAA,QAAA;IACAC,MAAA,CAAArJ,CAAA;EACA;EAEAsJ,OAAA;IACAC,oBAAA,WAAAA,qBAAAC,KAAA,EAAAC,SAAA;MACA;MACA,IAAAC,GAAA,GAAA9O,WAAA,CAAA4O,KAAA;MACA,IAAAG,mBAAA,QAAA/L,MAAA,CAAAC,OAAA,cAAA3D,iBAAA;;MAEA;MACA,KAAAwP,GAAA,KAAAC,mBAAA;QACA,KAAA/L,MAAA,CAAAD,QAAA;UACAiM,SAAA;UACAH,SAAA,EAAAA,SAAA;UACAI,UAAA;QACA;MACA;QACA;QACAJ,SAAA,CAAAK,SAAA;MACA;IACA;IAEAC,YAAA,WAAAA,aAAAC,KAAA;MAAA,IAAAC,MAAA;MAAA,OAAA5N,iBAAA,eAAAC,kBAAA,CAAAC,IAAA,UAAA2N,SAAA;QAAA,OAAA5N,kBAAA,CAAAW,IAAA,UAAAkN,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAhN,IAAA,GAAAgN,SAAA,CAAA/M,IAAA;YAAA;cAAA+M,SAAA,CAAAhN,IAAA;cAAAgN,SAAA,CAAA/M,IAAA;cAAA,OAEA4M,MAAA,CAAAnO,KAAA,CAAAiO,YAAA;YAAA;cAEA;cACAM,UAAA;gBACAL,KAAA;cACA;cAAAI,SAAA,CAAA/M,IAAA;cAAA;YAAA;cAAA+M,SAAA,CAAAhN,IAAA;cAAAgN,SAAA,CAAAE,EAAA,GAAAF,SAAA;cAEAH,MAAA,CAAArM,MAAA,CAAAD,QAAA;gBAAA4M,KAAA;gBAAAC,GAAA,EAAAJ,SAAA,CAAAE;cAAA;cACAN,KAAA;YAAA;YAAA;cAAA,OAAAI,SAAA,CAAA9I,IAAA;UAAA;QAAA,GAAA4I,QAAA;MAAA;IAEA;IAEAO,cAAA,WAAAA,eAAAjB,KAAA,EAAAlE,IAAA;MACA,KAAA1H,MAAA,CAAA8M,MAAA;QACAjB,SAAA,GAAAnE,IAAA;QACAqF,IAAA,EAAAnB,KAAA,CAAAoB;MACA;IACA;IAEAC,oBAAA,WAAAA,qBAAAvF,IAAA;MAAA,IAAAwF,qBAAA;MACA,WAAAA,qBAAA,GAAAxF,IAAA,CAAAQ,gBAAA,cAAAgF,qBAAA,eAAAA,qBAAA,CAAA9H,MAAA;IACA;IAEAvB,UAAA,WAAAA,WAAA;MAAA,IAAAsJ,MAAA;MAAA,OAAA1O,iBAAA,eAAAC,kBAAA,CAAAC,IAAA,UAAAyO,SAAA;QAAA,IAAAC,iBAAA;QAAA,IAAAC,MAAA,EAAAC,GAAA;QAAA,OAAA7O,kBAAA,CAAAW,IAAA,UAAAmO,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAjO,IAAA,GAAAiO,SAAA,CAAAhO,IAAA;YAAA;cAAA,KACA0N,MAAA,CAAApJ,SAAA;gBAAA0J,SAAA,CAAAhO,IAAA;gBAAA;cAAA;cAAAgO,SAAA,CAAAhO,IAAA;cAAA,OACA0N,MAAA,CAAApJ,SAAA,CAAAC,UAAA;YAAA;cACAmJ,MAAA,CAAApJ,SAAA;YAAA;cAGAuJ,MAAA;gBACAI,MAAA;gBACAC,UAAA;gBACAC,MAAA;cACA;cAEAL,GAAA,IAAAF,iBAAA,GAAAF,MAAA,CAAAjP,KAAA,CAAAgM,IAAA,cAAAmD,iBAAA,uBAAAA,iBAAA,CAAAQ,OAAA;cAEAN,GAAA,GAAArR,SAAA,CAAAqR,GAAA,CAAA1E,OAAA,iBAAAyE,MAAA;cAEAH,MAAA,CAAApJ,SAAA,OAAAtH,MAAA,CAAA8Q,GAAA;cACAJ,MAAA,CAAApJ,SAAA,CAAA+J,gBAAA,CAAApR,eAAA,YAAAqR,CAAA;gBACAZ,MAAA,CAAA9I,IAAA;gBACA8I,MAAA,CAAA/I,OAAA;cACA;cAEA+I,MAAA,CAAApJ,SAAA,CAAA+J,gBAAA,CAAAnR,kBAAA,YAAAoR,CAAA;gBACAZ,MAAA,CAAA/I,OAAA;cACA;cAEA+I,MAAA,CAAApJ,SAAA,CAAA+J,gBAAA,CAAAjR,mBAAA,YAAAkR,CAAA;gBACAZ,MAAA,CAAA/I,OAAA;gBACA4J,OAAA,CAAAC,KAAA,kBAAAF,CAAA;cACA;cAEAZ,MAAA,CAAApJ,SAAA,CAAA+J,gBAAA,CAAAlR,aAAA,YAAAmR,CAAA;gBACA,IAAAG,IAAA,GAAA/R,YAAA,CAAA4R,CAAA,CAAAI,MAAA,CAAAlK,IAAA;gBAEA,IAAAmK,GAAA,GAAAF,IAAA;gBACA,IAAAG,IAAA;gBAEA,IAAAC,GAAA,GAAAJ,IAAA,CAAAK,OAAA;gBAEA,IAAAD,GAAA;kBACA,IAAAE,OAAA,GAAAN,IAAA,CAAAO,MAAA,IAAAH,GAAA;kBACA,IAAAI,IAAA,OAAAC,IAAA,CAAAH,OAAA;kBAEA,KAAAI,KAAA,CAAAF,IAAA,CAAAG,UAAA;oBACAR,IAAA,GAAAK,IAAA,CAAAI,WAAA;oBACAV,GAAA,GAAAF,IAAA,CAAAO,MAAA,CAAAH,GAAA;kBACA;gBACA;gBAEAnB,MAAA,CAAA9I,IAAA,CAAA0K,IAAA;kBACAjJ,EAAA,EAAA7I,MAAA;kBACAmR,GAAA,EAAAlR,MAAA,CAAA8R,YAAA,CAAAZ,GAAA;kBACAa,MAAA,EAAAb,GAAA;kBACAC,IAAA,EAAAA;gBACA;cACA;cAEAlB,MAAA,CAAApJ,SAAA,CAAAmL,OAAA;YAAA;YAAA;cAAA,OAAAzB,SAAA,CAAA/J,IAAA;UAAA;QAAA,GAAA0J,QAAA;MAAA;IACA;IAEA+B,MAAA,WAAAA,OAAAd,IAAA;MACA,KAAAA,IAAA;QACA;MACA;MAEA,IAAAe,GAAA,GAAAnT,GAAA,CAAAoS,IAAA;MACA,IAAAgB,KAAA,GAAApT,GAAA,GAAAkT,MAAA;MAEA,IAAAC,GAAA,CAAAD,MAAA,mBAAAE,KAAA;QACA,OAAApT,GAAA,CAAAoS,IAAA,EAAAc,MAAA,MAAA/D,aAAA;MACA;QACA,OAAAnP,GAAA,CAAAoS,IAAA,EAAAc,MAAA,MAAAjE,iBAAA;MACA;IACA;IAEAoE,uBAAA,WAAAA,wBAAA;MACA;MACA;MACA;MACA;MACA,IAAAC,IAAA,GAAA9U,4BAAA,MAAA0J,aAAA,OAAAnE,MAAA;MAEA,OAAAuP,IAAA,WAAAxJ,YAAA,CAAAX,MAAA;IACA;IAEAoK,oBAAA,WAAAA,qBAAA;MACA;MACA;MACA;MACA;MACA,IAAAD,IAAA,GAAA9U,4BAAA,MAAAyJ,cAAA,OAAAlE,MAAA;MAEA,OAAAuP,IAAA,WAAAhH,SAAA,CAAAnD,MAAA;IACA;EACA;AACA"}]}