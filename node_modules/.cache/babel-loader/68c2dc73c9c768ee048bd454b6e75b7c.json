{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/models/workload.service.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/models/workload.service.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["findBy","TARGET_WORKLOADS","UI_MANAGED","HCI","HCI_LABELS_ANNOTATIONS","WORKLOAD_TYPES","SERVICE","clone","get","SteveModel","shortenedImage","WorkloadService","_SteveModel","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_getPortsWithServiceType","_asyncToGenerator","regeneratorRuntime","mark","_callee","ports","canAccessServices","services","clusterIPServicePorts","loadBalancerServicePorts","nodePortServicePorts","wrap","_callee$","_context","prev","next","containers","forEach","container","push","_toConsumableArray","initContainers","$getters","getServicesOwned","t0","sent","length","svc","_svc$spec","_svc$spec2","_svc$spec3","spec","type","port","name","concat","containerPort","protocol","toLowerCase","hostPort","_listeningPort","_serviceType","portSpec","nodePort","abrupt","stop","getPortsWithServiceType","_getServicesOwned","_callee2","force","normanTypes","selectorKey","normanSelectorValue","steveSelectorValue","allSvc","_args2","_callee2$","_context2","undefined","_defineProperty","REPLICA_SET","DEPLOYMENT","STATEFUL_SET","DAEMON_SET","Object","keys","workloadSelector","_type","metadata","namespace","$dispatch","opt","root","filter","_svc$spec4","_svc$spec5","selector","images","CRON_JOB","includes","image","map","jobTemplate","template","_servicesFromContainerPorts","_callee3","mode","ownerRef","annotations","clusterIP","loadBalancer","existing","toSave","toRemove","clusterIPProxy","nodePortProxy","loadBalancerProxy","portsWithIpam","_callee3$","_context3","apiVersion","controller","kind","uid","JSON","stringify","ownerReferences","externalTrafficPolicy","isFromNorman","service","targetPort","npPort","lbPort","id","p","_ipam","CLOUD_PROVIDER_IPAM","servicesFromContainerPorts","_x","_x2","default"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/models/workload.service.js"],"sourcesContent":["\nimport { findBy } from '@shell/utils/array';\nimport { TARGET_WORKLOADS, UI_MANAGED, HCI as HCI_LABELS_ANNOTATIONS } from '@shell/config/labels-annotations';\nimport { WORKLOAD_TYPES, SERVICE } from '@shell/config/types';\nimport { clone, get } from '@shell/utils/object';\nimport SteveModel from '@shell/plugins/steve/steve-class';\nimport { shortenedImage } from '@shell/utils/string';\n\nexport default class WorkloadService extends SteveModel {\n  async getPortsWithServiceType() {\n    const ports = [];\n\n    this.containers.forEach((container) => ports.push(...(container.ports || [])));\n    (this.initContainers || []).forEach((container) => ports.push(...(container.ports || [])));\n\n    // Only get services owned if we can access the service resource\n    const canAccessServices = this.$getters['schemaFor'](SERVICE);\n    const services = canAccessServices ? await this.getServicesOwned() : [];\n    const clusterIPServicePorts = [];\n    const loadBalancerServicePorts = [];\n    const nodePortServicePorts = [];\n\n    if (services.length) {\n      services.forEach((svc) => {\n        switch (svc.spec.type) {\n        case 'ClusterIP':\n          clusterIPServicePorts.push(...(svc?.spec?.ports || []));\n          break;\n        case 'LoadBalancer':\n          loadBalancerServicePorts.push(...(svc?.spec?.ports || []));\n          break;\n        case 'NodePort':\n          nodePortServicePorts.push(...(svc?.spec?.ports || []));\n          break;\n        default:\n          break;\n        }\n      });\n    }\n    ports.forEach((port) => {\n      const name = port.name ? port.name : `${ port.containerPort }${ port.protocol.toLowerCase() }${ port.hostPort || port._listeningPort || '' }`;\n\n      port.name = name;\n\n      if (port._serviceType && port._serviceType !== '') {\n        return;\n      }\n\n      if (loadBalancerServicePorts.length) {\n        const portSpec = findBy(loadBalancerServicePorts, 'name', name);\n\n        if (portSpec) {\n          port._listeningPort = portSpec.port;\n\n          port._serviceType = 'LoadBalancer';\n\n          return;\n        }\n      } if (nodePortServicePorts.length) {\n        const portSpec = findBy(nodePortServicePorts, 'name', name);\n\n        if (portSpec) {\n          port._listeningPort = portSpec.nodePort;\n\n          port._serviceType = 'NodePort';\n\n          return;\n        }\n      } if (clusterIPServicePorts.length) {\n        if (findBy(clusterIPServicePorts, 'name', name)) {\n          port._serviceType = 'ClusterIP';\n        }\n      }\n    });\n\n    return ports;\n  }\n\n  async getServicesOwned(force = false) {\n    const normanTypes = {\n      [WORKLOAD_TYPES.REPLICA_SET]:  'replicaSet',\n      [WORKLOAD_TYPES.DEPLOYMENT]:   'deployment',\n      [WORKLOAD_TYPES.STATEFUL_SET]: 'statefulSet',\n      [WORKLOAD_TYPES.DAEMON_SET]:   'daemonSet',\n    };\n    const selectorKey = Object.keys(this.workloadSelector)[0];\n\n    const normanSelectorValue =\n      `${ normanTypes[this._type ? this._type : this.type] }-${\n        this.metadata.namespace\n      }-${ this.metadata.name }`;\n\n    const steveSelectorValue = this.workloadSelector[selectorKey];\n    const allSvc = await this.$dispatch('cluster/findAll', { type: SERVICE, opt: { force } }, { root: true });\n\n    return (allSvc || []).filter((svc) => (svc.spec?.selector || {})[selectorKey] === steveSelectorValue || (svc.spec?.selector || {})[selectorKey] === normanSelectorValue );\n  }\n\n  get imageNames() {\n    let containers;\n    const images = [];\n\n    if (this.type === WORKLOAD_TYPES.CRON_JOB) {\n      containers = get(this, 'spec.jobTemplate.spec.template.spec.containers');\n    } else {\n      containers = get(this, 'spec.template.spec.containers');\n    }\n    if (containers) {\n      containers.forEach((container) => {\n        if (!images.includes(container.image)) {\n          images.push(container.image);\n        }\n      });\n    }\n\n    return images.map(shortenedImage);\n  }\n\n  get containers() {\n    if (this.type === WORKLOAD_TYPES.CRON_JOB) {\n      // cronjob pod template is nested slightly different than other types\n      const { spec: { jobTemplate: { spec: { template: { spec: { containers } } } } } } = this;\n\n      return containers;\n    }\n\n    if ( this.spec.containers ) {\n      return this.spec.containers;\n    }\n\n    const { spec:{ template:{ spec:{ containers } } } } = this;\n\n    return containers;\n  }\n\n  get initContainers() {\n    if (this.type === WORKLOAD_TYPES.CRON_JOB) {\n      // cronjob pod template is nested slightly different than other types\n      const { spec: { jobTemplate: { spec: { template: { spec: { initContainers } } } } } } = this;\n\n      return initContainers;\n    }\n\n    if (this.spec.initContainers) {\n      return this.spec.initContainers;\n    }\n\n    const { spec:{ template:{ spec:{ initContainers } } } } = this;\n\n    return initContainers;\n  }\n\n  get workloadSelector() {\n    return {\n      'workload.user.cattle.io/workloadselector': `${ this._type ? this._type : this.type }-${\n        this.metadata.namespace\n      }-${ this.metadata.name }`\n    };\n  }\n\n  // create clusterip, nodeport, loadbalancer services from container port spec\n  async servicesFromContainerPorts(mode, ports) {\n    const ownerRef = {\n      apiVersion: this.apiVersion,\n      controller: true,\n      kind:       this.kind,\n      name:       this.metadata.name,\n      uid:        this.metadata.uid\n    };\n\n    const annotations = { [TARGET_WORKLOADS]: JSON.stringify([`${ this.metadata.namespace }/${ this.metadata.name }`]), [UI_MANAGED]: 'true' };\n\n    let clusterIP = {\n      type: SERVICE,\n      spec: {\n        ports:    [],\n        selector: this.workloadSelector,\n        type:     'ClusterIP'\n      },\n      metadata: {\n        name:            this.metadata.name,\n        namespace:       this.metadata.namespace,\n        annotations,\n        ownerReferences: [ownerRef]\n      },\n    };\n\n    let nodePort = {\n      type: SERVICE,\n      spec: {\n        ports:    [],\n        selector: this.workloadSelector,\n        type:     'NodePort'\n      },\n      metadata: {\n        name:            `${ this.metadata.name }-nodeport`,\n        namespace:       this.metadata.namespace,\n        annotations,\n        ownerReferences: [ownerRef]\n      },\n    };\n\n    let loadBalancer = {\n      type: SERVICE,\n      spec: {\n        ports:                 [],\n        selector:              this.workloadSelector,\n        type:                  'LoadBalancer',\n        externalTrafficPolicy: 'Cluster'\n      },\n      metadata: {\n        name:            `${ this.metadata.name }-loadbalancer`,\n        namespace:       this.metadata.namespace,\n        annotations,\n        ownerReferences: [ownerRef]\n      },\n    };\n\n    const existing = await this.getServicesOwned(this.isFromNorman);\n\n    if (existing && existing.length) {\n      existing.forEach((service) => {\n        switch (service.spec.type) {\n        case 'ClusterIP':\n          clusterIP = service;\n          clusterIP.spec.ports = [];\n          break;\n        case 'NodePort':\n          nodePort = service;\n          nodePort.spec.ports = [];\n          break;\n        case 'LoadBalancer':\n          loadBalancer = service;\n          loadBalancer.spec.ports = [];\n          break;\n        default:\n          break;\n        }\n      });\n    }\n    ports.forEach((port) => {\n      const portSpec = {\n        name: port.name, protocol: port.protocol, port: port.containerPort, targetPort: port.containerPort\n      };\n\n      if (port._serviceType !== '') {\n        clusterIP.spec.ports.push(portSpec);\n        switch (port._serviceType) {\n        case 'NodePort': {\n          const npPort = clone(portSpec);\n\n          if (port._listeningPort) {\n            npPort.nodePort = port._listeningPort;\n          }\n          nodePort.spec.ports.push(npPort);\n          break; }\n        case 'LoadBalancer': {\n          const lbPort = clone(portSpec);\n\n          if (port._listeningPort) {\n            lbPort.port = port._listeningPort;\n          }\n          loadBalancer.spec.ports.push(lbPort);\n          break; }\n        default:\n          break;\n        }\n      }\n    });\n\n    const toSave = [];\n    const toRemove = [];\n    let clusterIPProxy;\n\n    if (clusterIP.spec.ports.length > 0) {\n      if (clusterIP.id) {\n        clusterIPProxy = clusterIP;\n      } else {\n        clusterIPProxy = await this.$dispatch(`cluster/create`, clusterIP, { root: true });\n      }\n      toSave.push(clusterIPProxy);\n    } else if (clusterIP.id) {\n      toRemove.push(clusterIP);\n    }\n\n    if (nodePort.spec.ports.length > 0) {\n      let nodePortProxy;\n\n      // if id is defined it's a preexisting service\n      if (nodePort.id) {\n        nodePortProxy = nodePort;\n      } else {\n        nodePortProxy = await this.$dispatch(`cluster/create`, nodePort, { root: true });\n      }\n      toSave.push(nodePortProxy);\n      // if id defined but no ports, the service already exists but should be removed (user has removed all container ports mapping to it)\n    } else if (nodePort.id) {\n      toRemove.push(nodePort);\n    }\n\n    if (loadBalancer.spec.ports.length > 0) {\n      let loadBalancerProxy;\n\n      if (loadBalancer.id) {\n        loadBalancerProxy = loadBalancer;\n      } else {\n        loadBalancerProxy = await this.$dispatch(`cluster/create`, loadBalancer, { root: true });\n      }\n\n      const portsWithIpam = ports.filter((p) => p._ipam) || [];\n\n      if (portsWithIpam.length > 0) {\n        loadBalancerProxy.metadata.annotations[HCI_LABELS_ANNOTATIONS.CLOUD_PROVIDER_IPAM] = portsWithIpam[0]._ipam;\n      }\n\n      toSave.push(loadBalancerProxy);\n    } else if (loadBalancer.id) {\n      toRemove.push(loadBalancer);\n    }\n\n    return { toSave, toRemove };\n  }\n}\n"],"mappings":"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"}]}