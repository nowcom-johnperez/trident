{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/nav/WindowManager/ContainerShell.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/nav/WindowManager/ContainerShell.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["allHash","addParams","base64Decode","base64Encode","Select","NODE","Socket","EVENT_CONNECTED","EVENT_CONNECTING","EVENT_DISCONNECTED","EVENT_MESSAGE","EVENT_CONNECT_ERROR","Window","commands","linux","windows","components","props","tab","type","Object","required","active","Boolean","height","Number","default","undefined","width","pod","initialContainer","String","commandOnFirstConnect","data","_this$pod","container","defaultContainerName","socket","terminal","fitAddon","searchAddon","webglAddon","isOpen","isOpening","backlog","node","keepAliveTimer","errorMsg","backupShells","os","retries","computed","xtermConfig","allowProposedApi","cursorBlink","useStyle","fontSize","containerChoices","_this$pod2","spec","containers","map","x","name","watch","connect","fit","beforeDestroy","clearInterval","cleanup","mounted","_this","_asyncToGenerator","regeneratorRuntime","mark","_callee","_this$pod$spec","nodeId","schema","wrap","_callee$","_context","prev","next","nodeName","$store","getters","dispatch","id","t0","setupTerminal","setInterval","stop","methods","_this2","_callee2","docStyle","xterm","addons","_callee2$","_context2","getComputedStyle","document","querySelector","sent","webgl","weblinks","search","Terminal","_objectSpread","theme","background","getPropertyValue","trim","foreground","cursor","selectionBackground","FitAddon","SearchAddon","WebGlAddon","e","loadAddon","WebLinksAddon","open","$refs","flush","onData","input","msg","concat","write","send","push","clear","getSocketUrl","_this$pod3","_this3","links","view","filter","shell","shift","url","replace","stdout","stdin","stderr","tty","command","_this4","_callee3","_callee3$","_context3","disconnect","reset","abrupt","addEventListener","console","error","paste","length","t","detail","substr","focus","slice","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","err","f","arg","_ref","proposeDimensions","rows","cols","message","JSON","stringify","Width","Math","floor","Height","dispose"],"sources":["node_modules/@rancher/shell/components/nav/WindowManager/ContainerShell.vue"],"sourcesContent":["<script>\nimport { allHash } from '@shell/utils/promise';\nimport { addParams } from '@shell/utils/url';\nimport { base64Decode, base64Encode } from '@shell/utils/crypto';\nimport Select from '@shell/components/form/Select';\nimport { NODE } from '@shell/config/types';\n\nimport Socket, {\n  EVENT_CONNECTED,\n  EVENT_CONNECTING,\n  EVENT_DISCONNECTED,\n  EVENT_MESSAGE,\n  //  EVENT_FRAME_TIMEOUT,\n  EVENT_CONNECT_ERROR,\n} from '@shell/utils/socket';\nimport Window from './Window';\n\nconst commands = {\n  linux: [\n    '/bin/sh',\n    '-c',\n    'TERM=xterm-256color; export TERM; [ -x /bin/bash ] && ([ -x /usr/bin/script ] && /usr/bin/script -q -c \"/bin/bash\" /dev/null || exec /bin/bash) || exec /bin/sh',\n  ],\n  windows: ['cmd']\n};\n\nexport default {\n  components: { Window, Select },\n\n  props: {\n    // The definition of the tab itself\n    tab: {\n      type:     Object,\n      required: true,\n    },\n\n    // Is this tab currently displayed\n    active: {\n      type:     Boolean,\n      required: true,\n    },\n\n    // The height of the window\n    height: {\n      type:    Number,\n      default: undefined,\n    },\n\n    // The width of the window\n    width: {\n      type:    Number,\n      default: undefined,\n    },\n\n    // The pod to connect to\n    pod: {\n      type:     Object,\n      required: true,\n    },\n\n    // The container in the pod to initially show\n    initialContainer: {\n      type:    String,\n      default: null,\n    },\n\n    // Runs this command immediately after connecting\n    commandOnFirstConnect: {\n      type:    String,\n      default: null\n    }\n  },\n\n  data() {\n    return {\n      container:      this.initialContainer || this.pod?.defaultContainerName,\n      socket:         null,\n      terminal:       null,\n      fitAddon:       null,\n      searchAddon:    null,\n      webglAddon:     null,\n      isOpen:         false,\n      isOpening:      false,\n      backlog:        [],\n      node:           null,\n      keepAliveTimer: null,\n      errorMsg:       '',\n      backupShells:   ['linux', 'windows'],\n      os:             undefined,\n      retries:        0\n    };\n  },\n\n  computed: {\n    xtermConfig() {\n      return {\n        allowProposedApi: true,\n        cursorBlink:      true,\n        useStyle:         true,\n        fontSize:         12,\n      };\n    },\n\n    containerChoices() {\n      return this.pod?.spec?.containers?.map((x) => x.name) || [];\n    },\n  },\n\n  watch: {\n    container() {\n      this.connect();\n    },\n\n    height() {\n      this.fit();\n    },\n\n    width() {\n      this.fit();\n    },\n  },\n\n  beforeDestroy() {\n    clearInterval(this.keepAliveTimer);\n    this.cleanup();\n  },\n\n  async mounted() {\n    const nodeId = this.pod.spec?.nodeName;\n\n    try {\n      const schema = this.$store.getters[`cluster/schemaFor`](NODE);\n\n      if (schema) {\n        await this.$store.dispatch('cluster/find', { type: NODE, id: nodeId });\n      }\n    } catch {}\n\n    await this.setupTerminal();\n    await this.connect();\n\n    clearInterval(this.keepAliveTimer);\n    this.keepAliveTimer = setInterval(() => {\n      this.fit();\n    }, 60 * 1000);\n  },\n\n  methods: {\n    async setupTerminal() {\n      const docStyle = getComputedStyle(document.querySelector('body'));\n      const xterm = await import(/* webpackChunkName: \"xterm\" */ 'xterm');\n\n      const addons = await allHash({\n        fit:      import(/* webpackChunkName: \"xterm\" */ 'xterm-addon-fit'),\n        webgl:    import(/* webpackChunkName: \"xterm\" */ 'xterm-addon-webgl'),\n        weblinks: import(/* webpackChunkName: \"xterm\" */ 'xterm-addon-web-links'),\n        search:   import(/* webpackChunkName: \"xterm\" */ 'xterm-addon-search'),\n      });\n\n      const terminal = new xterm.Terminal({\n        theme: {\n          background:          docStyle.getPropertyValue('--terminal-bg').trim(),\n          foreground:          docStyle.getPropertyValue('--terminal-text').trim(),\n          cursor:              docStyle.getPropertyValue('--terminal-cursor').trim(),\n          selectionBackground: docStyle.getPropertyValue('--terminal-selection').trim(),\n        },\n        ...this.xtermConfig,\n      });\n\n      this.fitAddon = new addons.fit.FitAddon();\n      this.searchAddon = new addons.search.SearchAddon();\n\n      try {\n        this.webglAddon = new addons.webgl.WebGlAddon();\n      } catch (e) {\n        // Some browsers (Safari) don't support the webgl renderer, so don't use it.\n        this.webglAddon = null;\n      }\n\n      terminal.loadAddon(this.fitAddon);\n      terminal.loadAddon(this.searchAddon);\n      terminal.loadAddon(new addons.weblinks.WebLinksAddon());\n      terminal.open(this.$refs.xterm);\n\n      if (this.webglAddon) {\n        terminal.loadAddon(this.webglAddon);\n      }\n\n      this.fit();\n      this.flush();\n\n      terminal.onData((input) => {\n        const msg = `0${ base64Encode(input) }`;\n\n        this.write(msg);\n      });\n\n      this.terminal = terminal;\n    },\n\n    write(msg) {\n      if (this.isOpen) {\n        this.socket.send(msg);\n      } else {\n        this.backlog.push(msg);\n      }\n    },\n\n    clear() {\n      this.terminal.clear();\n    },\n\n    getSocketUrl() {\n      if (!this.pod?.links?.view) {\n        return;\n      }\n\n      if (this.pod.os) {\n        this.os = this.pod.os;\n        this.backupShells = this.backupShells.filter((shell) => shell !== this.pod.os);\n      } else {\n        this.os = this.backupShells.shift();\n      }\n\n      const url = addParams(\n        `${ this.pod.links.view.replace(/^http/, 'ws') }/exec`,\n        {\n          container: this.container,\n          stdout:    1,\n          stdin:     1,\n          stderr:    1,\n          tty:       1,\n          command:   commands[this.os],\n        }\n      );\n\n      return url;\n    },\n\n    async connect() {\n      if (this.socket) {\n        await this.socket.disconnect();\n        this.socket = null;\n        this.terminal.reset();\n      }\n\n      const url = this.getSocketUrl();\n\n      if (!url) {\n        return;\n      }\n\n      this.socket = new Socket(url, false, 0, 'base64.channel.k8s.io');\n\n      this.socket.addEventListener(EVENT_CONNECTING, (e) => {\n        this.isOpen = false;\n        this.isOpening = true;\n        this.errorMsg = '';\n      });\n\n      this.socket.addEventListener(EVENT_CONNECT_ERROR, (e) => {\n        this.isOpen = false;\n        this.isOpening = false;\n        console.error('Connect Error', e); // eslint-disable-line no-console\n      });\n\n      this.socket.addEventListener(EVENT_CONNECTED, (e) => {\n        this.isOpen = true;\n        this.isOpening = false;\n        this.fit();\n        this.flush();\n\n        if (this.commandOnFirstConnect) {\n          this.terminal.paste(`${ this.commandOnFirstConnect }`);\n        }\n      });\n\n      this.socket.addEventListener(EVENT_DISCONNECTED, (e) => {\n        this.isOpen = false;\n        this.isOpening = false;\n\n        // If we had an error message, try connecting with the next command\n        if (this.errorMsg) {\n          this.terminal.write(this.errorMsg);\n          if (this.backupShells.length && this.retries < 2) {\n            this.retries++;\n            // we're not really counting on this being a reactive change so there's no need to fire the whole action\n            this.pod.os = undefined;\n            // the pod will still return an os if one's been defined in the node so we'll skip the backups if that's the case and rely on retry count to break the retry loop\n            if (!this.pod.os) {\n              this.os = undefined;\n            }\n            this.connect();\n          } else {\n            // Output an message to let he user know none of the shell commands worked\n            this.terminal.write(this.t('wm.containerShell.failed'));\n          }\n        }\n      });\n\n      this.socket.addEventListener(EVENT_MESSAGE, (e) => {\n        const type = e.detail.data.substr(0, 1);\n        const msg = base64Decode(e.detail.data.substr(1));\n\n        this.errorMsg = '';\n\n        if (`${ type }` === '1') {\n          if (msg) {\n            // we're not really counting on this being a reactive change so there's no need to fire the whole action\n            this.pod.os = this.os;\n          }\n          this.terminal.write(msg);\n        } else {\n          console.error(msg); // eslint-disable-line no-console\n\n          if (`${ type }` === '3') {\n            this.errorMsg = msg;\n          }\n        }\n      });\n\n      this.socket.connect();\n      this.terminal.focus();\n    },\n\n    flush() {\n      const backlog = this.backlog.slice();\n\n      this.backlog = [];\n\n      for (const data of backlog) {\n        this.socket.send(data);\n      }\n    },\n\n    fit(arg) {\n      if (!this.fitAddon) {\n        return;\n      }\n\n      this.fitAddon.fit();\n\n      const { rows, cols } = this.fitAddon.proposeDimensions() || {};\n\n      if (!this.isOpen) {\n        return;\n      }\n\n      const message = `4${ base64Encode(\n        JSON.stringify({\n          Width:  Math.floor(cols),\n          Height: Math.floor(rows),\n        })\n      ) }`;\n\n      this.socket.send(message);\n    },\n\n    cleanup() {\n      if (this.socket) {\n        this.socket.disconnect();\n        this.socket = null;\n      }\n\n      if (this.terminal) {\n        this.terminal.dispose();\n        this.terminal = null;\n      }\n    },\n  },\n};\n</script>\n\n<template>\n  <Window\n    :active=\"active\"\n    :before-close=\"cleanup\"\n  >\n    <template #title>\n      <Select\n        v-if=\"containerChoices.length > 0\"\n        v-model=\"container\"\n        :disabled=\"containerChoices.length === 1\"\n        class=\"containerPicker auto-width pull-left\"\n        :options=\"containerChoices\"\n        :clearable=\"false\"\n        placement=\"top\"\n      >\n        <template #selected-option=\"option\">\n          <t\n            v-if=\"option\"\n            k=\"wm.containerShell.containerName\"\n            :label=\"option.label\"\n          />\n        </template>\n      </Select>\n      <div class=\"pull-left ml-5\">\n        <button\n          class=\"btn btn-sm bg-primary\"\n          @click=\"clear\"\n        >\n          <t k=\"wm.containerShell.clear\" />\n        </button>\n      </div>\n      <div class=\"status pull-left\">\n        <t\n          v-if=\"isOpen\"\n          k=\"wm.connection.connected\"\n          class=\"text-success\"\n        />\n        <t\n          v-else-if=\"isOpening\"\n          k=\"wm.connection.connecting\"\n          class=\"text-warning\"\n          :raw=\"true\"\n        />\n        <t\n          v-else\n          k=\"wm.connection.disconnected\"\n          class=\"text-error\"\n        />\n      </div>\n    </template>\n    <template #body>\n      <div\n        class=\"shell-container\"\n        :class=\"{ open: isOpen, closed: !isOpen }\"\n      >\n        <div\n          ref=\"xterm\"\n          class=\"shell-body\"\n        />\n        <resize-observer @notify=\"fit\" />\n      </div>\n    </template>\n  </Window>\n</template>\n\n<style lang=\"scss\">\n  .xterm-char-measure-element {\n    position: static;\n  }\n</style>\n\n<style lang=\"scss\" scoped>\n.text-warning {\n  animation: flasher 2.5s linear infinite;\n}\n\n@keyframes flasher {\n  50% {\n    opacity: 0;\n  }\n}\n\n.shell-container {\n  height: 100%;\n  overflow: hidden;\n  .resize-observer {\n    display: none;\n  }\n}\n\n.shell-body {\n  padding: calc(2 * var(--outline-width));\n  height: 100%;\n\n  & > .terminal.focus {\n    outline: var(--outline-width) solid var(--outline);\n  }\n}\n\n.containerPicker {\n  ::v-deep &.unlabeled-select {\n    display: inline-block;\n    min-width: 200px;\n    height: 30px;\n    min-height: 30px;\n    width: initial;\n  }\n}\n\n.status {\n  align-items: center;\n  display: flex;\n  min-width: 80px;\n  height: 30px;\n  margin-left: 10px;\n}\n</style>\n"],"mappings":"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"}]}