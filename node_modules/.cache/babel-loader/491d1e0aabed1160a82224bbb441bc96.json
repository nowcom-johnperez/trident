{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/list/workload.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/list/workload.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["ResourceTable","WORKLOAD_TYPES","SCHEMA","NODE","POD","LIST_WORKLOAD_TYPES","ResourceFetch","schema","id","type","attributes","kind","namespaced","metadata","name","$loadingResources","$route","$store","allowedResources","Object","values","forEach","getters","push","allTypes","params","resource","loadResources","loadIndeterminate","components","mixins","props","useQueryParamsForSimpleFiltering","Boolean","default","fetch","_this","_asyncToGenerator","regeneratorRuntime","mark","_callee","_schema","wrap","_callee$","_context","prev","next","length","$initializeFetchData","$fetchType","_unused","loadHeathResources","Promise","all","map","allowed","resources","sent","stop","data","_$loadingResources","computed","filteredRows","out","_iterator","_createForOfIteratorHelper","_step","s","n","done","typeRows","value","_iterator2","_step2","row","ownedByWorkload","err","e","f","methods","JOB","CRON_JOB","typeDisplay","paramSchema"],"sources":["node_modules/@rancher/shell/list/workload.vue"],"sourcesContent":["<script>\nimport ResourceTable from '@shell/components/ResourceTable';\nimport {\n  WORKLOAD_TYPES, SCHEMA, NODE, POD, LIST_WORKLOAD_TYPES\n} from '@shell/config/types';\nimport ResourceFetch from '@shell/mixins/resource-fetch';\n\nconst schema = {\n  id:         'workload',\n  type:       SCHEMA,\n  attributes: {\n    kind:       'Workload',\n    namespaced: true\n  },\n  metadata: { name: 'workload' },\n};\n\nconst $loadingResources = ($route, $store) => {\n  const allowedResources = [];\n\n  Object.values(LIST_WORKLOAD_TYPES).forEach((type) => {\n    // You may not have RBAC to see some of the types\n    if ($store.getters['cluster/schemaFor'](type) ) {\n      allowedResources.push(type);\n    }\n  });\n\n  const allTypes = $route.params.resource === schema.id;\n\n  return {\n    loadResources:     allTypes ? allowedResources : [$route.params.resource],\n    loadIndeterminate: allTypes,\n  };\n};\n\nexport default {\n  name:       'ListWorkload',\n  components: { ResourceTable },\n  mixins:     [ResourceFetch],\n\n  props: {\n    useQueryParamsForSimpleFiltering: {\n      type:    Boolean,\n      default: false\n    }\n  },\n\n  async fetch() {\n    if (this.allTypes && this.loadResources.length) {\n      this.$initializeFetchData(this.loadResources[0], this.loadResources);\n    } else {\n      this.$initializeFetchData(this.$route.params.resource);\n    }\n\n    try {\n      const schema = this.$store.getters[`cluster/schemaFor`](NODE);\n\n      if (schema) {\n        this.$fetchType(NODE);\n      }\n    } catch {}\n\n    this.loadHeathResources();\n\n    if ( this.allTypes ) {\n      this.resources = await Promise.all(this.loadResources.map((allowed) => {\n        return this.$fetchType(allowed, this.loadResources);\n      }));\n    } else {\n      const type = this.$route.params.resource;\n\n      if ( this.$store.getters['cluster/schemaFor'](type) ) {\n        const resource = await this.$fetchType(type);\n\n        this.resources = [resource];\n      }\n    }\n  },\n\n  data() {\n    // Ensure these are set on load (to determine if the NS filter is required) rather than too late on `fetch`\n    const { loadResources, loadIndeterminate } = $loadingResources(this.$route, this.$store);\n\n    return {\n      resources: [],\n      loadResources,\n      loadIndeterminate\n    };\n  },\n\n  computed: {\n    allTypes() {\n      return this.$route.params.resource === schema.id;\n    },\n\n    schema() {\n      const { params:{ resource:type } } = this.$route;\n\n      if (type !== schema.id) {\n        return this.$store.getters['cluster/schemaFor'](type);\n      }\n\n      return schema;\n    },\n\n    filteredRows() {\n      const out = [];\n\n      for ( const typeRows of this.resources ) {\n        if ( !typeRows ) {\n          continue;\n        }\n\n        for ( const row of typeRows ) {\n          if (!this.allTypes || !row.ownedByWorkload) {\n            out.push(row);\n          }\n        }\n      }\n\n      return out;\n    },\n  },\n\n  // All of the resources that we will load that we need for the loading indicator\n  $loadingResources($route, $store) {\n    return $loadingResources($route, $store);\n  },\n\n  methods: {\n    loadHeathResources() {\n      // Fetch these in the background to populate workload health\n      if ( this.allTypes ) {\n        this.$fetchType(POD);\n        this.$fetchType(WORKLOAD_TYPES.JOB);\n      } else {\n        const type = this.$route.params.resource;\n\n        if (type === WORKLOAD_TYPES.JOB || type === POD) {\n          // Ignore job and pods (we're fetching this anyway, plus they contain their own state)\n          return;\n        }\n\n        if (type === WORKLOAD_TYPES.CRON_JOB) {\n          this.$fetchType(WORKLOAD_TYPES.JOB);\n        } else {\n          this.$fetchType(POD);\n        }\n      }\n    }\n  },\n\n  typeDisplay() {\n    const { params:{ resource:type } } = this.$route;\n    let paramSchema = schema;\n\n    if (type !== schema.id) {\n      paramSchema = this.$store.getters['cluster/schemaFor'](type);\n    }\n\n    return this.$store.getters['type-map/labelFor'](paramSchema, 99);\n  },\n};\n</script>\n\n<template>\n  <ResourceTable\n    :loading=\"$fetchState.pending\"\n    :schema=\"schema\"\n    :rows=\"filteredRows\"\n    :overflow-y=\"true\"\n    :use-query-params-for-simple-filtering=\"useQueryParamsForSimpleFiltering\"\n    :force-update-live-and-delayed=\"forceUpdateLiveAndDelayed\"\n  />\n</template>\n"],"mappings":"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"}]}