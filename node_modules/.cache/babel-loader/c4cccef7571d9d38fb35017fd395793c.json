{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/selector.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/selector.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["isArray","addObject","findBy","get","parseCache","OP_MAP","parse","labelSelector","replace","match","out","parens","length","_iterator","_createForOfIteratorHelper","_step","s","n","done","str","value","val","split","push","concat","err","e","f","parts","filter","x","_iterator2","_step2","rule","trim","key","operator","toLowerCase","values","startsWith","substr","convertSelectorObj","obj","convert","matchLabels","matchExpressions","matchLabelsObj","keys","Object","_i","_keys","existing","simplify","matchExpressionsInput","impossible","seen","_iterator3","_step3","expr","_iterator4","_step4","includes","assign","matches","selector","labelKey","arguments","undefined","rules","_typeof","labels","_iterator5","_step5","asInt","parseInt","exists","isNaN","Math","min","apply","max","matching","ary"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/selector.js"],"sourcesContent":["import { isArray, addObject, findBy } from '@shell/utils/array';\nimport { get } from '@shell/utils/object';\n\nconst parseCache = {};\n\nconst OP_MAP = {\n  '=':  'In',\n  '==': 'In',\n  '!=': 'NotIn',\n  '<':  'Lt',\n  '>':  'Gt',\n};\n\n// Parse a labelSelector string\nexport function parse(labelSelector) {\n  // matchLabels:\n  // comma-separated list, all rules ANDed together\n  // spaces may be encoded as +\n  //\n  // Equals:      foo = bar\n  // Not Equals:  bar != baz\n  // Key Exists:  optional.prefix/just-some-key\n  // Key Doesn't: !optional.prefix/just-some-key\n  // In Set:      environment in (production,qa)\n  // Not in Set:  environment notin (production,qa)\n\n  // Convert into matchExpressions, which newer resources support\n  // and express the same things\n  //\n  // Object of:\n  // key: optional.prefix/some-key\n  // operator: In, NotIn, Exists, or DoesNotExist\n  // values:  [array, of, values, even, if, only, one]\n\n  labelSelector = labelSelector.replace(/\\+/g, ' ');\n\n  if ( parseCache[labelSelector] ) {\n    return parseCache[labelSelector];\n  }\n\n  let match;\n  const out = [];\n  const parens = [];\n\n  // Substitute out all the parenthetical lists because they might have commas in them\n  match = labelSelector.match(/\\([^)]+\\)/g);\n  if ( match && match.length ) {\n    for ( const str of match ) {\n      const val = str.replace(/^\\s*\\(\\s*/, '').replace(/\\s*\\)\\s*$/, '').split(/\\s*,\\s*/);\n\n      parens.push(val);\n      labelSelector = labelSelector.replace(str, ` @${ parens.length - 1 } `);\n    }\n  }\n\n  const parts = labelSelector.split(/\\s*,\\s*/).filter((x) => !!x);\n\n  for ( let rule of parts ) {\n    rule = rule.trim();\n\n    match = rule.match(/^(.*?)\\s+((not\\s*)?in)\\s+@(\\d+)*$/i);\n\n    if ( match ) {\n      out.push({\n        key:      match[1].trim(),\n        operator: match[2].toLowerCase().replace(/\\s/g, '') === 'notin' ? 'NotIn' : 'In',\n        values:   parens[match[4].trim()],\n      });\n\n      continue;\n    }\n\n    match = rule.match(/^([^!=]*)\\s*(\\!=|=|==|>|<)\\s*([^!=]*)$/);\n    if ( match ) {\n      out.push({\n        key:      match[1].trim(),\n        operator: OP_MAP[match[2]],\n        values:   [match[3].trim()],\n      });\n\n      continue;\n    }\n\n    if ( rule.startsWith('!') ) {\n      out.push({\n        key:      rule.substr(1).trim(),\n        operator: 'DoesNotExist'\n      });\n\n      continue;\n    }\n\n    out.push({\n      key:      rule.trim(),\n      operator: 'Exists'\n    });\n  }\n\n  parseCache[labelSelector] = out;\n\n  return out;\n}\n\n// Convert a Selector object to matchExpressions\nexport function convertSelectorObj(obj) {\n  return convert(obj.matchLabels || {}, obj.matchExpressions || []);\n}\n\n// Convert matchLabels to matchExpressions\n// Optionally combining with an existing set of matchExpressions\nexport function convert(matchLabelsObj, matchExpressions) {\n  const keys = Object.keys(matchLabelsObj || {});\n  const out = matchExpressions || [];\n\n  for ( const key of keys ) {\n    const value = matchLabelsObj[key];\n    const existing = findBy(out, { key, operator: 'In' });\n\n    if ( existing ) {\n      addObject(existing.values, value);\n    } else {\n      out.push({\n        key,\n        operator: 'In',\n        values:   isArray(value) ? value : [value],\n      });\n    }\n  }\n\n  return out;\n}\n\n// Convert matchExpressions to matchLabels when possible,\n// returning the simplest combination of them.\nexport function simplify(matchExpressionsInput) {\n  const matchLabels = {};\n  const matchExpressions = [];\n\n  // Look for keys with more than one \"In\" expression and disqualify them from simplifying\n  const impossible = [];\n  const seen = {};\n\n  for ( const expr of matchExpressionsInput ) {\n    if ( expr.operator !== 'In' ) {\n      continue;\n    }\n\n    if ( seen[expr.key] ) {\n      addObject(impossible, expr.key);\n    } else {\n      seen[expr.key] = true;\n    }\n  }\n\n  for ( const expr of matchExpressionsInput ) {\n    if ( expr.operator === 'In' && expr.values.length === 1 && !impossible.includes(expr.key) ) {\n      matchLabels[expr.key] = expr.values[0];\n    } else {\n      matchExpressions.push(Object.assign({}, expr));\n    }\n  }\n\n  return { matchLabels, matchExpressions };\n}\n\nexport function matches(obj, selector, labelKey = 'metadata.labels') {\n  let rules = [];\n\n  if ( typeof selector === 'string' ) {\n    // labelSelector string\n    rules = parse(selector);\n  } else if ( isArray(selector) ) {\n    // Already matchExpression\n    rules = selector;\n  } else if ( typeof selector === 'object' && selector ) {\n    // matchLabels object\n    rules = convert(selector);\n  } else {\n    return false;\n  }\n\n  const labels = get(obj, labelKey) || {};\n\n  for ( const rule of rules ) {\n    const value = labels[rule.key];\n    const asInt = parseInt(value, 10);\n    const exists = typeof labels[rule.key] !== 'undefined';\n\n    switch ( rule.operator ) {\n    case 'Exists':\n      if ( !exists ) {\n        return false;\n      }\n      break;\n    case 'DoesNotExist':\n      if ( exists ) {\n        return false;\n      }\n      break;\n    case 'In':\n      // we need to cater empty strings because when creating a label with value = null it's translated into a empty string value ''\n      if ( !rule.values.length || !rule.values.includes(value) ) {\n        return false;\n      }\n      break;\n    case 'NotIn':\n      if ( rule.values.includes(value) ) {\n        return false;\n      }\n      break;\n    case 'Lt':\n      if ( isNaN(asInt) || asInt >= Math.min.apply(null, rule.values) ) {\n        return false;\n      }\n      break;\n    case 'Gt':\n      if ( isNaN(asInt) || asInt <= Math.max.apply(null, rule.values) ) {\n        return false;\n      }\n      break;\n    }\n  }\n\n  return true;\n}\n\nexport function matching(ary, selector, labelKey) {\n  return ary.filter((obj) => matches(obj, selector, labelKey));\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,OAAO,EAAEC,SAAS,EAAEC,MAAM,QAAQ,oBAAoB;AAC/D,SAASC,GAAG,QAAQ,qBAAqB;AAEzC,IAAMC,UAAU,GAAG,CAAC,CAAC;AAErB,IAAMC,MAAM,GAAG;EACb,GAAG,EAAG,IAAI;EACV,IAAI,EAAE,IAAI;EACV,IAAI,EAAE,OAAO;EACb,GAAG,EAAG,IAAI;EACV,GAAG,EAAG;AACR,CAAC;;AAED;AACA,OAAO,SAASC,KAAKA,CAACC,aAAa,EAAE;EACnC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAA,aAAa,GAAGA,aAAa,CAACC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;EAEjD,IAAKJ,UAAU,CAACG,aAAa,CAAC,EAAG;IAC/B,OAAOH,UAAU,CAACG,aAAa,CAAC;EAClC;EAEA,IAAIE,KAAK;EACT,IAAMC,GAAG,GAAG,EAAE;EACd,IAAMC,MAAM,GAAG,EAAE;;EAEjB;EACAF,KAAK,GAAGF,aAAa,CAACE,KAAK,CAAC,YAAY,CAAC;EACzC,IAAKA,KAAK,IAAIA,KAAK,CAACG,MAAM,EAAG;IAAA,IAAAC,SAAA,GAAAC,0BAAA,CACRL,KAAK;MAAAM,KAAA;IAAA;MAAxB,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAA2B;QAAA,IAAfC,GAAG,GAAAJ,KAAA,CAAAK,KAAA;QACb,IAAMC,GAAG,GAAGF,GAAG,CAACX,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAACc,KAAK,CAAC,SAAS,CAAC;QAElFX,MAAM,CAACY,IAAI,CAACF,GAAG,CAAC;QAChBd,aAAa,GAAGA,aAAa,CAACC,OAAO,CAACW,GAAG,OAAAK,MAAA,CAAQb,MAAM,CAACC,MAAM,GAAG,CAAC,MAAI,CAAC;MACzE;IAAC,SAAAa,GAAA;MAAAZ,SAAA,CAAAa,CAAA,CAAAD,GAAA;IAAA;MAAAZ,SAAA,CAAAc,CAAA;IAAA;EACH;EAEA,IAAMC,KAAK,GAAGrB,aAAa,CAACe,KAAK,CAAC,SAAS,CAAC,CAACO,MAAM,CAAC,UAACC,CAAC;IAAA,OAAK,CAAC,CAACA,CAAC;EAAA,EAAC;EAAC,IAAAC,UAAA,GAAAjB,0BAAA,CAE9Cc,KAAK;IAAAI,MAAA;EAAA;IAAvB,KAAAD,UAAA,CAAAf,CAAA,MAAAgB,MAAA,GAAAD,UAAA,CAAAd,CAAA,IAAAC,IAAA,GAA0B;MAAA,IAAhBe,IAAI,GAAAD,MAAA,CAAAZ,KAAA;MACZa,IAAI,GAAGA,IAAI,CAACC,IAAI,CAAC,CAAC;MAElBzB,KAAK,GAAGwB,IAAI,CAACxB,KAAK,CAAC,oCAAoC,CAAC;MAExD,IAAKA,KAAK,EAAG;QACXC,GAAG,CAACa,IAAI,CAAC;UACPY,GAAG,EAAO1B,KAAK,CAAC,CAAC,CAAC,CAACyB,IAAI,CAAC,CAAC;UACzBE,QAAQ,EAAE3B,KAAK,CAAC,CAAC,CAAC,CAAC4B,WAAW,CAAC,CAAC,CAAC7B,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,OAAO,GAAG,OAAO,GAAG,IAAI;UAChF8B,MAAM,EAAI3B,MAAM,CAACF,KAAK,CAAC,CAAC,CAAC,CAACyB,IAAI,CAAC,CAAC;QAClC,CAAC,CAAC;QAEF;MACF;MAEAzB,KAAK,GAAGwB,IAAI,CAACxB,KAAK,CAAC,wCAAwC,CAAC;MAC5D,IAAKA,KAAK,EAAG;QACXC,GAAG,CAACa,IAAI,CAAC;UACPY,GAAG,EAAO1B,KAAK,CAAC,CAAC,CAAC,CAACyB,IAAI,CAAC,CAAC;UACzBE,QAAQ,EAAE/B,MAAM,CAACI,KAAK,CAAC,CAAC,CAAC,CAAC;UAC1B6B,MAAM,EAAI,CAAC7B,KAAK,CAAC,CAAC,CAAC,CAACyB,IAAI,CAAC,CAAC;QAC5B,CAAC,CAAC;QAEF;MACF;MAEA,IAAKD,IAAI,CAACM,UAAU,CAAC,GAAG,CAAC,EAAG;QAC1B7B,GAAG,CAACa,IAAI,CAAC;UACPY,GAAG,EAAOF,IAAI,CAACO,MAAM,CAAC,CAAC,CAAC,CAACN,IAAI,CAAC,CAAC;UAC/BE,QAAQ,EAAE;QACZ,CAAC,CAAC;QAEF;MACF;MAEA1B,GAAG,CAACa,IAAI,CAAC;QACPY,GAAG,EAAOF,IAAI,CAACC,IAAI,CAAC,CAAC;QACrBE,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ;EAAC,SAAAX,GAAA;IAAAM,UAAA,CAAAL,CAAA,CAAAD,GAAA;EAAA;IAAAM,UAAA,CAAAJ,CAAA;EAAA;EAEDvB,UAAU,CAACG,aAAa,CAAC,GAAGG,GAAG;EAE/B,OAAOA,GAAG;AACZ;;AAEA;AACA,OAAO,SAAS+B,kBAAkBA,CAACC,GAAG,EAAE;EACtC,OAAOC,OAAO,CAACD,GAAG,CAACE,WAAW,IAAI,CAAC,CAAC,EAAEF,GAAG,CAACG,gBAAgB,IAAI,EAAE,CAAC;AACnE;;AAEA;AACA;AACA,OAAO,SAASF,OAAOA,CAACG,cAAc,EAAED,gBAAgB,EAAE;EACxD,IAAME,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,cAAc,IAAI,CAAC,CAAC,CAAC;EAC9C,IAAMpC,GAAG,GAAGmC,gBAAgB,IAAI,EAAE;EAElC,SAAAI,EAAA,MAAAC,KAAA,GAAmBH,IAAI,EAAAE,EAAA,GAAAC,KAAA,CAAAtC,MAAA,EAAAqC,EAAA,IAAG;IAApB,IAAMd,GAAG,GAAAe,KAAA,CAAAD,EAAA;IACb,IAAM7B,KAAK,GAAG0B,cAAc,CAACX,GAAG,CAAC;IACjC,IAAMgB,QAAQ,GAAGjD,MAAM,CAACQ,GAAG,EAAE;MAAEyB,GAAG,EAAHA,GAAG;MAAEC,QAAQ,EAAE;IAAK,CAAC,CAAC;IAErD,IAAKe,QAAQ,EAAG;MACdlD,SAAS,CAACkD,QAAQ,CAACb,MAAM,EAAElB,KAAK,CAAC;IACnC,CAAC,MAAM;MACLV,GAAG,CAACa,IAAI,CAAC;QACPY,GAAG,EAAHA,GAAG;QACHC,QAAQ,EAAE,IAAI;QACdE,MAAM,EAAItC,OAAO,CAACoB,KAAK,CAAC,GAAGA,KAAK,GAAG,CAACA,KAAK;MAC3C,CAAC,CAAC;IACJ;EACF;EAEA,OAAOV,GAAG;AACZ;;AAEA;AACA;AACA,OAAO,SAAS0C,QAAQA,CAACC,qBAAqB,EAAE;EAC9C,IAAMT,WAAW,GAAG,CAAC,CAAC;EACtB,IAAMC,gBAAgB,GAAG,EAAE;;EAE3B;EACA,IAAMS,UAAU,GAAG,EAAE;EACrB,IAAMC,IAAI,GAAG,CAAC,CAAC;EAAC,IAAAC,UAAA,GAAA1C,0BAAA,CAEIuC,qBAAqB;IAAAI,MAAA;EAAA;IAAzC,KAAAD,UAAA,CAAAxC,CAAA,MAAAyC,MAAA,GAAAD,UAAA,CAAAvC,CAAA,IAAAC,IAAA,GAA4C;MAAA,IAAhCwC,IAAI,GAAAD,MAAA,CAAArC,KAAA;MACd,IAAKsC,IAAI,CAACtB,QAAQ,KAAK,IAAI,EAAG;QAC5B;MACF;MAEA,IAAKmB,IAAI,CAACG,IAAI,CAACvB,GAAG,CAAC,EAAG;QACpBlC,SAAS,CAACqD,UAAU,EAAEI,IAAI,CAACvB,GAAG,CAAC;MACjC,CAAC,MAAM;QACLoB,IAAI,CAACG,IAAI,CAACvB,GAAG,CAAC,GAAG,IAAI;MACvB;IACF;EAAC,SAAAV,GAAA;IAAA+B,UAAA,CAAA9B,CAAA,CAAAD,GAAA;EAAA;IAAA+B,UAAA,CAAA7B,CAAA;EAAA;EAAA,IAAAgC,UAAA,GAAA7C,0BAAA,CAEmBuC,qBAAqB;IAAAO,MAAA;EAAA;IAAzC,KAAAD,UAAA,CAAA3C,CAAA,MAAA4C,MAAA,GAAAD,UAAA,CAAA1C,CAAA,IAAAC,IAAA,GAA4C;MAAA,IAAhCwC,KAAI,GAAAE,MAAA,CAAAxC,KAAA;MACd,IAAKsC,KAAI,CAACtB,QAAQ,KAAK,IAAI,IAAIsB,KAAI,CAACpB,MAAM,CAAC1B,MAAM,KAAK,CAAC,IAAI,CAAC0C,UAAU,CAACO,QAAQ,CAACH,KAAI,CAACvB,GAAG,CAAC,EAAG;QAC1FS,WAAW,CAACc,KAAI,CAACvB,GAAG,CAAC,GAAGuB,KAAI,CAACpB,MAAM,CAAC,CAAC,CAAC;MACxC,CAAC,MAAM;QACLO,gBAAgB,CAACtB,IAAI,CAACyB,MAAM,CAACc,MAAM,CAAC,CAAC,CAAC,EAAEJ,KAAI,CAAC,CAAC;MAChD;IACF;EAAC,SAAAjC,GAAA;IAAAkC,UAAA,CAAAjC,CAAA,CAAAD,GAAA;EAAA;IAAAkC,UAAA,CAAAhC,CAAA;EAAA;EAED,OAAO;IAAEiB,WAAW,EAAXA,WAAW;IAAEC,gBAAgB,EAAhBA;EAAiB,CAAC;AAC1C;AAEA,OAAO,SAASkB,OAAOA,CAACrB,GAAG,EAAEsB,QAAQ,EAAgC;EAAA,IAA9BC,QAAQ,GAAAC,SAAA,CAAAtD,MAAA,QAAAsD,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,iBAAiB;EACjE,IAAIE,KAAK,GAAG,EAAE;EAEd,IAAK,OAAOJ,QAAQ,KAAK,QAAQ,EAAG;IAClC;IACAI,KAAK,GAAG9D,KAAK,CAAC0D,QAAQ,CAAC;EACzB,CAAC,MAAM,IAAKhE,OAAO,CAACgE,QAAQ,CAAC,EAAG;IAC9B;IACAI,KAAK,GAAGJ,QAAQ;EAClB,CAAC,MAAM,IAAKK,OAAA,CAAOL,QAAQ,MAAK,QAAQ,IAAIA,QAAQ,EAAG;IACrD;IACAI,KAAK,GAAGzB,OAAO,CAACqB,QAAQ,CAAC;EAC3B,CAAC,MAAM;IACL,OAAO,KAAK;EACd;EAEA,IAAMM,MAAM,GAAGnE,GAAG,CAACuC,GAAG,EAAEuB,QAAQ,CAAC,IAAI,CAAC,CAAC;EAAC,IAAAM,UAAA,GAAAzD,0BAAA,CAEpBsD,KAAK;IAAAI,MAAA;EAAA;IAAzB,KAAAD,UAAA,CAAAvD,CAAA,MAAAwD,MAAA,GAAAD,UAAA,CAAAtD,CAAA,IAAAC,IAAA,GAA4B;MAAA,IAAhBe,IAAI,GAAAuC,MAAA,CAAApD,KAAA;MACd,IAAMA,KAAK,GAAGkD,MAAM,CAACrC,IAAI,CAACE,GAAG,CAAC;MAC9B,IAAMsC,KAAK,GAAGC,QAAQ,CAACtD,KAAK,EAAE,EAAE,CAAC;MACjC,IAAMuD,MAAM,GAAG,OAAOL,MAAM,CAACrC,IAAI,CAACE,GAAG,CAAC,KAAK,WAAW;MAEtD,QAASF,IAAI,CAACG,QAAQ;QACtB,KAAK,QAAQ;UACX,IAAK,CAACuC,MAAM,EAAG;YACb,OAAO,KAAK;UACd;UACA;QACF,KAAK,cAAc;UACjB,IAAKA,MAAM,EAAG;YACZ,OAAO,KAAK;UACd;UACA;QACF,KAAK,IAAI;UACP;UACA,IAAK,CAAC1C,IAAI,CAACK,MAAM,CAAC1B,MAAM,IAAI,CAACqB,IAAI,CAACK,MAAM,CAACuB,QAAQ,CAACzC,KAAK,CAAC,EAAG;YACzD,OAAO,KAAK;UACd;UACA;QACF,KAAK,OAAO;UACV,IAAKa,IAAI,CAACK,MAAM,CAACuB,QAAQ,CAACzC,KAAK,CAAC,EAAG;YACjC,OAAO,KAAK;UACd;UACA;QACF,KAAK,IAAI;UACP,IAAKwD,KAAK,CAACH,KAAK,CAAC,IAAIA,KAAK,IAAII,IAAI,CAACC,GAAG,CAACC,KAAK,CAAC,IAAI,EAAE9C,IAAI,CAACK,MAAM,CAAC,EAAG;YAChE,OAAO,KAAK;UACd;UACA;QACF,KAAK,IAAI;UACP,IAAKsC,KAAK,CAACH,KAAK,CAAC,IAAIA,KAAK,IAAII,IAAI,CAACG,GAAG,CAACD,KAAK,CAAC,IAAI,EAAE9C,IAAI,CAACK,MAAM,CAAC,EAAG;YAChE,OAAO,KAAK;UACd;UACA;MACF;IACF;EAAC,SAAAb,GAAA;IAAA8C,UAAA,CAAA7C,CAAA,CAAAD,GAAA;EAAA;IAAA8C,UAAA,CAAA5C,CAAA;EAAA;EAED,OAAO,IAAI;AACb;AAEA,OAAO,SAASsD,QAAQA,CAACC,GAAG,EAAElB,QAAQ,EAAEC,QAAQ,EAAE;EAChD,OAAOiB,GAAG,CAACrD,MAAM,CAAC,UAACa,GAAG;IAAA,OAAKqB,OAAO,CAACrB,GAAG,EAAEsB,QAAQ,EAAEC,QAAQ,CAAC;EAAA,EAAC;AAC9D"}]}