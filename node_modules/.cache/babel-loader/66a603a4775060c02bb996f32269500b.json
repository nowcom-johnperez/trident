{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/pkg/nowcom/pages/list-natgateway.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/pkg/nowcom/pages/list-natgateway.vue","mtime":1716430386795},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["UniversalTable","cButton","SideBar","GroupButtons","Modal","NAT_BUTTONS","VNET_HEADERS","SUB_VNET_HEADERS","natService","PRODUCT_NAME","LIST_NAT_GATEWAY","CREATE_NAT_GATEWAY","BLANK_CLUSTER","name","components","data","selectedName","selectedVnetName","selectedSubnetName","selectedVnetSubnets","networks","loading","isModalOpen","apiResponse","subnetResponse","isModalSubnetOpen","vnet_name","subnet_name","subnet_id","selectedNetwork","sidebarVisible","addSubnetSidebarVisible","apiError","apiResponseMessage","network","users","age","email","address","street","city","state","filters","value","keys","currentPage","totalPages","natGatewayButtons","vnetHeaders","subVnetHeaders","computed","isAddSubnetDisabled","methods","actionHandler","action","routeCreateNetwork","fetchNetworks","addSubnet","_this","_asyncToGenerator","regeneratorRuntime","mark","_callee","subnet_data","vnet","response","newSubnetFromResponse","wrap","_callee$","_context","prev","next","toLowerCase","id","console","log","createSubnet","sent","subnets","push","subnetResponseMessage","t0","alert","detail","stop","addSubnetSidebar","closeSubnetSidebar","openSidebar","item","_this2","_callee2","_callee2$","_context2","closeSidebar","$router","concat","openModal","row","vnetId","vnetName","selectedVnetId","closeModal","openModalSubnet","vnet_id","closeModalSubnet","_this3","_callee3","_callee3$","_context3","getAllVnets","map","_objectSpread","attachments","subnetLength","length","error","deleteNetwork","_this4","_callee4","_callee4$","_context4","message","getlAllSubnets","subnetId","_this5","_callee5","_callee5$","_context5","getAllSubnets","deleteSubnet","_this6","_callee6","_callee6$","_context6","deleteSubNet","created","mounted"],"sources":["pkg/nowcom/pages/list-natgateway.vue"],"sourcesContent":["<template>\n    <div class=\"base\">\n        <h1>NAT Gateway</h1>\n        <!-- Notification container -->\n        <div class=\"message-row\">\n            <div class=\"message-column\"></div>\n            <div class=\"message-column\">\n                <!-- Display API response data -->\n                <div v-if=\"apiResponse\">\n                    <h2 align=\"center\">{{ apiResponseMessage }}</h2>\n                    <pre align=\"center\" v-if=\"!apiError\">Deleted VNET: {{ apiResponse.vnet_name }}</pre>\n                    <pre align=\"center\" v-if=\"apiError\">{{ apiError.error }} : {{ selectedName }}</pre>\n                </div>\n            </div>\n        </div>\n        <GroupButtons :list=\"natGatewayButtons\" @action=\"actionHandler\"/>\n        <div class=\"form-row mt-10\">\n            <div class=\"form-column\">\n                <UniversalTable :headers=\"vnetHeaders\" :filters=\"filters\" :items=\"networks\" @action-click=\"openModal\" />\n            </div>\n        </div>\n\n        <SideBar type=\"main\" :sidebar-visible=\"sidebarVisible\">\n            <h2>{{ selectedNetwork ? selectedNetwork.vnet_name : 'No Network Selected' }}</h2>\n            <div class=\"form-row\">\n                <div class=\"form-column\" align=\"left\">\n                    <cButton class=\"custom-button\" @click=\"addSubnetSidebar\">\n                        <i class=\"fa fa-plus\"></i> Add Subnet\n                    </cButton>\n                </div>\n            </div>\n            <UniversalTable v-if=\"selectedNetwork\" :headers=\"subVnetHeaders\" :items=\"selectedNetwork.subnets\" @action-click=\"openModalSubnet\" />\n            <UniversalTable v-if=\"selectedNetwork\" :headers=\"subnetworkHeader\" :items=\"selectedNetwork.subnets\" @action-click=\"openModalSubnet\" />\n            </br>\n            <div v-if=\"subnetResponse\">\n                <h2 align=\"center\">{{ subnetResponseMessage }}</h2>\n                <pre align=\"center\" v-if=\"!apiError\">SUBNET: {{ subnet_name }}</pre>\n                <pre align=\"center\" v-if=\"apiError\">{{ apiError.error }} : {{ selectedName }}</pre>\n            </div>\n\n            <cButton class=\"btn-x\" @click=\"closeSidebar\">\n                <i class=\"x-icon fa fa-close fa-lg\"></i>\n            </cButton>\n        </SideBar>\n\n        <SideBar type=\"sub\" :sidebar-visible=\"addSubnetSidebarVisible\">\n            <h2>Add Subnet</h2>\n            <!-- ... your content for adding subnet -->\n            <div class=\"add-form-row\">\n                <input v-model=\"selectedSubnetName\" type=\"text\" placeholder=\"Subnet Name\" title=\"Subnet Name\" />\n            </div>\n            <div class=\"add-form-row\">\n                <input\n                v-model=\"selectedVnetSubnets\"\n                type=\"text\"\n                placeholder=\"Enter subnet (e.g., 10.0.0.0)\"\n                pattern=\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\"\n                title=\"Please enter a valid IP address\"\n                />\n            </div>\n            <div class=\"add-form-row\">\n                <cButton class=\"cbtn btn-light\" :disabled=\"isAddSubnetDisabled\" @click=\"addSubnet\">\n                    <i class=\"fa fa-plus fa-lg mr-5\"></i> Add Subnet\n                </cButton> \n            </div>\n\n            <cButton class=\"btn-x\" @click=\"closeSubnetSidebar\">\n                <i class=\"x-icon fa fa-close fa-lg\"></i>\n            </cButton>\n        </SideBar>\n\n        <Modal v-if=\"isModalOpen\">\n            <template v-slot:content>\n                <h2>Delete?</h2>\n                <p>Are you sure that you want to delete VLAN \"{{ selectedVnetName }}\"?</p>\n            </template>\n\n            <template v-slot:footer>\n                <cButton class=\"delete-button\" @click=\"deleteNetwork\" label=\"Yes\" />\n                <cButton class=\"ok-button\" @click=\"closeModal\" label=\"No\" />\n            </template>\n        </Modal>\n\n        <Modal v-if=\"isModalSubnetOpen\">\n            <template v-slot:content>\n                <h2>Are you sure that you want to delete:</h2>\n                <p>Subnet \"{{ subnet_name }}\" under VNET \"{{ vnet_name }}\"?</p>\n            </template>\n\n            <template v-slot:footer>\n                <cButton class=\"delete-button\" @click=\"deleteSubnet\" label=\"Yes\" />\n                <cButton class=\"ok-button\" @click=\"closeModalSubnet\" label=\"No\" />\n            </template>\n        </Modal>\n    </div>\n</template>\n\n<script>\nimport UniversalTable from '../components/UniversalTable'\nimport cButton from '../components/common/Button'\nimport SideBar from '../components/Sidebar'\nimport GroupButtons from '../components/common/GroupButtons'\nimport Modal from '../components/common/Modal'\nimport { NAT_BUTTONS } from '../config/buttons'\nimport { VNET_HEADERS, SUB_VNET_HEADERS } from '../config/table'\nimport { natService } from '../services/api/nat';\n\nconst PRODUCT_NAME = \"Network\";\nconst LIST_NAT_GATEWAY = \"nat.gateway\";\nconst CREATE_NAT_GATEWAY = \"create.nat.gateway\";\nconst BLANK_CLUSTER = \"_\";\n\nexport default {\n    name: \"ListNatGateway\",\n    components: {\n        UniversalTable,\n        cButton,\n        SideBar,\n        GroupButtons,\n        Modal\n    },\n    // layout: 'home',\n    data() {\n        return {\n            selectedName: \"\", // Dropdown for network name\n            selectedVnetName: \"\",\n            selectedSubnetName: \"\",\n            selectedVnetSubnets: \"10.55.0.0\",\n            networks: [], // This will be populated with data from the API\n            loading: false,\n            isModalOpen: false,\n            apiResponse: null,\n            subnetResponse: null,\n            isModalSubnetOpen: false,\n            vnet_name: \"\",\n            subnet_name: \"\",\n            subnet_id: \"\",\n            selectedNetwork: null,\n            sidebarVisible: false,\n            addSubnetSidebarVisible: false,\n            apiError: null,\n            apiResponseMessage: \"\",\n            network: [],\n            users: [\n                {\n                    name: \"francis\",\n                    age: 17,\n                    email: \"fvictoriano@nowcom.com\",\n                    address: {\n                        street: \"1152 S Ardmore\",\n                        city: \"Los Angeles\",\n                        state: \"California\"\n                    }\n                },\n                {\n                    name: \"Andy\",\n                    age: 17,\n                    email: \"andy@nowcom.com\",\n                    address: {\n                        street: \"1152 S Ardmore\",\n                        city: \"Los Angeles\",\n                        state: \"California\"\n                    }\n                },\n                {\n                    name: \"george\",\n                    age: 17,\n                    email: \"george@nowcom.com\",\n                    address: {\n                        street: \"1152 S Ardmore\",\n                        city: \"Los Angeles\",\n                        state: \"California\"\n                    }\n                },\n                {\n                    name: \"kate\",\n                    age: 17,\n                    email: \"kate@nowcom.com\",\n                    address: {\n                        street: \"1152 S Ardmore\",\n                        city: \"Los Angeles\",\n                        state: \"California\"\n                    }\n                },\n                {\n                    name: \"carlo\",\n                    age: 17,\n                    email: \"carlo@nowcom.com\",\n                    address: {\n                        street: \"1152 S Ardmore\",\n                        city: \"Los Angeles\",\n                        state: \"California\"\n                    }\n                },\n                {\n                    name: \"mohenne\",\n                    age: 17,\n                    email: \"mohenne@nowcom.com\",\n                    address: {\n                        street: \"1152 S Ardmore\",\n                        city: \"Los Angeles\",\n                        state: \"California\"\n                    }\n                }\n\n            ],\n            filters: {\n                name: { value: '', keys: ['vnet_name'] }\n            },\n            currentPage: 1,\n            totalPages: 0,\n            natGatewayButtons: [],\n            vnetHeaders: [],\n            subVnetHeaders: []\n        };\n    },\n    computed: {\n        isAddSubnetDisabled() {\n            // Check conditions to disable the button\n            return !this.selectedSubnetName || !this.selectedVnetSubnets;\n        },\n    },\n    methods: {\n        actionHandler (action) {\n            if (action === 'create') {\n                this.routeCreateNetwork()\n            } else if (action === 'refresh') {\n                this.fetchNetworks()\n            }\n        },\n        async addSubnet() {\n            //v0.2\n            const subnet_data = {\n                subnet_name: this.selectedSubnetName.toLowerCase(),\n                network: this.selectedVnetSubnets,\n            };\n\n            let vnet = this.selectedNetwork.id\n\n            console.log(\"send to API\", subnet_data);\n            console.log(\"log\", this.selectedNetwork);\n\n            try {\n                const response = await natService.createSubnet(vnet, subnet_data);\n                console.log(\"Subnet Network created:\", response.data);\n                this.loading = false;\n\n                //use results from response\n                let newSubnetFromResponse = response.data;\n                this.subnet_name = response.data.subnet_name;\n                this.fetchNetworks();\n                this.selectedNetwork.subnets.push(newSubnetFromResponse);\n\n                // Set the API response data in the component\n                this.subnetResponse = response.data;\n                this.apiError = null; // Reset error state\n                this.subnetResponseMessage = \"Subnet Added Successfully\";\n\n                this.addSubnetSidebarVisible = false;\n            } catch (error) {\n                console.log(error.response)\n                this.loading = false;\n                alert(error.response.data.detail)\n                this.subnetResponseMessage = \"Error\";\n                // Set the API error in the component\n                this.apiError = \"Error creating Subnet\";\n            }\n        },\n        addSubnetSidebar() {\n            this.selectedSubnetName = null;\n            this.addSubnetSidebarVisible = true;\n        },\n        closeSubnetSidebar() {\n            this.addSubnetSidebarVisible = false;\n        },\n        async openSidebar(item) {\n            // Update the item with the fetched data\n            this.subnetResponse = false;\n            this.selectedNetwork = item;\n            this.sidebarVisible = true;\n        },\n        closeSidebar() {\n            this.selectedNetwork = null;\n            this.sidebarVisible = false;\n        },\n        // Method to route to the Create Network page\n        routeCreateNetwork() {\n            this.$router.push(`/${PRODUCT_NAME}/c/${BLANK_CLUSTER}/${CREATE_NAT_GATEWAY}`); // Assuming '/create-network' is the route for the Create Network page\n        },\n        openModal(row) {\n            const { vnetId, vnetName } = row;\n            // Set the selected VLAN name\n            this.selectedVnetId = vnetId;\n            this.selectedVnetName = vnetName;\n            this.subnetResponse = false;\n            // Open the modal\n            this.isModalOpen = true;\n        },\n        closeModal() {\n            this.isModalOpen = false;\n        },\n\n        openModalSubnet(row) {\n            // Set the selected VLAN name\n            const { subnet_name, id } = row\n             \n            this.vnet_id = this.selectedNetwork.id;\n            this.vnet_name = this.selectedNetwork.vnet_name;\n            this.subnet_name = subnet_name;\n            this.subnet_id = id;\n\n            // Open the modal\n            this.isModalSubnetOpen = true;\n        },\n\n        closeModalSubnet() {\n            this.isModalSubnetOpen = false;\n        },\n\n        async fetchNetworks() {\n            try {\n                const networks = await natService.getAllVnets()\n                this.networks = networks.map((network) => {\n                    return {\n                        ...network,\n                        attachments: 'local',\n                        subnetLength: \"Total Subnet: \" + network.subnets.length\n                    }\n                })\n            } catch (error) {\n                console.error(\"Error fetching Network List:\", error);\n            }\n        },\n        async deleteNetwork() {\n            console.log(`Delete Network Endpoint, ${this.selectedVnetName},${this.selectedVnetId} `);\n            try {\n                const response = await natService.deleteNetwork(this.selectedVnetId);\n                this.loading = false;\n                this.apiResponse = response.data;\n                // Set the API response data in the component\n                this.apiResponseMessage = \"VNET Successfully Deleted\";\n                this.apiError = null; // Reset error state\n                //this.fetchHarvesterNetworks();\n                this.fetchNetworks();\n\n                // Close the modal after deletion\n                this.closeModal();\n            } catch (error) {\n                console.error(\"Error deleting network:\", error);\n                this.loading = false;\n                this.apiResponseMessage = \"Error\";\n                // Set the API error in the component\n                this.apiError = error.response ? error.response.data : error.message;\n                this.apiResponse = 1; // Reset response state\n            }\n        },\n\n        async getlAllSubnets (subnetId) {\n            try {\n                const response = await natService.getAllSubnets(subnetId);\n                this.selectedNetwork.subnets = response.data;\n            } catch (error) {\n                this.subnetResponseMessage = \"Error\";\n            }\n        },\n\n        async deleteSubnet() {\n            console.log(\n                `Delete Subnet Endpoint, ${this.vnet_id}, ${this.vnet_name}, ${this.subnet_name}, ${this.subnet_id}`\n            );\n            // Make an Axios DELETE request to delete the network with the selected VLAN name\n\n            try {\n                const response = await natService.deleteSubNet(this.subnet_id);\n                console.log(\"Network deleted:\", response.data);\n                this.loading = false;\n\n                this.subnetResponse = response.data;\n                // Set the API response data in the component\n                this.subnetResponseMessage = \"Subnet Successfully Deleted\";\n                this.apiError = null; // Reset error state\n\n                //call of subnets\n                await this.getlAllSubnets();\n                // Update the selectedNetwork with the selected vnet_name\n                this.selectedNetwork.vnet_name = this.vnet_name;\n                console.log(\"Selected Network:\", this.selectedNetwork);\n                // Close the modal after deletion\n                this.closeModalSubnet();\n            } catch (error) {\n                // Handle any errors here\n                console.error(\"Error deleting network:\", error);\n                this.loading = false;\n                this.subnetResponseMessage = \"Error\";\n                // Set the API error in the component\n                this.apiError = error.response ? error.response.data : error.message;\n                this.subnetResponse = 1; // Reset response state\n            }\n        },\n    },\n    created() {\n        this.natGatewayButtons = NAT_BUTTONS;\n        this.vnetHeaders = VNET_HEADERS;\n        this.subVnetHeaders = SUB_VNET_HEADERS;\n    },\n    mounted() {\n        // Fetch the VLAN list and network list when the component is mounted\n        this.fetchNetworks();\n        //this.fetchHarvesterNetworks();\n    },\n};\n</script>\n  \n<style scoped>\n</style>\n  "],"mappings":"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"}]}