{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/plugins/steve/subscribe.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/plugins/steve/subscribe.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["addObject","clear","removeObject","get","SCHEMA","MANAGEMENT","SETTING","CSRF","getPerformanceSetting","Socket","EVENT_CONNECTED","EVENT_DISCONNECTED","EVENT_MESSAGE","EVENT_CONNECT_ERROR","EVENT_DISCONNECT_ERROR","NO_WATCH","NO_SCHEMA","REVISION_TOO_OLD","normalizeType","day","DATE_FORMAT","TIME_FORMAT","escapeHtml","keyForSubscribe","waitFor","WORKER_MODES","pAndNFiltering","BLANK_CLUSTER","STORE","MINIMUM_TIME_NOTIFIED","workerQueues","supportedStores","CLUSTER","RANCHER","isWaitingForDestroy","storeName","store","_store$$workers$store","$workers","waitingForDestroy","waitForSettingsSchema","getters","waitForSettings","UI_PERFORMANCE","isAdvancedWorker","ctx","rootGetters","clusterId","includes","perfSetting","advancedWorker","enabled","createWorker","_x","_x2","_createWorker","apply","arguments","_asyncToGenerator","regeneratorRuntime","mark","_callee6","_dispatch","workerActions","workerMode","worker","_workerQueues$storeNa","message","wrap","_callee6$","_context6","prev","next","dispatch","abrupt","postMessage","msg","_Object$keys","Object","keys","mode","DESTROY_MOCK","push","WAITING","_store$$workers$store2","destroy","_defineProperty","load","resource","queueChange","destroyWorker","terminate","batchChanges","batch","namespaceHandler","validateBatchChange","concat","name","redispatch","entries","forEach","_ref24","_ref25","_slicedToArray","action","params","e","ADVANCED","BASIC","steveCreateWorker","initWorker","onmessage","messageActions","data","length","shift","stop","equivalentWatch","a","b","aresourceType","resourceType","type","bresourceType","id","namespace","selector","subscribeNamespace","isApplicable","namespaced","undefined","validChange","_ref","haveNamespace","namespaces","activeNamespaceCache","metadata","_ref2","_ref3","_schema$attributes","_ref4","schema","schemaFor","attributes","split","_ref5","_ref6","label","state","revision","entry","typeEntry","Math","max","parseInt","queue","event","body","obj","byId","growlsDisabled","_getPerformanceSettin","disableWebsocketNotification","sharedActions","subscribe","opt","_this","_callee","_rootGetters$isSingle","commit","socket","url","maxTries","_callee$","_context","disableSteveSockets","process","server","debugSocket","console","info","config","baseUrl","createWatcher","csrf","$cookies","parseJSON","setAutoReconnect","setUrl","connect","addEventListener","detail","JSON","parse","unsubscribe","_ref7","_this2","cleanupTasks","disconnect","Promise","all","watch","_ref8","_this$$workers","stringify","force","inError","error","watchStarted","debug","nextResourceVersion","resourceVersion","unwatch","_ref9","wsPing","_ref10","_msg$data","version","root","sharedMutations","on","toggleDebug","defaultActions","flush","_ref11","_callee2","toLoad","started","_iterator","_step","_step$value","_callee2$","_context2","Date","getTime","_createForOfIteratorHelper","s","n","done","value","Error","t0","f","finish","rehydrateSubscribe","_ref12","client","wantSocket","reconnectWatches","_ref13","promises","_iterator2","slice","_step2","err","resyncWatch","_ref14","_callee3","have","want","wantMap","_iterator3","_step3","_iterator4","_step4","_obj","_callee3$","_context3","forceWatch","sent","filter","x","_x$metadata","watchNamespace","opened","_ref15","_this3","_callee5","_event$detail","tries","t","disableGrowl","growlErr","_iterator5","_step5","_callee5$","_context5","currentTarget","$socket","queueTimer","flushQueue","_callee4","_callee4$","_context4","setTimeout","hasReconnected","key","val","title","pendingFrames","closed","_ref17","clearTimeout","_ref18","_e$srcElement","_e$srcElement2","_state$socket","dateFormat","timeFormat","time","srcElement","disconnectedAt","now","timeFormatted","format","raw","icon","earliestClose","send","_ref19","ok","sendImmediate","_ref20","wsResourceStart","_ref21","newWatch","wsResourceError","_ref22","_msg$data2","warn","toLowerCase","reason","wsResourceStop","_ref23","localState","wsResourceCreate","wsResourceChange","_typeOption$alias","updateSchema","typeOption","alias","map","_objectSpread","wsResourceRemove","_typeOption$alias2","removeSchema","defaultMutations","setSocket","setWantSocket","enqueuePendingFrame","dequeuePendingFrame","setWatchStarted","existing","find","setWatchStopped","setInError","clearInError","resetSubscriptions","deferredRequests","clearFromQueue","item","_item$body","defaultGetters","_existing$metadata","cache","types","_iterator6","list","_step6","neu","actions","mutations"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/plugins/steve/subscribe.js"],"sourcesContent":["/**\n * Handles subscriptions to websockets which receive updates to resources\n *\n * Covers three use cases\n * 1) Handles subscription within this file\n * 2) Handles `cluster` subscriptions for some basic types in a web worker (SETTING.UI_PERFORMANCE advancedWorker = false)\n * 2) Handles `cluster` subscriptions and optimisations in an advanced worker (SETTING.UI_PERFORMANCE advancedWorker = true)\n */\n\nimport { addObject, clear, removeObject } from '@shell/utils/array';\nimport { get } from '@shell/utils/object';\nimport { SCHEMA, MANAGEMENT } from '@shell/config/types';\nimport { SETTING } from '@shell/config/settings';\nimport { CSRF } from '@shell/config/cookies';\nimport { getPerformanceSetting } from '@shell/utils/settings';\nimport Socket, {\n  EVENT_CONNECTED,\n  EVENT_DISCONNECTED,\n  EVENT_MESSAGE,\n  //  EVENT_FRAME_TIMEOUT,\n  EVENT_CONNECT_ERROR,\n  EVENT_DISCONNECT_ERROR,\n  NO_WATCH,\n  NO_SCHEMA,\n  REVISION_TOO_OLD\n} from '@shell/utils/socket';\nimport { normalizeType } from '@shell/plugins/dashboard-store/normalize';\nimport day from 'dayjs';\nimport { DATE_FORMAT, TIME_FORMAT } from '@shell/store/prefs';\nimport { escapeHtml } from '@shell/utils/string';\nimport { keyForSubscribe } from '@shell/plugins/steve/resourceWatcher';\nimport { waitFor } from '@shell/utils/async';\nimport { WORKER_MODES } from './worker';\nimport pAndNFiltering from '@shell/utils/projectAndNamespaceFiltering.utils';\nimport { BLANK_CLUSTER, STORE } from '@shell/store/store-types.js';\n\n// minimum length of time a disconnect notification is shown\nconst MINIMUM_TIME_NOTIFIED = 3000;\n\nconst workerQueues = {};\n\nconst supportedStores = [STORE.CLUSTER, STORE.RANCHER, STORE.MANAGEMENT];\n\nconst isWaitingForDestroy = (storeName, store) => {\n  return store.$workers[storeName]?.waitingForDestroy && store.$workers[storeName].waitingForDestroy();\n};\n\nconst waitForSettingsSchema = (storeName, store) => {\n  return waitFor(() => isWaitingForDestroy(storeName, store) || !!store.getters['management/byId'](SCHEMA, MANAGEMENT.SETTING));\n};\n\nconst waitForSettings = (storeName, store) => {\n  return waitFor(() => isWaitingForDestroy(storeName, store) || !!store.getters['management/byId'](MANAGEMENT.SETTING, SETTING.UI_PERFORMANCE));\n};\n\nconst isAdvancedWorker = (ctx) => {\n  const { rootGetters, getters } = ctx;\n  const storeName = getters.storeName;\n  const clusterId = rootGetters.clusterId;\n\n  if (!supportedStores.includes(storeName) || (clusterId === BLANK_CLUSTER && storeName === STORE.CLUSTER)) {\n    return false;\n  }\n\n  const perfSetting = getPerformanceSetting(rootGetters);\n\n  return perfSetting?.advancedWorker.enabled;\n};\n\nexport async function createWorker(store, ctx) {\n  const { getters, dispatch } = ctx;\n  const storeName = getters.storeName;\n\n  store.$workers = store.$workers || {};\n\n  if (!supportedStores.includes(storeName)) {\n    return;\n  }\n\n  if (!store.$workers[storeName]) {\n    // we know we need a worker at this point but we don't know which one so we're creating a mock interface\n    // it will simply queue up any messages for the real worker to process when it loads up\n    store.$workers[storeName] = {\n      postMessage: (msg) => {\n        if (Object.keys(msg)?.[0] === 'destroyWorker') {\n          // The worker has been destroyed before it's been set up. Flag this so we stop waiting for mgmt settings and then can destroy worker.\n          // This can occurr when the user is redirected to the log in page\n          // - workers created (but waiting)\n          // - logout is called\n          // - <store>/unsubscribe is dispatched\n          // - wait for worker object to be destroyed <-- requires initial wait to be unblocked\n          store.$workers[storeName].mode = WORKER_MODES.DESTROY_MOCK;\n\n          return;\n        }\n        if (workerQueues[storeName]) {\n          workerQueues[storeName].push(msg);\n        } else {\n          workerQueues[storeName] = [msg];\n        }\n      },\n      mode:              WORKER_MODES.WAITING,\n      waitingForDestroy: () => {\n        return store.$workers[storeName]?.mode === WORKER_MODES.DESTROY_MOCK;\n      },\n      destroy: () => {\n        // Similar to workerActions.destroyWorker\n        delete store.$workers[storeName];\n      }\n    };\n  }\n\n  await waitForSettingsSchema(storeName, store);\n  await waitForSettings(storeName, store);\n  if (store.$workers[storeName].waitingForDestroy()) {\n    store.$workers[storeName].destroy();\n\n    return;\n  }\n  const advancedWorker = isAdvancedWorker(ctx);\n\n  const workerActions = {\n    load: (resource) => {\n      queueChange(ctx, resource, true, 'Change');\n    },\n    destroyWorker: () => {\n      if (store.$workers) {\n        store.$workers[storeName].terminate();\n        delete store.$workers[storeName];\n      }\n    },\n    batchChanges: (batch) => {\n      dispatch('batchChanges', namespaceHandler.validateBatchChange(ctx, batch));\n    },\n    dispatch: (msg) => {\n      dispatch(`ws.${ msg.name }`, msg);\n    },\n    redispatch: (msg) => {\n      /**\n       * because we had to queue up some messages prior to loading the worker:\n       * the basic worker will need to redispatch some of the queued messages back to the UI thread\n       */\n      Object.entries(msg).forEach(([action, params]) => {\n        dispatch(action, params);\n      });\n    },\n    [EVENT_CONNECT_ERROR]: (e) => {\n      dispatch('error', e );\n    },\n    [EVENT_DISCONNECT_ERROR]: (e) => {\n      dispatch('error', e );\n    },\n  };\n\n  if (!store.$workers[storeName] || store.$workers[storeName].mode === WORKER_MODES.WAITING) {\n    const workerMode = advancedWorker ? WORKER_MODES.ADVANCED : WORKER_MODES.BASIC;\n    const worker = store.steveCreateWorker(workerMode);\n\n    store.$workers[storeName] = worker;\n\n    worker.postMessage({ initWorker: { storeName } });\n\n    /**\n     * Covers message from Worker to UI thread\n     */\n    store.$workers[storeName].onmessage = (e) => {\n      /* on the off chance there's more than key in the message, we handle them in the order that they \"keys\" method provides which is\n      // good enough for now considering that we never send more than one message action at a time right now */\n      const messageActions = Object.keys(e?.data);\n\n      messageActions.forEach((action) => {\n        workerActions[action](e?.data[action]);\n      });\n    };\n  }\n\n  while (workerQueues[storeName]?.length) {\n    const message = workerQueues[storeName].shift();\n\n    store.$workers[storeName].postMessage(message);\n  }\n}\n\nexport function equivalentWatch(a, b) {\n  const aresourceType = a.resourceType || a.type;\n  const bresourceType = b.resourceType || b.type;\n\n  if ( aresourceType !== bresourceType ) {\n    return false;\n  }\n\n  if ( a.id !== b.id && (a.id || b.id) ) {\n    return false;\n  }\n\n  if ( a.namespace !== b.namespace && (a.namespace || b.namespace) ) {\n    return false;\n  }\n\n  if ( a.selector !== b.selector && (a.selector || b.selector) ) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Sockets will not be able to subscribe to more than one namespace. If this is requested we pretend to handle it\n * - Changes to all resources are monitored (no namespace provided in sub)\n * - We ignore any events not from a required namespace (we have the conversion of project --> namespaces already)\n */\nconst namespaceHandler = {\n  /**\n   * Note - namespace can be a list of projects or namespaces\n   */\n  subscribeNamespace: (namespace) => {\n    if (pAndNFiltering.isApplicable({ namespaced: namespace }) && namespace.length) {\n      return undefined; // AKA sub to everything\n    }\n\n    return namespace;\n  },\n\n  validChange: ({ getters, rootGetters }, type, data) => {\n    const haveNamespace = getters.haveNamespace(type);\n\n    if (haveNamespace?.length) {\n      const namespaces = rootGetters.activeNamespaceCache;\n\n      if (!namespaces[data.metadata.namespace]) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  validateBatchChange: ({ getters, rootGetters }, batch) => {\n    const namespaces = rootGetters.activeNamespaceCache;\n\n    Object.entries(batch).forEach(([type, entries]) => {\n      const haveNamespace = getters.haveNamespace(type);\n\n      if (!haveNamespace?.length) {\n        return;\n      }\n\n      const schema = getters.schemaFor(type);\n\n      if (!schema?.attributes?.namespaced) {\n        return;\n      }\n\n      Object.keys(entries).forEach((id) => {\n        const namespace = id.split('/')[0];\n\n        if (!namespace || !namespaces[namespace]) {\n          delete entries[id];\n        }\n      });\n    });\n\n    return batch;\n  }\n};\n\nfunction queueChange({ getters, state, rootGetters }, { data, revision }, load, label) {\n  const type = getters.normalizeType(data.type);\n\n  const entry = getters.typeEntry(type);\n\n  if ( entry ) {\n    entry.revision = Math.max(entry.revision, parseInt(revision, 10));\n  } else {\n    return;\n  }\n\n  // console.log(`${ label } Event [${ state.config.namespace }]`, data.type, data.id); // eslint-disable-line no-console\n\n  if (!namespaceHandler.validChange({ getters, rootGetters }, type, data)) {\n    return;\n  }\n\n  if ( load ) {\n    state.queue.push({\n      action: 'dispatch',\n      event:  'load',\n      body:   data\n    });\n  } else {\n    const obj = getters.byId(data.type, data.id);\n\n    if ( obj ) {\n      state.queue.push({\n        action: 'commit',\n        event:  'remove',\n        body:   obj\n      });\n    }\n\n    if ( type === SCHEMA ) {\n      // Clear the current records in the store when a type disappears\n      state.queue.push({\n        action: 'commit',\n        event:  'forgetType',\n        body:   data.id\n      });\n    }\n  }\n}\n\nfunction growlsDisabled(rootGetters) {\n  return getPerformanceSetting(rootGetters)?.disableWebsocketNotification;\n}\n\n/**\n * Actions that cover all cases (see file description)\n */\nconst sharedActions = {\n  async subscribe(ctx, opt) {\n    const {\n      state, commit, dispatch, getters, rootGetters\n    } = ctx;\n\n    // ToDo: need to keep the worker up to date on CSRF cookie\n\n    if (rootGetters['isSingleProduct']?.disableSteveSockets) {\n      return;\n    }\n\n    let socket = state.socket;\n\n    commit('setWantSocket', true);\n\n    if ( process.server ) {\n      return;\n    }\n\n    state.debugSocket && console.info(`Subscribe [${ getters.storeName }]`); // eslint-disable-line no-console\n\n    const url = `${ state.config.baseUrl }/subscribe`;\n    const maxTries = growlsDisabled(rootGetters) ? null : 3;\n    const metadata = get(opt, 'metadata');\n\n    if (isAdvancedWorker(ctx)) {\n      if (!this.$workers[getters.storeName]) {\n        await createWorker(this, ctx);\n      }\n\n      // if the worker is in advanced mode then it'll contain it's own socket which it calls a 'watcher'\n      this.$workers[getters.storeName].postMessage({\n        createWatcher: {\n          metadata,\n          url:  `${ state.config.baseUrl }/subscribe`,\n          csrf: this.$cookies.get(CSRF, { parseJSON: false }),\n          maxTries\n        }\n      });\n    } else if ( socket ) {\n      socket.setAutoReconnect(true);\n      socket.setUrl(url);\n      socket.connect(metadata);\n    } else {\n      socket = new Socket(`${ state.config.baseUrl }/subscribe`, true, null, null, maxTries);\n\n      commit('setSocket', socket);\n      socket.addEventListener(EVENT_CONNECTED, (e) => {\n        dispatch('opened', e);\n      });\n\n      socket.addEventListener(EVENT_DISCONNECTED, (e) => {\n        dispatch('closed', e);\n      });\n\n      socket.addEventListener(EVENT_CONNECT_ERROR, (e) => {\n        dispatch('error', e );\n      });\n\n      socket.addEventListener(EVENT_DISCONNECT_ERROR, (e) => {\n        dispatch('error', e );\n      });\n\n      socket.addEventListener(EVENT_MESSAGE, (e) => {\n        const event = e.detail;\n\n        if ( event.data) {\n          const msg = JSON.parse(event.data);\n\n          if (msg.name) {\n            dispatch(`ws.${ msg.name }`, msg);\n          }\n        }\n      });\n      socket.connect(metadata);\n    }\n  },\n\n  unsubscribe({ commit, getters, state }) {\n    const socket = state.socket;\n\n    commit('setWantSocket', false);\n    const cleanupTasks = [];\n\n    const worker = (this.$workers || {})[getters.storeName];\n\n    if (worker) {\n      worker.postMessage({ destroyWorker: true }); // we're only passing the boolean here because the key needs to be something truthy to ensure it's passed on the object.\n      cleanupTasks.push(waitFor(() => !this.$workers[getters.storeName], 'Worker is destroyed'));\n    }\n\n    if ( socket ) {\n      cleanupTasks.push(socket.disconnect());\n    }\n\n    return Promise.all(cleanupTasks);\n  },\n\n  watch({\n    state, dispatch, getters, rootGetters\n  }, params) {\n    state.debugSocket && console.info(`Watch Request [${ getters.storeName }]`, JSON.stringify(params)); // eslint-disable-line no-console\n\n    let {\n      // eslint-disable-next-line prefer-const\n      type, selector, id, revision, namespace, stop, force\n    } = params;\n\n    namespace = namespaceHandler.subscribeNamespace(namespace);\n    type = getters.normalizeType(type);\n\n    if (rootGetters['type-map/isSpoofed'](type)) {\n      state.debugSocket && console.info('Will not Watch (type is spoofed)', JSON.stringify(params)); // eslint-disable-line no-console\n\n      return;\n    }\n\n    // If socket is in error don't try to watch.... unless we `force` it\n    const inError = getters.inError(params);\n\n    if ( !stop && !force && inError ) {\n      // REVISION_TOO_OLD is a temporary state and will be handled when `resyncWatch` completes\n      if (inError !== REVISION_TOO_OLD) {\n        console.error(`Aborting Watch Request [${ getters.storeName }]. Watcher in error (${ inError })`, JSON.stringify(params)); // eslint-disable-line no-console\n      }\n\n      return;\n    }\n\n    if ( !stop && getters.watchStarted({\n      type, id, selector, namespace\n    }) ) {\n      // eslint-disable-next-line no-console\n      state.debugSocket && console.debug(`Already Watching [${ getters.storeName }]`, {\n        type, id, selector, namespace\n      });\n\n      return;\n    }\n\n    if ( typeof revision === 'undefined' ) {\n      revision = getters.nextResourceVersion(type, id);\n    }\n\n    const msg = { resourceType: type };\n\n    if ( revision ) {\n      msg.resourceVersion = `${ revision }`;\n    }\n\n    if ( namespace ) {\n      msg.namespace = namespace;\n    }\n\n    if ( stop ) {\n      msg.stop = true;\n    }\n\n    if ( id ) {\n      msg.id = id;\n    }\n\n    if ( selector ) {\n      msg.selector = selector;\n    }\n\n    const worker = this.$workers?.[getters.storeName] || {};\n\n    if (worker.mode === WORKER_MODES.ADVANCED || worker.mode === WORKER_MODES.WAITING) {\n      if ( force ) {\n        msg.force = true;\n      }\n\n      worker.postMessage({ watch: msg });\n\n      return;\n    }\n\n    return dispatch('send', msg);\n  },\n\n  unwatch(ctx, {\n    type, id, namespace, selector\n  }) {\n    const { commit, getters, dispatch } = ctx;\n\n    if (getters['schemaFor'](type)) {\n      namespace = namespaceHandler.subscribeNamespace(namespace);\n\n      const obj = {\n        type,\n        id,\n        namespace,\n        selector,\n        stop: true, // Stops the watch on a type\n      };\n\n      if (isAdvancedWorker(ctx)) {\n        dispatch('watch', obj); // Ask the backend to stop watching the type\n      } else if (getters['watchStarted'](obj)) {\n        // Set that we don't want to watch this type\n        // Otherwise, the dispatch to unwatch below will just cause a re-watch when we\n        // detect the stop message from the backend over the web socket\n        commit('setWatchStopped', obj);\n        dispatch('watch', obj); // Ask the backend to stop watching the type\n        // Make sure anything in the pending queue for the type is removed, since we've now removed the type\n        commit('clearFromQueue', type);\n      }\n    }\n  },\n\n  'ws.ping'({ getters, dispatch }, msg) {\n    if ( getters.storeName === 'management' ) {\n      const version = msg?.data?.version || null;\n\n      dispatch('updateServerVersion', version, { root: true });\n      console.info(`Ping [${ getters.storeName }] from ${ version || 'unknown version' }`); // eslint-disable-line no-console\n    }\n  },\n};\n\n/**\n * Mutations that cover all cases (both subscriptions here and in advanced worker)\n */\nconst sharedMutations = {\n  debug(state, on, store) {\n    state.debugSocket = on !== false;\n    if (store && this.$workers[store]) {\n      this.$workers[store].postMessage({ toggleDebug: on !== false });\n    }\n  },\n};\n\n/**\n * Actions that cover cases 1 & 2 (see file description)\n */\nconst defaultActions = {\n\n  async flush({\n    state, commit, dispatch, getters\n  }) {\n    const queue = state.queue;\n    let toLoad = [];\n\n    if ( !queue.length ) {\n      return;\n    }\n\n    const started = new Date().getTime();\n\n    state.queue = [];\n\n    state.debugSocket && console.debug(`Subscribe Flush [${ getters.storeName }]`, queue.length, 'items'); // eslint-disable-line no-console\n\n    for ( const { action, event, body } of queue ) {\n      if ( action === 'dispatch' && event === 'load' ) {\n        // Group loads into one loadMulti when possible\n        toLoad.push(body);\n      } else {\n        // When we hit a different kind of event, process all the previous loads, then the other event.\n        if ( toLoad.length ) {\n          await dispatch('loadMulti', toLoad);\n          toLoad = [];\n        }\n\n        if ( action === 'dispatch' ) {\n          await dispatch(event, body);\n        } else if ( action === 'commit' ) {\n          commit(event, body);\n        } else {\n          throw new Error('Invalid queued action');\n        }\n      }\n    }\n\n    // Process any remaining loads\n    if ( toLoad.length ) {\n      await dispatch('loadMulti', toLoad);\n    }\n\n    state.debugSocket && console.debug(`Subscribe Flush [${ getters.storeName }] finished`, (new Date().getTime()) - started, 'ms'); // eslint-disable-line no-console\n  },\n\n  rehydrateSubscribe({ state, dispatch }) {\n    if ( process.client && state.wantSocket && !state.socket ) {\n      dispatch('subscribe');\n    }\n  },\n\n  reconnectWatches({\n    state, getters, commit, dispatch\n  }) {\n    const promises = [];\n\n    for ( const entry of state.started.slice() ) {\n      console.info(`Reconnect [${ getters.storeName }]`, JSON.stringify(entry)); // eslint-disable-line no-console\n\n      if ( getters.schemaFor(entry.type) ) {\n        commit('setWatchStopped', entry);\n        delete entry.revision;\n        promises.push(dispatch('watch', entry));\n      }\n    }\n\n    return Promise.all(promises);\n  },\n\n  async resyncWatch({\n    state, getters, dispatch, commit\n  }, params) {\n    const {\n      resourceType, namespace, id, selector\n    } = params;\n\n    console.info(`Resync [${ getters.storeName }]`, params); // eslint-disable-line no-console\n\n    const opt = { force: true, forceWatch: true };\n\n    if ( id ) {\n      await dispatch('find', {\n        type: resourceType,\n        id,\n        opt,\n      });\n      commit('clearInError', params);\n\n      return;\n    }\n\n    let have, want;\n\n    if ( selector ) {\n      have = getters['matching'](resourceType, selector).slice();\n      want = await dispatch('findMatching', {\n        type: resourceType,\n        selector,\n        opt,\n      });\n    } else {\n      have = getters['all'](resourceType).slice();\n\n      if ( namespace ) {\n        have = have.filter((x) => x.metadata?.namespace === namespace);\n      }\n\n      want = await dispatch('findAll', {\n        type:           resourceType,\n        watchNamespace: namespace,\n        opt\n      });\n    }\n\n    const wantMap = {};\n\n    for ( const obj of want ) {\n      wantMap[obj.id] = true;\n    }\n\n    for ( const obj of have ) {\n      if ( !wantMap[obj.id] ) {\n        state.debugSocket && console.info(`Remove stale [${ getters.storeName }]`, resourceType, obj.id); // eslint-disable-line no-console\n\n        commit('remove', obj);\n      }\n    }\n  },\n\n  async opened({\n    commit, dispatch, state, getters, rootGetters\n  }, event) {\n    state.debugSocket && console.info(`WebSocket Opened [${ getters.storeName }]`); // eslint-disable-line no-console\n    const socket = event.currentTarget;\n    const tries = event?.detail?.tries; // have to pull it off of the event because the socket's tries is already reset to 0\n    const t = rootGetters['i18n/t'];\n    const disableGrowl = growlsDisabled(rootGetters);\n\n    this.$socket = socket;\n\n    if ( !state.queue ) {\n      state.queue = [];\n    }\n\n    if ( !state.queueTimer ) {\n      state.flushQueue = async() => {\n        if ( state.queue.length ) {\n          await dispatch('flush');\n        }\n\n        state.queueTimer = setTimeout(state.flushQueue, 1000);\n      };\n\n      state.flushQueue();\n    }\n\n    if ( socket.hasReconnected ) {\n      await dispatch('reconnectWatches');\n      // Check for disconnect notifications and clear them\n      const growlErr = rootGetters['growl/find']({ key: 'url', val: socket.url });\n\n      if (growlErr) {\n        dispatch('growl/remove', growlErr.id, { root: true });\n      }\n      if (tries > 1 && !disableGrowl) {\n        dispatch('growl/success', {\n          title:   t('growl.reconnected.title'),\n          message: t('growl.reconnected.message', { url: this.$socket.url, tries }),\n        }, { root: true });\n      }\n    }\n\n    // Try resending any frames that were attempted to be sent while the socket was down, once.\n    if ( !process.server ) {\n      for ( const obj of state.pendingFrames.slice() ) {\n        commit('dequeuePendingFrame', obj);\n        dispatch('sendImmediate', obj);\n      }\n    }\n  },\n\n  closed({ state, getters }) {\n    state.debugSocket && console.info(`WebSocket Closed [${ getters.storeName }]`); // eslint-disable-line no-console\n    clearTimeout(state.queueTimer);\n    state.queueTimer = null;\n  },\n\n  error({\n    getters, state, dispatch, rootGetters\n  }, e) {\n    clearTimeout(state.queueTimer);\n    state.queueTimer = null;\n\n    // determine if websocket notifications are disabled\n    const disableGrowl = growlsDisabled(rootGetters);\n\n    if (!disableGrowl) {\n      const dateFormat = escapeHtml( rootGetters['prefs/get'](DATE_FORMAT));\n      const timeFormat = escapeHtml( rootGetters['prefs/get'](TIME_FORMAT));\n      const time = e?.srcElement?.disconnectedAt || Date.now();\n\n      const timeFormatted = `${ day(time).format(`${ dateFormat } ${ timeFormat }`) }`;\n      const url = e?.srcElement?.url;\n      const tries = state?.socket?.tries;\n\n      const t = rootGetters['i18n/t'];\n\n      const growlErr = rootGetters['growl/find']({ key: 'url', val: url });\n\n      if (e.type === EVENT_CONNECT_ERROR) { // if this occurs, then we're at least retrying to connect\n        if (growlErr) {\n          dispatch('growl/remove', growlErr.id, { root: true });\n        }\n        dispatch('growl/error', {\n          title:   t('growl.connectError.title'),\n          message: t('growl.connectError.message', {\n            url, time: timeFormatted, tries\n          }, { raw: true }),\n          icon:          'error',\n          earliestClose: time + MINIMUM_TIME_NOTIFIED,\n          url\n        }, { root: true });\n      } else if (e.type === EVENT_DISCONNECT_ERROR) { // if this occurs, we've given up on trying to reconnect\n        if (growlErr) {\n          dispatch('growl/remove', growlErr.id, { root: true });\n        }\n        dispatch('growl/error', {\n          title:   t('growl.disconnectError.title'),\n          message: t('growl.disconnectError.message', {\n            url, time: timeFormatted, tries\n          }, { raw: true }),\n          icon:          'error',\n          earliestClose: time + MINIMUM_TIME_NOTIFIED,\n          url\n        }, { root: true });\n      } else {\n        // if the error is not a connect error or disconnect error, the socket never worked: log whether the current browser is safari\n        console.error(`WebSocket Connection Error [${ getters.storeName }]`, e.detail); // eslint-disable-line no-console\n      }\n    }\n  },\n\n  send({ state, commit }, obj) {\n    if ( state.socket ) {\n      const ok = state.socket.send(JSON.stringify(obj));\n\n      if ( ok ) {\n        return;\n      }\n    }\n\n    commit('enqueuePendingFrame', obj);\n  },\n\n  sendImmediate({ state }, obj) {\n    if ( state.socket ) {\n      return state.socket.send(JSON.stringify(obj));\n    }\n  },\n\n  /**\n   * Steve only event\n   */\n  'ws.resource.start'({\n    state, getters, commit, dispatch\n  }, msg) {\n    state.debugSocket && console.info(`Resource start: [${ getters.storeName }]`, msg); // eslint-disable-line no-console\n\n    const newWatch = {\n      type:      msg.resourceType,\n      namespace: msg.namespace,\n      id:        msg.id,\n      selector:  msg.selector\n    };\n\n    state.started.filter((entry) => {\n      if (\n        entry.type === newWatch.type &&\n        entry.namespace !== newWatch.namespace\n      ) {\n        return true;\n      }\n    }).forEach((entry) => {\n      dispatch('unwatch', entry);\n    });\n\n    commit('setWatchStarted', newWatch);\n  },\n\n  'ws.resource.error'({ getters, commit, dispatch }, msg) {\n    console.warn(`Resource error [${ getters.storeName }]`, msg.resourceType, ':', msg.data.error); // eslint-disable-line no-console\n\n    const err = msg.data?.error?.toLowerCase();\n\n    if ( err.includes('watch not allowed') ) {\n      commit('setInError', { type: msg.resourceType, reason: NO_WATCH });\n    } else if ( err.includes('failed to find schema') ) {\n      commit('setInError', { type: msg.resourceType, reason: NO_SCHEMA });\n    } else if ( err.includes('too old') ) {\n      // Set an error for (all) subs of this type. This..\n      // 1) blocks attempts by resource.stop to resub (as type is in error)\n      // 2) will be cleared when resyncWatch --> watch (with force) --> resource.start completes\n      commit('setInError', { type: msg.resourceType, reason: REVISION_TOO_OLD });\n      dispatch('resyncWatch', msg);\n    }\n  },\n\n  /**\n   * Steve only event\n   *\n   * Steve has stopped watching this resource. This happens for a couple of reasons\n   * - We have requested that the resource watch should be stopped (and we receive this event as confirmation)\n   * - Steve tells us that the resource watch has been stopped. Possible reasons\n   *   - The rancher <--> k8s socket closed (happens every ~30 mins on mgmt socket)\n   *   - Permissions has changed for the subscribed resource, so rancher closes socket\n   */\n  'ws.resource.stop'({\n    state, getters, commit, dispatch\n  }, msg) {\n    const type = msg.resourceType;\n    const obj = {\n      type,\n      id:        msg.id,\n      namespace: msg.namespace,\n      selector:  msg.selector\n    };\n\n    state.debugSocket && console.info(`Resource Stop [${ getters.storeName }]`, type, msg); // eslint-disable-line no-console\n\n    if (!type) {\n      console.error(`Resource Stop [${ getters.storeName }]. Received resource.stop with an empty resourceType, aborting`, msg); // eslint-disable-line no-console\n\n      return;\n    }\n\n    // If we're trying to watch this event, attempt to re-watch\n    //\n    // To make life easier in the advanced worker `resource.stop` --> `watch` is handled here (basically for access to getters.nextResourceVersion)\n    // This means the concept of resource sub watch state needs massaging\n    const advancedWorker = msg.advancedWorker;\n    const localState = !advancedWorker;\n    const watchStarted = localState ? getters['watchStarted'](obj) : advancedWorker;\n\n    if ( getters['schemaFor'](type) && watchStarted) {\n      if (localState) {\n        commit('setWatchStopped', obj);\n      }\n\n      dispatch('watch', obj);\n    }\n  },\n\n  'ws.resource.create'(ctx, msg) {\n    ctx.state.debugSocket && console.info(`Resource Create [${ ctx.getters.storeName }]`, msg.resourceType, msg); // eslint-disable-line no-console\n    queueChange(ctx, msg, true, 'Create');\n  },\n\n  'ws.resource.change'(ctx, msg) {\n    const data = msg.data;\n    const type = data.type;\n\n    // Work-around for ws.error messages being sent as change events\n    // These have no id (or other metadata) which breaks lots if they are processed as change events\n    if (data.message && !data.id) {\n      return;\n    }\n\n    // Web worker can process schemas to check that they are actually changing and\n    // only load updates if the schema did actually change\n    if (type === SCHEMA) {\n      const worker = (this.$workers || {})[ctx.getters.storeName];\n\n      if (worker) {\n        worker.postMessage({ updateSchema: data });\n\n        // No further processing - let the web worker check the schema updates\n        return;\n      }\n    }\n\n    queueChange(ctx, msg, true, 'Change');\n\n    const typeOption = ctx.rootGetters['type-map/optionsFor'](type);\n\n    if (typeOption?.alias?.length > 0) {\n      const alias = typeOption?.alias || [];\n\n      alias.map((type) => {\n        ctx.state.queue.push({\n          action: 'dispatch',\n          event:  'load',\n          body:   {\n            ...data,\n            type,\n          },\n        });\n      });\n    }\n  },\n\n  'ws.resource.remove'(ctx, msg) {\n    const data = msg.data;\n    const type = data.type;\n\n    ctx.state.debugSocket && console.info(`Resource Remove [${ ctx.getters.storeName }]`, type, msg); // eslint-disable-line no-console\n\n    if (type === SCHEMA) {\n      const worker = (this.$workers || {})[ctx.getters.storeName];\n\n      if (worker) {\n        worker.postMessage({ removeSchema: data.id });\n      }\n    }\n\n    queueChange(ctx, msg, false, 'Remove');\n\n    const typeOption = ctx.rootGetters['type-map/optionsFor'](type);\n\n    if (typeOption?.alias?.length > 0) {\n      const alias = typeOption?.alias || [];\n\n      alias.map((type) => {\n        const obj = ctx.getters.byId(type, data.id);\n\n        ctx.state.queue.push({\n          action: 'commit',\n          event:  'remove',\n          body:   obj,\n        });\n      });\n    }\n  },\n};\n\n/**\n * Mutations that cover cases 1 & 2 (see file description)\n */\nconst defaultMutations = {\n  setSocket(state, socket) {\n    state.socket = socket;\n  },\n\n  setWantSocket(state, want) {\n    state.wantSocket = want;\n  },\n\n  enqueuePendingFrame(state, obj) {\n    state.pendingFrames.push(obj);\n  },\n\n  dequeuePendingFrame(state, obj) {\n    removeObject(state.pendingFrames, obj);\n  },\n\n  setWatchStarted(state, obj) {\n    const existing = state.started.find((entry) => equivalentWatch(obj, entry));\n\n    if ( !existing ) {\n      addObject(state.started, obj);\n    }\n\n    delete state.inError[keyForSubscribe(obj)];\n  },\n\n  setWatchStopped(state, obj) {\n    const existing = state.started.find((entry) => equivalentWatch(obj, entry));\n\n    if ( existing ) {\n      removeObject(state.started, existing);\n    } else {\n      console.warn(\"Tried to remove a watch that doesn't exist\", obj); // eslint-disable-line no-console\n    }\n  },\n\n  setInError(state, msg) {\n    const key = keyForSubscribe(msg);\n\n    state.inError[key] = msg.reason;\n  },\n\n  clearInError(state, msg) {\n    const key = keyForSubscribe(msg);\n\n    delete state.inError[key];\n  },\n\n  resetSubscriptions(state) {\n    // Clear out socket state. This is only ever called from reset... which is always called after we `disconnect` above.\n    // This could probably be folded in to there\n    clear(state.started);\n    clear(state.pendingFrames);\n    clear(state.queue);\n    clearTimeout(state.queueTimer);\n    state.deferredRequests = {};\n    state.queueTimer = null;\n  },\n\n  clearFromQueue(state, type) {\n    // Remove anything in the queue that is a resource update for the given type\n    state.queue = state.queue.filter((item) => {\n      return item.body?.type !== type;\n    });\n  },\n};\n\n/**\n * Getters that cover cases 1 & 2 (see file description)\n */\nconst defaultGetters = {\n  inError: (state) => (obj) => {\n    return state.inError[keyForSubscribe(obj)];\n  },\n\n  watchStarted: (state) => (obj) => {\n    return !!state.started.find((entry) => equivalentWatch(obj, entry));\n  },\n\n  nextResourceVersion: (state, getters) => (type, id) => {\n    type = normalizeType(type);\n    let revision = 0;\n\n    if ( id ) {\n      const existing = getters['byId'](type, id);\n\n      revision = parseInt(existing?.metadata?.resourceVersion, 10);\n    }\n\n    if ( !revision ) {\n      const cache = state.types[type];\n\n      if ( !cache ) {\n        return null;\n      }\n\n      revision = cache.revision; // This is always zero.....\n\n      for ( const obj of cache.list ) {\n        if ( obj && obj.metadata ) {\n          const neu = parseInt(obj.metadata.resourceVersion, 10);\n\n          revision = Math.max(revision, neu);\n        }\n      }\n    }\n\n    if ( revision ) {\n      return revision;\n    }\n\n    return null;\n  },\n};\n\nexport const actions = {\n  ...sharedActions,\n  ...defaultActions,\n};\n\nexport const mutations = {\n  ...sharedMutations,\n  ...defaultMutations,\n};\n\nexport const getters = { ...defaultGetters };\n"],"mappings":"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"}]}