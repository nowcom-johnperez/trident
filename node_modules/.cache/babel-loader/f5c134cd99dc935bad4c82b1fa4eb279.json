{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/plugins/dashboard-store/getters.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/plugins/dashboard-store/getters.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["SCHEMA","matches","typeMunge","typeRef","SIMPLE_TYPES","splitObjectPath","parseType","Resource","mutations","keyFieldFor","normalizeType","lookup","garbageCollect","urlFor","state","getters","type","id","opt","url","schema","schemaFor","Error","concat","links","collection","startsWith","baseUrl","config","replace","urlOptions","all","rootState","typeRegistered","console","warn","registerType","gcUpdateLastAccessed","types","list","matching","selector","namespace","filter","obj","byId","entry","map","get","pathExistsInSchema","path","parts","length","_schema$resourceField","key","shift","resourceFields","pop","schemas","keyField","keyFieldForType","find","x","thisOne","endsWith","schemaName","res","arrayRes","Array","isArray","entries","sort","a","b","fuzzy","arguments","undefined","allowThrow","out","close","defaultFor","field","mapOf","arrayOf","referenceTo","includes","canList","hasLink","typeEntry","haveAll","haveAllNamespace","haveNamespace","_state$types$type","haveSelector","storeName","defaultModel","classify","_obj$metadata","metadata","name","cleanResource","existing","data","isClusterStore","loadCounter","gcIgnoreTypes"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/plugins/dashboard-store/getters.js"],"sourcesContent":["\nimport { SCHEMA } from '@shell/config/types';\n\nimport { matches } from '@shell/utils/selector';\nimport { typeMunge, typeRef, SIMPLE_TYPES } from '@shell/utils/create-yaml';\nimport { splitObjectPath } from '@shell/utils/string';\nimport { parseType } from '@shell/models/schema';\nimport Resource from '@shell/plugins/dashboard-store/resource-class';\nimport mutations from './mutations';\nimport { keyFieldFor, normalizeType } from './normalize';\nimport { lookup } from './model-loader';\nimport garbageCollect from '@shell/utils/gc/gc';\n\nexport const urlFor = (state, getters) => (type, id, opt) => {\n  opt = opt || {};\n  type = getters.normalizeType(type);\n  let url = opt.url;\n\n  if ( !url ) {\n    const schema = getters.schemaFor(type);\n\n    if ( !schema ) {\n      throw new Error(`Unknown schema for type: ${ type }`);\n    }\n\n    url = schema.links.collection;\n\n    if ( !url ) {\n      throw new Error(`You don't have permission to list this type: ${ type }`);\n    }\n\n    if ( id ) {\n      url += `/${ id }`;\n    }\n  }\n\n  if ( !url.startsWith('/') && !url.startsWith('http') ) {\n    const baseUrl = state.config.baseUrl.replace(/\\/$/, '');\n\n    url = `${ baseUrl }/${ url }`;\n  }\n\n  url = getters.urlOptions(url, opt);\n\n  return url;\n};\n\nexport default {\n\n  all: (state, getters, rootState) => (type) => {\n    type = getters.normalizeType(type);\n\n    if ( !getters.typeRegistered(type) ) {\n      // Yes this is mutating state in a getter... it's not the end of the world..\n      // throw new Error(`All of ${ type } is not loaded`);\n      console.warn(`All of ${ type } is not loaded yet`); // eslint-disable-line no-console\n      mutations.registerType(state, type);\n    }\n\n    garbageCollect.gcUpdateLastAccessed({\n      state, getters, rootState\n    }, type);\n\n    return state.types[type].list;\n  },\n\n  matching: (state, getters, rootState) => (type, selector, namespace) => {\n    let all = getters['all'](type);\n\n    // Filter first by namespace if one is provided, since this is efficient\n    if (namespace) {\n      all = all.filter((obj) => obj.namespace === namespace);\n    }\n\n    garbageCollect.gcUpdateLastAccessed({\n      state, getters, rootState\n    }, type);\n\n    return all.filter((obj) => {\n      return matches(obj, selector);\n    });\n  },\n\n  byId: (state, getters, rootState) => (type, id) => {\n    type = getters.normalizeType(type);\n    const entry = state.types[type];\n\n    if ( entry ) {\n      garbageCollect.gcUpdateLastAccessed({\n        state, getters, rootState\n      }, type);\n\n      return entry.map.get(id);\n    }\n  },\n\n  pathExistsInSchema: (state, getters) => (type, path) => {\n    let schema = getters.schemaFor(type);\n    const parts = splitObjectPath(path);\n\n    while ( parts.length ) {\n      const key = parts.shift();\n\n      type = schema.resourceFields?.[key]?.type;\n\n      if ( !type ) {\n        return false;\n      }\n\n      if ( parts.length ) {\n        type = parseType(type).pop(); // Get the main part of array[map[something]] => something\n        schema = getters.schemaFor(type);\n\n        if ( !schema ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  },\n\n  // @TODO resolve difference between this and schemaFor and have only one of them.\n  schema: (state, getters) => (type) => {\n    type = getters.normalizeType(type);\n    const schemas = state.types[SCHEMA];\n    const keyField = getters.keyFieldForType(SCHEMA);\n\n    return schemas.list.find((x) => {\n      const thisOne = getters.normalizeType(x[keyField]);\n\n      return thisOne === type || thisOne.endsWith(`.${ type }`);\n    });\n  },\n\n  // Fuzzy search to find a matching schema name for plugins/lookup\n  schemaName: (state, getters) => (type) => {\n    type = getters.normalizeType(type);\n    const schemas = state.types[SCHEMA];\n    const keyField = getters.keyFieldForType(SCHEMA);\n    const res = schemas.list.find((x) => {\n      const thisOne = getters.normalizeType(x[keyField]);\n\n      return thisOne === type || thisOne.endsWith(`.${ type }`);\n    });\n\n    if (!res) {\n      return;\n    }\n    const arrayRes = Array.isArray(res) ? res : [res];\n    const entries = arrayRes.map((x) => {\n      return x[keyField];\n    }).sort((a, b) => {\n      return a.length - b.length;\n    });\n\n    if ( entries[0] ) {\n      return entries[0];\n    }\n\n    return type;\n  },\n\n  // Fuzzy is only for plugins/lookup, do not use in real code\n  schemaFor: (state, getters) => (type, fuzzy = false, allowThrow = true) => {\n    const schemas = state.types[SCHEMA];\n\n    type = getters.normalizeType(type);\n\n    if ( !schemas ) {\n      if ( allowThrow ) {\n        throw new Error(\"Schemas aren't loaded yet\");\n      } else {\n        return null;\n      }\n    }\n\n    const out = schemas.map.get(type);\n\n    if ( !out && fuzzy ) {\n      const close = getters.schemaName(type);\n\n      if ( close ) {\n        return getters.schemaFor(close);\n      }\n    }\n\n    return out;\n  },\n\n  defaultFor: (state, getters) => (type) => {\n    const schema = getters['schemaFor'](type);\n\n    if ( !schema ) {\n      return null;\n    }\n\n    const out = {};\n\n    for ( const key in schema.resourceFields ) {\n      const field = schema.resourceFields[key];\n\n      if ( !field ) {\n        // Not much to do here...\n        continue;\n      }\n\n      const type = typeMunge(field.type);\n      const mapOf = typeRef('map', type);\n      const arrayOf = typeRef('array', type);\n      const referenceTo = typeRef('reference', type);\n\n      if ( mapOf || type === 'map' || type === 'json' ) {\n        out[key] = getters.defaultFor(type);\n      } else if ( arrayOf || type === 'array' ) {\n        out[key] = [];\n      } else if ( referenceTo ) {\n        out[key] = undefined;\n      } else if ( SIMPLE_TYPES.includes(type) ) {\n        if ( typeof field['default'] === 'undefined' ) {\n          out[key] = undefined;\n        } else {\n          out[key] = field['default'];\n        }\n      } else {\n        out[key] = getters.defaultFor(type);\n      }\n    }\n\n    return out;\n  },\n\n  canList: (state, getters) => (type) => {\n    const schema = getters.schemaFor(type);\n\n    return schema && schema.hasLink('collection');\n  },\n\n  typeRegistered: (state, getters) => (type) => {\n    type = getters.normalizeType(type);\n\n    return !!state.types[type];\n  },\n\n  typeEntry: (state, getters) => (type) => {\n    type = getters.normalizeType(type);\n\n    return state.types[type];\n  },\n\n  haveAll: (state, getters) => (type) => {\n    type = getters.normalizeType(type);\n    const entry = state.types[type];\n\n    if ( entry ) {\n      return entry.haveAll || false;\n    }\n\n    return false;\n  },\n\n  haveAllNamespace: (state, getters) => (type, namespace) => {\n    if (!namespace) {\n      return false;\n    }\n\n    type = getters.normalizeType(type);\n    const entry = state.types[type];\n\n    if ( entry ) {\n      return entry.haveNamespace === namespace;\n    }\n\n    return false;\n  },\n\n  haveNamespace: (state, getters) => (type) => {\n    type = getters.normalizeType(type);\n\n    return state.types[type]?.haveNamespace || null;\n  },\n\n  haveSelector: (state, getters) => (type, selector) => {\n    type = getters.normalizeType(type);\n    const entry = state.types[type];\n\n    if ( entry ) {\n      return entry.haveSelector[selector] || false;\n    }\n\n    return false;\n  },\n\n  normalizeType: () => (type) => {\n    return normalizeType(type);\n  },\n\n  keyFieldForType: () => (type) => {\n    return keyFieldFor(type);\n  },\n\n  urlFor,\n\n  urlOptions: () => (url, opt) => {\n    return url;\n  },\n\n  storeName: (state) => {\n    return state.config.namespace;\n  },\n\n  defaultModel: () => () => {\n    return undefined;\n  },\n\n  classify: (state, getters, rootState) => (obj) => {\n    return lookup(state.config.namespace, obj?.type, obj?.metadata?.name, rootState) || Resource;\n  },\n\n  cleanResource: () => (existing, data) => {\n    return data;\n  },\n\n  isClusterStore: (state) => {\n    return state.config.isClusterStore;\n  },\n\n  // Increment the load counter for a resource type\n  // This is used for incremental loading do detect when a page changes occur of the a reload happend\n  // While a previous incremental loading operation is still in progress\n  loadCounter: (state, getters) => (type) => {\n    type = getters.normalizeType(type);\n\n    if (!!state.types[type]) {\n      return state.types[type].loadCounter;\n    }\n\n    return 0;\n  },\n\n  gcIgnoreTypes: () => {\n    return {};\n  }\n};\n"],"mappings":"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"}]}