{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/ResourceList/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/ResourceList/index.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["ResourceTable","Loading","Masthead","ResourceLoadingIndicator","ResourceFetch","IconMessage","ResourceListComponentName","PanelLocation","ExtensionPoint","ExtensionPanel","sameContents","name","components","mixins","props","hasAdvancedFiltering","type","Boolean","default","advFilterHideLabelsAsCols","advFilterPreventFilteringLabels","fetch","_this","_asyncToGenerator","regeneratorRuntime","mark","_callee","store","resource","schema","_yield$importer","importer","component","_component$$loadingRe","loadResources","loadIndeterminate","wrap","_callee$","_context","prev","next","$store","hasListComponent","listComponent","t1","sent","t0","t2","typeDisplay","customTypeDisplay","apply","hasFetch","$loadingResources","$route","dispatch","Error","t","abrupt","namespaceFilterRequired","$fetchType","stop","data","getters","params","_objectSpread","inStore","concat","showMasthead","showListMasthead","undefined","extensionType","PANEL","extensionLocation","RESOURCE_LIST","manualRefreshInit","watch","force","useQueryParamsForSimpleFiltering","computed","headers","groupBy","showIncrementalLoadingIndicator","_this$perfConfig","perfConfig","incrementalLoading","enabled","namespaceFilter","neu","old","created"],"sources":["node_modules/@rancher/shell/components/ResourceList/index.vue"],"sourcesContent":["<script>\nimport ResourceTable from '@shell/components/ResourceTable';\nimport Loading from '@shell/components/Loading';\nimport Masthead from './Masthead';\nimport ResourceLoadingIndicator from './ResourceLoadingIndicator';\nimport ResourceFetch from '@shell/mixins/resource-fetch';\nimport IconMessage from '@shell/components/IconMessage.vue';\nimport { ResourceListComponentName } from './resource-list.config';\nimport { PanelLocation, ExtensionPoint } from '@shell/core/types';\nimport ExtensionPanel from '@shell/components/ExtensionPanel';\nimport { sameContents } from '@shell/utils/array';\n\nexport default {\n  name: ResourceListComponentName,\n\n  components: {\n    Loading,\n    ResourceTable,\n    Masthead,\n    ResourceLoadingIndicator,\n    IconMessage,\n    ExtensionPanel\n  },\n  mixins: [ResourceFetch],\n\n  props: {\n    hasAdvancedFiltering: {\n      type:    Boolean,\n      default: false\n    },\n    advFilterHideLabelsAsCols: {\n      type:    Boolean,\n      default: false\n    },\n    advFilterPreventFilteringLabels: {\n      type:    Boolean,\n      default: false\n    },\n  },\n\n  async fetch() {\n    const store = this.$store;\n    const resource = this.resource;\n\n    const schema = this.schema;\n\n    if ( this.hasListComponent ) {\n      // If you provide your own list then call its asyncData\n      const importer = this.listComponent;\n      const component = (await importer())?.default;\n\n      if ( component?.typeDisplay ) {\n        this.customTypeDisplay = component.typeDisplay.apply(this);\n      }\n\n      // If your list page has a fetch then it's responsible for populating rows itself\n      if ( component?.fetch ) {\n        this.hasFetch = true;\n      }\n\n      // If the custom component supports it, ask it what resources it loads, so we can\n      // use the incremental loading indicator when enabled\n      if (component?.$loadingResources) {\n        const { loadResources, loadIndeterminate } = component?.$loadingResources(this.$route, this.$store);\n\n        this.loadResources = loadResources || [resource];\n        this.loadIndeterminate = loadIndeterminate || false;\n      }\n    }\n\n    if ( !this.hasFetch ) {\n      if ( !schema ) {\n        store.dispatch('loadingError', new Error(this.t('nav.failWhale.resourceListNotFound', { resource }, true)));\n\n        return;\n      }\n\n      // See comment for `namespaceFilterRequired` watcher, skip fetch if we don't have a valid NS\n      if (!this.namespaceFilterRequired) {\n        await this.$fetchType(resource);\n      }\n    }\n  },\n\n  data() {\n    const getters = this.$store.getters;\n    const params = { ...this.$route.params };\n    const resource = params.resource;\n\n    const hasListComponent = getters['type-map/hasCustomList'](resource);\n\n    const inStore = getters['currentStore'](resource);\n    const schema = getters[`${ inStore }/schemaFor`](resource);\n\n    const showMasthead = getters[`type-map/optionsFor`](resource).showListMasthead;\n\n    return {\n      inStore,\n      schema,\n      hasListComponent,\n      showMasthead:                     showMasthead === undefined ? true : showMasthead,\n      resource,\n      extensionType:                    ExtensionPoint.PANEL,\n      extensionLocation:                PanelLocation.RESOURCE_LIST,\n      loadResources:                    [resource], // List of resources that will be loaded, this could be many (`Workloads`)\n      hasFetch:                         false,\n      // manual refresh\n      manualRefreshInit:                false,\n      watch:                            false,\n      force:                            false,\n      // Provided by fetch later\n      customTypeDisplay:                null,\n      // incremental loading\n      loadIndeterminate:                false,\n      // query param for simple filtering\n      useQueryParamsForSimpleFiltering: true\n    };\n  },\n\n  computed: {\n    headers() {\n      if ( this.hasListComponent || !this.schema ) {\n        // Custom lists figure out their own headers\n        return [];\n      }\n\n      return this.$store.getters['type-map/headersFor'](this.schema);\n    },\n\n    groupBy() {\n      return this.$store.getters['type-map/groupByFor'](this.schema);\n    },\n\n    showIncrementalLoadingIndicator() {\n      return this.perfConfig?.incrementalLoading?.enabled;\n    },\n\n  },\n\n  watch: {\n    /**\n     * When a NS filter is required and the user selects a different one, kick off a new set of API requests\n     *\n     * ResourceList has two modes\n     * 1) ResourceList component handles API request to fetch resources\n     * 2) Custom list component handles API request to fetch resources\n     *\n     * This covers case 1\n     */\n    namespaceFilter(neu, old) {\n      if (sameContents(neu, old)) {\n        return;\n      }\n\n      if (neu && !this.hasFetch) {\n        this.$fetchType(this.resource);\n      }\n    }\n  },\n\n  created() {\n    let listComponent = false;\n\n    const resource = this.$route.params.resource;\n    const hasListComponent = this.$store.getters['type-map/hasCustomList'](resource);\n\n    if ( hasListComponent ) {\n      listComponent = this.$store.getters['type-map/importList'](resource);\n    }\n\n    this.listComponent = listComponent;\n  },\n};\n</script>\n\n<template>\n  <IconMessage\n    v-if=\"namespaceFilterRequired\"\n    :vertical=\"true\"\n    :subtle=\"false\"\n    icon=\"icon-filter_alt\"\n  >\n    <template #message>\n      {{ t('resourceList.nsFiltering') }}\n    </template>\n  </IconMessage>\n  <div v-else>\n    <Masthead\n      v-if=\"showMasthead\"\n      :type-display=\"customTypeDisplay\"\n      :schema=\"schema\"\n      :resource=\"resource\"\n      :show-incremental-loading-indicator=\"showIncrementalLoadingIndicator\"\n      :load-resources=\"loadResources\"\n      :load-indeterminate=\"loadIndeterminate\"\n    >\n      <template slot=\"extraActions\">\n        <slot name=\"extraActions\" />\n      </template>\n    </Masthead>\n    <!-- Extensions area -->\n    <ExtensionPanel\n      :resource=\"{}\"\n      :type=\"extensionType\"\n      :location=\"extensionLocation\"\n    />\n\n    <div v-if=\"hasListComponent\">\n      <component\n        :is=\"listComponent\"\n        :incremental-loading-indicator=\"showIncrementalLoadingIndicator\"\n        :rows=\"rows\"\n        v-bind=\"$data\"\n      />\n    </div>\n    <ResourceTable\n      v-else\n      :schema=\"schema\"\n      :rows=\"rows\"\n      :loading=\"loading\"\n      :headers=\"headers\"\n      :group-by=\"groupBy\"\n      :has-advanced-filtering=\"hasAdvancedFiltering\"\n      :adv-filter-hide-labels-as-cols=\"advFilterHideLabelsAsCols\"\n      :adv-filter-prevent-filtering-labels=\"advFilterPreventFilteringLabels\"\n      :use-query-params-for-simple-filtering=\"useQueryParamsForSimpleFiltering\"\n      :force-update-live-and-delayed=\"forceUpdateLiveAndDelayed\"\n    />\n  </div>\n</template>\n\n  <style lang=\"scss\" scoped>\n    .header {\n      position: relative;\n    }\n    H2 {\n      position: relative;\n      margin: 0 0 20px 0;\n    }\n    .filter{\n      line-height: 45px;\n    }\n    .right-action {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n    }\n  </style>\n"],"mappings":"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"}]}