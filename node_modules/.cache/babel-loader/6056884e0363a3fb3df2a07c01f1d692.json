{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/pages/rio/mesh.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/pages/rio/mesh.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["escapeHtml","RADIUS","INTERVAL","nodeIdFor","obj","concat","namespace","app","version","fromId","fromNamespace","fromApp","fromVersion","toId","toNamespace","toApp","toVersion","loadData","_x","_loadData","apply","arguments","_asyncToGenerator","regeneratorRuntime","mark","_callee5","store","data","known","wrap","_callee5$","_context5","prev","next","dispatch","url","sent","nodes","filter","x","forEach","id","edges","abrupt","stop","round3Digits","num","Math","round","asyncData","_ref","_callee","_callee$","_context","computed","namespaces","$store","getters","displayNodes","console","log","out","displayEdges","ns1","ns2","watch","updateGraph","renderGraph","mounted","_this","_callee2","_callee2$","_context2","timer","setInterval","refreshData","initGraph","window","m","beforeDestroy","clearInterval","methods","_this2","_callee3","neu","_callee3$","_context3","_this3","_callee4","d3","dagreD3","g","render","svg","group","zoom","_callee4$","_context4","graphlib","Graph","compound","setGraph","marginx","marginy","rankdir","align","ranker","setDefaultEdgeLabel","arrows","smaller","normal","parent","edge","type","marker","append","attr","path","style","util","applyStyle","select","$refs","mesh","on","event","sourceEvent","lastZoom","transform","call","graph","e","seenNamespaces","_iterator","_createForOfIteratorHelper","_step","s","n","done","node","value","nsId","ensureNamespace","label","p99","stats","p99ms","unit","html","successRate","rps","setNode","labelType","width","height","rx","ry","setParent","err","f","rpses","map","min","_toConsumableArray","max","_iterator2","_step2","weight","floor","setEdge","arrowhead","arrowheadClass","class","curve","curveBasis","name","clusterLabelPos","zoomIdentity","translate","scale","graphWidth","graphHeight","parseInt","replace","dX","dY","y","k","loading","clicked","target","closest"],"sources":["node_modules/@rancher/shell/pages/rio/mesh.vue"],"sourcesContent":["<script>\nimport { escapeHtml } from '@shell/utils/string';\n\nconst RADIUS = 5;\n\nconst INTERVAL = 10000;\n\n/*\nfunction randomStats() {\n  return {\n    'p50ms':       Math.random(),\n    'p90ms':       Math.random() * 2,\n    'p99ms':       Math.random() * 5,\n    'rps':         Math.random() * 100,\n    'successRate': Math.random(),\n  };\n}\n\nfunction randomItem(ary) {\n  const idx = Math.floor(Math.random() * ary.length);\n\n  return ary[idx];\n}\n\nfunction randomData() {\n  const nodes = [];\n  const edges = [];\n\n  ['foo', 'bar', 'baz', 'bat', 'qux'].forEach((name) => {\n    nodes.push({\n      'namespace': 'default',\n      'app':       name,\n      'version':   'v1',\n      'stats':     randomStats(),\n    });\n  });\n\n  ['a', 'b', 'c', 'd', 'e'].forEach((name) => {\n    nodes.push({\n      'namespace': 'another',\n      'app':       name,\n      'version':   'v1',\n      'stats':     randomStats(),\n    });\n  });\n\n  for ( let i = 0 ; i < 10 ; i++ ) {\n    const from = randomItem(nodes);\n    const crossNs = Math.random() < 0.2;\n    const toChoices = nodes.filter((x) => {\n      if ( x === from ) {\n        return false;\n      }\n\n      if ( crossNs ) {\n        return x.namespace !== from.namespace;\n      } else {\n        return x.namespace === from.namespace;\n      }\n    });\n    const to = randomItem(toChoices);\n\n    edges.push({\n      fromNamespace: from.namespace,\n      fromApp:       from.app,\n      fromVersion:   from.version,\n      toNamespace:   to.namespace,\n      toApp:         to.app,\n      toVersion:     to.version,\n      stats:         randomStats(),\n    });\n  }\n\n  return {\n    nodes,\n    edges\n  };\n}\n*/\n\nfunction nodeIdFor(obj) {\n  return `${ obj.namespace }:${ obj.app }@${ obj.version }`;\n}\n\nfunction fromId(obj) {\n  return `${ obj.fromNamespace }:${ obj.fromApp }@${ obj.fromVersion }`;\n}\n\nfunction toId(obj) {\n  return `${ obj.toNamespace }:${ obj.toApp }@${ obj.toVersion }`;\n}\n\nasync function loadData(store) {\n  const data = await store.dispatch('rancher/request', { url: '/v1-metrics/meshsummary' });\n\n  const known = {};\n\n  data.nodes = data.nodes.filter((x) => !!x.app && !!x.namespace);\n  data.nodes.forEach((x) => {\n    x.id = nodeIdFor(x);\n    known[x.id] = true;\n  });\n\n  data.edges = data.edges.filter((x) => known[fromId(x)] && known[toId(x)]);\n\n  return data;\n}\n\nfunction round3Digits(num) {\n  if ( !num ) {\n    return 0;\n  }\n\n  if ( num > 100 ) {\n    return Math.round(num);\n  } else if ( num > 10 ) {\n    return Math.round(num * 10) / 10;\n  } else {\n    return Math.round(num * 100) / 100;\n  }\n}\n\nexport default {\n\n  /* (\n  data() {\n    return {\n      loading: true,\n      ...randomData(),\n    };\n  },\n  */\n\n  async asyncData({ store }) {\n    const data = await loadData(store);\n\n    return data;\n  },\n  computed: {\n    namespaces() {\n      return this.$store.getters['namespaces']();\n    },\n\n    displayNodes() {\n      console.log('get displayNodes'); // eslint-disable-line no-console\n      const namespaces = this.namespaces;\n\n      const out = this.nodes.filter((x) => {\n        return namespaces[x.namespace];\n      });\n\n      return out;\n    },\n\n    displayEdges() {\n      console.log('get displayEdges'); // eslint-disable-line no-console\n      const namespaces = this.namespaces;\n\n      const out = this.edges.filter((x) => {\n        const ns1 = x.fromNamespace;\n        const ns2 = x.toNamespace;\n\n        return namespaces[ns1] && namespaces[ns2];\n      });\n\n      return out;\n    },\n  },\n\n  watch: {\n    // Nodes isn't watched, but gets updated at the same time...\n    nodes() {\n      console.log('nodes updated'); // eslint-disable-line no-console\n      this.updateGraph();\n      this.renderGraph();\n    },\n\n    namespaces() {\n      console.log('namespaces updated'); // eslint-disable-line no-console\n      this.updateGraph();\n      this.renderGraph();\n    },\n\n    edges() {\n      console.log('edges updated'); // eslint-disable-line no-console\n      this.updateGraph();\n      this.renderGraph();\n    },\n  },\n\n  async mounted() {\n    console.log('Mounted'); // eslint-disable-line no-console\n    this.timer = setInterval(() => {\n      console.log('Timer'); // eslint-disable-line no-console\n      this.refreshData();\n    }, INTERVAL);\n\n    await this.initGraph();\n    this.updateGraph();\n    this.renderGraph();\n\n    window.m = this;\n  },\n\n  beforeDestroy() {\n    clearInterval(this.timer);\n  },\n\n  methods: {\n    async refreshData() {\n      console.log('Refreshing...'); // eslint-disable-line no-console\n      const neu = await loadData(this.$store);\n\n      this.nodes = neu.nodes;\n      this.edges = neu.edges;\n      console.log('Refreshed'); // eslint-disable-line no-console\n    },\n\n    async initGraph() {\n      const d3 = await import('d3');\n      const dagreD3 = await import('dagre-d3');\n\n      const g = new dagreD3.graphlib.Graph({ compound: true });\n\n      g.setGraph({\n        marginx: 0,\n        marginy: 0,\n        rankdir: 'LR',\n        align:   'UL',\n        ranker:  'longest-path', // 'tight-tree',\n      });\n\n      g.setDefaultEdgeLabel(() => {\n        return {};\n      });\n\n      // Create the renderer\n      const render = new dagreD3.render();\n\n      // Add our custom arrow\n      render.arrows().smaller = function normal(parent, id, edge, type) {\n        const marker = parent.append('marker')\n          .attr('id', id)\n          .attr('viewBox', '0 0 12 12')\n          .attr('refX', 6)\n          .attr('refY', 6)\n          .attr('markerUnits', 'userSpaceOnUse')\n          .attr('markerWidth', 12)\n          .attr('markerHeight', 12)\n          .attr('orient', 'auto');\n        const path = marker.append('path')\n          .attr('class', 'arrowhead')\n          .attr('d', 'M 6 0 L 0 6 L 6 12 L 12 6 z')\n          .style('stroke-width', 1)\n          .style('stroke-dasharray', '1,0');\n\n        dagreD3.util.applyStyle(path, edge[`${ type }Style`]);\n      };\n\n      // Set up an SVG group so that we can translate the final graph.\n      const svg = d3.select(this.$refs.mesh);\n      const group = svg.append('g');\n\n      const zoom = d3.zoom().on('zoom', () => {\n        if ( d3.event.sourceEvent ) {\n          this.lastZoom = d3.event.transform;\n        }\n        group.attr('transform', d3.event.transform);\n      });\n\n      svg.call(zoom);\n\n      this.d3 = d3;\n      this.dagreD3 = dagreD3;\n      this.graph = g;\n      this.render = render;\n      this.group = group;\n      this.zoom = zoom;\n    },\n\n    updateGraph() {\n      // @TODO diff nodes/edges, remove unexpected and add missing ones\n      console.log('Updating...'); // eslint-disable-line no-console\n\n      const e = escapeHtml;\n      const g = this.graph;\n\n      const seenNamespaces = {};\n\n      for ( const node of this.displayNodes ) {\n        const nsId = ensureNamespace(node.namespace);\n        const id = nodeIdFor(node);\n\n        node.label = `${ node.app }@${ node.version }`;\n\n        let p99 = node.stats.p99ms;\n        let unit = 'ms';\n\n        if ( p99 > 1000 ) {\n          p99 /= 1000;\n          unit = 's';\n        }\n\n        const html = `\n          <div class=\"version\">\n            <h4>${ e(node.app) }@${ e(node.version) }</h4>\n            <div class=\"row\">\n              <div class=\"col span-4 sr\">\n                <span>${ round3Digits(node.stats.successRate * 100) }</span><span class=\"unit\">%</span>\n              </div>\n              <div class=\"col span-4 rps\">\n                <span>${ round3Digits(node.stats.rps) }</span>\n              </div>\n              <div class=\"col span-4 p99\">\n                <span>${ round3Digits(p99) }</span><span class=\"unit\">${ unit }</span>\n              </div>\n            </div>\n          </div>\n        `;\n\n        g.setNode(id, {\n          labelType: 'html',\n          label:     html,\n          width:     158,\n          height:    80,\n          rx:        RADIUS,\n          ry:        RADIUS,\n        });\n        g.setParent(id, nsId);\n      }\n\n      const rpses = this.displayEdges.map((x) => x.stats.rps);\n      const min = Math.min(...rpses);\n      const max = Math.max(...rpses);\n\n      for ( const edge of this.displayEdges ) {\n        ensureNamespace(edge.fromNamespace);\n        ensureNamespace(edge.toNamespace);\n        const weight = Math.floor(4 * (edge.stats.rps - min) / (max - min)) + 1;\n\n        g.setEdge(fromId(edge), toId(edge), {\n          arrowhead:      'smaller',\n          arrowheadClass: 'arrowhead',\n          class:          `weight${ weight }`,\n          curve:          this.d3.curveBasis,\n          weight,\n        });\n      }\n\n      function ensureNamespace(name) {\n        const id = `ns:${ name }`;\n\n        if ( !seenNamespaces[name] ) {\n          seenNamespaces[name] = true;\n          g.setNode(id, {\n            label:           `Namespace: ${ name }`,\n            clusterLabelPos: 'top',\n            rx:              RADIUS,\n            ry:              RADIUS\n          });\n        }\n\n        return id;\n      }\n    },\n\n    renderGraph() {\n      console.log('Rendering...'); // eslint-disable-line no-console\n\n      const d3 = this.d3;\n      const svg = this.d3.select(this.$refs.mesh);\n      const group = this.group;\n      const g = this.graph;\n      const render = this.render;\n      const zoom = this.zoom;\n\n      svg.call(zoom.transform, d3.zoomIdentity.translate(0, 0).scale(1));\n\n      // Run the renderer. This is what draws the final graph.\n      render(group, g);\n\n      const graphWidth = g.graph().width;\n      const graphHeight = g.graph().height;\n      const width = parseInt(svg.style('width').replace(/px/, ''));\n      const height = parseInt(svg.style('height').replace(/px/, ''));\n      const scale = Math.min(width / graphWidth, height / graphHeight);\n      const dX = (width / 2) - ((graphWidth * scale) / 2);\n      const dY = (height / 2) - ((graphHeight * scale) / 2);\n\n      console.log('render'); // eslint-disable-line no-console\n      if ( this.lastZoom ) {\n        svg.call(zoom.transform, d3.zoomIdentity.translate(this.lastZoom.x, this.lastZoom.y).scale(this.lastZoom.k));\n      } else {\n        svg.call(zoom.transform, d3.zoomIdentity.translate(dX, dY).scale(scale));\n      }\n\n      this.loading = false;\n    },\n\n    clicked(event) {\n      const path = event.target.closest('.edgePath');\n\n      console.log(path); // eslint-disable-line no-console\n    }\n  },\n};\n</script>\n<template>\n  <div class=\"mesh\">\n    <header>\n      <h1>App Mesh</h1>\n    </header>\n\n    <svg\n      id=\"mesh\"\n      ref=\"mesh\"\n      @click=\"clicked\"\n    />\n  </div>\n</template>\n\n<style lang=\"scss\">\n  #mesh {\n    width: 100%;\n    height: calc(100vh - 165px);\n\n    .version {\n      width: 158px;\n      height: 80px;\n      color: #b6b6c2;\n      text-align: center;\n\n      .row {\n        margin: 0;\n      }\n\n      H4 {\n        color: #b6b6c2;\n        display: block;\n        border-bottom: 1px solid #555;\n        text-align: left;\n        padding-bottom: 5px;\n        margin-bottom: 5px;\n      }\n\n      .sr, .rps, .p99 {\n        font-size: 20px;\n\n        .unit {\n          font-size: 12px;\n        }\n      }\n\n      .sr:before, .rps:before, .p99:before {\n        color: white;\n        font-weight: bold;\n        font-size: 15px;\n        display: block;\n      }\n\n      .sr:before {\n        content: 'SR';\n      }\n\n      .rps:before {\n        content: 'RPS';\n      }\n\n      .p99:before {\n        content: '99%';\n      }\n\n    }\n\n    .clusters .label text {\n      fill: #b6b6c2;\n      font-weight: bold;\n    }\n\n    .clusters RECT {\n      fill: #222;\n      stroke: #555;\n    }\n\n    .arrowhead {\n      fill: #6c6c76;\n    }\n\n    .node RECT {\n      fill: #111;\n      stroke: #555;\n    }\n\n    PATH {\n      stroke: #6c6c76;\n    }\n\n    .edgePath {\n      cursor: pointer;\n    }\n\n    .weight1 { stroke-width: 2px; }\n    .weight2 { stroke-width: 3px; }\n    .weight3 { stroke-width: 4px; }\n    .weight4 { stroke-width: 5px; }\n    .weight5 { stroke-width: 6px; }\n  }\n</style>\n"],"mappings":"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"}]}