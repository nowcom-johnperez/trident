{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/plugins/steve/worker/web-worker.basic.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/plugins/steve/worker/web-worker.basic.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIjsKaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eSI7CmZ1bmN0aW9uIG93bktleXMoZSwgcikgeyB2YXIgdCA9IE9iamVjdC5rZXlzKGUpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgbyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7IHIgJiYgKG8gPSBvLmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCByKS5lbnVtZXJhYmxlOyB9KSksIHQucHVzaC5hcHBseSh0LCBvKTsgfSByZXR1cm4gdDsgfQpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKGUpIHsgZm9yICh2YXIgciA9IDE7IHIgPCBhcmd1bWVudHMubGVuZ3RoOyByKyspIHsgdmFyIHQgPSBudWxsICE9IGFyZ3VtZW50c1tyXSA/IGFyZ3VtZW50c1tyXSA6IHt9OyByICUgMiA/IG93bktleXMoT2JqZWN0KHQpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAocikgeyBfZGVmaW5lUHJvcGVydHkoZSwgciwgdFtyXSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh0KSkgOiBvd25LZXlzKE9iamVjdCh0KSkuZm9yRWFjaChmdW5jdGlvbiAocikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgciwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LCByKSk7IH0pOyB9IHJldHVybiBlOyB9CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiOwppbXBvcnQgeyBTQ0hFTUEgfSBmcm9tICdAc2hlbGwvY29uZmlnL3R5cGVzJzsKaW1wb3J0IHsgaGFzaE9iaiB9IGZyb20gJ0BzaGVsbC91dGlscy9jcnlwdG8vYnJvd3Nlckhhc2hVdGlscyc7CmltcG9ydCB7IHJlbW92ZVNjaGVtYUluZGV4RmllbGRzIH0gZnJvbSAnQHNoZWxsL3BsdWdpbnMvc3RldmUvc2NoZW1hLnV0aWxzJzsKdmFyIFNDSEVNQV9GTFVTSF9USU1FT1VUID0gMjUwMDsKdmFyIHN0YXRlID0gewogIHN0b3JlOiAnJywKICAvLyBTdG9yZSBuYW1lCiAgZmx1c2hUaW1lcjogdW5kZWZpbmVkLAogIC8vIFRpbWVyIHRvIGZsdXNoIHRoZSBzY2hlbWEgY2hhbmdlIHF1ZXVlCiAgcXVldWU6IFtdLAogIC8vIFNjaGVtYSBjaGFuZ2UgcXVldWUKICBzY2hlbWFzOiB7fSAvLyBNYXAgb2Ygc2NoZW1hIGlkIHRvIGhhc2ggdG8gdHJhY2sgd2hlbiBhIHNjaGVtYSBhY3R1YWxseSBjaGFuZ2VzCn07CmZ1bmN0aW9uIGZsdXNoKCkgewogIHN0YXRlLnF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKHNjaGVtYSkgewogICAgdmFyIGhhc2ggPSBoYXNoT2JqKHNjaGVtYSk7CiAgICB2YXIgZXhpc3RpbmcgPSBzdGF0ZS5zY2hlbWFzW3NjaGVtYS5pZF07CiAgICBpZiAoIWV4aXN0aW5nIHx8IGV4aXN0aW5nICYmIGV4aXN0aW5nICE9PSBoYXNoKSB7CiAgICAgIC8vIGNvbnNvbGUubG9nKGAkeyBzY2hlbWEuaWQgfSBDSEFOR0VEICAkeyBoYXNoIH0gPiAkeyBleGlzdGluZyB9YCk7CiAgICAgIHN0YXRlLnNjaGVtYXNbc2NoZW1hLmlkXSA9IGhhc2g7CiAgICAgIHZhciBtc2cgPSB7CiAgICAgICAgZGF0YTogc2NoZW1hLAogICAgICAgIHJlc291cmNlVHlwZTogU0NIRU1BLAogICAgICAgIHR5cGU6ICdyZXNvdXJjZS5jaGFuZ2UnCiAgICAgIH07CiAgICAgIGxvYWQobXNnKTsKICAgIH0KICB9KTsKICBzdGF0ZS5xdWV1ZSA9IFtdOwogIHN0YXRlLmZsdXNoVGltZXIgPSBzZXRUaW1lb3V0KGZsdXNoLCBTQ0hFTUFfRkxVU0hfVElNRU9VVCk7Cn0Kc3RhdGUuZmx1c2hUaW1lciA9IHNldFRpbWVvdXQoZmx1c2gsIFNDSEVNQV9GTFVTSF9USU1FT1VUKTsKCi8vIENhbGxiYWNrIHRvIHRoZSBzdG9yZSdzIGxvYWQgZnVuY3Rpb24gKGluIHRoZSBtYWluIHRocmVhZCkgdG8gcHJvY2VzcyBhIGxvYWQKZnVuY3Rpb24gbG9hZChkYXRhKSB7CiAgc2VsZi5wb3N0TWVzc2FnZSh7CiAgICBsb2FkOiBkYXRhCiAgfSk7Cn0KCi8vIHVzZWQgZm9yIGRpc3BhdGNoaW5nIGEgZnVuY3Rpb24gaW4gdGhlIHdvcmtlciwgcHJpbWFyaWx5IGZvciByZWRpcmVjdGluZyBtZXNzYWdlcyBpbnRlbmRlZCBmb3IgdGhlIGFkdmFuY2VkIHdvcmtlciBiYWNrIHRvIHRoZSBVSSB0aHJlYWQKZnVuY3Rpb24gcmVkaXNwYXRjaChtc2cpIHsKICBzZWxmLnBvc3RNZXNzYWdlKHsKICAgIHJlZGlzcGF0Y2g6IG1zZwogIH0pOwp9CgovKioKICogVGhlc2UgYWN0aW9ucyBhcmVuJ3QgYXBwbGljYWJsZSB0byB0aGUgYmFzaWMgd29ya2VyLCBzbyBib3VuY2UgYmFjayB0byB1aSB0aHJlYWQKICoKICogVGhlc2UgYXJlIGNhbGxlZCB3aGVuIGEgcXVldWUgb2YgYWN0aW9ucyBpcyBmbHVzaGVkLiBRdWV1ZSBpcyBwb3B1bGF0ZWQgZnJvbSByZXF1ZXN0cyBtYWRlIGJlZm9yZSB3ZSBrbm93IGlmIHdvcmtlciBpcyBiYXNpYyBvciBhZHZhbmNlZC4KICovCnZhciBhZHZhbmNlZFdvcmtlckFjdGlvbnMgPSB7CiAgd2F0Y2g6IGZ1bmN0aW9uIHdhdGNoKG1zZykgewogICAgcmVkaXNwYXRjaCh7CiAgICAgIHNlbmQ6IG1zZwogICAgfSk7CiAgfSwKICBjcmVhdGVXYXRjaGVyOiBmdW5jdGlvbiBjcmVhdGVXYXRjaGVyKG1zZykgewogICAgcmVkaXNwYXRjaCh7CiAgICAgIHN1YnNjcmliZTogbXNnCiAgICB9KTsKICB9Cn07CnZhciB3b3JrZXJBY3Rpb25zID0gX29iamVjdFNwcmVhZCh7CiAgb25tZXNzYWdlOiBmdW5jdGlvbiBvbm1lc3NhZ2UoZSkgewogICAgLyogb24gdGhlIG9mZiBjaGFuY2UgdGhlcmUncyBtb3JlIHRoYW4ga2V5IGluIHRoZSBtZXNzYWdlLCB3ZSBoYW5kbGUgdGhlbSBpbiB0aGUgb3JkZXIgdGhhdCB0aGV5ICJrZXlzIiBtZXRob2QgcHJvdmlkZXMgd2hpY2ggaXMKICAgIC8vIGdvb2QgZW5vdWdoIGZvciBub3cgY29uc2lkZXJpbmcgdGhhdCB3ZSBuZXZlciBzZW5kIG1vcmUgdGhhbiBvbmUgbWVzc2FnZSBhY3Rpb24gYXQgYSB0aW1lIHJpZ2h0IG5vdyAqLwogICAgdmFyIG1lc3NhZ2VBY3Rpb25zID0gT2JqZWN0LmtleXMoZSA9PT0gbnVsbCB8fCBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlLmRhdGEpOwogICAgbWVzc2FnZUFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoYWN0aW9uKSB7CiAgICAgIGlmICh3b3JrZXJBY3Rpb25zW2FjdGlvbl0pIHsKICAgICAgICB3b3JrZXJBY3Rpb25zW2FjdGlvbl0oZSA9PT0gbnVsbCB8fCBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlLmRhdGFbYWN0aW9uXSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc29sZS53YXJuKCdubyBhc3NvY2lhdGVkIGFjdGlvbiBmb3I6JywgYWN0aW9uKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlCiAgICAgIH0KICAgIH0pOwogIH0sCiAgaW5pdFdvcmtlcjogZnVuY3Rpb24gaW5pdFdvcmtlcihfcmVmKSB7CiAgICB2YXIgc3RvcmVOYW1lID0gX3JlZi5zdG9yZU5hbWU7CiAgICBzdGF0ZS5zdG9yZSA9IHN0b3JlTmFtZTsKICB9LAogIGRlc3Ryb3lXb3JrZXI6IGZ1bmN0aW9uIGRlc3Ryb3lXb3JrZXIoKSB7CiAgICBjbGVhclRpbWVvdXQoc3RhdGUuZmx1c2hUaW1lcik7CiAgICBzZWxmLnBvc3RNZXNzYWdlKHsKICAgICAgZGVzdHJveVdvcmtlcjogdHJ1ZQogICAgfSk7IC8vIHdlJ3JlIG9ubHkgcGFzc2luZyB0aGUgYm9vbGVhbiBoZXJlIGJlY2F1c2UgdGhlIGtleSBuZWVkcyB0byBiZSBzb21ldGhpbmcgdHJ1dGh5IHRvIGVuc3VyZSBpdCdzIHBhc3NlZCBvbiB0aGUgb2JqZWN0LgogIH0sCiAgLy8gQ2FsbGVkIHRvIGxvYWQgc2NoZW1hCiAgbG9hZFNjaGVtYXM6IGZ1bmN0aW9uIGxvYWRTY2hlbWFzKHNjaGVtYXMpIHsKICAgIHNjaGVtYXMuZm9yRWFjaChmdW5jdGlvbiAoc2NoZW1hKSB7CiAgICAgIC8vIFRoZXNlIHByb3BlcnRpZXMgYXJlIGFkZGVkIHRvIHRoZSBvYmplY3QsIGJ1dCBhcmVuJ3Qgb24gdGhlIHJhdyBvYmplY3QsIHNvIHJlbW92ZSB0aGVtCiAgICAgIC8vIG90aGVyd2lzZSBvdXIgY29tcGFyaXNvbiB3aWxsIHNob3cgY2hhbmdlcyB3aGVuIHRoZXJlIGFyZW4ndCBhbnkKICAgICAgcmVtb3ZlU2NoZW1hSW5kZXhGaWVsZHMoc2NoZW1hKTsKICAgICAgc3RhdGUuc2NoZW1hc1tzY2hlbWEuaWRdID0gaGFzaE9iaihzY2hlbWEpOwogICAgfSk7CiAgfSwKICAvLyBDYWxsZWQgd2hlbiBzY2hlbWEgaXMgdXBkYXRlZAogIHVwZGF0ZVNjaGVtYTogZnVuY3Rpb24gdXBkYXRlU2NoZW1hKHNjaGVtYSkgewogICAgLy8gQWRkIHRoZSBzY2hlbWEgdG8gdGhlIHF1ZXVlIHRvIGJlIGNoZWNrZWQgdG8gc2VlIGlmIHRoZSBzY2hlbWEgcmVhbGx5IGNoYW5nZWQKICAgIHN0YXRlLnF1ZXVlLnB1c2goc2NoZW1hKTsKICB9LAogIC8vIFJlbW92ZSB0aGUgY2FjaGVkIHNjaGVtYQogIHJlbW92ZVNjaGVtYTogZnVuY3Rpb24gcmVtb3ZlU2NoZW1hKGlkKSB7CiAgICAvLyBSZW1vdmUgYW55dGhpbmcgaW4gdGhlIHF1ZXVlIHJlbGF0ZWQgdG8gdGhlIHNjaGVtYSAtIHdlIGRvbid0IHdhbnQgdG8gc2VuZCBhbnkgcGVuZGluZyB1cGRhdGVzIGxhdGVyIGZvciBhIHNjaGVtYSB0aGF0IGhhcyBiZWVuIHJlbW92ZWQKICAgIHN0YXRlLnF1ZXVlID0gc3RhdGUucXVldWUuZmlsdGVyKGZ1bmN0aW9uIChzY2hlbWEpIHsKICAgICAgcmV0dXJuIHNjaGVtYS5pZCAhPT0gaWQ7CiAgICB9KTsKCiAgICAvLyBEZWxldGUgdGhlIHNjaGVtYSBmcm9tIHRoZSBtYXAsIHNvIGlmIGl0IGNvbWVzIGJhY2sgd2UgZG9uJ3QgaWdub3JlIGl0IGlmIHRoZSBoYXNoIGlzIHRoZSBzYW1lCiAgICBkZWxldGUgc3RhdGUuc2NoZW1hc1tpZF07CiAgfQp9LCBhZHZhbmNlZFdvcmtlckFjdGlvbnMpOwpzZWxmLm9ubWVzc2FnZSA9IHdvcmtlckFjdGlvbnMub25tZXNzYWdlOyAvLyBiaW5kIGV2ZXJ5dGhpbmcgdG8gdGhlIHdvcmtlcidzIG9ubWVzc2FnZSBoYW5kbGVyIHZpYSB0aGUgd29ya2VyQWN0aW9u"},{"version":3,"names":["SCHEMA","hashObj","removeSchemaIndexFields","SCHEMA_FLUSH_TIMEOUT","state","store","flushTimer","undefined","queue","schemas","flush","forEach","schema","hash","existing","id","msg","data","resourceType","type","load","setTimeout","self","postMessage","redispatch","advancedWorkerActions","watch","send","createWatcher","subscribe","workerActions","_objectSpread","onmessage","e","messageActions","Object","keys","action","console","warn","initWorker","_ref","storeName","destroyWorker","clearTimeout","loadSchemas","updateSchema","push","removeSchema","filter"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/plugins/steve/worker/web-worker.basic.js"],"sourcesContent":["import { SCHEMA } from '@shell/config/types';\nimport { hashObj } from '@shell/utils/crypto/browserHashUtils';\nimport { removeSchemaIndexFields } from '@shell/plugins/steve/schema.utils';\n\nconst SCHEMA_FLUSH_TIMEOUT = 2500;\n\nconst state = {\n  store:      '', // Store name\n  flushTimer: undefined, // Timer to flush the schema change queue\n  queue:      [], // Schema change queue\n  schemas:    {} // Map of schema id to hash to track when a schema actually changes\n};\n\nfunction flush() {\n  state.queue.forEach((schema) => {\n    const hash = hashObj(schema);\n    const existing = state.schemas[schema.id];\n\n    if (!existing || (existing && existing !== hash)) {\n      // console.log(`${ schema.id } CHANGED  ${ hash } > ${ existing }`);\n      state.schemas[schema.id] = hash;\n\n      const msg = {\n        data:         schema,\n        resourceType: SCHEMA,\n        type:         'resource.change'\n      };\n\n      load(msg);\n    }\n  });\n\n  state.queue = [];\n\n  state.flushTimer = setTimeout(flush, SCHEMA_FLUSH_TIMEOUT);\n}\n\nstate.flushTimer = setTimeout(flush, SCHEMA_FLUSH_TIMEOUT);\n\n// Callback to the store's load function (in the main thread) to process a load\nfunction load(data) {\n  self.postMessage({ load: data });\n}\n\n// used for dispatching a function in the worker, primarily for redirecting messages intended for the advanced worker back to the UI thread\nfunction redispatch(msg) {\n  self.postMessage({ redispatch: msg });\n}\n\n/**\n * These actions aren't applicable to the basic worker, so bounce back to ui thread\n *\n * These are called when a queue of actions is flushed. Queue is populated from requests made before we know if worker is basic or advanced.\n */\nconst advancedWorkerActions = {\n  watch: (msg) => {\n    redispatch({ send: msg });\n  },\n  createWatcher: (msg) => {\n    redispatch({ subscribe: msg });\n  }\n};\n\nconst workerActions = {\n  onmessage: (e) => {\n    /* on the off chance there's more than key in the message, we handle them in the order that they \"keys\" method provides which is\n    // good enough for now considering that we never send more than one message action at a time right now */\n    const messageActions = Object.keys(e?.data);\n\n    messageActions.forEach((action) => {\n      if (workerActions[action]) {\n        workerActions[action](e?.data[action]);\n      } else {\n        console.warn('no associated action for:', action); // eslint-disable-line no-console\n      }\n    });\n  },\n  initWorker: ({ storeName }) => {\n    state.store = storeName;\n  },\n\n  destroyWorker: () => {\n    clearTimeout(state.flushTimer);\n\n    self.postMessage({ destroyWorker: true }); // we're only passing the boolean here because the key needs to be something truthy to ensure it's passed on the object.\n  },\n\n  // Called to load schema\n  loadSchemas: (schemas) => {\n    schemas.forEach((schema) => {\n      // These properties are added to the object, but aren't on the raw object, so remove them\n      // otherwise our comparison will show changes when there aren't any\n      removeSchemaIndexFields(schema);\n\n      state.schemas[schema.id] = hashObj(schema);\n    });\n  },\n\n  // Called when schema is updated\n  updateSchema: (schema) => {\n    // Add the schema to the queue to be checked to see if the schema really changed\n    state.queue.push(schema);\n  },\n\n  // Remove the cached schema\n  removeSchema: (id) => {\n    // Remove anything in the queue related to the schema - we don't want to send any pending updates later for a schema that has been removed\n    state.queue = state.queue.filter((schema) => schema.id !== id);\n\n    // Delete the schema from the map, so if it comes back we don't ignore it if the hash is the same\n    delete state.schemas[id];\n  },\n  ...advancedWorkerActions\n};\n\nself.onmessage = workerActions.onmessage; // bind everything to the worker's onmessage handler via the workerAction\n"],"mappings":"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"}]}