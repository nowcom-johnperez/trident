{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/units.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/units.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["UNITS","FRACTIONAL","formatSi","inValue","_ref","arguments","length","undefined","_ref$increment","increment","_ref$addSuffix","addSuffix","_ref$addSuffixSpace","addSuffixSpace","_ref$suffix","suffix","_ref$firstSuffix","firstSuffix","_ref$startingExponent","startingExponent","_ref$minExponent","minExponent","_ref$maxExponent","maxExponent","_ref$maxPrecision","maxPrecision","_ref$canRoundToZero","canRoundToZero","val","exp","divide","out","concat","Math","round","pow","exponent","exponentNeeded","parseSi","opt","allowFractional","NaN","replace","_inValue$match","match","_inValue$match2","_slicedToArray","valStr","unit","incStr","parseFloat","charCodeAt","includes","multiply","toUpperCase","indexOf","MEMORY_PARSE_RULES","memory","format","createMemoryFormat","n","_objectSpread","createMemoryUnits","createMemoryValues","total","useful","parsedTotal","toString","parsedUseful","formattedTotal","formattedUseful","Number","units"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/units.js"],"sourcesContent":["export const UNITS = ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];\nexport const FRACTIONAL = ['', 'm', 'u', 'n', 'p', 'f', 'a', 'z', 'y']; // milli micro nano pico femto\n\nexport function formatSi(inValue, {\n  increment = 1000,\n  addSuffix = true,\n  addSuffixSpace = true,\n  suffix = '',\n  firstSuffix = null,\n  startingExponent = 0,\n  minExponent = 0,\n  maxExponent = 99,\n  maxPrecision = 2,\n  canRoundToZero = true,\n} = {}) {\n  let val = inValue;\n  let exp = startingExponent;\n  const divide = maxExponent >= 0;\n\n  // TODO More to think about re: min > max\n  if (divide) {\n    while ( ( val >= increment && exp + 1 < UNITS.length && exp < maxExponent ) || exp < minExponent ) {\n      val = val / increment;\n      exp++;\n    }\n  } else {\n    while ( ( val < increment && exp + 1 < FRACTIONAL.length && exp < (maxExponent * -1) ) || exp < (minExponent * -1) ) {\n      val = val * increment;\n      exp++;\n    }\n  }\n\n  let out = '';\n\n  if ( val < 10 && maxPrecision >= 1 ) {\n    out = `${ Math.round(val * (10 ** maxPrecision) ) / (10 ** maxPrecision) }`;\n  } else {\n    out = `${ Math.round(val) }`;\n  }\n\n  if (out === '0' && !canRoundToZero && inValue !== 0) {\n    const exponent = exponentNeeded(inValue, increment);\n\n    return formatSi(inValue, {\n      increment,\n      addSuffix,\n      suffix,\n      firstSuffix,\n      startingExponent,\n      minExponent:    exponent,\n      maxExponent:    exponent,\n      maxPrecision,\n      canRoundToZero: true,\n    });\n  }\n\n  if ( addSuffix ) {\n    if (addSuffixSpace) {\n      out += ` `;\n    }\n\n    if ( exp === 0 && firstSuffix !== null) {\n      out += `${ firstSuffix }`;\n    } else {\n      out += `${ divide ? UNITS[exp] : FRACTIONAL[exp] }${ suffix }` || '';\n    }\n  }\n\n  return out;\n}\n\nexport function exponentNeeded(val, increment = 1000) {\n  let exp = 0;\n\n  while ( val >= increment ) {\n    val = val / increment;\n    exp++;\n  }\n\n  return exp;\n}\n\nexport function parseSi(inValue, opt) {\n  opt = opt || {};\n  let increment = opt.increment;\n  const allowFractional = opt.allowFractional !== false;\n\n  if ( !inValue || typeof inValue !== 'string' || !inValue.length ) {\n    return NaN;\n  }\n\n  inValue = inValue.replace(/,/g, '');\n\n  // eslint-disable-next-line prefer-const\n  let [, valStr, unit, incStr] = inValue.match(/^([0-9.-]+)\\s*([^0-9.-]?)([^0-9.-]?)/);\n  const val = parseFloat(valStr);\n\n  if ( !unit ) {\n    return val;\n  }\n\n  // micro \"mu\" symbol -> u\n  if ( unit.charCodeAt(0) === 181 ) {\n    unit = 'u';\n  }\n\n  const divide = FRACTIONAL.includes(unit);\n  const multiply = UNITS.includes(unit.toUpperCase());\n\n  if ( !increment ) {\n    // Automatically handle 1 KB = 1000B, 1 KiB = 1024B if no increment set\n    if ( (multiply || divide) && incStr === 'i' ) {\n      increment = 1024;\n    } else {\n      increment = 1000;\n    }\n  }\n\n  if ( divide && allowFractional ) {\n    const exp = FRACTIONAL.indexOf(unit);\n\n    return val / (increment ** exp);\n  }\n\n  if ( multiply ) {\n    const exp = UNITS.indexOf(unit.toUpperCase());\n\n    return val * (increment ** exp);\n  }\n\n  // Unrecognized unit character\n  return val;\n}\n\nexport const MEMORY_PARSE_RULES = {\n  memory: {\n    format: {\n      addSuffix:        true,\n      firstSuffix:      'B',\n      increment:        1024,\n      maxExponent:      99,\n      maxPrecision:     2,\n      minExponent:      0,\n      startingExponent: 0,\n      suffix:           'iB',\n    }\n  }\n};\n\nexport function createMemoryFormat(n) {\n  const exponent = exponentNeeded(n, MEMORY_PARSE_RULES.memory.format.increment);\n\n  return {\n    ...MEMORY_PARSE_RULES.memory.format,\n    maxExponent: exponent,\n    minExponent: exponent,\n  };\n}\n\nfunction createMemoryUnits(n) {\n  const exponent = exponentNeeded(n, MEMORY_PARSE_RULES.memory.format.increment);\n\n  return `${ UNITS[exponent] }${ MEMORY_PARSE_RULES.memory.format.suffix }`;\n}\n\nexport function createMemoryValues(total, useful) {\n  const parsedTotal = parseSi((total || '0').toString());\n  const parsedUseful = parseSi((useful || '0').toString());\n  const format = createMemoryFormat(parsedTotal);\n  const formattedTotal = formatSi(parsedTotal, format);\n  const formattedUseful = formatSi(parsedUseful, format);\n\n  return {\n    total:  Number.parseFloat(formattedTotal),\n    useful: Number.parseFloat(formattedUseful),\n    units:  createMemoryUnits(parsedTotal)\n  };\n}\n\nexport default {\n  exponentNeeded,\n  formatSi,\n  parseSi,\n};\n"],"mappings":"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"}]}