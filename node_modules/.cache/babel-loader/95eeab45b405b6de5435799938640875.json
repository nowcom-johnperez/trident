{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/SortableTable/filtering.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/SortableTable/filtering.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["get","addObject","addObjects","isArray","removeAt","ADV_FILTER_ALL_COLS_VALUE","ADV_FILTER_ALL_COLS_LABEL","LABEL_IDENTIFIER","data","searchQuery","previousFilter","previousResult","computed","searchFields","out","columnsToSearchField","columns","extraSearchFields","filteredRows","hasAdvancedFiltering","handleFiltering","handleAdvancedFiltering","methods","_this","subMatches","length","arrangedRows","slice","res","filter","row","every","f","prop","allCols","advFilterSelectOptions","forEach","col","value","includes","concat","JSON","parse","isLabel","label","push","handleStringSearch","searchText","trim","toLowerCase","startsWith","searchTokens","split","subSearch","subFields","i","hits","mainFound","subRows","k","subFound","keyField","watch","q","column","field","search","name","x","ipLike","j","expect","token","substr","matches","fields","item","_iterator","_createForOfIteratorHelper","_step","s","n","done","metadata","labels","replace","modifier","val","idx","indexOf","undefined","tokenMayBeIp","test","re","RegExp","err","e"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/SortableTable/filtering.js"],"sourcesContent":["import { get } from '@shell/utils/object';\nimport { addObject, addObjects, isArray, removeAt } from '@shell/utils/array';\n\nexport const ADV_FILTER_ALL_COLS_VALUE = 'allcols';\nexport const ADV_FILTER_ALL_COLS_LABEL = 'All Columns';\nconst LABEL_IDENTIFIER = ':::islabel';\n\nexport default {\n  data() {\n    return {\n      searchQuery:    null,\n      previousFilter: null,\n      previousResult: null,\n    };\n  },\n\n  computed: {\n    searchFields() {\n      const out = columnsToSearchField(this.columns);\n\n      if ( this.extraSearchFields ) {\n        addObjects(out, this.extraSearchFields);\n      }\n\n      return out;\n    },\n\n    /*\n    subFields: computed('subHeaders.@each.{searchField,name}', 'extraSearchSubFields.[]', function() {\n      let out = headersToSearchField(get(this, 'subHeaders'));\n\n      return out.addObjects(get(this, 'extraSearchSubFields') || []);\n    }),\n    */\n    filteredRows() {\n      // PROP hasAdvancedFiltering comes from Advanced Filtering mixin (careful changing data var there...)\n      if (!this.hasAdvancedFiltering) {\n        return this.handleFiltering();\n      } else {\n        return this.handleAdvancedFiltering();\n      }\n    },\n  },\n\n  methods: {\n    handleAdvancedFiltering() {\n      this.subMatches = null;\n\n      if (this.searchQuery.length) {\n        const out = (this.arrangedRows || []).slice();\n\n        const res = out.filter((row) => {\n          return this.searchQuery.every((f) => {\n            if (f.prop === ADV_FILTER_ALL_COLS_VALUE) {\n              // advFilterSelectOptions comes from Advanced Filtering mixin\n              // remove the All Columns option from the list so that we don't iterate over it\n              const allCols = this.advFilterSelectOptions.slice(1);\n              let searchFields = [];\n\n              allCols.forEach((col) => {\n                if (col.value.includes('[') && col.value.includes(']')) {\n                  searchFields = searchFields.concat(JSON.parse(col.value));\n                } else {\n                  // this means we are on the presence of a label, which should be dealt\n                // carefully because of object path such row.metadata.labels.\"app.kubernetes.io/managed-by\n                  const value = col.isLabel ? `${ col.label }${ LABEL_IDENTIFIER }` : col.value;\n\n                  searchFields.push(value);\n                }\n              });\n\n              return handleStringSearch(searchFields, [f.value], row);\n            } else {\n              if (f.prop.includes('[') && f.prop.includes(']')) {\n                return handleStringSearch(JSON.parse(f.prop), [f.value], row);\n              }\n\n              let prop = f.prop;\n\n              // this means we are on the presence of a label, which should be dealt\n              // carefully because of object path such row.metadata.labels.\"app.kubernetes.io/managed-by\"\n              if (f.prop.includes('metadata.labels')) {\n                prop = `${ f.label }${ LABEL_IDENTIFIER }`;\n              }\n\n              return handleStringSearch([prop], [f.value], row);\n            }\n          });\n        });\n\n        return res;\n      }\n\n      // return arrangedRows array if we don't have anything to search for...\n      return this.arrangedRows;\n    },\n\n    handleFiltering() {\n      const searchText = (this.searchQuery || '').trim().toLowerCase();\n      let out;\n\n      if ( searchText && this.previousResult && searchText.startsWith(this.previousFilter) ) {\n        // If the new search is an addition to the last one, we can start with the same set of results as last time\n        // and filter those down, since adding more searchText can only reduce the number of results.\n        out = this.previousResult.slice();\n      } else {\n        this.previousResult = null;\n        out = (this.arrangedRows || []).slice();\n      }\n\n      this.previousFilter = searchText;\n\n      if ( !searchText.length ) {\n        this.subMatches = null;\n        this.previousResult = null;\n\n        return out;\n      }\n\n      const searchFields = this.searchFields;\n      const searchTokens = searchText.split(/\\s*[, ]\\s*/);\n      const subSearch = this.subSearch;\n      const subFields = this.subFields;\n      const subMatches = {};\n\n      for ( let i = out.length - 1 ; i >= 0 ; i-- ) {\n        const row = out[i];\n        let hits = 0;\n        let mainFound = true;\n\n        mainFound = handleStringSearch(searchFields, searchTokens, row);\n\n        if ( subFields && subSearch) {\n          const subRows = row[subSearch] || [];\n\n          for ( let k = subRows.length - 1 ; k >= 0 ; k-- ) {\n            let subFound = true;\n\n            subFound = handleStringSearch(subFields, searchTokens, row);\n\n            if ( subFound ) {\n              hits++;\n            }\n          }\n\n          subMatches[get(row, this.keyField)] = hits;\n        }\n\n        if ( !mainFound && hits === 0 ) {\n          removeAt(out, i);\n        }\n      }\n\n      this.subMatches = subMatches;\n      this.previousResult = out;\n\n      return out;\n    }\n  },\n\n  watch: {\n    arrangedRows(q) {\n      // The rows changed so the old filter result is no longer useful\n      this.previousResult = null;\n    }\n  },\n};\n\nfunction columnsToSearchField(columns) {\n  const out = [];\n\n  (columns || []).forEach((column) => {\n    const field = column.search;\n\n    if ( field ) {\n      if ( typeof field === 'string' ) {\n        addObject(out, field);\n      } else if ( isArray(field) ) {\n        addObjects(out, field);\n      }\n    } else if ( field === false ) {\n      // Don't add the name\n    } else {\n      // Use value/name as the default\n      addObject(out, column.value || column.name);\n    }\n  });\n\n  return out.filter((x) => !!x);\n}\n\nconst ipLike = /^[0-9a-f\\.:]+$/i;\n\nfunction handleStringSearch(searchFields, searchTokens, row) {\n  for ( let j = 0 ; j < searchTokens.length ; j++ ) {\n    let expect = true;\n    let token = searchTokens[j];\n\n    if ( token.substr(0, 1) === '!' ) {\n      expect = false;\n      token = token.substr(1);\n    }\n\n    if ( token && matches(searchFields, token, row) !== expect ) {\n      return false;\n    }\n\n    return true;\n  }\n}\n\nfunction matches(fields, token, item) {\n  for ( let field of fields ) {\n    if ( !field ) {\n      continue;\n    }\n\n    // some items might not even have metadata.labels or metadata.labels.something... ignore those items. Nothing to filter by\n    if (typeof field !== 'function' &&\n    field.includes(LABEL_IDENTIFIER) &&\n    (!item.metadata.labels || !item.metadata.labels[field.replace(LABEL_IDENTIFIER, '')])) {\n      continue;\n    }\n\n    let modifier;\n    let val;\n\n    if (typeof field === 'function') {\n      val = field(item);\n    } else if (field.includes(LABEL_IDENTIFIER)) {\n      val = item.metadata.labels[field.replace(LABEL_IDENTIFIER, '')];\n    } else {\n      const idx = field.indexOf(':');\n\n      if ( idx > 0 ) {\n        modifier = field.substr(idx + 1);\n        field = field.substr(0, idx);\n      }\n\n      if ( field.includes('.') ) {\n        val = get(item, field);\n      } else {\n        val = item[field];\n      }\n    }\n\n    if ( val === undefined ) {\n      continue;\n    }\n\n    val = (`${ val }`).toLowerCase();\n    if ( !val ) {\n      continue;\n    }\n\n    if ( !modifier ) {\n      if ( val.includes((`${ token }`).toLowerCase()) ) {\n        return true;\n      }\n    } else if ( modifier === 'exact' ) {\n      if ( val === token ) {\n        return true;\n      }\n    } else if ( modifier === 'ip' ) {\n      const tokenMayBeIp = ipLike.test(token);\n\n      if ( tokenMayBeIp ) {\n        const re = new RegExp(`(?:^|\\\\.)${ token }(?:\\\\.|$)`);\n\n        if ( re.test(val) ) {\n          return true;\n        }\n      }\n    } else if ( modifier === 'prefix' ) {\n      if ( val.indexOf(token) === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n"],"mappings":"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"}]}