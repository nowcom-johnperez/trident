{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/create-yaml.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/create-yaml.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90eXBlb2YgZnJvbSAiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mIjsKaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheSI7CmZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG8sIGFsbG93QXJyYXlMaWtlKSB7IHZhciBpdCA9IHR5cGVvZiBTeW1ib2wgIT09ICJ1bmRlZmluZWQiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvWyJAQGl0ZXJhdG9yIl07IGlmICghaXQpIHsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gIm51bWJlciIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UpIHsgdGhyb3cgX2U7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuIik7IH0gdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBkaWRFcnIgPSBmYWxzZSwgZXJyOyByZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkgeyBpdCA9IGl0LmNhbGwobyk7IH0sIG46IGZ1bmN0aW9uIG4oKSB7IHZhciBzdGVwID0gaXQubmV4dCgpOyBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lOyByZXR1cm4gc3RlcDsgfSwgZTogZnVuY3Rpb24gZShfZTIpIHsgZGlkRXJyID0gdHJ1ZTsgZXJyID0gX2UyOyB9LCBmOiBmdW5jdGlvbiBmKCkgeyB0cnkgeyBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXQucmV0dXJuICE9IG51bGwpIGl0LnJldHVybigpOyB9IGZpbmFsbHkgeyBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7IH0gfSB9OyB9CmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gInN0cmluZyIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSAiT2JqZWN0IiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gIk1hcCIgfHwgbiA9PT0gIlNldCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gIkFyZ3VtZW50cyIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9CmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07IHJldHVybiBhcnIyOyB9CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5jb25zdHJ1Y3Rvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5pdGVyYXRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyI7CmltcG9ydCB7IGluZGVudCBhcyBfaW5kZW50IH0gZnJvbSAnQHNoZWxsL3V0aWxzL3N0cmluZyc7CmltcG9ydCB7IGFkZE9iamVjdCwgZmluZEJ5LCByZW1vdmVPYmplY3QsIHJlbW92ZU9iamVjdHMgfSBmcm9tICdAc2hlbGwvdXRpbHMvYXJyYXknOwppbXBvcnQganN5YW1sIGZyb20gJ2pzLXlhbWwnOwppbXBvcnQgeyBjbGVhblVwLCBpc0VtcHR5IH0gZnJvbSAnQHNoZWxsL3V0aWxzL29iamVjdCc7CmV4cG9ydCB2YXIgU0lNUExFX1RZUEVTID0gWydzdHJpbmcnLCAnbXVsdGlsaW5lJywgJ21hc2tlZCcsICdwYXNzd29yZCcsICdmbG9hdCcsICdpbnQnLCAnZGF0ZScsICdibG9iJywgJ2Jvb2xlYW4nLCAndmVyc2lvbiddOwp2YXIgQUxXQVlTX0FERCA9IFsnYXBpVmVyc2lvbicsICdraW5kJywgJ21ldGFkYXRhJywgJ21ldGFkYXRhLm5hbWUnLCAnc3BlYycsICdzcGVjLnNlbGVjdG9yJywgJ3NwZWMuc2VsZWN0b3IubWF0Y2hMYWJlbHMnLCAnc3BlYy50ZW1wbGF0ZScsICdzcGVjLnRlbXBsYXRlLm1ldGFkYXRhJywgJ3NwZWMudGVtcGxhdGUubWV0YWRhdGEubGFiZWxzJywgJ3NwZWMudGVtcGxhdGUuc3BlYy5jb250YWluZXJzLm5hbWUnLCAnc3BlYy50ZW1wbGF0ZS5zcGVjLmNvbnRhaW5lcnMuaW1hZ2UnXTsKZXhwb3J0IHZhciBORVZFUl9BREQgPSBbJ21ldGFkYXRhLmNsdXN0ZXJOYW1lJywgJ21ldGFkYXRhLmNsdXN0ZXJOYW1lJywgJ21ldGFkYXRhLmNyZWF0aW9uVGltZXN0YW1wJywgJ21ldGFkYXRhLmRlbGV0aW9uR3JhY2VQZXJpb2RTZWNvbmRzJywgJ21ldGFkYXRhLmRlbGV0aW9uVGltZXN0YW1wJywgJ21ldGFkYXRhLmZpbmFsaXplcnMnLCAnbWV0YWRhdGEuZ2VuZXJhdGVOYW1lJywgJ21ldGFkYXRhLmdlbmVyYXRpb24nLCAnbWV0YWRhdGEuaW5pdGlhbGl6ZXJzJywgJ21ldGFkYXRhLm1hbmFnZWRGaWVsZHMnLCAnbWV0YWRhdGEub3duZXJSZWZlcmVuY2VzJywgJ21ldGFkYXRhLnJlc291cmNlVmVyc2lvbicsICdtZXRhZGF0YS5yZWxhdGlvbnNoaXBzJywgJ21ldGFkYXRhLnNlbGZMaW5rJywgJ21ldGFkYXRhLnVpZCcsCi8vIENSRCAtPiBTY2hlbWEgZGVzY3JpYmVzIHRoZSBzY2hlbWEgdXNlZCBmb3IgdmFsaWRhdGlvbiwgcHJ1bmluZywgYW5kIGRlZmF1bHRpbmcgb2YgdGhpcyB2ZXJzaW9uIG9mIHRoZSBjdXN0b20gcmVzb3VyY2UuIElmIHdlIGFsbG93IHByb2Nlc3Npbmcgd2UgZmFsbCBpbnRvIGluZiBsb29wIG9uIG9wZW5BUElWM1NjaGVtYS5hbGxPZiB3aGljaCBjb250YWlucyBhIGN5Y2xpY2FsIHJlZiBvZiBhbGxPZiBwcm9wcy4KJ3NwZWMudmVyc2lvbnMuc2NoZW1hJywgJ3N0YXR1cycsICdzdHJpbmdEYXRhJ107CmV4cG9ydCB2YXIgQUNUSVZFTFlfUkVNT1ZFID0gWydtZXRhZGF0YS5tYW5hZ2VkRmllbGRzJywgJ21ldGFkYXRhLnJlbGF0aW9uc2hpcHMnLCAnbWV0YWRhdGEuc3RhdGUnLCAnc3RhdHVzJywgJ2xpbmtzJywgJ3R5cGUnLCAnaWQnXTsKdmFyIElOREVOVCA9IDI7CmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVZYW1sV2l0aE9wdGlvbnMoc2NoZW1hcywgdHlwZSwgZGF0YSwgb3B0aW9ucykgewogIHJldHVybiBjcmVhdGVZYW1sKHNjaGVtYXMsIHR5cGUsIGRhdGEsIHRydWUsIDAsICcnLCBudWxsLCBvcHRpb25zKTsKfQpleHBvcnQgZnVuY3Rpb24gY3JlYXRlWWFtbChzY2hlbWFzLCB0eXBlLCBkYXRhKSB7CiAgdmFyIHByb2Nlc3NBbHdheXNBZGQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHRydWU7CiAgdmFyIGRlcHRoID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAwOwogIHZhciBwYXRoID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiAnJzsKICB2YXIgcm9vdFR5cGUgPSBhcmd1bWVudHMubGVuZ3RoID4gNiAmJiBhcmd1bWVudHNbNl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s2XSA6IG51bGw7CiAgdmFyIGRhdGFPcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDcgJiYgYXJndW1lbnRzWzddICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbN10gOiB7fTsKICB2YXIgc2NoZW1hID0gZmluZEJ5KHNjaGVtYXMsICdpZCcsIHR5cGUpOwogIGlmICghcm9vdFR5cGUpIHsKICAgIHJvb3RUeXBlID0gdHlwZTsKICB9CiAgaWYgKCFzY2hlbWEpIHsKICAgIHJldHVybiAiRXJyb3IgbG9hZGluZyBzY2hlbWEgZm9yICIuY29uY2F0KHR5cGUpOwogIH0KICBkYXRhID0gZGF0YSB8fCB7fTsKICBpZiAoZGVwdGggPT09IDApIHsKICAgIHZhciBhdHRyID0gc2NoZW1hLmF0dHJpYnV0ZXMgfHwge307CgogICAgLy8gRGVmYXVsdCB0byBkYXRhLmFwaVZlcnNpb24va2luZCB0byBhY2NvbW1vZGF0ZSBzcG9vZmVkIHR5cGVzIHRoYXQgYWdncmVnYXRlIG11bHRpcGxlIHR5cGVzCiAgICBkYXRhLmFwaVZlcnNpb24gPSAoYXR0ci5ncm91cCA/ICIiLmNvbmNhdChhdHRyLmdyb3VwLCAiLyIpLmNvbmNhdChhdHRyLnZlcnNpb24pIDogYXR0ci52ZXJzaW9uKSB8fCBkYXRhLmFwaVZlcnNpb247CiAgICBkYXRhLmtpbmQgPSBhdHRyLmtpbmQgfHwgZGF0YS5raW5kOwogIH0KICB2YXIgcmVndWxhckZpZWxkcyA9IFtdOwogIGlmIChwcm9jZXNzQWx3YXlzQWRkKSB7CiAgICAvLyBBZGQgYWxsIHRoZSBwYXJlbnRzIG9mIGVhY2gga2V5IHNvIHRoYXQgc3BlYy50ZW1wbGF0ZS5mb28uYmxhaAogICAgLy8gY2F1c2VzICdzcGVjJywgJ3RlbXBsYXRlJyBhbmQgJ2Zvbycga2V5cyB0byBiZSBjcmVhdGVkCiAgICB2YXIgYWx3YXlzID0gQUxXQVlTX0FERC5zbGljZSgpOwogICAgZm9yICh2YXIgaSA9IGFsd2F5cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgewogICAgICB2YXIgZW50cnkgPSBhbHdheXNbaV0uc3BsaXQoL1wuLyk7CiAgICAgIHdoaWxlIChlbnRyeS5sZW5ndGgpIHsKICAgICAgICBhZGRPYmplY3QoYWx3YXlzLCBlbnRyeS5qb2luKCcuJykpOwogICAgICAgIGVudHJ5ID0gZW50cnkuc2xpY2UoMCwgLTEpOwogICAgICB9CiAgICB9CgogICAgLy8gTWFyayBhbHdheXMgZmllbGRzIGFzIHJlZ3VsYXIgc28gdGhleSdyZSBub3QgY29tbWVudGVkIG91dAogICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGFsd2F5cyksCiAgICAgIF9zdGVwOwogICAgdHJ5IHsKICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHsKICAgICAgICB2YXIgX2VudHJ5ID0gX3N0ZXAudmFsdWU7CiAgICAgICAgdmFyIHBhcnRzID0gX2VudHJ5LnNwbGl0KC9cLi8pOwogICAgICAgIHZhciBrZXkgPSBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXTsKICAgICAgICB2YXIgcHJlZml4ID0gcGFydHMuc2xpY2UoMCwgLTEpLmpvaW4oJy4nKTsKICAgICAgICBpZiAocHJlZml4ID09PSBwYXRoICYmIHNjaGVtYS5yZXNvdXJjZUZpZWxkcyAmJiBzY2hlbWEucmVzb3VyY2VGaWVsZHNba2V5XSkgewogICAgICAgICAgYWRkT2JqZWN0KHJlZ3VsYXJGaWVsZHMsIGtleSk7CiAgICAgICAgfQogICAgICB9CiAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgX2l0ZXJhdG9yLmUoZXJyKTsKICAgIH0gZmluYWxseSB7CiAgICAgIF9pdGVyYXRvci5mKCk7CiAgICB9CiAgfQoKICAvLyBJbmNsdWRlIGFsbCBmaWVsZHMgaW4gc2NoZW1hJ3MgcmVzb3VyY2VGaWVsZHMgYXMgY29tbWVudHMKICB2YXIgY29tbWVudEZpZWxkcyA9IE9iamVjdC5rZXlzKHNjaGVtYS5yZXNvdXJjZUZpZWxkcyB8fCB7fSk7CiAgY29tbWVudEZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgIGlmICh0eXBlb2YgZGF0YVtrZXldICE9PSAndW5kZWZpbmVkJyB8fCBkZXB0aCA9PT0gMCAmJiBrZXkgPT09ICdfdHlwZScpIHsKICAgICAgYWRkT2JqZWN0KHJlZ3VsYXJGaWVsZHMsIGtleSk7CiAgICB9CiAgfSk7CgogIC8vIGFkZCBhbnkgZmllbGRzIGRlZmluZWQgaW4gZGF0YSBhcyB1bmNvbW1lbnRlZCBmaWVsZHMgaW4geWFtbAogIGZvciAodmFyIF9rZXkgaW4gZGF0YSkgewogICAgaWYgKHR5cGVvZiBkYXRhW19rZXldICE9PSAndW5kZWZpbmVkJykgewogICAgICBhZGRPYmplY3QocmVndWxhckZpZWxkcywgX2tleSk7CiAgICB9CiAgfQoKICAvLyBBQ1RJVkVMWV9SRU1PVkUgYXJlIGZpZWxkcyB0aGF0IHNob3VsZCBiZSByZW1vdmVkIGV2ZW4gaWYgdGhleSBhcmUgZGVmaW5lZCBpbiBkYXRhCiAgdmFyIF9pdGVyYXRvcjIgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihBQ1RJVkVMWV9SRU1PVkUpLAogICAgX3N0ZXAyOwogIHRyeSB7CiAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykgewogICAgICB2YXIgX2VudHJ5MiA9IF9zdGVwMi52YWx1ZTsKICAgICAgdmFyIF9wYXJ0cyA9IF9lbnRyeTIuc3BsaXQoL1wuLyk7CiAgICAgIHZhciBfa2V5MiA9IF9wYXJ0c1tfcGFydHMubGVuZ3RoIC0gMV07CiAgICAgIHZhciBfcHJlZml4ID0gX3BhcnRzLnNsaWNlKDAsIC0xKS5qb2luKCcuJyk7CiAgICAgIGlmIChfcHJlZml4ID09PSBwYXRoKSB7CiAgICAgICAgcmVtb3ZlT2JqZWN0KHJlZ3VsYXJGaWVsZHMsIF9rZXkyKTsKICAgICAgfQogICAgfQoKICAgIC8vIE5FVkVSX0FERCBhcmUgZmllbGRzIHRoYXQgc2hvdWxkIG5vdCBiZSBhZGRlZCBhcyBjb21tZW50cywgYnV0IG1heSBhZGRlZCBhcyByZWd1bGFyIGZpZWxkcyBpZiBhbHJlYWR5IGRlZmluZWQgaW4gZGF0YQogIH0gY2F0Y2ggKGVycikgewogICAgX2l0ZXJhdG9yMi5lKGVycik7CiAgfSBmaW5hbGx5IHsKICAgIF9pdGVyYXRvcjIuZigpOwogIH0KICB2YXIgX2l0ZXJhdG9yMyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKE5FVkVSX0FERCksCiAgICBfc3RlcDM7CiAgdHJ5IHsKICAgIGZvciAoX2l0ZXJhdG9yMy5zKCk7ICEoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uKCkpLmRvbmU7KSB7CiAgICAgIHZhciBfZW50cnkzID0gX3N0ZXAzLnZhbHVlOwogICAgICB2YXIgX3BhcnRzMiA9IF9lbnRyeTMuc3BsaXQoL1wuLyk7CiAgICAgIHZhciBfa2V5MyA9IF9wYXJ0czJbX3BhcnRzMi5sZW5ndGggLSAxXTsKICAgICAgdmFyIF9wcmVmaXgyID0gX3BhcnRzMi5zbGljZSgwLCAtMSkuam9pbignLicpOwogICAgICBpZiAoX3ByZWZpeDIgPT09IHBhdGggJiYgc2NoZW1hLnJlc291cmNlRmllbGRzICYmIHNjaGVtYS5yZXNvdXJjZUZpZWxkc1tfa2V5M10pIHsKICAgICAgICByZW1vdmVPYmplY3QoY29tbWVudEZpZWxkcywgX2tleTMpOwogICAgICB9CiAgICB9CgogICAgLy8gZG8gbm90IGluY2x1ZGUgY29tbWVudGVkIGZpZWxkcyBpZiBhbHJlYWR5IGRlZmluZWQgaW4gZGF0YQogIH0gY2F0Y2ggKGVycikgewogICAgX2l0ZXJhdG9yMy5lKGVycik7CiAgfSBmaW5hbGx5IHsKICAgIF9pdGVyYXRvcjMuZigpOwogIH0KICByZW1vdmVPYmplY3RzKGNvbW1lbnRGaWVsZHMsIHJlZ3VsYXJGaWVsZHMpOwogIHZhciByZWd1bGFyID0gcmVndWxhckZpZWxkcy5tYXAoZnVuY3Rpb24gKGspIHsKICAgIHJldHVybiBzdHJpbmdpZnlGaWVsZChrKTsKICB9KTsKICB2YXIgY29tbWVudHMgPSBjb21tZW50RmllbGRzLm1hcChmdW5jdGlvbiAoaykgewogICAgLy8gRG9uJ3QgYWRkIGEgbmFtZXNwYWNlIGNvbW1lbnQgZm9yIHR5cGVzIHRoYXQgYXJlbid0IG5hbWVzcGFjZWQuCiAgICBpZiAocGF0aCA9PT0gJ21ldGFkYXRhJyAmJiBrID09PSAnbmFtZXNwYWNlJykgewogICAgICB2YXIgX3Jvb3RTY2hlbWEkYXR0cmlidXRlOwogICAgICB2YXIgcm9vdFNjaGVtYSA9IGZpbmRCeShzY2hlbWFzLCAnaWQnLCByb290VHlwZSk7CiAgICAgIGlmIChyb290U2NoZW1hICYmICEoKF9yb290U2NoZW1hJGF0dHJpYnV0ZSA9IHJvb3RTY2hlbWEuYXR0cmlidXRlcykgIT09IG51bGwgJiYgX3Jvb3RTY2hlbWEkYXR0cmlidXRlICE9PSB2b2lkIDAgJiYgX3Jvb3RTY2hlbWEkYXR0cmlidXRlLm5hbWVzcGFjZWQpKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBjb21tZW50KHN0cmluZ2lmeUZpZWxkKGspKTsKICB9KTsKICB2YXIgb3V0ID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShyZWd1bGFyKSwgX3RvQ29uc3VtYWJsZUFycmF5KGNvbW1lbnRzKSkuZmlsdGVyKGZ1bmN0aW9uICh4KSB7CiAgICByZXR1cm4geCAhPT0gbnVsbDsKICB9KS5qb2luKCdcbicpLnRyaW0oKTsKICByZXR1cm4gb3V0OwoKICAvLyAtLS0tLS0tLS0tLS0tLS0KCiAgZnVuY3Rpb24gc3RyaW5naWZ5RmllbGQoa2V5KSB7CiAgICB2YXIgX3NjaGVtYSRyZXNvdXJjZUZpZWxkOwogICAgdmFyIGZpZWxkID0gKF9zY2hlbWEkcmVzb3VyY2VGaWVsZCA9IHNjaGVtYS5yZXNvdXJjZUZpZWxkcykgPT09IG51bGwgfHwgX3NjaGVtYSRyZXNvdXJjZUZpZWxkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc2NoZW1hJHJlc291cmNlRmllbGRba2V5XTsKICAgIHZhciBvdXQgPSAiIi5jb25jYXQoa2V5LCAiOiIpOwoKICAgIC8vICdfdHlwZScgaW4gc3RldmUgbWFwcyB0byBrdWJlcm5ldGVzICd0eXBlJyBmaWVsZDsgc2hvdyAndHlwZScgZmllbGQgaW4geWFtbAogICAgaWYgKGtleSA9PT0gJ190eXBlJykgewogICAgICBvdXQgPSAndHlwZTonOwogICAgfQoKICAgIC8vIGlmIGEga2V5IG9uIGRhdGEgaXMgbm90IGxpc3RlZCBpbiB0aGUgc2NoZW1hJ3MgcmVzb3VyY2VGaWVsZHMsIGp1c3QgY29udmVydCBpdCB0byB5YW1sLCBhZGQgaW5kZW50cyB3aGVyZSBuZWVkZWQsIGFuZCByZXR1cm4KICAgIGlmICghZmllbGQpIHsKICAgICAgaWYgKGRhdGFba2V5XSkgewogICAgICAgIHRyeSB7CiAgICAgICAgICB2YXIgY2xlYW5lZCA9IGNsZWFuVXAoZGF0YSk7CiAgICAgICAgICB2YXIgcGFyc2VkRGF0YSA9IGpzeWFtbC5kdW1wKGNsZWFuZWRba2V5XSk7CiAgICAgICAgICBpZiAoX3R5cGVvZihkYXRhW2tleV0pID09PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KGRhdGFba2V5XSkpIHsKICAgICAgICAgICAgb3V0ICs9ICJcbiIuY29uY2F0KGluZGVudChwYXJzZWREYXRhLnRyaW0oKSkpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgb3V0ICs9ICIgIi5jb25jYXQocGFyc2VkRGF0YS50cmltKCkpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIG91dDsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKCJFcnJvcjogVW5hYmxlIHRvIHBhcnNlIG1hcCBkYXRhIGZvciB5YW1sIGtleTogIi5jb25jYXQoa2V5KSwgZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZQogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIHZhciB0eXBlID0gdHlwZU11bmdlKGZpZWxkLnR5cGUpOwogICAgdmFyIG1hcE9mID0gdHlwZVJlZignbWFwJywgdHlwZSk7CiAgICB2YXIgYXJyYXlPZiA9IHR5cGVSZWYoJ2FycmF5JywgdHlwZSk7CiAgICB2YXIgcmVmZXJlbmNlVG8gPSB0eXBlUmVmKCdyZWZlcmVuY2UnLCB0eXBlKTsKCiAgICAvLyB0eXBlID09IG1hcFttYXBPZl0KICAgIGlmIChtYXBPZikgewogICAgICAvLyBpZiBrZXkgaXMgZGVmaW5lZCBpbiBkYXRhLCBjb252ZXJ0IHRoZSB2YWx1ZSB0byB5YW1sLCBhZGQgbmV3bGluZStpbmRlbnQgYW5kIGFkZCB0byBvdXRwdXQgeWFtbCBzdHJpbmcKICAgICAgaWYgKGRhdGFba2V5XSkgewogICAgICAgIHRyeSB7CiAgICAgICAgICB2YXIgX2NsZWFuZWQgPSBjbGVhblVwKGRhdGEpOwogICAgICAgICAgdmFyIF9wYXJzZWREYXRhID0gZHVtcEJsb2NrKF9jbGVhbmVkW2tleV0sIGRhdGFPcHRpb25zW2tleV0pOwogICAgICAgICAgb3V0ICs9ICJcbiIuY29uY2F0KGluZGVudChfcGFyc2VkRGF0YSkpOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIkVycm9yOiBVbmFibGUgdG8gcGFyc2UgbWFwIGRhdGEgZm9yIHlhbWwgb2YgdHlwZTogIi5jb25jYXQodHlwZSksIGUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGUKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKFNJTVBMRV9UWVBFUy5pbmNsdWRlcyhtYXBPZikpIHsKICAgICAgICBvdXQgKz0gIiMgIGtleTogIi5jb25jYXQobWFwT2YpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIElmIG5vdCBhIHNpbXBsZSB0eXBlIGllIHNvbWUgc29ydCBvZiBvYmplY3QvYXJyYXksIHJlY3VzaXZlbHkgYnVpbGQgb3V0IGNvbW1lbnRlZCBmaWVsZHMgKG5vdGUgZGF0YSA9IG51bGwgaGVyZSkgcGVyIHRoZSB0eXBlJ3MgKG1hcE9mJ3MpIHNjaGVtYQogICAgICAgIHZhciBjaHVuayA9IGNyZWF0ZVlhbWwoc2NoZW1hcywgbWFwT2YsIG51bGwsIHByb2Nlc3NBbHdheXNBZGQsIGRlcHRoICsgMSwgcGF0aCA/ICIiLmNvbmNhdChwYXRoLCAiLiIpLmNvbmNhdChrZXkpIDoga2V5LCByb290VHlwZSwgZGF0YU9wdGlvbnMpOwogICAgICAgIHZhciBpbmRlbnRlZCA9IGluZGVudChjaHVuayk7CgogICAgICAgIC8vIGNvbnZlcnQgIiMgICAgZm9vIiB0byAiI2ZvbyIKICAgICAgICBpbmRlbnRlZCA9IGluZGVudGVkLnJlcGxhY2UoL14oIyk/XHNcc1xzXHMvLCAnJDEnKTsKICAgICAgICBvdXQgKz0gIiIuY29uY2F0KGluZGVudGVkKTsKICAgICAgfQogICAgICByZXR1cm4gb3V0OwogICAgfQoKICAgIC8vIHR5cGUgPT0gYXJyYXlbYXJyYXlPZl0KICAgIGlmIChhcnJheU9mKSB7CiAgICAgIGlmIChkYXRhW2tleV0pIHsKICAgICAgICB0cnkgewogICAgICAgICAgdmFyIF9jbGVhbmVkMiA9IGNsZWFuVXAoZGF0YSk7CiAgICAgICAgICBpZiAoX2NsZWFuZWQyICE9PSBudWxsICYmIF9jbGVhbmVkMiAhPT0gdm9pZCAwICYmIF9jbGVhbmVkMltrZXldKSB7CiAgICAgICAgICAgIHZhciBfcGFyc2VkRGF0YTIgPSBqc3lhbWwuZHVtcChfY2xlYW5lZDJba2V5XSk7CiAgICAgICAgICAgIG91dCArPSAiXG4iLmNvbmNhdChpbmRlbnQoX3BhcnNlZERhdGEyLnRyaW0oKSkpOwogICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIkVycm9yOiBVbmFsZSB0byBwYXJzZSBhcnJheSBkYXRhIGZvciB5YW1sIG9mIHR5cGU6ICIuY29uY2F0KHR5cGUpLCBlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlCiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChTSU1QTEVfVFlQRVMuaW5jbHVkZXMoYXJyYXlPZikpIHsKICAgICAgICBvdXQgKz0gIlxuIyAgLSAiLmNvbmNhdChhcnJheU9mKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgX2NodW5rID0gY3JlYXRlWWFtbChzY2hlbWFzLCBhcnJheU9mLCBudWxsLCBmYWxzZSwgZGVwdGggKyAxLCBwYXRoID8gIiIuY29uY2F0KHBhdGgsICIuIikuY29uY2F0KGtleSkgOiBrZXksIHJvb3RUeXBlLCBkYXRhT3B0aW9ucyk7CiAgICAgICAgdmFyIF9pbmRlbnRlZCA9IGluZGVudChfY2h1bmssIDIpOwoKICAgICAgICAvLyB0dXJuICIjICAgICAgICBmb28iIGludG8gIiMgIC0gZm9vIgogICAgICAgIF9pbmRlbnRlZCA9IF9pbmRlbnRlZC5yZXBsYWNlKC9eKCMpP1xzKlxzXHMoW15cc10pLywgJyQxICAtICQyJyk7CiAgICAgICAgb3V0ICs9ICJcbiIuY29uY2F0KF9pbmRlbnRlZCk7CiAgICAgIH0KICAgICAgcmV0dXJuIG91dDsKICAgIH0KICAgIGlmIChyZWZlcmVuY2VUbykgewogICAgICBvdXQgKz0gIiAjIi5jb25jYXQocmVmZXJlbmNlVG8pOwogICAgICByZXR1cm4gb3V0OwogICAgfQogICAgaWYgKFNJTVBMRV9UWVBFUy5pbmNsdWRlcyh0eXBlKSkgewogICAgICBpZiAoa2V5ID09PSAnX3R5cGUnICYmIHR5cGVvZiBkYXRhW2tleV0gPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkYXRhWyd0eXBlJ10gIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgb3V0ICs9ICIgIi5jb25jYXQoc2VyaWFsaXplU2ltcGxlVmFsdWUoZGF0YVsndHlwZSddKSk7CiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRhdGFba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICBvdXQgKz0gIiAjIi5jb25jYXQoc2VyaWFsaXplU2ltcGxlVmFsdWUodHlwZSkpOwogICAgICB9IGVsc2UgewogICAgICAgIG91dCArPSAiICIuY29uY2F0KHNlcmlhbGl6ZVNpbXBsZVZhbHVlKGRhdGFba2V5XSkpOwogICAgICB9CiAgICAgIHJldHVybiBvdXQ7CiAgICB9CgogICAgLyoqCiAgICAgKiAuc3BlYyBpcyB0aGUgdHlwZSB1c2VkIGZvciB0aGUgTG9nZ2luZyBjaGFydCBPdXRwdXQgYW5kIENsdXN0ZXJPdXRwdXQgcmVzb3VyY2Ugc3BlYy4KICAgICAqIFdpdGhvdXQgdGhpcyBPdXRwdXQgYW5kIENsdXN0ZXJPdXRwdXQgc3BlY3MgYXJlIGVtcHR5LgogICAgICovCiAgICBpZiAodHlwZSA9PT0gJ2pzb24nIHx8IHR5cGUgPT09ICcuc3BlYycpIHsKICAgICAgdHJ5IHsKICAgICAgICB2YXIgX3BhcnNlZERhdGEzID0ganN5YW1sLmR1bXAoZGF0YVtrZXldKTsKICAgICAgICBpZiAoX3BhcnNlZERhdGEzKSB7CiAgICAgICAgICBvdXQgKz0gIlxuIi5jb25jYXQoaW5kZW50KF9wYXJzZWREYXRhMy50cmltKCkpKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgb3V0ICs9ICIgIyIuY29uY2F0KHR5cGUpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gb3V0OwogICAgICB9IGNhdGNoIChlKSB7fQogICAgfQogICAgdmFyIHN1YkRlZiA9IGZpbmRCeShzY2hlbWFzLCAnaWQnLCB0eXBlKTsKICAgIGlmIChzdWJEZWYpIHsKICAgICAgdmFyIF9jaHVuazI7CiAgICAgIGlmIChzdWJEZWYgIT09IG51bGwgJiYgc3ViRGVmICE9PSB2b2lkIDAgJiYgc3ViRGVmLnJlc291cmNlRmllbGRzICYmICFpc0VtcHR5KHN1YkRlZiA9PT0gbnVsbCB8fCBzdWJEZWYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHN1YkRlZi5yZXNvdXJjZUZpZWxkcykpIHsKICAgICAgICBfY2h1bmsyID0gY3JlYXRlWWFtbChzY2hlbWFzLCB0eXBlLCBkYXRhW2tleV0sIHByb2Nlc3NBbHdheXNBZGQsIGRlcHRoICsgMSwgcGF0aCA/ICIiLmNvbmNhdChwYXRoLCAiLiIpLmNvbmNhdChrZXkpIDoga2V5LCByb290VHlwZSwgZGF0YU9wdGlvbnMpOwogICAgICB9IGVsc2UgaWYgKGRhdGFba2V5XSkgewogICAgICAgIC8vIGlmIHRoZXJlIGFyZSBubyBmaWVsZHMgZGVmaW5lZCBvbiB0aGUgc2NoZW1hIGJ1dCB0aGVyZSBhcmUgaW4gdGhlIGRhdGEsIGp1c3QgZm9ybWF0IGRhdGEgYXMgeWFtbCBhbmQgYWRkIHRvIG91dHB1dCB5YW1sCiAgICAgICAgdHJ5IHsKICAgICAgICAgIHZhciBwYXJzZWQgPSBqc3lhbWwuZHVtcChkYXRhW2tleV0pOwogICAgICAgICAgX2NodW5rMiA9IHBhcnNlZC50cmltKCk7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgY29uc29sZS5lcnJvcigiRXJyb3I6IFVuYWxlIHRvIHBhcnNlIGRhdGEgZm9yIHlhbWwgb2YgdHlwZTogIi5jb25jYXQodHlwZSksIGUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGUKICAgICAgICB9CiAgICAgIH0KICAgICAgb3V0ICs9ICJcbiIuY29uY2F0KGluZGVudChfY2h1bmsyKSk7CiAgICB9IGVsc2UgewogICAgICBvdXQgKz0gIiAjIi5jb25jYXQodHlwZSk7CiAgICB9CiAgICByZXR1cm4gb3V0OwogIH0KfQpmdW5jdGlvbiBjb21tZW50KGxpbmVzKSB7CiAgcmV0dXJuIChsaW5lcyB8fCAnJykuc3BsaXQoJ1xuJykubWFwKGZ1bmN0aW9uICh4KSB7CiAgICByZXR1cm4gIiMiLmNvbmNhdCh4LnJlcGxhY2UoLyMvZywgJycpKTsKICB9KS5qb2luKCdcbicpOwp9CmZ1bmN0aW9uIGluZGVudChsaW5lcykgewogIHZhciBkZXB0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTsKICByZXR1cm4gX2luZGVudChsaW5lcywgZGVwdGggKiBJTkRFTlQsICcgJywgL14jLyk7Cn0KZnVuY3Rpb24gc2VyaWFsaXplU2ltcGxlVmFsdWUoZGF0YSkgewogIHJldHVybiBqc3lhbWwuZHVtcChkYXRhKS50cmltKCk7Cn0KZXhwb3J0IGZ1bmN0aW9uIGdldEJsb2NrRGVzY3JpcHRvcih2YWx1ZSwga2V5KSB7CiAgdmFyIGhlYWRlciA9IGdldEJsb2NrSGVhZGVyKHZhbHVlLCBrZXkpOwogIHJldHVybiB7CiAgICBoZWFkZXI6IGhlYWRlciwKICAgIGluZGVudGF0aW9uOiBnZXRCbG9ja0luZGVudGF0aW9uKGhlYWRlcikKICB9Owp9CgovKioKICoKICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIHRoZSBibG9jayBvZiB0ZXh0IHRvIGJlIHBhcnNlZAogKiBAcGFyYW0geyp9IGJsb2NrS2V5IHRoZSBrZXkgb2YgdGhlIGJsb2NrCiAqIEByZXR1cm5zIHRoZSBrZXkgKyB0aGUgYmxvY2sgc2NhbGFyIGluZGljYXRvcnMsIHNlZSBodHRwczovL3lhbWwtbXVsdGlsaW5lLmluZm8gLSBCbG9jayBTY2FsYXJzCiAqLwpmdW5jdGlvbiBnZXRCbG9ja0hlYWRlcih2YWx1ZSwgYmxvY2tLZXkpIHsKICB2YXIgY2FyZCA9ICIoIi5jb25jYXQoYmxvY2tLZXksICIpW1xcOl1bXFxzfFxcdF0rW1xcfFxcPl1bXFxkXSpbXFwtXFwrXT8iKTsKICB2YXIgcmUgPSBuZXcgUmVnRXhwKGNhcmQsICdnaScpOwogIHZhciBmb3VuZCA9IHZhbHVlLm1hdGNoKHJlKTsKICByZXR1cm4gKGZvdW5kID09PSBudWxsIHx8IGZvdW5kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmb3VuZFswXSkgfHwgJyc7Cn0KCi8qKgogKgogKiBAcGFyYW0ge3N0cmluZ30gYmxvY2tIZWFkZXIgdGhlIGtleSArIHRoZSBibG9jayBzY2FsYXIgaW5kaWNhdG9ycwogKiBAcmV0dXJucyB0aGUgaW5kZW50YXRpb24gaW5kaWNhdG9yIGZyb20gdGhlIGJsb2NrIGhlYWRlciwgc2VlIGh0dHBzOi8veWFtbC1tdWx0aWxpbmUuaW5mbyAtIEluZGVudGF0aW9uCiAqLwpmdW5jdGlvbiBnZXRCbG9ja0luZGVudGF0aW9uKGJsb2NrSGVhZGVyKSB7CiAgdmFyIGJsb2NrU2NhbGFycyA9IGJsb2NrSGVhZGVyLnN1YnN0cihibG9ja0hlYWRlci5pbmRleE9mKCc6JykgKyAxKTsKICB2YXIgaW5kZW50YXRpb24gPSBibG9ja1NjYWxhcnMubWF0Y2goL1xkKy8pOwogIHJldHVybiAoaW5kZW50YXRpb24gPT09IG51bGwgfHwgaW5kZW50YXRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGluZGVudGF0aW9uWzBdKSB8fCAnJzsKfQpleHBvcnQgZnVuY3Rpb24gdHlwZVJlZih0eXBlLCBzdHIpIHsKICB2YXIgcmUgPSBuZXcgUmVnRXhwKCJeIi5jb25jYXQodHlwZSwgIlxcWyguKilcXF0kIikpOwogIHZhciBtYXRjaCA9IHN0ci5tYXRjaChyZSk7CiAgaWYgKG1hdGNoKSB7CiAgICByZXR1cm4gdHlwZU11bmdlKG1hdGNoWzFdKTsKICB9Cn0KZXhwb3J0IGZ1bmN0aW9uIHR5cGVNdW5nZSh0eXBlKSB7CiAgaWYgKHR5cGUgPT09ICdpbnRlZ2VyJykgewogICAgcmV0dXJuICdpbnQnOwogIH0KICBpZiAodHlwZSA9PT0gJ2lvLms4cy5hcGltYWNoaW5lcnkucGtnLmFwaS5yZXNvdXJjZS5RdWFudGl0eScpIHsKICAgIHJldHVybiAnc3RyaW5nJzsKICB9CiAgcmV0dXJuIHR5cGU7Cn0KZXhwb3J0IGZ1bmN0aW9uIHNhZmVyRHVtcChvYmopIHsKICB2YXIgb3V0ID0ganN5YW1sLmR1bXAob2JqIHx8IHt9KTsKICBpZiAob3V0ID09PSAne31cbicpIHsKICAgIHJldHVybiAnJzsKICB9CiAgcmV0dXJuIG91dDsKfQoKLyoqCiAqIEhhbmRsZXMgbmV3bGluZXMgaW5kaWNhdG9ycyBpbiB0aGUgbXVsdGlsaW5lIGJsb2Nrcy4KICoKICogdGhpcyBpcyByZXF1aXJlZCBzaW5jZSBqc3lhbWwuZHVtcCBkb2Vzbid0IHN1cHBvcnQgY2hvbXBpbmcgYW5kIHNjYWxhciBzdHlsZSBhdCB0aGUgbW9tZW50LgogKiBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlY2EvanMteWFtbC9pc3N1ZXMvMTcxCiAqCiAqIEBwYXJhbSB7Kn0gZGF0YSB0aGUgbXVsdGlsaW5lIGJsb2NrCiAqIEBwYXJhbSB7Kn0gb3B0aW9ucyBibG9ja3MgaW5kaWNhdG9ycywgc2VlOiBodHRwczovL3lhbWwtbXVsdGlsaW5lLmluZm8KICoKICogLSBzY2FsYXJTdHlsZToKICogICAgIG9uZSBvZiAnfCcsICc+JwogKiAgICAgZGVmYXVsdCAnfCcKICogLSBjaG9tcGluZzoKICogICAgIG9uZSBvZjogbnVsbCwgJycsICctJywgJysnCiAqICAgICBkZWZhdWx0OiBudWxsCiAqIEByZXR1cm5zIHRoZSByZXN1bHQgb2YganN5YW1sLmR1bXAgd2l0aCB0aGUgYWRkaXRpb24gb2YgbXVsdGlsaW5lIGluZGljYXRvcnMKICovCmV4cG9ydCBmdW5jdGlvbiBkdW1wQmxvY2soZGF0YSkgewogIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTsKICB2YXIgcGFyc2VkID0ganN5YW1sLmR1bXAoZGF0YSk7CiAgdmFyIG91dCA9IHBhcnNlZDsKICB2YXIgYmxvY2tGaWVsZHMgPSBPYmplY3Qua2V5cyhkYXRhKS5maWx0ZXIoZnVuY3Rpb24gKGspIHsKICAgIHJldHVybiBkYXRhW2tdLmluY2x1ZGVzKCdcbicpOwogIH0pOwogIGlmIChibG9ja0ZpZWxkcy5sZW5ndGgpIHsKICAgIHZhciBfaXRlcmF0b3I0ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoYmxvY2tGaWVsZHMpLAogICAgICBfc3RlcDQ7CiAgICB0cnkgewogICAgICBmb3IgKF9pdGVyYXRvcjQucygpOyAhKF9zdGVwNCA9IF9pdGVyYXRvcjQubigpKS5kb25lOykgewogICAgICAgIHZhciBfb3B0aW9ucyRrZXkkc2NhbGFyU3QsIF9vcHRpb25zJGtleSwgX29wdGlvbnMka2V5JGNob21waW5nLCBfb3B0aW9ucyRrZXkyOwogICAgICAgIHZhciBrZXkgPSBfc3RlcDQudmFsdWU7CiAgICAgICAgdmFyIF9nZXRCbG9ja0Rlc2NyaXB0b3IgPSBnZXRCbG9ja0Rlc2NyaXB0b3Iob3V0LCBrZXkpLAogICAgICAgICAgaGVhZGVyID0gX2dldEJsb2NrRGVzY3JpcHRvci5oZWFkZXIsCiAgICAgICAgICBpbmRlbnRhdGlvbiA9IF9nZXRCbG9ja0Rlc2NyaXB0b3IuaW5kZW50YXRpb247CiAgICAgICAgdmFyIHNjYWxhclN0eWxlID0gKF9vcHRpb25zJGtleSRzY2FsYXJTdCA9IChfb3B0aW9ucyRrZXkgPSBvcHRpb25zW2tleV0pID09PSBudWxsIHx8IF9vcHRpb25zJGtleSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbnMka2V5LnNjYWxhclN0eWxlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRrZXkkc2NhbGFyU3QgIT09IHZvaWQgMCA/IF9vcHRpb25zJGtleSRzY2FsYXJTdCA6ICd8JzsKICAgICAgICB2YXIgY2hvbXBpbmcgPSAoX29wdGlvbnMka2V5JGNob21waW5nID0gKF9vcHRpb25zJGtleTIgPSBvcHRpb25zW2tleV0pID09PSBudWxsIHx8IF9vcHRpb25zJGtleTIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGtleTIuY2hvbXBpbmcpICE9PSBudWxsICYmIF9vcHRpb25zJGtleSRjaG9tcGluZyAhPT0gdm9pZCAwID8gX29wdGlvbnMka2V5JGNob21waW5nIDogJyc7CgogICAgICAgIC8qKgogICAgICAgICAqIFJlcGxhY2UgdGhlIG9yaWdpbmFsIGJsb2NrIGluZGljYXRvcnMgd2l0aCB0aGUgb25lcyBwcm92aWRlZCBpbiB0aGUgb3B0aW9ucyBwYXJhbQogICAgICAgICAqLwogICAgICAgIG91dCA9IG91dC5yZXBsYWNlKGhlYWRlciwgIiIuY29uY2F0KGtleSwgIjogIikuY29uY2F0KHNjYWxhclN0eWxlKS5jb25jYXQoY2hvbXBpbmcpLmNvbmNhdChpbmRlbnRhdGlvbikpOwogICAgICB9CiAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgX2l0ZXJhdG9yNC5lKGVycik7CiAgICB9IGZpbmFsbHkgewogICAgICBfaXRlcmF0b3I0LmYoKTsKICAgIH0KICB9CiAgcmV0dXJuIG91dDsKfQ=="},{"version":3,"names":["indent","_indent","addObject","findBy","removeObject","removeObjects","jsyaml","cleanUp","isEmpty","SIMPLE_TYPES","ALWAYS_ADD","NEVER_ADD","ACTIVELY_REMOVE","INDENT","createYamlWithOptions","schemas","type","data","options","createYaml","processAlwaysAdd","arguments","length","undefined","depth","path","rootType","dataOptions","schema","concat","attr","attributes","apiVersion","group","version","kind","regularFields","always","slice","i","entry","split","join","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","parts","key","prefix","resourceFields","err","e","f","commentFields","Object","keys","forEach","_iterator2","_step2","_iterator3","_step3","regular","map","k","stringifyField","comments","_rootSchema$attribute","rootSchema","namespaced","comment","out","_toConsumableArray","filter","x","trim","_schema$resourceField","field","cleaned","parsedData","dump","_typeof","Array","isArray","console","error","typeMunge","mapOf","typeRef","arrayOf","referenceTo","dumpBlock","includes","chunk","indented","replace","serializeSimpleValue","subDef","parsed","lines","getBlockDescriptor","header","getBlockHeader","indentation","getBlockIndentation","blockKey","card","re","RegExp","found","match","blockHeader","blockScalars","substr","indexOf","str","saferDump","obj","blockFields","_iterator4","_step4","_options$key$scalarSt","_options$key","_options$key$chomping","_options$key2","_getBlockDescriptor","scalarStyle","chomping"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/create-yaml.js"],"sourcesContent":["import { indent as _indent } from '@shell/utils/string';\nimport { addObject, findBy, removeObject, removeObjects } from '@shell/utils/array';\nimport jsyaml from 'js-yaml';\nimport { cleanUp, isEmpty } from '@shell/utils/object';\n\nexport const SIMPLE_TYPES = [\n  'string',\n  'multiline',\n  'masked',\n  'password',\n  'float',\n  'int',\n  'date',\n  'blob',\n  'boolean',\n  'version'\n];\n\nconst ALWAYS_ADD = [\n  'apiVersion',\n  'kind',\n  'metadata',\n  'metadata.name',\n  'spec',\n  'spec.selector',\n  'spec.selector.matchLabels',\n  'spec.template',\n  'spec.template.metadata',\n  'spec.template.metadata.labels',\n  'spec.template.spec.containers.name',\n  'spec.template.spec.containers.image',\n];\n\nexport const NEVER_ADD = [\n  'metadata.clusterName',\n  'metadata.clusterName',\n  'metadata.creationTimestamp',\n  'metadata.deletionGracePeriodSeconds',\n  'metadata.deletionTimestamp',\n  'metadata.finalizers',\n  'metadata.generateName',\n  'metadata.generation',\n  'metadata.initializers',\n  'metadata.managedFields',\n  'metadata.ownerReferences',\n  'metadata.resourceVersion',\n  'metadata.relationships',\n  'metadata.selfLink',\n  'metadata.uid',\n  // CRD -> Schema describes the schema used for validation, pruning, and defaulting of this version of the custom resource. If we allow processing we fall into inf loop on openAPIV3Schema.allOf which contains a cyclical ref of allOf props.\n  'spec.versions.schema',\n  'status',\n  'stringData',\n];\n\nexport const ACTIVELY_REMOVE = [\n  'metadata.managedFields',\n  'metadata.relationships',\n  'metadata.state',\n  'status',\n  'links',\n  'type',\n  'id'\n];\n\nconst INDENT = 2;\n\nexport function createYamlWithOptions(schemas, type, data, options) {\n  return createYaml(\n    schemas,\n    type,\n    data,\n    true, 0, '', null,\n    options\n  );\n}\n\nexport function createYaml(\n  schemas,\n  type,\n  data,\n  processAlwaysAdd = true,\n  depth = 0,\n  path = '',\n  rootType = null,\n  dataOptions = {}\n) {\n  const schema = findBy(schemas, 'id', type);\n\n  if ( !rootType ) {\n    rootType = type;\n  }\n\n  if ( !schema ) {\n    return `Error loading schema for ${ type }`;\n  }\n\n  data = data || {};\n\n  if ( depth === 0 ) {\n    const attr = schema.attributes || {};\n\n    // Default to data.apiVersion/kind to accommodate spoofed types that aggregate multiple types\n    data.apiVersion = (attr.group ? `${ attr.group }/${ attr.version }` : attr.version) || data.apiVersion;\n    data.kind = attr.kind || data.kind;\n  }\n\n  const regularFields = [];\n\n  if (processAlwaysAdd) {\n    // Add all the parents of each key so that spec.template.foo.blah\n    // causes 'spec', 'template' and 'foo' keys to be created\n    const always = ALWAYS_ADD.slice();\n\n    for ( let i = always.length - 1 ; i >= 0 ; i-- ) {\n      let entry = always[i].split(/\\./);\n\n      while ( entry.length ) {\n        addObject(always, entry.join('.'));\n        entry = entry.slice(0, -1);\n      }\n    }\n\n    // Mark always fields as regular so they're not commented out\n    for ( const entry of always ) {\n      const parts = entry.split(/\\./);\n      const key = parts[parts.length - 1];\n      const prefix = parts.slice(0, -1).join('.');\n\n      if ( prefix === path && schema.resourceFields && schema.resourceFields[key] ) {\n        addObject(regularFields, key);\n      }\n    }\n  }\n\n  // Include all fields in schema's resourceFields as comments\n  const commentFields = Object.keys(schema.resourceFields || {});\n\n  commentFields.forEach((key) => {\n    if ( typeof data[key] !== 'undefined' || (depth === 0 && key === '_type') ) {\n      addObject(regularFields, key);\n    }\n  });\n\n  // add any fields defined in data as uncommented fields in yaml\n  for ( const key in data ) {\n    if ( typeof data[key] !== 'undefined' ) {\n      addObject(regularFields, key);\n    }\n  }\n\n  // ACTIVELY_REMOVE are fields that should be removed even if they are defined in data\n  for ( const entry of ACTIVELY_REMOVE ) {\n    const parts = entry.split(/\\./);\n    const key = parts[parts.length - 1];\n    const prefix = parts.slice(0, -1).join('.');\n\n    if ( prefix === path) {\n      removeObject(regularFields, key);\n    }\n  }\n\n  // NEVER_ADD are fields that should not be added as comments, but may added as regular fields if already defined in data\n  for ( const entry of NEVER_ADD ) {\n    const parts = entry.split(/\\./);\n    const key = parts[parts.length - 1];\n    const prefix = parts.slice(0, -1).join('.');\n\n    if ( prefix === path && schema.resourceFields && schema.resourceFields[key] ) {\n      removeObject(commentFields, key);\n    }\n  }\n\n  // do not include commented fields if already defined in data\n  removeObjects(commentFields, regularFields);\n\n  const regular = regularFields.map((k) => stringifyField(k));\n  const comments = commentFields.map((k) => {\n    // Don't add a namespace comment for types that aren't namespaced.\n    if ( path === 'metadata' && k === 'namespace' ) {\n      const rootSchema = findBy(schemas, 'id', rootType);\n\n      if ( rootSchema && !rootSchema.attributes?.namespaced ) {\n        return null;\n      }\n    }\n\n    return comment(stringifyField(k));\n  });\n\n  const out = [...regular, ...comments]\n    .filter((x) => x !== null)\n    .join('\\n')\n    .trim();\n\n  return out;\n\n  // ---------------\n\n  function stringifyField(key) {\n    const field = schema.resourceFields?.[key];\n    let out = `${ key }:`;\n\n    // '_type' in steve maps to kubernetes 'type' field; show 'type' field in yaml\n    if (key === '_type') {\n      out = 'type:';\n    }\n\n    // if a key on data is not listed in the schema's resourceFields, just convert it to yaml, add indents where needed, and return\n    if ( !field ) {\n      if (data[key]) {\n        try {\n          const cleaned = cleanUp(data);\n          const parsedData = jsyaml.dump(cleaned[key]);\n\n          if ( typeof data[key] === 'object' || Array.isArray(data[key]) ) {\n            out += `\\n${ indent(parsedData.trim()) }`;\n          } else {\n            out += ` ${ parsedData.trim() }`;\n          }\n\n          return out;\n        } catch (e) {\n          console.error(`Error: Unable to parse map data for yaml key: ${ key }`, e); // eslint-disable-line no-console\n        }\n      }\n\n      return null;\n    }\n\n    const type = typeMunge(field.type);\n    const mapOf = typeRef('map', type);\n    const arrayOf = typeRef('array', type);\n    const referenceTo = typeRef('reference', type);\n\n    // type == map[mapOf]\n    if ( mapOf ) {\n      // if key is defined in data, convert the value to yaml, add newline+indent and add to output yaml string\n      if (data[key]) {\n        try {\n          const cleaned = cleanUp(data);\n          const parsedData = dumpBlock(cleaned[key], dataOptions[key]);\n\n          out += `\\n${ indent(parsedData) }`;\n        } catch (e) {\n          console.error(`Error: Unable to parse map data for yaml of type: ${ type }`, e); // eslint-disable-line no-console\n        }\n      }\n\n      if ( SIMPLE_TYPES.includes(mapOf) ) {\n        out += `#  key: ${ mapOf }`;\n      } else {\n        // If not a simple type ie some sort of object/array, recusively build out commented fields (note data = null here) per the type's (mapOf's) schema\n        const chunk = createYaml(schemas, mapOf, null, processAlwaysAdd, depth + 1, (path ? `${ path }.${ key }` : key), rootType, dataOptions);\n        let indented = indent(chunk);\n\n        // convert \"#    foo\" to \"#foo\"\n        indented = indented.replace(/^(#)?\\s\\s\\s\\s/, '$1');\n\n        out += `${ indented }`;\n      }\n\n      return out;\n    }\n\n    // type == array[arrayOf]\n    if ( arrayOf ) {\n      if (data[key]) {\n        try {\n          const cleaned = cleanUp(data);\n\n          if ( cleaned?.[key] ) {\n            const parsedData = jsyaml.dump(cleaned[key]);\n\n            out += `\\n${ indent(parsedData.trim()) }`;\n          }\n        } catch (e) {\n          console.error(`Error: Unale to parse array data for yaml of type: ${ type }`, e); // eslint-disable-line no-console\n        }\n      }\n\n      if ( SIMPLE_TYPES.includes(arrayOf) ) {\n        out += `\\n#  - ${ arrayOf }`;\n      } else {\n        const chunk = createYaml(schemas, arrayOf, null, false, depth + 1, (path ? `${ path }.${ key }` : key), rootType, dataOptions);\n        let indented = indent(chunk, 2);\n\n        // turn \"#        foo\" into \"#  - foo\"\n        indented = indented.replace(/^(#)?\\s*\\s\\s([^\\s])/, '$1  - $2');\n\n        out += `\\n${ indented }`;\n      }\n\n      return out;\n    }\n\n    if ( referenceTo ) {\n      out += ` #${ referenceTo }`;\n\n      return out;\n    }\n\n    if ( SIMPLE_TYPES.includes(type) ) {\n      if (key === '_type' && typeof data[key] === 'undefined' && typeof data['type'] !== 'undefined') {\n        out += ` ${ serializeSimpleValue(data['type']) }`;\n      } else if ( typeof data[key] === 'undefined' ) {\n        out += ` #${ serializeSimpleValue(type) }`;\n      } else {\n        out += ` ${ serializeSimpleValue(data[key]) }`;\n      }\n\n      return out;\n    }\n\n    /**\n     * .spec is the type used for the Logging chart Output and ClusterOutput resource spec.\n     * Without this Output and ClusterOutput specs are empty.\n     */\n    if ( type === 'json' || type === '.spec') {\n      try {\n        const parsedData = jsyaml.dump(data[key]);\n\n        if (parsedData) {\n          out += `\\n${ indent(parsedData.trim()) }`;\n        } else {\n          out += ` #${ type }`;\n        }\n\n        return out;\n      } catch (e) {\n      }\n    }\n\n    const subDef = findBy(schemas, 'id', type);\n\n    if ( subDef) {\n      let chunk;\n\n      if (subDef?.resourceFields && !isEmpty(subDef?.resourceFields)) {\n        chunk = createYaml(schemas, type, data[key], processAlwaysAdd, depth + 1, (path ? `${ path }.${ key }` : key), rootType, dataOptions);\n      } else if (data[key]) {\n        // if there are no fields defined on the schema but there are in the data, just format data as yaml and add to output yaml\n        try {\n          const parsed = jsyaml.dump(data[key]);\n\n          chunk = parsed.trim();\n        } catch (e) {\n          console.error(`Error: Unale to parse data for yaml of type: ${ type }`, e); // eslint-disable-line no-console\n        }\n      }\n\n      out += `\\n${ indent(chunk) }`;\n    } else {\n      out += ` #${ type }`;\n    }\n\n    return out;\n  }\n}\n\nfunction comment(lines) {\n  return (lines || '').split('\\n').map((x) => `#${ x.replace(/#/g, '') }`).join('\\n');\n}\n\nfunction indent(lines, depth = 1) {\n  return _indent(lines, depth * INDENT, ' ', /^#/);\n}\n\nfunction serializeSimpleValue(data) {\n  return jsyaml.dump(data).trim();\n}\n\nexport function getBlockDescriptor(value, key) {\n  const header = getBlockHeader(value, key);\n\n  return {\n    header,\n    indentation: getBlockIndentation(header),\n  };\n}\n\n/**\n *\n * @param {string} value the block of text to be parsed\n * @param {*} blockKey the key of the block\n * @returns the key + the block scalar indicators, see https://yaml-multiline.info - Block Scalars\n */\nfunction getBlockHeader(value, blockKey) {\n  const card = `(${ blockKey })[\\\\:][\\\\s|\\\\t]+[\\\\|\\\\>][\\\\d]*[\\\\-\\\\+]?`;\n  const re = new RegExp(card, 'gi');\n\n  const found = value.match(re);\n\n  return found?.[0] || '';\n}\n\n/**\n *\n * @param {string} blockHeader the key + the block scalar indicators\n * @returns the indentation indicator from the block header, see https://yaml-multiline.info - Indentation\n */\nfunction getBlockIndentation(blockHeader) {\n  const blockScalars = blockHeader.substr(blockHeader.indexOf(':') + 1);\n\n  const indentation = blockScalars.match(/\\d+/);\n\n  return indentation?.[0] || '';\n}\n\nexport function typeRef(type, str) {\n  const re = new RegExp(`^${ type }\\\\[(.*)\\\\]$`);\n  const match = str.match(re);\n\n  if ( match ) {\n    return typeMunge(match[1]);\n  }\n}\n\nexport function typeMunge(type) {\n  if ( type === 'integer' ) {\n    return 'int';\n  }\n\n  if ( type === 'io.k8s.apimachinery.pkg.api.resource.Quantity' ) {\n    return 'string';\n  }\n\n  return type;\n}\n\nexport function saferDump(obj) {\n  const out = jsyaml.dump(obj || {});\n\n  if ( out === '{}\\n' ) {\n    return '';\n  }\n\n  return out;\n}\n\n/**\n * Handles newlines indicators in the multiline blocks.\n *\n * this is required since jsyaml.dump doesn't support chomping and scalar style at the moment.\n * see: https://github.com/nodeca/js-yaml/issues/171\n *\n * @param {*} data the multiline block\n * @param {*} options blocks indicators, see: https://yaml-multiline.info\n *\n * - scalarStyle:\n *     one of '|', '>'\n *     default '|'\n * - chomping:\n *     one of: null, '', '-', '+'\n *     default: null\n * @returns the result of jsyaml.dump with the addition of multiline indicators\n */\nexport function dumpBlock(data, options = {}) {\n  const parsed = jsyaml.dump(data);\n\n  let out = parsed;\n\n  const blockFields = Object.keys(data).filter((k) => data[k].includes('\\n'));\n\n  if (blockFields.length) {\n    for (const key of blockFields) {\n      const { header, indentation } = getBlockDescriptor(out, key);\n\n      const scalarStyle = options[key]?.scalarStyle ?? '|';\n      const chomping = options[key]?.chomping ?? '';\n\n      /**\n       * Replace the original block indicators with the ones provided in the options param\n       */\n      out = out.replace(header, `${ key }: ${ scalarStyle }${ chomping }${ indentation }`);\n    }\n  }\n\n  return out;\n}\n"],"mappings":"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"}]}