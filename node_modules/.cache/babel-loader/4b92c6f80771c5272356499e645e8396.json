{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/store/i18n.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/store/i18n.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["merge","IntlMessageFormat","get","en","getProduct","getVendor","DOCS_BASE","loadTranslation","NONE","DEFAULT_LOCALE","intlCache","lastLoaded","state","available","out","default","selected","previous","translations","_defineProperty","getters","selectedLocaleLabel","key","concat","availableLocales","_iterator","_createForOfIteratorHelper","_step","s","n","done","locale","value","err","e","f","t","args","language","cacheKey","formatter","_msg","msg","undefined","_typeof","console","error","includes","format","moreArgs","_objectSpread","vendor","appName","docsBase","exists","current","_default","multiWithFallback","items","arguments","length","map","item","withFallback","fallback","fallbackIsKey","mutations","loadTranslations","_ref","mergeLoadTranslations","_ref2","setSelected","document","querySelector","removeAttribute","setAttribute","addLocale","_ref3","label","hasLocale","find","l","_state$translations$s","push","removeLocale","index","findIndex","splice","actions","init","_ref4","commit","dispatch","rootGetters","loc","load","_ref5","_asyncToGenerator","regeneratorRuntime","mark","_callee","translationsModule","wrap","_callee$","_context","prev","next","sent","abrupt","stop","mergeLoad","_ref6","_ref7","_callee2","module","promise","_callee2$","_context2","Promise","resolve","_ref8","_ref9","_ref10","_ref11","switchTo","_ref12","_callee3","_rootState$$plugin","_rootState$$plugin2","rootState","currentLocale","lastLoad","i18nExt","reload","p","_callee3$","_context3","$plugin","getDynamic","t0","forEach","fn","all","t1","root","toggleNone","_ref13"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/store/i18n.js"],"sourcesContent":["import merge from 'lodash/merge';\nimport IntlMessageFormat from 'intl-messageformat';\nimport { get } from '@shell/utils/object';\nimport en from '@shell/assets/translations/en-us.yaml';\nimport { getProduct, getVendor, DOCS_BASE } from '@shell/config/private-label';\nimport { loadTranslation } from '@shell/utils/dynamic-importer';\n\nconst NONE = 'none';\nconst DEFAULT_LOCALE = 'en-us';\n\n// Formatters can't be serialized into state\nconst intlCache = {};\n\nlet lastLoaded = 0;\n\nexport const state = function() {\n  // const translationContext = require.context('@shell/assets/translations', true, /.*/);\n  // const available = translationContext.keys().map(path => path.replace(/^.*\\/([^\\/]+)\\.[^.]+$/, '$1'));\n  // Using require.context() forces them to all be in the same webpack chunk name... just hardcode the list for now so zh-hans\n  // gets generated as it's own chunk instead of being loaded all the time.\n  const available = [DEFAULT_LOCALE, 'zh-hans'];\n\n  const out = {\n    default:      DEFAULT_LOCALE,\n    selected:     null,\n    previous:     null,\n    available,\n    translations: { [DEFAULT_LOCALE]: en },\n  };\n\n  return out;\n};\n\nexport const getters = {\n  selectedLocaleLabel(state) {\n    const key = `locale.${ state.selected }`;\n\n    if ( state.selected === NONE ) {\n      return `%${ key }%`;\n    } else {\n      return get(state.translations[state.default], key);\n    }\n  },\n\n  availableLocales(state, getters) {\n    const out = {};\n\n    for ( const locale of state.available ) {\n      const key = `locale.${ locale }`;\n\n      if ( state.selected === NONE ) {\n        out[locale] = `%${ key }%`;\n      } else {\n        out[locale] = get(state.translations[state.default], key);\n      }\n    }\n\n    return out;\n  },\n\n  t: (state) => (key, args, language) => {\n    if (state.selected === NONE && !language) {\n      return `%${ key }%`;\n    }\n\n    const locale = language || state.selected;\n    const cacheKey = `${ locale }/${ key }`;\n    let formatter = intlCache[cacheKey];\n\n    if ( !formatter ) {\n      let msg = get(state.translations[locale], key);\n\n      if ( !msg ) {\n        msg = get(state.translations[state.default], key);\n      }\n\n      if ( msg === undefined ) {\n        return undefined;\n      }\n\n      if ( typeof msg === 'object' ) {\n        console.error('Translation for', cacheKey, 'is an object'); // eslint-disable-line no-console\n\n        return undefined;\n      }\n\n      if ( msg?.includes('{')) {\n        formatter = new IntlMessageFormat(msg, locale);\n      } else {\n        formatter = msg;\n      }\n\n      intlCache[cacheKey] = formatter;\n    }\n\n    if ( typeof formatter === 'string' ) {\n      return formatter;\n    } else if ( formatter && formatter.format ) {\n      // Inject things like appName so they're always available in any translation\n      const moreArgs = {\n        vendor:   getVendor(),\n        appName:  getProduct(),\n        docsBase: DOCS_BASE,\n        ...args\n      };\n\n      return formatter.format(moreArgs);\n    } else {\n      return '?';\n    }\n  },\n\n  exists: (state) => (key, language) => {\n    const locale = language || state.selected;\n    const cacheKey = `${ locale }/${ key }`;\n\n    if ( intlCache[cacheKey] ) {\n      return true;\n    }\n\n    let msg = get(state.translations[state.default], key);\n\n    if ( !msg && locale && locale !== NONE ) {\n      msg = get(state.translations[locale], key);\n    }\n\n    if ( msg !== undefined ) {\n      return true;\n    }\n\n    return false;\n  },\n\n  current: (state) => () => {\n    return state.selected;\n  },\n\n  default: (state) => () => {\n    return state.default;\n  },\n\n  multiWithFallback: (state, getters) => (items, key = 'key') => {\n    return items.map((item) => {\n      item[key] = getters.withFallback(item[key], null, item[key]);\n\n      return item;\n    });\n  },\n\n  withFallback: (state, getters) => (key, args, fallback, fallbackIsKey = false) => {\n    // Support withFallback(key,fallback) when no args\n    if ( !fallback && typeof args === 'string' ) {\n      fallback = args;\n      args = {};\n    }\n\n    if ( getters.exists(key) ) {\n      return getters.t(key, args);\n    } else if ( fallbackIsKey ) {\n      return getters.t(fallback, args);\n    } else {\n      return fallback;\n    }\n  },\n\n};\n\nexport const mutations = {\n  loadTranslations(state, { locale, translations }) {\n    state.translations[locale] = translations;\n  },\n\n  mergeLoadTranslations(state, { locale, translations }) {\n    if (!state.translations[locale]) {\n      state.translations[locale] = translations;\n    } else {\n      merge(state.translations[locale], translations);\n    }\n  },\n\n  setSelected(state, locale) {\n    // this will set the lang param on HTML (best place to add this action since all locale changes go through this mutation)\n    if (locale === NONE) {\n      document.querySelector('html').removeAttribute('lang');\n    } else {\n      document.querySelector('html').setAttribute('lang', locale);\n    }\n\n    state.selected = locale;\n  },\n\n  // Add a locale to the list of available locales\n  addLocale(state, { locale, label }) {\n    const hasLocale = state.available.find((l) => l === locale);\n\n    if (!hasLocale) {\n      state.available.push(locale);\n      if (!state.translations[state.default]?.locale?.[locale]) {\n        state.translations[state.default].locale[locale] = label;\n      }\n    }\n  },\n\n  // Remove locale\n  removeLocale(state, locale) {\n    const index = state.available.findIndex((l) => l === locale);\n\n    if (index !== -1) {\n      state.available.splice(index, 1);\n\n      if (state.translations[locale]) {\n        delete state.translations[locale];\n      }\n    }\n  }\n};\n\nexport const actions = {\n  init({\n    state, commit, dispatch, rootGetters\n  }) {\n    let selected = rootGetters['prefs/get']('locale');\n\n    // We might be using a locale that is loaded by a plugin that is no longer loaded\n    const exists = !!state.available.find((loc) => loc === selected);\n\n    if ( !selected || !exists) {\n      selected = state.default;\n    }\n\n    return dispatch('switchTo', selected);\n  },\n\n  async load({ commit }, locale) {\n    const translationsModule = await loadTranslation(locale);\n    const translations = translationsModule.default || translationsModule;\n\n    commit('loadTranslations', { locale, translations });\n\n    return true;\n  },\n\n  async mergeLoad({ commit }, { locale, module }) {\n    const promise = typeof (module) === 'function' ? module() : Promise.resolve(module);\n    const translationsModule = await promise;\n    const translations = translationsModule.default || translationsModule;\n\n    return commit('mergeLoadTranslations', { locale, translations });\n  },\n\n  // Add a locale to the list of available locales\n  addLocale({ commit }, { locale, label }) {\n    commit('addLocale', { locale, label });\n  },\n\n  // Remove a locale from the list of available locales\n  removeLocale({ commit, getters, dispatch }, { locale }) {\n    const current = getters['current']();\n\n    // If we are removing the current locale, switch back to the default locale\n    if (current === locale) {\n      dispatch('switchTo', DEFAULT_LOCALE);\n    }\n\n    commit('removeLocale', locale );\n  },\n\n  async switchTo({\n    state,\n    rootState,\n    commit,\n    dispatch,\n    getters\n  }, locale) {\n    const currentLocale = getters['current']();\n\n    if ( locale === NONE ) {\n      commit('setSelected', locale);\n\n      // Don't remember into cookie\n      return;\n    }\n\n    const lastLoad = rootState.$plugin?.lastLoad;\n    const i18nExt = rootState.$plugin?.getDynamic('l10n', locale);\n    const reload = lastLoaded < lastLoad;\n\n    lastLoaded = lastLoad;\n\n    if ( !state.translations[locale] || reload) {\n      try {\n        await dispatch('load', locale);\n      } catch (e) {\n        if (!i18nExt && locale !== DEFAULT_LOCALE) {\n          // Try to show something... we could not load the locale from the built-in translations\n          // and there are no plugins providing translations\n          commit('setSelected', DEFAULT_LOCALE);\n\n          return;\n        }\n      }\n\n      // Load all of the locales from the plugins\n      if (i18nExt && i18nExt.length) {\n        const p = [];\n\n        i18nExt.forEach((fn) => {\n          p.push(dispatch('mergeLoad', { locale, module: fn }));\n        });\n\n        try {\n          await Promise.all(p);\n        } catch (e) {\n          if (locale !== DEFAULT_LOCALE) {\n            commit('setSelected', DEFAULT_LOCALE);\n\n            return;\n          }\n        }\n      }\n    }\n\n    commit('setSelected', locale);\n\n    // Ony update the preference if the locale changed\n    if (currentLocale !== locale) {\n      dispatch('prefs/set', {\n        key:   'locale',\n        value: state.selected\n      }, { root: true });\n    }\n  },\n\n  toggleNone({ state, dispatch }) {\n    if ( state.selected === NONE ) {\n      return dispatch('switchTo', state.previous || state.default);\n    } else {\n      return dispatch('switchTo', NONE);\n    }\n  }\n};\n"],"mappings":"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"}]}