{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js??ref--17-0!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js??ref--17-1!/Users/nowcom/Documents/nowcom/trident-extension-package/pkg/nowcom/store/index.ts","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/pkg/nowcom/store/index.ts","mtime":1716430386795},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js","mtime":1716430466133}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["vNetService","stripStrings","findTranslatedAddress","PRODUCT_NAME","vnetExtensionFactory","state","items","getters","mutations","setItems","addItem","item","push","updateItem","removeItem","itemName","filter","name","actions","findAll","_ref","_asyncToGenerator","regeneratorRuntime","mark","_callee","commit","_yield$Promise$all","_yield$Promise$all2","networks","networkTranslations","parsedData","wrap","_callee$","_context","prev","next","Promise","all","getNetworks","getNetworkTranslations","sent","_slicedToArray","data","map","translatedAddressData","mainTranslatedAddress","spec","subnets","subnet","address","formattedAddress","concat","prefixLength","longName","prefix_len","translatedAddress","_a","addressTranslation","outside","subnetLength","length","cluster","stop","create","_ref2","_callee2","_callee2$","_context2","createNetwork","abrupt","deleteNetwork","_ref3","_callee3","_callee3$","_context3","deleteSubnet","_ref4","_callee4","_callee4$","_context4","patchSubnet","vnetName","vnetData","reset","_ref5","config","namespace","isClusterStore","specifics"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/pkg/nowcom/store/index.ts"],"sourcesContent":["import { CoreStoreConfig, CoreStoreSpecifics } from '@shell/core/types';\nimport { vNetService } from '../services/api/vnet'\nimport { stripStrings, findTranslatedAddress } from '../services/helpers/utils'\nimport { PRODUCT_NAME } from '../config/constants';\ninterface Subnets {\n    address: string;\n    formattedAddress: string;\n    name: string;\n    longName: string;\n    prefix_len: number;\n    translatedAddress: string;\n}\n\ninterface Vnets {\n    name: string;\n    subnets: Subnets[];\n    subnetLength: number;\n    cluster: string;\n    translatedAddress: string;\n}\n\ninterface vnetVariables {\n    items: Vnets[]\n}\n\nconst vnetExtensionFactory = (): CoreStoreSpecifics => {\n    return {\n        state() {\n            return {\n                items: []\n            }\n        },\n        getters: {\n            items: (state: vnetVariables) => state.items,\n        },\n        mutations: {\n            setItems(state: vnetVariables, items: Vnets[]) {\n                state.items = items\n            },\n            addItem(state: vnetVariables, item: Vnets) {\n                state.items.push(item)\n            },\n            updateItem() {\n                // do nothing\n            },\n            removeItem(state: vnetVariables, itemName: string) {\n                state.items = state.items.filter(item => item.name !== itemName)\n            }\n        },\n        actions: {\n            async findAll({ commit }: any) {\n                const [networks, networkTranslations] = await Promise.all([\n                    vNetService.getNetworks(),\n                    vNetService.getNetworkTranslations()\n                ]);\n        \n                const parsedData = networks.data.items.map((item: any) => {\n        \n                  const translatedAddressData = networkTranslations.data.items;\n                  const mainTranslatedAddress = findTranslatedAddress(translatedAddressData, item.spec.name);\n        \n                  const subnets = item.spec.subnets.map((subnet: any) => {\n                    return {\n                      address:    subnet.address,\n                      formattedAddress:    `${subnet.address}/${subnet.prefixLength}`,\n                      name:       stripStrings(subnet.name),\n                      longName:   subnet.name,\n                      prefix_len: subnet.prefixLength,\n                      translatedAddress: subnet.addressTranslation?.outside\n                    }\n                  });\n        \n                  return {\n                    name:    item.spec.name,\n                    subnets,\n                    subnetLength: subnets.length,\n                    cluster: 'local',\n                    translatedAddress: mainTranslatedAddress?.spec?.outside\n                  }\n                });\n        \n                commit('setItems', parsedData)\n            },\n            async create({ commit }: any, data: any) {\n                return await vNetService.createNetwork(data);\n            },\n            async deleteNetwork({ commit}: any, itemName: string) {\n                return await vNetService.deleteNetwork(itemName);\n            },\n            async deleteSubnet({ commit }: any, data: { vnetName: string, vnetData: any}) {\n                return await vNetService.patchSubnet(data.vnetName, data.vnetData);\n            },\n            reset({ commit }: any) {\n                commit('setItems', [])\n            }\n        }\n    }\n}\n\nconst config: CoreStoreConfig = { namespace: PRODUCT_NAME, isClusterStore: true };\n\nexport default {\n    specifics: vnetExtensionFactory(),\n    config,\n};"],"mappings":";;;;;;;;;;;;AACA,SAASA,WAAW,QAAQ,sBAAsB;AAClD,SAASC,YAAY,EAAEC,qBAAqB,QAAQ,2BAA2B;AAC/E,SAASC,YAAY,QAAQ,qBAAqB;AAsBlD,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAA,EAA4B;EAClD,OAAO;IACHC,KAAK,WAAAA,MAAA;MACD,OAAO;QACHC,KAAK,EAAE;OACV;IACL,CAAC;IACDC,OAAO,EAAE;MACLD,KAAK,EAAE,SAAAA,MAACD,KAAoB;QAAA,OAAKA,KAAK,CAACC,KAAK;MAAA;KAC/C;IACDE,SAAS,EAAE;MACPC,QAAQ,WAAAA,SAACJ,KAAoB,EAAEC,KAAc;QACzCD,KAAK,CAACC,KAAK,GAAGA,KAAK;MACvB,CAAC;MACDI,OAAO,WAAAA,QAACL,KAAoB,EAAEM,IAAW;QACrCN,KAAK,CAACC,KAAK,CAACM,IAAI,CAACD,IAAI,CAAC;MAC1B,CAAC;MACDE,UAAU,WAAAA,WAAA;QACN;MAAA,CACH;MACDC,UAAU,WAAAA,WAACT,KAAoB,EAAEU,QAAgB;QAC7CV,KAAK,CAACC,KAAK,GAAGD,KAAK,CAACC,KAAK,CAACU,MAAM,CAAC,UAAAL,IAAI;UAAA,OAAIA,IAAI,CAACM,IAAI,KAAKF,QAAQ;QAAA,EAAC;MACpE;KACH;IACDG,OAAO,EAAE;MACCC,OAAO,WAAAA,QAAAC,IAAA,EAAgB;QAAA,OAAAC,iBAAA,eAAAC,kBAAA,CAAAC,IAAA,UAAAC,QAAA;UAAA,IAAAC,MAAA,EAAAC,kBAAA,EAAAC,mBAAA,EAAAC,QAAA,EAAAC,mBAAA,EAAAC,UAAA;UAAA,OAAAR,kBAAA,CAAAS,IAAA,UAAAC,SAAAC,QAAA;YAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;cAAA;gBAAbV,MAAM,GAAAL,IAAA,CAANK,MAAM;gBAAAQ,QAAA,CAAAE,IAAA;gBAAA,OAC4BC,OAAO,CAACC,GAAG,CAAC,CACtDrC,WAAW,CAACsC,WAAW,EAAE,EACzBtC,WAAW,CAACuC,sBAAsB,EAAE,CACvC,CAAC;cAAA;gBAAAb,kBAAA,GAAAO,QAAA,CAAAO,IAAA;gBAAAb,mBAAA,GAAAc,cAAA,CAAAf,kBAAA;gBAHKE,QAAQ,GAAAD,mBAAA;gBAAEE,mBAAmB,GAAAF,mBAAA;gBAK9BG,UAAU,GAAGF,QAAQ,CAACc,IAAI,CAACpC,KAAK,CAACqC,GAAG,CAAC,UAAChC,IAAS,EAAI;;kBAEvD,IAAMiC,qBAAqB,GAAGf,mBAAmB,CAACa,IAAI,CAACpC,KAAK;kBAC5D,IAAMuC,qBAAqB,GAAG3C,qBAAqB,CAAC0C,qBAAqB,EAAEjC,IAAI,CAACmC,IAAI,CAAC7B,IAAI,CAAC;kBAE1F,IAAM8B,OAAO,GAAGpC,IAAI,CAACmC,IAAI,CAACC,OAAO,CAACJ,GAAG,CAAC,UAACK,MAAW,EAAI;;oBACpD,OAAO;sBACLC,OAAO,EAAKD,MAAM,CAACC,OAAO;sBAC1BC,gBAAgB,KAAAC,MAAA,CAAQH,MAAM,CAACC,OAAO,OAAAE,MAAA,CAAIH,MAAM,CAACI,YAAY,CAAE;sBAC/DnC,IAAI,EAAQhB,YAAY,CAAC+C,MAAM,CAAC/B,IAAI,CAAC;sBACrCoC,QAAQ,EAAIL,MAAM,CAAC/B,IAAI;sBACvBqC,UAAU,EAAEN,MAAM,CAACI,YAAY;sBAC/BG,iBAAiB,GAAAC,EAAA,GAAER,MAAM,CAACS,kBAAkB,cAAAD,EAAA,uBAAAA,EAAA,CAAEE;qBAC/C;kBACH,CAAC,CAAC;kBAEF,OAAO;oBACLzC,IAAI,EAAKN,IAAI,CAACmC,IAAI,CAAC7B,IAAI;oBACvB8B,OAAO,EAAPA,OAAO;oBACPY,YAAY,EAAEZ,OAAO,CAACa,MAAM;oBAC5BC,OAAO,EAAE,OAAO;oBAChBN,iBAAiB,GAAAC,EAAA,GAAEX,qBAAqB,aAArBA,qBAAqB,uBAArBA,qBAAqB,CAAEC,IAAI,cAAAU,EAAA,uBAAAA,EAAA,CAAEE;mBACjD;gBACH,CAAC,CAAC;gBAEFjC,MAAM,CAAC,UAAU,EAAEK,UAAU,CAAC;cAAA;cAAA;gBAAA,OAAAG,QAAA,CAAA6B,IAAA;YAAA;UAAA,GAAAtC,OAAA;QAAA;MAClC,CAAC;MACKuC,MAAM,WAAAA,OAAAC,KAAA,EAAkBtB,IAAS;QAAA,OAAArB,iBAAA,eAAAC,kBAAA,CAAAC,IAAA,UAAA0C,SAAA;UAAA,IAAAxC,MAAA;UAAA,OAAAH,kBAAA,CAAAS,IAAA,UAAAmC,UAAAC,SAAA;YAAA,kBAAAA,SAAA,CAAAjC,IAAA,GAAAiC,SAAA,CAAAhC,IAAA;cAAA;gBAAxBV,MAAM,GAAAuC,KAAA,CAANvC,MAAM;gBAAA0C,SAAA,CAAAhC,IAAA;gBAAA,OACJnC,WAAW,CAACoE,aAAa,CAAC1B,IAAI,CAAC;cAAA;gBAAA,OAAAyB,SAAA,CAAAE,MAAA,WAAAF,SAAA,CAAA3B,IAAA;cAAA;cAAA;gBAAA,OAAA2B,SAAA,CAAAL,IAAA;YAAA;UAAA,GAAAG,QAAA;QAAA;MAChD,CAAC;MACKK,aAAa,WAAAA,cAAAC,KAAA,EAAiBxD,QAAgB;QAAA,OAAAM,iBAAA,eAAAC,kBAAA,CAAAC,IAAA,UAAAiD,SAAA;UAAA,IAAA/C,MAAA;UAAA,OAAAH,kBAAA,CAAAS,IAAA,UAAA0C,UAAAC,SAAA;YAAA,kBAAAA,SAAA,CAAAxC,IAAA,GAAAwC,SAAA,CAAAvC,IAAA;cAAA;gBAA9BV,MAAM,GAAA8C,KAAA,CAAN9C,MAAM;gBAAAiD,SAAA,CAAAvC,IAAA;gBAAA,OACXnC,WAAW,CAACsE,aAAa,CAACvD,QAAQ,CAAC;cAAA;gBAAA,OAAA2D,SAAA,CAAAL,MAAA,WAAAK,SAAA,CAAAlC,IAAA;cAAA;cAAA;gBAAA,OAAAkC,SAAA,CAAAZ,IAAA;YAAA;UAAA,GAAAU,QAAA;QAAA;MACpD,CAAC;MACKG,YAAY,WAAAA,aAAAC,KAAA,EAAkBlC,IAAwC;QAAA,OAAArB,iBAAA,eAAAC,kBAAA,CAAAC,IAAA,UAAAsD,SAAA;UAAA,IAAApD,MAAA;UAAA,OAAAH,kBAAA,CAAAS,IAAA,UAAA+C,UAAAC,SAAA;YAAA,kBAAAA,SAAA,CAAA7C,IAAA,GAAA6C,SAAA,CAAA5C,IAAA;cAAA;gBAAvDV,MAAM,GAAAmD,KAAA,CAANnD,MAAM;gBAAAsD,SAAA,CAAA5C,IAAA;gBAAA,OACVnC,WAAW,CAACgF,WAAW,CAACtC,IAAI,CAACuC,QAAQ,EAAEvC,IAAI,CAACwC,QAAQ,CAAC;cAAA;gBAAA,OAAAH,SAAA,CAAAV,MAAA,WAAAU,SAAA,CAAAvC,IAAA;cAAA;cAAA;gBAAA,OAAAuC,SAAA,CAAAjB,IAAA;YAAA;UAAA,GAAAe,QAAA;QAAA;MACtE,CAAC;MACDM,KAAK,WAAAA,MAAAC,KAAA,EAAgB;QAAA,IAAb3D,MAAM,GAAA2D,KAAA,CAAN3D,MAAM;QACVA,MAAM,CAAC,UAAU,EAAE,EAAE,CAAC;MAC1B;;GAEP;AACL,CAAC;AAED,IAAM4D,MAAM,GAAoB;EAAEC,SAAS,EAAEnF,YAAY;EAAEoF,cAAc,EAAE;AAAI,CAAE;AAEjF,eAAe;EACXC,SAAS,EAAEpF,oBAAoB,EAAE;EACjCiF,MAAM,EAANA;CACH"}]}