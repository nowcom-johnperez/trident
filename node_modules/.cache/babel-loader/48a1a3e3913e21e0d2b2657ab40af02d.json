{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js??ref--17-0!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js??ref--17-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/core/types-provisioning.ts","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/core/types-provisioning.ts","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js","mtime":1716430466133}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZXhwb3J0IHt9Ow=="},{"version":3,"names":[],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/core/types-provisioning.ts"],"sourcesContent":["/**\n * A function to run as part of the save cluster process\n */\nexport type ClusterSaveHook = (cluster: any) => Promise<any>\n\n/**\n * Register a function to run as part of the save cluster process\n *\n * @param hook function to run\n * @param name unique identifier\n * @param priority higher numbers are lower priority\n * @param fnContext the `this` context from inside the function. If left blank will be a Vue component (where this.value will be the cluster)\n */\nexport type RegisterClusterSaveHook = (hook: ClusterSaveHook, name: string, priority?: number, fnContext?: any) => void;\n\n/**\n * Params used when constructing an instance of the cluster provisioner\n */\nexport interface ClusterProvisionerContext {\n  /**\n   * Dispatch vuex actions\n   */\n  dispatch: any,\n  /**\n   * Get from vuex store\n   */\n  getters: any,\n  /**\n   * Used to make http requests\n   */\n  axios: any,\n  /**\n   * Definition of the extension\n   */\n  $plugin: any,\n  /**\n   * Function to retrieve a localised string\n   */\n  t: (key: string) => string,\n  /**\n   * Are we in the context of creating a cluster\n   */\n  isCreate: boolean\n  /**\n   * Are we in the context of editing an existing cluster\n   */\n  isEdit: boolean\n  /**\n   * Are we viewing an existing cluster\n   */\n  isView: boolean\n}\n\n/**\n * Interface that a custom Cluster Provisioner should implement\n *\n * The majority of these hooks are used in shell/edit/provisioning.cattle.io.cluster/rke2.vue\n */\nexport interface IClusterProvisioner {\n\n  /**\n   * Unique ID of the Cluster Provisioner\n   */\n  id: string;\n\n  /**\n   * Should the UI show a namespace selector when using this provisioner\n   */\n  namespaced?: boolean;\n\n  /* --------------------------------------------------------------------------------------\n   * Define how the cluster provider is presented in a card to the user\n   * --------------------------------------------------------------------------------------- */\n\n  /**\n   * If missing the `cluster.provider.<provider id>` translation will be used\n   *\n   * It is recommended to not hardcode anything that might be localised\n   */\n  label?: string;\n\n  /**\n   * The description will be shown when the user is selecting the type of cluster provider\n   *\n   * This isn't normally used.\n   */\n  description?: string;\n\n  /**\n   * Icon shown when the user is selecting the type of cluster provider\n   */\n  icon?: any;\n\n  /**\n   * Cluster providers are in groups\n   *\n   * `rke2` - default\n   * `kontainer`\n   * `custom2`\n   */\n  group?: string;\n\n  /**\n   * Disable the cluster provider card\n   */\n  disabled?: boolean;\n\n  /**\n   * Custom Dashboard route to navigate to when the cluster provider card is clicked\n   */\n  link?: string;\n\n  /**\n   * Text to show top right on the cluster provider card. For example `Experimental`\n   */\n  tag?: string;\n\n  /* --------------------------------------------------------------------------------------\n   * Custer Details View\n   * --------------------------------------------------------------------------------------- */\n\n  /**\n   * Existing tabs to show or hide in the cluster's detail view\n   *\n   * `plugin.addTab(TabLocation.RESOURCE_DETAIL... ` can be used to add additional tabs to the same view\n   */\n  detailTabs: {\n    /**\n     * RKE2 machine pool tabs\n     */\n    machines: boolean,\n    /**\n     * RKE2 provisioning logs\n     */\n    logs: boolean,\n    /**\n     * RKE2 registration commands\n     */\n    registration: boolean,\n    /**\n     * RKE2 snapshots\n     */\n    snapshots: boolean,\n    /**\n     * Kube resources related to the instance of provisioning.cattle.io.cluster\n     */\n    related: boolean,\n    /**\n     * Kube events associated with the instance of provisioning.cattle.io.cluster\n     */\n    events: boolean,\n    /**\n     * Kube conditions of the provisioning.cattle.io.cluster instance\n     */\n    conditions: boolean\n  };\n\n  /* --------------------------------------------------------------------------------------\n   * Getters / Functions for Managing Machine Configs\n  * --------------------------------------------------------------------------------------- */\n\n  /**\n   * Schema for machine config object. For example rke-machine-config.cattle.io.digitaloceanconfig\n   *\n   * The `id` should be in the format of `rke-machine-config.cattle.io.${ provider id }config`\n   *\n   * The `attributes: { kind: <value> }` should match the last part of the id\n   * The `attributes: { group: <value> }` should match the remaining parts of the id\n   */\n  machineConfigSchema?: { [key: string]: any };\n\n  /**\n   * Override the default method to create a machine config object that will be inserted into a new machine pool\n   *\n   * The machine config will be an instance related to the machine config schema\n   *\n   * This is usually used when the user has selected to add a machine pool when creating/editing the cluster.\n   *\n   * > If the user updates the cluster's namespace after pools have been created.... the machine config's will need updating later on\n   *\n   * @param idx Index of new pool\n   * @param pools Existing machine pools\n   * @param cluster The cluster (`provisioning.cattle.io.cluster`)\n   * @returns Instance of a machine config\n   */\n  createMachinePoolMachineConfig?(idx: number, pools: any[], cluster: any): Promise<{[key: string]: any}>;\n\n  /**\n   * Override the default process to save the machine config's associated with the machine pools\n   *\n   * If machine config's will be the pool's `config` property.\n   *\n   * The pool will have `create: true` if the pool is new or `update: true` if the pool already exists\n   *\n   * For information on proxying HTTP requests from the browser via Rancher https://rancher.github.io/dashboard/code-base-works/machine-drivers#api-calls\n   * These docs also cover how to reference a Cloud Credential and use it's properties in the proxy's request `Authorization` header\n   *\n   * @param pools Machine pools\n   * @param cluster The cluster (`provisioning.cattle.io.cluster`)\n   * @returns Content of async result / promise N/A, only the success / fail state\n   */\n  saveMachinePoolConfigs?(pools: any[], cluster: any): Promise<any>\n\n  /* --------------------------------------------------------------------------------------\n   * Optionally override parts of the cluster save process with\n   * - hooks that run before or after the cluster resource is saved\n   * - the actual save of the cluster resource\n  * --------------------------------------------------------------------------------------- */\n\n  /**\n   * Update the cluster before and or after the cluster is saved\n   *\n   * @param registerBeforeHook\n   *  Call `registerBeforeHook` with a function. The function will be executed before the cluster is saved.\n   *  This allows the model used in the API request to be updated before being sent\n   * @param registerAfterHook\n   *  Call `registerAfterHook` with a function. The function will be executed after the cluster has been saved.\n   *  This allows the model received in response to the API request to be updated\n   * @param cluster The cluster (`provisioning.cattle.io.cluster`)\n   */\n  registerSaveHooks?(registerBeforeHook: RegisterClusterSaveHook, registerAfterHook: RegisterClusterSaveHook, cluster: any): void;\n\n  /**\n   * Optionally override the save of the cluster resource itself.\n   *\n   * https://github.com/rancher/dashboard/blob/master/shell/mixins/create-edit-view/impl.js#L179\n   *\n   * This means a lot of the generic handling of cluster provisioning is not skipped (as per the `provision` method)\n   *\n   * @param cluster The cluster (`provisioning.cattle.io.cluster`)\n   * @returns Rejected promise / exception from `await` if failed to save\n   */\n  saveCluster?(cluster: any): Promise<any>\n\n  /* --------------------------------------------------------------------------------------\n   * Optionally override all of cluster save process\n   * --------------------------------------------------------------------------------------- */\n\n  /**\n   * Optionally override all of the ui's save cluster process (including hooks and saving the resource)\n   *\n   * https://github.com/rancher/dashboard/blob/master/shell/edit/provisioning.cattle.io.cluster/rke2.vue#L1420\n   *\n   * For information on proxying HTTP requests from the browser via Rancher https://rancher.github.io/dashboard/code-base-works/machine-drivers#api-calls\n   * These docs also cover how to reference a Cloud Credential and use it's properties in the proxy's request `Authorization` header\n   *\n   * @param pools Machine pools\n   * @param cluster The cluster (`provisioning.cattle.io.cluster`)\n   * @param isCreate True if the cluster is being created, false if an existing cluster being edited\n   * @returns Array of errors. If there are no errors the array will be empty\n   */\n  provision?(cluster: any, pools: any[]): Promise<any[]>;\n}\n"],"mappings":""}]}