{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/networking.k8s.io.ingress/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/networking.k8s.io.ingress/index.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["allHash","SECRET","SERVICE","INGRESS_CLASS","NameNsDescription","CreateEditView","FormValidation","Tab","CruResource","Labels","Error","Tabbed","get","set","SECRET_TYPES","TYPES","DefaultBackend","Certificates","Rules","IngressClass","name","components","mixins","props","value","type","Object","default","_default","mode","String","fetch","_this","_asyncToGenerator","regeneratorRuntime","mark","_callee","hash","wrap","_callee$","_context","prev","next","ingressClassSchema","$store","getters","secrets","dispatch","services","ingressClasses","Promise","resolve","sent","allServices","allSecrets","allIngressClasses","stop","data","fvFormRuleSets","path","rules","translationKey","fvReportedValidationPaths","computed","fvExtraRules","_this2","backEndOrRules","spec","_spec$rules","defaultBackend","validRules","length","validDefaultBackend","service","t","tabErrors","_this$fvGetPathErrors","_this$fvGetPathErrors2","fvGetPathErrors","rulesPathRules","requestHost","fvGetAndReportPathRules","port","target","defaultBackendPathRules","_this$value","_this$value2","rulesExist","defaultBackendExist","serviceTargets","filterByCurrentResourceNamespace","map","_service$spec$ports","label","metadata","ports","p","firstTabLabel","isView","certificates","filter","secret","_type","TLS","id","slice","indexOf","ingressClass","created","$set","backend","tls","keys","registerBeforeHook","willSave","methods","resources","_this3","resource","namespace","defaultBackendPath","serviceName","serviceNamePath","servicePort","servicePortPath"],"sources":["node_modules/@rancher/shell/edit/networking.k8s.io.ingress/index.vue"],"sourcesContent":["<script>\nimport { allHash } from '@shell/utils/promise';\nimport { SECRET, SERVICE, INGRESS_CLASS } from '@shell/config/types';\nimport NameNsDescription from '@shell/components/form/NameNsDescription';\nimport CreateEditView from '@shell/mixins/create-edit-view';\nimport FormValidation from '@shell/mixins/form-validation';\nimport Tab from '@shell/components/Tabbed/Tab';\nimport CruResource from '@shell/components/CruResource';\nimport Labels from '@shell/components/form/Labels';\nimport Error from '@shell/components/form/Error';\nimport Tabbed from '@shell/components/Tabbed';\nimport { get, set } from '@shell/utils/object';\nimport { SECRET_TYPES as TYPES } from '@shell/config/secret';\nimport DefaultBackend from './DefaultBackend';\nimport Certificates from './Certificates';\nimport Rules from './Rules';\nimport IngressClass from './IngressClass';\n\nexport default {\n  name:       'CRUIngress',\n  components: {\n    IngressClass,\n    Certificates,\n    CruResource,\n    DefaultBackend,\n    Labels,\n    NameNsDescription,\n    Rules,\n    Tab,\n    Tabbed,\n    Error\n  },\n  mixins: [CreateEditView, FormValidation],\n  props:  {\n    value: {\n      type:    Object,\n      default: () => {\n        return {};\n      }\n    },\n    mode: {\n      type:    String,\n      default: 'edit'\n    }\n  },\n  async fetch() {\n    this.ingressClassSchema = this.$store.getters[`cluster/schemaFor`](INGRESS_CLASS);\n    const hash = await allHash({\n      secrets:        this.$store.dispatch('cluster/findAll', { type: SECRET }),\n      services:       this.$store.dispatch('cluster/findAll', { type: SERVICE }),\n      ingressClasses: this.ingressClassSchema ? this.$store.dispatch('cluster/findAll', { type: INGRESS_CLASS }) : Promise.resolve([]),\n    });\n\n    this.allServices = hash.services;\n    this.allSecrets = hash.secrets;\n    this.allIngressClasses = hash.ingressClasses;\n  },\n  data() {\n    return {\n      ingressClassSchema: null,\n      allSecrets:         [],\n      allServices:        [],\n      allIngressClasses:  [],\n      fvFormRuleSets:     [\n        {\n          path: 'metadata.name', rules: ['required', 'hostname'], translationKey: 'nameNsDescription.name.label'\n        },\n        {\n          path: 'spec.rules.host', rules: ['wildcardHostname'], translationKey: 'ingress.rules.requestHost.label'\n        },\n        {\n          path: 'spec.rules.http.paths.path', rules: ['absolutePath'], translationKey: 'ingress.rules.path.label'\n        },\n        {\n          path: 'spec.rules.http.paths.backend.service.port.number', rules: ['required'], translationKey: 'ingress.rules.port.label'\n        },\n        {\n          path: 'spec.rules.http.paths.backend.service.name', rules: ['required'], translationKey: 'ingress.rules.target.label'\n        },\n        { path: 'spec', rules: ['backEndOrRules'] },\n        {\n          path: 'spec.defaultBackend.service.name', rules: ['required'], translationKey: 'ingress.defaultBackend.targetService.label'\n        },\n        {\n          path: 'spec.defaultBackend.service.port.number', rules: ['required', 'requiredInt', 'portNumber'], translationKey: 'ingress.defaultBackend.port.label'\n        },\n        { path: 'spec.tls.hosts', rules: ['required', 'wildcardHostname'] }\n      ],\n      fvReportedValidationPaths: ['spec.rules.http.paths.backend.service.port.number', 'spec.rules.http.paths.path', 'spec.rules.http.paths.backend.service.name']\n    };\n  },\n  computed: {\n    fvExtraRules() {\n      const backEndOrRules = (spec) => {\n        const { rules = [], defaultBackend } = spec;\n\n        const validRules = rules.length > 0;\n        const validDefaultBackend = !!defaultBackend?.service;\n\n        if (!validRules && !validDefaultBackend) {\n          return this.t('ingress.rulesOrBackendSpecified');\n        }\n      };\n\n      return { backEndOrRules };\n    },\n    tabErrors() {\n      return {\n        rules:          this.fvGetPathErrors(['spec.rules.host', 'spec.rules.http.paths.path', 'spec.rules.http.paths.backend.service.port.number', 'spec.rules.http.paths.backend.service.name'])?.length > 0,\n        defaultBackend: this.fvGetPathErrors(['spec.defaultBackend.service.name', 'spec.defaultBackend.service.port.number'])?.length > 0\n      };\n    },\n    rulesPathRules() {\n      return {\n        requestHost: this.fvGetAndReportPathRules('spec.rules.host'),\n        path:        this.fvGetAndReportPathRules('spec.rules.http.paths.path'),\n        port:        this.fvGetAndReportPathRules('spec.rules.http.paths.backend.service.port.number'),\n        target:      this.fvGetAndReportPathRules('spec.rules.http.paths.backend.service.name'),\n\n      };\n    },\n    defaultBackendPathRules() {\n      const rulesExist = (this.value?.spec?.rules || []).length > 0;\n      const defaultBackendExist = !!this.value?.spec?.defaultBackend?.service;\n\n      if (!rulesExist || defaultBackendExist) {\n        return {\n          name: this.fvGetAndReportPathRules('spec.defaultBackend.service.name'),\n          port: this.fvGetAndReportPathRules('spec.defaultBackend.service.port.number'),\n        };\n      }\n\n      return { name: [], port: [] };\n    },\n    serviceTargets() {\n      return this.filterByCurrentResourceNamespace(this.allServices)\n        .map((service) => ({\n          label: service.metadata.name,\n          value: service.metadata.name,\n          ports: service.spec.ports?.map((p) => p.port)\n        }));\n    },\n    firstTabLabel() {\n      return this.isView ? this.t('ingress.rulesAndCertificates.title') : this.t('ingress.rules.title');\n    },\n    certificates() {\n      return this.filterByCurrentResourceNamespace(this.allSecrets.filter((secret) => secret._type === TYPES.TLS)).map((secret) => {\n        const { id } = secret;\n\n        return id.slice(id.indexOf('/') + 1);\n      });\n    },\n    ingressClasses() {\n      return this.allIngressClasses.map((ingressClass) => ({\n        label: ingressClass.metadata.name,\n        value: ingressClass.metadata.name,\n      }));\n    },\n  },\n  created() {\n    this.$set(this.value, 'spec', this.value.spec || {});\n    this.$set(this.value.spec, 'rules', this.value.spec.rules || [{}]);\n    this.$set(this.value.spec, 'backend', this.value.spec.backend || {});\n\n    if (!this.value.spec.tls || Object.keys(this.value.spec.tls[0] || {}).length === 0) {\n      this.$set(this.value.spec, 'tls', []);\n    }\n\n    this.registerBeforeHook(this.willSave, 'willSave');\n  },\n  methods: {\n    filterByCurrentResourceNamespace(resources) {\n      // When configuring an Ingress, the options for Secrets and\n      // default backend Services are limited to the namespace of the Ingress.\n      return resources.filter((resource) => {\n        return resource.metadata.namespace === this.value.metadata.namespace;\n      });\n    },\n    willSave() {\n      const backend = get(this.value.spec, this.value.defaultBackendPath);\n      const serviceName = get(backend, this.value.serviceNamePath);\n      const servicePort = get(backend, this.value.servicePortPath);\n\n      if (backend && (!serviceName || !servicePort)) {\n        const path = this.value.defaultBackendPath;\n\n        set(this.value.spec, path, null);\n      }\n    },\n  }\n};\n</script>\n<template>\n  <CruResource\n    :done-route=\"doneRoute\"\n    :mode=\"mode\"\n    :resource=\"value\"\n    :subtypes=\"[]\"\n    :validation-passed=\"fvFormIsValid\"\n    :errors=\"fvUnreportedValidationErrors\"\n    :description=\"t('ingress.description')\"\n    @error=\"e=>errors = e\"\n    @finish=\"save\"\n    @cancel=\"done\"\n  >\n    <NameNsDescription\n      v-if=\"!isView\"\n      :value=\"value\"\n      :rules=\"{name: fvGetAndReportPathRules('metadata.name'), namespace: fvGetAndReportPathRules('metadata.namespace'), description: []}\"\n      :mode=\"mode\"\n      :register-before-hook=\"registerBeforeHook\"\n    />\n    <Error\n      :value=\"value.spec\"\n      :rules=\"fvGetAndReportPathRules('spec')\"\n      as-banner\n    />\n    <Tabbed :side-tabs=\"true\">\n      <Tab\n        :label=\"firstTabLabel\"\n        name=\"rules\"\n        :weight=\"4\"\n        :error=\"tabErrors.rules\"\n      >\n        <Rules\n          v-model=\"value\"\n          :mode=\"mode\"\n          :service-targets=\"serviceTargets\"\n          :certificates=\"certificates\"\n          :rules=\"rulesPathRules\"\n        />\n      </Tab>\n      <Tab\n        :label=\"t('ingress.defaultBackend.label')\"\n        name=\"default-backend\"\n        :weight=\"3\"\n        :error=\"tabErrors.defaultBackend\"\n      >\n        <DefaultBackend\n          v-model=\"value\"\n          :service-targets=\"serviceTargets\"\n          :mode=\"mode\"\n          :rules=\"defaultBackendPathRules\"\n        />\n      </Tab>\n      <Tab\n        v-if=\"!isView\"\n        :label=\"t('ingress.certificates.label')\"\n        name=\"certificates\"\n        :weight=\"2\"\n      >\n        <Certificates\n          v-model=\"value\"\n          :mode=\"mode\"\n          :certificates=\"certificates\"\n          :rules=\"{host: fvGetAndReportPathRules('spec.tls.hosts')}\"\n        />\n      </Tab>\n      <Tab\n        :label=\"t('ingress.ingressClass.label')\"\n        name=\"ingress-class\"\n        :weight=\"1\"\n      >\n        <IngressClass\n          v-model=\"value\"\n          :mode=\"mode\"\n          :ingress-classes=\"ingressClasses\"\n        />\n      </Tab>\n      <Tab\n        v-if=\"!isView\"\n        name=\"labels-and-annotations\"\n        label-key=\"generic.labelsAndAnnotations\"\n        :weight=\"0\"\n      >\n        <Labels\n          default-container-class=\"labels-and-annotations-container\"\n          :value=\"value\"\n          :mode=\"mode\"\n          :display-side-by-side=\"false\"\n        />\n      </Tab>\n    </Tabbed>\n  </CruResource>\n</template>\n"],"mappings":"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"}]}