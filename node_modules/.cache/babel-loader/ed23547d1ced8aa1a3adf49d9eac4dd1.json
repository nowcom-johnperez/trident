{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/GlobalRoleBindings.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/GlobalRoleBindings.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanMiOwppbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5IjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwpmdW5jdGlvbiBvd25LZXlzKGUsIHIpIHsgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpOyByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgcikuZW51bWVyYWJsZTsgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7IH0gcmV0dXJuIHQ7IH0KZnVuY3Rpb24gX29iamVjdFNwcmVhZChlKSB7IGZvciAodmFyIHIgPSAxOyByIDwgYXJndW1lbnRzLmxlbmd0aDsgcisrKSB7IHZhciB0ID0gbnVsbCAhPSBhcmd1bWVudHNbcl0gPyBhcmd1bWVudHNbcl0gOiB7fTsgciAlIDIgPyBvd25LZXlzKE9iamVjdCh0KSwgITApLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgX2RlZmluZVByb3BlcnR5KGUsIHIsIHRbcl0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModCkpIDogb3duS2V5cyhPYmplY3QodCkpLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCwgcikpOyB9KTsgfSByZXR1cm4gZTsgfQppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29ydC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnZhbHVlcy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcy5qcyI7CmltcG9ydCB7IG1hcEdldHRlcnMgfSBmcm9tICd2dWV4JzsKaW1wb3J0IHsgTUFOQUdFTUVOVCB9IGZyb20gJ0BzaGVsbC9jb25maWcvdHlwZXMnOwppbXBvcnQgeyBDaGVja2JveCB9IGZyb20gJ0Bjb21wb25lbnRzL0Zvcm0vQ2hlY2tib3gnOwppbXBvcnQgeyBfQ1JFQVRFLCBfVklFVyB9IGZyb20gJ0BzaGVsbC9jb25maWcvcXVlcnktcGFyYW1zJzsKaW1wb3J0IExvYWRpbmcgZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvTG9hZGluZyc7CmltcG9ydCB7IGFkZE9iamVjdHMsIGlzQXJyYXkgfSBmcm9tICdAc2hlbGwvdXRpbHMvYXJyYXknOwppbXBvcnQgeyBDYXJkIH0gZnJvbSAnQGNvbXBvbmVudHMvQ2FyZCc7CgovKioKICogRGlzcGxheSBjaGVja2JveGVzIGZvciBlYWNoIGdsb2JhbCByb2xlLCBjaGVja2VkIGZvciBnaXZlbiB1c2VyIG9yIHByaW5jaXBhbCAoZ3JvdXApLiBDYW4gc2F2ZSBjaGFuZ2VzLgogKi8KZXhwb3J0IGRlZmF1bHQgewogIGNvbXBvbmVudHM6IHsKICAgIENoZWNrYm94OiBDaGVja2JveCwKICAgIExvYWRpbmc6IExvYWRpbmcsCiAgICBDYXJkOiBDYXJkCiAgfSwKICBwcm9wczogewogICAgbW9kZTogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6IF9WSUVXCiAgICB9LAogICAgcmVhbE1vZGU6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiBfVklFVwogICAgfSwKICAgIGFzc2lnbk9ubHk6IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZmFsc2UKICAgIH0sCiAgICB0eXBlOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogJ2dyb3VwJywKICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiB2YWxpZGF0b3IodmFsKSB7CiAgICAgICAgcmV0dXJuIHZhbCA9PT0gJ2dyb3VwJyB8fCB2YWwgPT09ICd1c2VyJzsKICAgICAgfQogICAgfSwKICAgIGdyb3VwUHJpbmNpcGFsSWQ6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnJwogICAgfSwKICAgIHVzZXJJZDogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICcnCiAgICB9CiAgfSwKICBmZXRjaDogZnVuY3Rpb24gZmV0Y2goKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgdmFyIHNvcnQ7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAwOwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIF90aGlzLiRzdG9yZS5kaXNwYXRjaCgnbWFuYWdlbWVudC9maW5kQWxsJywgewogICAgICAgICAgICAgIHR5cGU6IE1BTkFHRU1FTlQuR0xPQkFMX1JPTEUKICAgICAgICAgICAgfSk7CiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIF90aGlzLmFsbFJvbGVzID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgaWYgKF90aGlzLnNvcnRlZFJvbGVzKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE1OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIF90aGlzLnNvcnRlZFJvbGVzID0gewogICAgICAgICAgICAgIGdsb2JhbDogW10sCiAgICAgICAgICAgICAgYnVpbHRpbjogW10sCiAgICAgICAgICAgICAgY3VzdG9tOiBbXQogICAgICAgICAgICB9OwogICAgICAgICAgICBfdGhpcy5hbGxSb2xlcy5mb3JFYWNoKGZ1bmN0aW9uIChyb2xlKSB7CiAgICAgICAgICAgICAgdmFyIHJvbGVUeXBlID0gX3RoaXMuZ2V0Um9sZVR5cGUocm9sZSk7CiAgICAgICAgICAgICAgaWYgKHJvbGVUeXBlKSB7CiAgICAgICAgICAgICAgICBfdGhpcy5zb3J0ZWRSb2xlc1tyb2xlVHlwZV0ucHVzaChyb2xlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBzb3J0ID0gZnVuY3Rpb24gc29ydChhLCBiKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGEubmFtZURpc3BsYXkubG9jYWxlQ29tcGFyZShiLm5hbWVEaXNwbGF5KTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgX3RoaXMuc29ydGVkUm9sZXMuYnVpbHRpbiA9IF90aGlzLnNvcnRlZFJvbGVzLmJ1aWx0aW4uc29ydChzb3J0KTsKICAgICAgICAgICAgX3RoaXMuc29ydGVkUm9sZXMuY3VzdG9tID0gX3RoaXMuc29ydGVkUm9sZXMuY3VzdG9tLnNvcnQoc29ydCk7CiAgICAgICAgICAgIGlmIChfdGhpcy5pc0NyZWF0ZSkgewogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNDsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTM7CiAgICAgICAgICAgIHJldHVybiBfdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ21hbmFnZW1lbnQvZmluZEFsbCcsIHsKICAgICAgICAgICAgICB0eXBlOiBNQU5BR0VNRU5ULkdMT0JBTF9ST0xFX0JJTkRJTkcsCiAgICAgICAgICAgICAgb3B0OiB7CiAgICAgICAgICAgICAgICBmb3JjZTogdHJ1ZQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICBfdGhpcy5nbG9iYWxSb2xlQmluZGluZ3MgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgX3RoaXMudXBkYXRlKCk7CiAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE3OwogICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDApOwogICAgICAgICAgY2FzZSAxOToKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzAsIDE3XV0pOwogICAgfSkpKCk7CiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgZ2xvYmFsUGVybWlzc2lvbnM6IFsnYWRtaW4nLCAncmVzdHJpY3RlZC1hZG1pbicsICd1c2VyJywgJ3VzZXItYmFzZSddLAogICAgICBnbG9iYWxSb2xlQmluZGluZ3M6IG51bGwsCiAgICAgIHNvcnRlZFJvbGVzOiBudWxsLAogICAgICBzZWxlY3RlZFJvbGVzOiBbXSwKICAgICAgc3RhcnRpbmdTZWxlY3RlZFJvbGVzOiBbXSwKICAgICAgYXNzaWduT25seVJvbGVzOiB7fSwKICAgICAgcm9sZUNoYW5nZXM6IHt9CiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbWFwR2V0dGVycyh7CiAgICB0OiAnaTE4bi90JwogIH0pKSwge30sIHsKICAgIGlzQ3JlYXRlOiBmdW5jdGlvbiBpc0NyZWF0ZSgpIHsKICAgICAgcmV0dXJuIHRoaXMucmVhbE1vZGUgPT09IF9DUkVBVEU7CiAgICB9LAogICAgaXNVc2VyOiBmdW5jdGlvbiBpc1VzZXIoKSB7CiAgICAgIHJldHVybiB0aGlzLnR5cGUgPT09ICd1c2VyJzsKICAgIH0KICB9KSwKICB3YXRjaDogewogICAgZ3JvdXBQcmluY2lwYWxJZDogZnVuY3Rpb24gZ3JvdXBQcmluY2lwYWxJZChfZ3JvdXBQcmluY2lwYWxJZCwgb2xkR3JvdXBQcmluY2lwYWxJZCkgewogICAgICBpZiAoX2dyb3VwUHJpbmNpcGFsSWQgPT09IG9sZEdyb3VwUHJpbmNpcGFsSWQpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdGhpcy51cGRhdGUoKTsKICAgIH0sCiAgICB1c2VySWQ6IGZ1bmN0aW9uIHVzZXJJZChfdXNlcklkLCBvbGRVc2VySWQpIHsKICAgICAgaWYgKF91c2VySWQgPT09IG9sZFVzZXJJZCkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB0aGlzLnVwZGF0ZSgpOwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgZ2V0Um9sZVR5cGU6IGZ1bmN0aW9uIGdldFJvbGVUeXBlKHJvbGUpIHsKICAgICAgaWYgKHRoaXMuZ2xvYmFsUGVybWlzc2lvbnMuZmluZChmdW5jdGlvbiAocCkgewogICAgICAgIHJldHVybiBwID09PSByb2xlLmlkOwogICAgICB9KSkgewogICAgICAgIHJldHVybiAnZ2xvYmFsJzsKICAgICAgfSBlbHNlIGlmIChyb2xlLmJ1aWx0aW4pIHsKICAgICAgICByZXR1cm4gJ2J1aWx0aW4nOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiAnY3VzdG9tJzsKICAgICAgfQogICAgfSwKICAgIGdldFVuaXF1ZTogZnVuY3Rpb24gZ2V0VW5pcXVlKCkgewogICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgaWRzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykgewogICAgICAgIGlkc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgICAgfQogICAgICByZXR1cm4gIiIuY29uY2F0KHRoaXMuZ3JvdXBQcmluY2lwYWxJZCB8fCB0aGlzLnVzZXJJZCwgIi0iKS5jb25jYXQoaWRzLmpvaW4oJy0nKSk7CiAgICB9LAogICAgc2VsZWN0RGVmYXVsdHM6IGZ1bmN0aW9uIHNlbGVjdERlZmF1bHRzKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKICAgICAgT2JqZWN0LnZhbHVlcyh0aGlzLnNvcnRlZFJvbGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChyb2xlcykgewogICAgICAgIHJvbGVzLmZvckVhY2goZnVuY3Rpb24gKG1hcHBlZFJvbGUpIHsKICAgICAgICAgIGlmIChtYXBwZWRSb2xlLm5ld1VzZXJEZWZhdWx0KSB7CiAgICAgICAgICAgIF90aGlzMi5zZWxlY3RlZFJvbGVzLnB1c2gobWFwcGVkUm9sZS5pZCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSwKICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKICAgICAgdGhpcy5zZWxlY3RlZFJvbGVzID0gW107CiAgICAgIHRoaXMuc3RhcnRpbmdTZWxlY3RlZFJvbGVzID0gW107CiAgICAgIHRoaXMuYXNzaWduT25seVJvbGVzID0ge307CiAgICAgIGlmICh0aGlzLmlzQ3JlYXRlKSB7CiAgICAgICAgLy8gU3RhcnQgd2l0aCB0aGUgbmV3IHVzZXIgZGVmYXVsdCBmb3IgZWFjaCByb2xlCiAgICAgICAgdGhpcy5zZWxlY3REZWZhdWx0cygpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIFN0YXJ0IHdpdGggdGhlIHByaW5jaXBhbC91c2VyJ3Mgcm9sZXMKICAgICAgICBpZiAoIXRoaXMuZ3JvdXBQcmluY2lwYWxJZCAmJiAhdGhpcy51c2VySWQpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgdmFyIGJvdW5kUm9sZXMgPSB0aGlzLmdsb2JhbFJvbGVCaW5kaW5ncy5maWx0ZXIoZnVuY3Rpb24gKGdyYikgewogICAgICAgICAgcmV0dXJuIF90aGlzMy5ncm91cFByaW5jaXBhbElkID8gZ3JiLmdyb3VwUHJpbmNpcGFsTmFtZSA9PT0gX3RoaXMzLmdyb3VwUHJpbmNpcGFsSWQgOiBncmIudXNlck5hbWUgPT09IF90aGlzMy51c2VySWQ7CiAgICAgICAgfSk7CiAgICAgICAgT2JqZWN0LnZhbHVlcyh0aGlzLnNvcnRlZFJvbGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChyb2xlcykgewogICAgICAgICAgcm9sZXMuZm9yRWFjaChmdW5jdGlvbiAobWFwcGVkUm9sZSkgewogICAgICAgICAgICB2YXIgYm91bmRSb2xlID0gYm91bmRSb2xlcy5maW5kKGZ1bmN0aW9uIChib3VuZFJvbGUpIHsKICAgICAgICAgICAgICByZXR1cm4gYm91bmRSb2xlLmdsb2JhbFJvbGVOYW1lID09PSBtYXBwZWRSb2xlLmlkOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgaWYgKCEhYm91bmRSb2xlKSB7CiAgICAgICAgICAgICAgX3RoaXMzLnNlbGVjdGVkUm9sZXMucHVzaChtYXBwZWRSb2xlLmlkKTsKICAgICAgICAgICAgICBfdGhpczMuc3RhcnRpbmdTZWxlY3RlZFJvbGVzLnB1c2goewogICAgICAgICAgICAgICAgcm9sZUlkOiBtYXBwZWRSb2xlLmlkLAogICAgICAgICAgICAgICAgYmluZGluZ0lkOiBib3VuZFJvbGUuaWQKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAvLyBDaGVja2JveGVzIHNob3VsZCBiZSBkaXNhYmxlZCwgYmVzaWRlcyBub3JtYWwgJ21vZGUnIHdheXMsIGlmIHdlJ3JlIG9ubHkgYXNzaWduaW5nIGFuZCBub3QgcmVtb3ZpbmcgZXhpc3Rpbmcgcm9sZXMKICAgICAgICAgICAgICBfdGhpczMuYXNzaWduT25seVJvbGVzW21hcHBlZFJvbGUuaWRdID0gX3RoaXMzLmFzc2lnbk9ubHk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICAgIGlmICh0aGlzLmFzc2lnbk9ubHkgJiYgIXRoaXMuc2VsZWN0ZWRSb2xlcy5sZW5ndGgpIHsKICAgICAgICAgIC8vIElmIHdlJ3JlIGFzc2lnbmluZyByb2xlcyB0byBhIGdyb3VwIHRoYXQgaGFzIG5vIGV4aXN0aW5nIHJvbGVzIHN0YXJ0IHdpdGggdGhlIGRlZmF1bHQgcm9sZXMgc2VsZWN0ZWQKICAgICAgICAgIHRoaXMuc2VsZWN0RGVmYXVsdHMoKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIC8vIEZvcmNlIGFuIHVwZGF0ZSB0byBwdW1wIG91dCB0aGUgaW5pdGlhbCBzdGF0ZQogICAgICB0aGlzLmNoZWNrYm94Q2hhbmdlZCgpOwogICAgfSwKICAgIGNoZWNrYm94Q2hhbmdlZDogZnVuY3Rpb24gY2hlY2tib3hDaGFuZ2VkKCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKICAgICAgdmFyIGFkZFJvbGVzID0gdGhpcy5zZWxlY3RlZFJvbGVzLmZpbHRlcihmdW5jdGlvbiAoc2VsZWN0ZWQpIHsKICAgICAgICByZXR1cm4gIV90aGlzNC5zdGFydGluZ1NlbGVjdGVkUm9sZXMuZmluZChmdW5jdGlvbiAoc3RhcnRpbmdSb2xlKSB7CiAgICAgICAgICByZXR1cm4gc3RhcnRpbmdSb2xlLnJvbGVJZCA9PT0gc2VsZWN0ZWQ7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgICB2YXIgcmVtb3ZlQmluZGluZ3MgPSB0aGlzLnN0YXJ0aW5nU2VsZWN0ZWRSb2xlcy5maWx0ZXIoZnVuY3Rpb24gKHN0YXJ0aW5nUm9sZSkgewogICAgICAgIHJldHVybiAhX3RoaXM0LnNlbGVjdGVkUm9sZXMuZmluZChmdW5jdGlvbiAoc2VsZWN0ZWQpIHsKICAgICAgICAgIHJldHVybiBzZWxlY3RlZCA9PT0gc3RhcnRpbmdSb2xlLnJvbGVJZDsKICAgICAgICB9KTsKICAgICAgfSkubWFwKGZ1bmN0aW9uIChzdGFydGluZ1JvbGUpIHsKICAgICAgICByZXR1cm4gc3RhcnRpbmdSb2xlLmJpbmRpbmdJZDsKICAgICAgfSk7CiAgICAgIHRoaXMucm9sZUNoYW5nZXMgPSB7CiAgICAgICAgaW5pdGlhbFJvbGVzOiB0aGlzLnN0YXJ0aW5nU2VsZWN0ZWRSb2xlcywKICAgICAgICBhZGRSb2xlczogYWRkUm9sZXMsCiAgICAgICAgcmVtb3ZlQmluZGluZ3M6IHJlbW92ZUJpbmRpbmdzCiAgICAgIH07CiAgICAgIHRoaXMuJGVtaXQoJ2hhc0NoYW5nZXMnLCAhIXRoaXMucm9sZUNoYW5nZXMuYWRkUm9sZXMubGVuZ3RoIHx8ICEhdGhpcy5yb2xlQ2hhbmdlcy5yZW1vdmVCaW5kaW5ncy5sZW5ndGgpOwogICAgICB0aGlzLiRlbWl0KCdjYW5Mb2dJbicsIHRoaXMuY29uZmlybVVzZXJDYW5Mb2dJbigpKTsKICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlZCcsIHRoaXMucm9sZUNoYW5nZXMpOwogICAgfSwKICAgIHNhdmVBZGRlZFJvbGVzOiBmdW5jdGlvbiBzYXZlQWRkZWRSb2xlcyh1c2VySWQpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgIHZhciByZXF1ZXN0T3B0aW9ucywgbmV3QmluZGluZ3M7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIHJlcXVlc3RPcHRpb25zID0gewogICAgICAgICAgICAgICAgdHlwZTogTUFOQUdFTUVOVC5HTE9CQUxfUk9MRV9CSU5ESU5HLAogICAgICAgICAgICAgICAgbWV0YWRhdGE6IHsKICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVOYW1lOiAiZ3JiLSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIGlmIChfdGhpczUuZ3JvdXBQcmluY2lwYWxJZCkgewogICAgICAgICAgICAgICAgcmVxdWVzdE9wdGlvbnMuZ3JvdXBQcmluY2lwYWxOYW1lID0gX3RoaXM1Lmdyb3VwUHJpbmNpcGFsSWQ7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJlcXVlc3RPcHRpb25zLnVzZXJOYW1lID0gdXNlcklkIHx8IF90aGlzNS51c2VySWQ7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNDsKICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoX3RoaXM1LnJvbGVDaGFuZ2VzLmFkZFJvbGVzLm1hcChmdW5jdGlvbiAocm9sZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzNS4kc3RvcmUuZGlzcGF0Y2goIm1hbmFnZW1lbnQvY3JlYXRlIiwgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCByZXF1ZXN0T3B0aW9ucyksIHt9LCB7CiAgICAgICAgICAgICAgICAgIGdsb2JhbFJvbGVOYW1lOiByb2xlCiAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgbmV3QmluZGluZ3MgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDc7CiAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKG5ld0JpbmRpbmdzLm1hcChmdW5jdGlvbiAobmV3QmluZGluZykgewogICAgICAgICAgICAgICAgcmV0dXJuIG5ld0JpbmRpbmcuc2F2ZSh7CiAgICAgICAgICAgICAgICAgIHJlZGlyZWN0VW5hdXRob3JpemVkOiBmYWxzZQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBzYXZlUmVtb3ZlZFJvbGVzOiBmdW5jdGlvbiBzYXZlUmVtb3ZlZFJvbGVzKCkgewogICAgICB2YXIgX3RoaXM2ID0gdGhpczsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKSB7CiAgICAgICAgdmFyIGV4aXN0aW5nQmluZGluZ3M7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoX3RoaXM2LnJvbGVDaGFuZ2VzLnJlbW92ZUJpbmRpbmdzLm1hcChmdW5jdGlvbiAoYmluZGluZ0lkKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM2LiRzdG9yZS5kaXNwYXRjaCgnbWFuYWdlbWVudC9maW5kJywgewogICAgICAgICAgICAgICAgICB0eXBlOiBNQU5BR0VNRU5ULkdMT0JBTF9ST0xFX0JJTkRJTkcsCiAgICAgICAgICAgICAgICAgIGlkOiBiaW5kaW5nSWQKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGV4aXN0aW5nQmluZGluZ3MgPSBfY29udGV4dDMuc2VudDsKICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDU7CiAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKGV4aXN0aW5nQmluZGluZ3MubWFwKGZ1bmN0aW9uIChleGlzdGluZ0JpbmRpbmcpIHsKICAgICAgICAgICAgICAgIHJldHVybiBleGlzdGluZ0JpbmRpbmcucmVtb3ZlKHsKICAgICAgICAgICAgICAgICAgcmVkaXJlY3RVbmF1dGhvcml6ZWQ6IGZhbHNlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMyk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8qKgogICAgICogdXNlcklkIGlzIG9wdGlvbmFsLCB1c2VkIHdoZW4gYSB1c2VyIGhhcyBqdXN0IGJlZW4gY3JlYXRlZAogICAgICovCiAgICBzYXZlOiBmdW5jdGlvbiBzYXZlKHVzZXJJZCkgewogICAgICB2YXIgX3RoaXM3ID0gdGhpczsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gX3RoaXM3LnNhdmVBZGRlZFJvbGVzKHVzZXJJZCk7CiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDQ7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzNy5zYXZlUmVtb3ZlZFJvbGVzKCk7CiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDY7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzNy4kc3RvcmUuZGlzcGF0Y2goJ21hbmFnZW1lbnQvZmluZEFsbCcsIHsKICAgICAgICAgICAgICAgIHR5cGU6IE1BTkFHRU1FTlQuR0xPQkFMX1JPTEVfQklORElORywKICAgICAgICAgICAgICAgIG9wdDogewogICAgICAgICAgICAgICAgICBmb3JjZTogdHJ1ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGZvcmNlOiB0cnVlCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNCk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIGNvbmZpcm1Vc2VyQ2FuTG9nSW46IGZ1bmN0aW9uIGNvbmZpcm1Vc2VyQ2FuTG9nSW4oKSB7CiAgICAgIHZhciBfdGhpczggPSB0aGlzOwogICAgICB2YXIgYWxsUm9sZXNSdWxlcyA9IFtdOwogICAgICBPYmplY3QudmFsdWVzKHRoaXMuc29ydGVkUm9sZXMpLmZvckVhY2goZnVuY3Rpb24gKHJvbGVzKSB7CiAgICAgICAgcm9sZXMuZm9yRWFjaChmdW5jdGlvbiAobWFwcGVkUm9sZSkgewogICAgICAgICAgaWYgKF90aGlzOC5zZWxlY3RlZFJvbGVzLmluY2x1ZGVzKG1hcHBlZFJvbGUuaWQpKSB7CiAgICAgICAgICAgIGFkZE9iamVjdHMoYWxsUm9sZXNSdWxlcywgbWFwcGVkUm9sZS5ydWxlcyB8fCBbXSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgICByZXR1cm4gYWxsUm9sZXNSdWxlcy5zb21lKGZ1bmN0aW9uIChydWxlKSB7CiAgICAgICAgcmV0dXJuIF90aGlzOC5pc1J1bGVWYWxpZChydWxlKTsKICAgICAgfSk7CiAgICB9LAogICAgaXNSdWxlVmFsaWQ6IGZ1bmN0aW9uIGlzUnVsZVZhbGlkKHJ1bGUpIHsKICAgICAgLy8gQnJvdWdodCBvdmVyIGZyb20gRW1iZXIKCiAgICAgIGlmICgocnVsZS5yZXNvdXJjZXMgfHwgW10pLnNvbWUocmVzb3VyY2VWYWxpZGF0b3IpICYmIChydWxlLmFwaUdyb3VwcyB8fCBbXSkuc29tZShhcGlHcm91cFZhbGlkYXRvcikgJiYgdmVyYnNWYWxpZGF0b3IocnVsZS52ZXJicyB8fCBbXSkpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgICByZXR1cm4gZmFsc2U7CiAgICAgIGZ1bmN0aW9uIHJlc291cmNlVmFsaWRhdG9yKHJlc291cmNlKSB7CiAgICAgICAgdmFyIHJlc291cmNlc1JlcXVpcmVkRm9yTG9naW4gPSBbJyonLCAncHJlZmVyZW5jZXMnLCAnc2V0dGluZ3MnLCAnZmVhdHVyZXMnXTsKCiAgICAgICAgLy8gY29uc29sZS5sb2coYHJlc291cmNlVmFsaWRhdG9yIHN0YXR1czogYCwgcmVzb3VyY2VzUmVxdWlyZWRGb3JMb2dpbi5pbmNsdWRlcyhyZXNvdXJjZSksIHJlc291cmNlKTsKICAgICAgICByZXR1cm4gcmVzb3VyY2VzUmVxdWlyZWRGb3JMb2dpbi5pbmNsdWRlcyhyZXNvdXJjZSk7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gYXBpR3JvdXBWYWxpZGF0b3IoYXBpR3JvdXApIHsKICAgICAgICB2YXIgYXBpR3JvdXBzUmVxdWlyZWRGb3JMb2dpbiA9IFsnKicsICdtYW5hZ2VtZW50LmNhdHRsZS5pbyddOwoKICAgICAgICAvLyBjb25zb2xlLmxvZyhgYXBpR3JvdXBzUmVxdWlyZWRGb3JMb2dpbiBzdGF0dXM6IGAsIGFwaUdyb3Vwc1JlcXVpcmVkRm9yTG9naW4uaW5jbHVkZXMoYXBpR3JvdXApLCBhcGlHcm91cCk7CiAgICAgICAgcmV0dXJuIGFwaUdyb3Vwc1JlcXVpcmVkRm9yTG9naW4uaW5jbHVkZXMoYXBpR3JvdXApOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHZlcmJzVmFsaWRhdG9yKHZlcmJzKSB7CiAgICAgICAgdmFyIHJlc3RyaWN0ZWRUYXJnZXQgPSBbJ2dldCcsICdsaXN0JywgJ3dhdGNoJ107CiAgICAgICAgdmFyIHZlcmJzUmVxdWlyZWRGb3JMb2dpbiA9IFsnKiddLmNvbmNhdChyZXN0cmljdGVkVGFyZ2V0KTsKICAgICAgICBpZiAoaXNBcnJheSh2ZXJicykgJiYgdmVyYnMubGVuZ3RoID4gMSkgewogICAgICAgICAgLy8gY29uc29sZS5sb2coYHZlcmJzUmVxdWlyZWRGb3JMb2dpbiBzdGF0dXMgMTogYCwgcmVzdHJpY3RlZFRhcmdldC5ldmVyeShydCA9PiB2ZXJicy5pbmNsdWRlcyhydCkpLCB2ZXJicyk7CiAgICAgICAgICByZXR1cm4gcmVzdHJpY3RlZFRhcmdldC5ldmVyeShmdW5jdGlvbiAocnQpIHsKICAgICAgICAgICAgcmV0dXJuIHZlcmJzLmluY2x1ZGVzKHJ0KTsKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgLy8gY29uc29sZS5sb2coYHZlcmJzUmVxdWlyZWRGb3JMb2dpbiBzdGF0dXMgMjogYCwgdmVyYnNSZXF1aXJlZEZvckxvZ2luLmluY2x1ZGVzKHZlcmJzWzBdKSwgdmVyYnNSZXF1aXJlZEZvckxvZ2luLCB2ZXJicyk7CiAgICAgICAgcmV0dXJuIHZlcmJzUmVxdWlyZWRGb3JMb2dpbi5pbmNsdWRlcyh2ZXJic1swXSk7CiAgICAgIH0KICAgIH0KICB9Cn07"},{"version":3,"names":["mapGetters","MANAGEMENT","Checkbox","_CREATE","_VIEW","Loading","addObjects","isArray","Card","components","props","mode","type","String","default","realMode","assignOnly","Boolean","validator","val","groupPrincipalId","userId","fetch","_this","_asyncToGenerator","regeneratorRuntime","mark","_callee","sort","wrap","_callee$","_context","prev","next","$store","dispatch","GLOBAL_ROLE","allRoles","sent","sortedRoles","global","builtin","custom","forEach","role","roleType","getRoleType","push","a","b","nameDisplay","localeCompare","isCreate","GLOBAL_ROLE_BINDING","opt","force","globalRoleBindings","update","t0","stop","data","globalPermissions","selectedRoles","startingSelectedRoles","assignOnlyRoles","roleChanges","computed","_objectSpread","t","isUser","watch","oldGroupPrincipalId","oldUserId","methods","find","p","id","getUnique","_len","arguments","length","ids","Array","_key","concat","join","selectDefaults","_this2","Object","values","roles","mappedRole","newUserDefault","_this3","boundRoles","filter","grb","groupPrincipalName","userName","boundRole","globalRoleName","roleId","bindingId","checkboxChanged","_this4","addRoles","selected","startingRole","removeBindings","map","initialRoles","$emit","confirmUserCanLogIn","saveAddedRoles","_this5","_callee2","requestOptions","newBindings","_callee2$","_context2","metadata","generateName","Promise","all","newBinding","save","redirectUnauthorized","saveRemovedRoles","_this6","_callee3","existingBindings","_callee3$","_context3","existingBinding","remove","_this7","_callee4","_callee4$","_context4","_this8","allRolesRules","includes","rules","some","rule","isRuleValid","resources","resourceValidator","apiGroups","apiGroupValidator","verbsValidator","verbs","resource","resourcesRequiredForLogin","apiGroup","apiGroupsRequiredForLogin","restrictedTarget","verbsRequiredForLogin","every","rt"],"sources":["node_modules/@rancher/shell/components/GlobalRoleBindings.vue"],"sourcesContent":["\n<script>\nimport { mapGetters } from 'vuex';\nimport { MANAGEMENT } from '@shell/config/types';\nimport { Checkbox } from '@components/Form/Checkbox';\nimport { _CREATE, _VIEW } from '@shell/config/query-params';\nimport Loading from '@shell/components/Loading';\nimport { addObjects, isArray } from '@shell/utils/array';\nimport { Card } from '@components/Card';\n\n/**\n * Display checkboxes for each global role, checked for given user or principal (group). Can save changes.\n */\nexport default {\n  components: {\n    Checkbox,\n    Loading,\n    Card\n  },\n  props: {\n    mode: {\n      type:    String,\n      default: _VIEW,\n    },\n    realMode: {\n      type:    String,\n      default: _VIEW,\n    },\n    assignOnly: {\n      type:    Boolean,\n      default: false,\n    },\n    type: {\n      type:    String,\n      default: 'group',\n      validator(val) {\n        return val === 'group' || val === 'user';\n      }\n    },\n    groupPrincipalId: {\n      type:    String,\n      default: ''\n    },\n    userId: {\n      type:    String,\n      default: ''\n    }\n  },\n  async fetch() {\n    try {\n      this.allRoles = await this.$store.dispatch('management/findAll', { type: MANAGEMENT.GLOBAL_ROLE });\n      if (!this.sortedRoles) {\n        this.sortedRoles = {\n          global:  [],\n          builtin: [],\n          custom:  []\n        };\n\n        this.allRoles.forEach((role) => {\n          const roleType = this.getRoleType(role);\n\n          if (roleType) {\n            this.sortedRoles[roleType].push(role);\n          }\n        });\n\n        const sort = (a, b) => a.nameDisplay.localeCompare(b.nameDisplay);\n\n        this.sortedRoles.builtin = this.sortedRoles.builtin.sort(sort);\n        this.sortedRoles.custom = this.sortedRoles.custom.sort(sort);\n\n        if (!this.isCreate) {\n          this.globalRoleBindings = await this.$store.dispatch('management/findAll', { type: MANAGEMENT.GLOBAL_ROLE_BINDING, opt: { force: true } });\n        }\n\n        this.update();\n      }\n    } catch (e) { }\n  },\n  data() {\n    return {\n      globalPermissions: [\n        'admin',\n        'restricted-admin',\n        'user',\n        'user-base',\n      ],\n      globalRoleBindings:    null,\n      sortedRoles:           null,\n      selectedRoles:         [],\n      startingSelectedRoles: [],\n      assignOnlyRoles:       {},\n      roleChanges:           {}\n    };\n  },\n  computed: {\n    ...mapGetters({ t: 'i18n/t' }),\n\n    isCreate() {\n      return this.realMode === _CREATE;\n    },\n\n    isUser() {\n      return this.type === 'user';\n    }\n  },\n  watch: {\n    groupPrincipalId(groupPrincipalId, oldGroupPrincipalId) {\n      if (groupPrincipalId === oldGroupPrincipalId) {\n        return;\n      }\n      this.update();\n    },\n    userId(userId, oldUserId) {\n      if (userId === oldUserId) {\n        return;\n      }\n      this.update();\n    }\n  },\n  methods: {\n    getRoleType(role) {\n      if (this.globalPermissions.find((p) => p === role.id)) {\n        return 'global';\n      } else if (role.builtin) {\n        return 'builtin';\n      } else {\n        return 'custom';\n      }\n    },\n    getUnique(...ids) {\n      return `${ this.groupPrincipalId || this.userId }-${ ids.join('-') }`;\n    },\n    selectDefaults() {\n      Object.values(this.sortedRoles).forEach((roles) => {\n        roles.forEach((mappedRole) => {\n          if (mappedRole.newUserDefault) {\n            this.selectedRoles.push(mappedRole.id);\n          }\n        });\n      });\n    },\n    update() {\n      this.selectedRoles = [];\n      this.startingSelectedRoles = [];\n      this.assignOnlyRoles = {};\n      if (this.isCreate) {\n        // Start with the new user default for each role\n        this.selectDefaults();\n      } else {\n        // Start with the principal/user's roles\n        if (!this.groupPrincipalId && !this.userId) {\n          return;\n        }\n\n        const boundRoles = this.globalRoleBindings.filter((grb) => {\n          return this.groupPrincipalId ? grb.groupPrincipalName === this.groupPrincipalId : grb.userName === this.userId;\n        });\n\n        Object.values(this.sortedRoles).forEach((roles) => {\n          roles.forEach((mappedRole) => {\n            const boundRole = boundRoles.find((boundRole) => boundRole.globalRoleName === mappedRole.id);\n\n            if (!!boundRole) {\n              this.selectedRoles.push(mappedRole.id);\n              this.startingSelectedRoles.push({\n                roleId:    mappedRole.id,\n                bindingId: boundRole.id\n              });\n              // Checkboxes should be disabled, besides normal 'mode' ways, if we're only assigning and not removing existing roles\n              this.assignOnlyRoles[mappedRole.id] = this.assignOnly;\n            }\n          });\n        });\n\n        if (this.assignOnly && !this.selectedRoles.length) {\n          // If we're assigning roles to a group that has no existing roles start with the default roles selected\n          this.selectDefaults();\n        }\n      }\n\n      // Force an update to pump out the initial state\n      this.checkboxChanged();\n    },\n    checkboxChanged() {\n      const addRoles = this.selectedRoles\n        .filter((selected) => !this.startingSelectedRoles.find((startingRole) => startingRole.roleId === selected));\n      const removeBindings = this.startingSelectedRoles\n        .filter((startingRole) => !this.selectedRoles.find((selected) => selected === startingRole.roleId))\n        .map((startingRole) => startingRole.bindingId);\n\n      this.roleChanges = {\n        initialRoles: this.startingSelectedRoles,\n        addRoles,\n        removeBindings\n      };\n\n      this.$emit('hasChanges', !!this.roleChanges.addRoles.length || !!this.roleChanges.removeBindings.length);\n      this.$emit('canLogIn', this.confirmUserCanLogIn());\n      this.$emit('changed', this.roleChanges);\n    },\n    async saveAddedRoles(userId) {\n      const requestOptions = {\n        type:     MANAGEMENT.GLOBAL_ROLE_BINDING,\n        metadata: { generateName: `grb-` },\n      };\n\n      if (this.groupPrincipalId) {\n        requestOptions.groupPrincipalName = this.groupPrincipalId;\n      } else {\n        requestOptions.userName = userId || this.userId;\n      }\n      const newBindings = await Promise.all(this.roleChanges.addRoles.map((role) => this.$store.dispatch(`management/create`, {\n        ...requestOptions,\n        globalRoleName: role,\n      })));\n\n      // Save all changes (and ensure user isn't logged out if they don't have permissions to make a change)\n      await Promise.all(newBindings.map((newBinding) => newBinding.save({ redirectUnauthorized: false })));\n    },\n    async saveRemovedRoles() {\n      const existingBindings = await Promise.all(this.roleChanges.removeBindings.map((bindingId) => this.$store.dispatch('management/find', {\n        type: MANAGEMENT.GLOBAL_ROLE_BINDING,\n        id:   bindingId\n      })));\n\n      // Save all changes (and ensure user isn't logged out if they don't have permissions to make a change)\n      await Promise.all(existingBindings.map((existingBinding) => existingBinding.remove({ redirectUnauthorized: false })));\n    },\n    /**\n     * userId is optional, used when a user has just been created\n     */\n    async save(userId) {\n      // Ensure roles are added before removed (in case by removing one user is unable to add another)\n      await this.saveAddedRoles(userId);\n      await this.saveRemovedRoles();\n      await this.$store.dispatch('management/findAll', {\n        type: MANAGEMENT.GLOBAL_ROLE_BINDING,\n        opt:  { force: true }\n      }, { force: true });\n    },\n    confirmUserCanLogIn() {\n      const allRolesRules = [];\n\n      Object.values(this.sortedRoles).forEach((roles) => {\n        roles.forEach((mappedRole) => {\n          if (this.selectedRoles.includes(mappedRole.id)) {\n            addObjects(allRolesRules, mappedRole.rules || []);\n          }\n        });\n      });\n\n      return allRolesRules.some((rule) => this.isRuleValid(rule));\n    },\n    isRuleValid(rule) {\n      // Brought over from Ember\n\n      if (( rule.resources || [] ).some(resourceValidator) && ( rule.apiGroups || [] ).some(apiGroupValidator) && verbsValidator(( rule.verbs || [] ))) {\n        return true;\n      }\n\n      return false;\n\n      function resourceValidator(resource) {\n        const resourcesRequiredForLogin = ['*', 'preferences', 'settings', 'features'];\n\n        // console.log(`resourceValidator status: `, resourcesRequiredForLogin.includes(resource), resource);\n        return resourcesRequiredForLogin.includes(resource);\n      }\n\n      function apiGroupValidator(apiGroup) {\n        const apiGroupsRequiredForLogin = ['*', 'management.cattle.io'];\n\n        // console.log(`apiGroupsRequiredForLogin status: `, apiGroupsRequiredForLogin.includes(apiGroup), apiGroup);\n        return apiGroupsRequiredForLogin.includes(apiGroup);\n      }\n\n      function verbsValidator(verbs) {\n        const restrictedTarget = ['get', 'list', 'watch'];\n        const verbsRequiredForLogin = ['*', ...restrictedTarget];\n\n        if (isArray(verbs) && verbs.length > 1) {\n          // console.log(`verbsRequiredForLogin status 1: `, restrictedTarget.every(rt => verbs.includes(rt)), verbs);\n          return restrictedTarget.every((rt) => verbs.includes(rt));\n        }\n\n        // console.log(`verbsRequiredForLogin status 2: `, verbsRequiredForLogin.includes(verbs[0]), verbsRequiredForLogin, verbs);\n        return verbsRequiredForLogin.includes(verbs[0]);\n      }\n    },\n\n  }\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n\n  <div v-else>\n    <form v-if=\"selectedRoles\">\n      <div\n        v-for=\"(sortedRole, roleType) in sortedRoles\"\n        :key=\"getUnique(roleType)\"\n        class=\"role-group mb-10\"\n      >\n        <Card\n          v-if=\"Object.keys(sortedRole).length\"\n          :show-highlight-border=\"false\"\n          :show-actions=\"false\"\n        >\n          <template v-slot:title>\n            <div class=\"type-title\">\n              <h3>{{ t(`rbac.globalRoles.types.${roleType}.label`) }}</h3>\n              <div class=\"type-description\">\n                {{ t(`rbac.globalRoles.types.${roleType}.description`, { isUser }) }}\n              </div>\n            </div>\n          </template>\n          <template v-slot:body>\n            <div\n              class=\"checkbox-section\"\n              :class=\"'checkbox-section--' + roleType\"\n            >\n              <div\n                v-for=\"role in sortedRoles[roleType]\"\n                :key=\"getUnique(roleType, role.id)\"\n                class=\"checkbox mb-10 mr-10\"\n              >\n                <Checkbox\n                  :key=\"getUnique(roleType, role.id, 'checkbox')\"\n                  v-model=\"selectedRoles\"\n                  :value-when-true=\"role.id\"\n                  :disabled=\"!!assignOnlyRoles[role.id]\"\n                  :label=\"role.nameDisplay\"\n                  :description=\"role.descriptionDisplay\"\n                  :mode=\"mode\"\n                  @input=\"checkboxChanged\"\n                >\n                  <template #label>\n                    <div class=\"checkbox-label-slot\">\n                      <span class=\"checkbox-label\">{{ role.nameDisplay }}</span>\n                      <i\n                        v-if=\"!!assignOnlyRoles[role.id]\"\n                        v-clean-tooltip=\"t('rbac.globalRoles.assignOnlyRole')\"\n                        class=\"checkbox-info icon icon-info icon-lg\"\n                      />\n                    </div>\n                  </template>\n                </Checkbox>\n              </div>\n            </div>\n          </template>\n        </Card>\n      </div>\n    </form>\n  </div>\n</template>\n<style lang='scss'>\n.role-group {\n  .card-container {\n    margin: 0;\n  }\n}\n</style>\n<style lang='scss' scoped>\n  $detailSize: 11px;\n  .role-group {\n    .type-title {\n      display: flex;\n      flex-direction: column;\n      .type-description {\n        font-size: $detailSize;\n      }\n    }\n\n    .checkbox-section {\n      display: grid;\n\n      grid-template-columns: repeat(3, 1fr);\n\n      &--global {\n        grid-template-columns: 100%;\n      }\n\n      .checkbox-label {\n        &-slot {\n          display: inline-flex;\n          align-items: center;\n        }\n        color: var(--body-text);\n        margin: 0;\n      }\n    }\n  }\n</style>\n"],"mappings":"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"}]}