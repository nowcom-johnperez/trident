{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/logging-flow/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/edit/logging-flow/index.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["Banner","CreateEditView","CruResource","Loading","NameNsDescription","Tabbed","Tab","LOGGING","NAMESPACE","NODE","POD","SCHEMA","jsyaml","createYaml","YamlEditor","EDITOR_MODES","allHash","isArray","uniq","matchRuleIsPopulated","LabeledSelect","clone","set","isEmpty","ArrayListGrouped","exceptionToErrorsArray","Match","emptyMatch","include","arguments","length","undefined","rule","select","exclude","labels","hosts","container_names","components","mixins","fetch","_this","_asyncToGenerator","regeneratorRuntime","mark","_callee","hasAccessToClusterOutputs","hasAccessToOutputs","hasAccessToNamespaces","hasAccessToNodes","hasAccessToPods","isFlow","getAllOrDefault","hash","_i","_Object$keys","k","wrap","_callee$","_context","prev","next","$store","getters","CLUSTER_OUTPUT","OUTPUT","value","type","FLOW","hasAccess","dispatch","Promise","resolve","allOutputs","allClusterOutputs","allNamespaces","allNodes","allPods","sent","Object","keys","stop","data","_this$value$spec$filt","_this$value$spec$matc","schemas","filtersYaml","spec","filters","dump","SPOOFED","FILTERS","substring","indexOf","replaceAll","matches","formSupported","id","canCustomEdit","match","_iterator","_createForOfIteratorHelper","_step","s","n","done","push","_objectSpread","err","e","f","globalOutputRefs","map","ref","label","localOutputRefs","initialFiltersYaml","computed","outputChoices","_this2","filter","output","namespace","x","metadata","name","clusterOutputChoices","clusterOutput","namespaceChoices","out","nameDisplay","nodeChoices","node","containerChoices","_iterator2","_step2","_pod$spec","pod","_iterator3","containers","_step3","c","sort","watch","deep","handler","copy","filterJson","load","errors","created","isCreate","CLUSTER_FLOW","registerBeforeHook","willSave","methods","addMatch","removeMatch","idx","splice","updateMatch","neu","$set","tabChanged","_ref","_this3","tab","$nextTick","$refs","yaml","refresh","focus","isMatchEmpty","every","allValuesAreEmpty","o","values","$delete","onYamlEditorReady","cm","getMode","fold","execCommand","isTag","options","option","find"],"sources":["node_modules/@rancher/shell/edit/logging-flow/index.vue"],"sourcesContent":["<script>\nimport { Banner } from '@components/Banner';\nimport CreateEditView from '@shell/mixins/create-edit-view';\nimport CruResource from '@shell/components/CruResource';\nimport Loading from '@shell/components/Loading';\nimport NameNsDescription from '@shell/components/form/NameNsDescription';\nimport Tabbed from '@shell/components/Tabbed';\nimport Tab from '@shell/components/Tabbed/Tab';\nimport {\n  LOGGING, NAMESPACE, NODE, POD, SCHEMA\n} from '@shell/config/types';\nimport jsyaml from 'js-yaml';\nimport { createYaml } from '@shell/utils/create-yaml';\nimport YamlEditor, { EDITOR_MODES } from '@shell/components/YamlEditor';\nimport { allHash } from '@shell/utils/promise';\nimport { isArray, uniq } from '@shell/utils/array';\nimport { matchRuleIsPopulated } from '@shell/models/logging.banzaicloud.io.flow';\nimport LabeledSelect from '@shell/components/form/LabeledSelect';\nimport { clone, set } from '@shell/utils/object';\nimport isEmpty from 'lodash/isEmpty';\nimport ArrayListGrouped from '@shell/components/form/ArrayListGrouped';\nimport { exceptionToErrorsArray } from '@shell/utils/error';\nimport Match from './Match';\n\nfunction emptyMatch(include = true) {\n  const rule = {\n    select:          !!include,\n    exclude:         !include,\n    labels:          {},\n    hosts:           [],\n    container_names: []\n  };\n\n  return rule;\n}\n\nexport default {\n  components: {\n    Banner,\n    CruResource,\n    LabeledSelect,\n    Loading,\n    NameNsDescription,\n    Tab,\n    Tabbed,\n    YamlEditor,\n    Match,\n    ArrayListGrouped\n  },\n\n  mixins: [CreateEditView],\n\n  async fetch() {\n    const hasAccessToClusterOutputs = this.$store.getters[`cluster/schemaFor`](LOGGING.CLUSTER_OUTPUT);\n    const hasAccessToOutputs = this.$store.getters[`cluster/schemaFor`](LOGGING.OUTPUT);\n    const hasAccessToNamespaces = this.$store.getters[`cluster/schemaFor`](NAMESPACE);\n    const hasAccessToNodes = this.$store.getters[`cluster/schemaFor`](NODE);\n    const hasAccessToPods = this.$store.getters[`cluster/schemaFor`](POD);\n    const isFlow = this.value.type === LOGGING.FLOW;\n\n    const getAllOrDefault = (type, hasAccess) => {\n      return hasAccess ? this.$store.dispatch('cluster/findAll', { type }) : Promise.resolve([]);\n    };\n\n    const hash = await allHash({\n      allOutputs:        getAllOrDefault(LOGGING.OUTPUT, isFlow && hasAccessToOutputs),\n      allClusterOutputs: getAllOrDefault(LOGGING.CLUSTER_OUTPUT, hasAccessToClusterOutputs),\n      allNamespaces:     getAllOrDefault(NAMESPACE, hasAccessToNamespaces),\n      allNodes:          getAllOrDefault(NODE, hasAccessToNodes),\n      allPods:           getAllOrDefault(POD, hasAccessToPods),\n    });\n\n    for ( const k of Object.keys(hash) ) {\n      this[k] = hash[k] || [];\n    }\n  },\n\n  data() {\n    const schemas = this.$store.getters['cluster/all'](SCHEMA);\n    let filtersYaml;\n\n    set(this.value, 'spec', this.value.spec || {});\n\n    if ( this.value.spec.filters?.length ) {\n      filtersYaml = jsyaml.dump(this.value.spec.filters);\n    } else {\n      filtersYaml = createYaml(schemas, LOGGING.SPOOFED.FILTERS, []);\n      // createYaml doesn't support passing reference types (array, map) as the first type. As such\n      // I'm manipulating the output since I'm not sure it's something we want to actually support\n      // seeing as it's really createResourceYaml and this here is a gray area between spoofed types\n      // and just a field within a spec.\n      filtersYaml = filtersYaml.substring(filtersYaml.indexOf('\\n') + 1).replaceAll('#  ', '#');\n    }\n\n    const matches = [];\n    let formSupported = !this.value.id || this.value.canCustomEdit;\n\n    if ( this.value.spec.match?.length ) {\n      for ( const match of this.value.spec.match ) {\n        if ( matchRuleIsPopulated(match.select) && matchRuleIsPopulated(match.exclude) ) {\n          formSupported = false;\n        } else if ( matchRuleIsPopulated(match.select) ) {\n          matches.push({ select: true, ...match.select });\n        } else if ( matchRuleIsPopulated(match.exclude) ) {\n          matches.push({ exclude: true, ...match.exclude });\n        }\n      }\n    } else {\n      matches.push(emptyMatch(true));\n    }\n\n    const globalOutputRefs = (this.value.spec.globalOutputRefs || []).map((ref) => ({ label: ref, value: ref }));\n    const localOutputRefs = (this.value.spec.localOutputRefs || []).map((ref) => ({ label: ref, value: ref }));\n\n    return {\n      formSupported,\n      matches,\n      allOutputs:         null,\n      allClusterOutputs:  null,\n      allNamespaces:      null,\n      allNodes:           null,\n      allPods:            null,\n      filtersYaml,\n      initialFiltersYaml: filtersYaml,\n      globalOutputRefs,\n      localOutputRefs\n    };\n  },\n\n  computed: {\n    EDITOR_MODES() {\n      return EDITOR_MODES;\n    },\n\n    LOGGING() {\n      return LOGGING;\n    },\n\n    outputChoices() {\n      if (!this.allOutputs) {\n        // Handle the case where the user doesn't have permission\n        // to see Outputs\n        return [];\n      }\n\n      // Yes cluster outputs are still namespaced because reasons...\n      return this.allOutputs.filter((output) => {\n        if ( !output.namespace) {\n          return true;\n        }\n\n        return output.namespace === this.value.namespace;\n      }).map((x) => {\n        return { label: x.metadata.name, value: x.metadata.name };\n      });\n    },\n\n    clusterOutputChoices() {\n      if (!this.allClusterOutputs) {\n        // Handle the case where the user doesn't have permission\n        // to see ClusterOutputs\n        return [];\n      }\n\n      return this.allClusterOutputs\n        .filter((clusterOutput) => {\n          return clusterOutput.namespace === 'cattle-logging-system';\n        })\n        .map((clusterOutput) => {\n          return { label: clusterOutput.metadata.name, value: clusterOutput.metadata.name };\n        });\n    },\n\n    namespaceChoices() {\n      if (!this.allNamespaces) {\n        // Handle the case where the user doesn't have permission\n        // to see namespaces\n        return [];\n      }\n      const out = this.allNamespaces.map((namespace) => {\n        return {\n          label: namespace.nameDisplay,\n          value: namespace.metadata.name\n        };\n      });\n\n      return out;\n    },\n\n    nodeChoices() {\n      if (!this.allNodes) {\n        // Handle the case where the user doesn't have permission\n        // to see nodes\n        return [];\n      }\n      const out = this.allNodes.map((node) => {\n        return {\n          label: node.nameDisplay,\n          value: node.metadata.name\n        };\n      });\n\n      return out;\n    },\n\n    containerChoices() {\n      const out = [];\n\n      for ( const pod of this.allPods ) {\n        for ( const c of (pod.spec?.containers || []) ) {\n          out.push(c.name);\n        }\n      }\n\n      return uniq(out).sort();\n    },\n  },\n\n  watch: {\n    matches: {\n      deep: true,\n      handler() {\n        const matches = this.matches.map((match) => {\n          const copy = clone(match);\n\n          delete copy.exclude;\n          delete copy.select;\n\n          if ( match.exclude ) {\n            return { exclude: copy };\n          } else {\n            return { select: copy };\n          }\n        });\n\n        set(this.value.spec, 'match', matches);\n      }\n    },\n    filtersYaml: {\n      deep: true,\n      handler() {\n        try {\n          const filterJson = jsyaml.load(this.filtersYaml);\n\n          if ( isArray(filterJson) ) {\n            set(this.value.spec, 'filters', filterJson);\n          } else {\n            set(this.value.spec, 'filters', undefined);\n          }\n        } catch (e) {\n          this.errors = exceptionToErrorsArray(e);\n        }\n      }\n    },\n    globalOutputRefs: {\n      deep: true,\n      handler() {\n        set(this.value.spec, 'globalOutputRefs', this.globalOutputRefs);\n      }\n    },\n    localOutputRefs: {\n      deep: true,\n      handler() {\n        set(this.value.spec, 'localOutputRefs', this.localOutputRefs);\n      }\n    }\n  },\n\n  created() {\n    if (this.isCreate && this.value.type === LOGGING.CLUSTER_FLOW) {\n      this.value.metadata.namespace = 'cattle-logging-system';\n    }\n\n    this.registerBeforeHook(this.willSave, 'willSave');\n  },\n\n  methods: {\n    addMatch(include) {\n      this.matches.push(emptyMatch(include));\n    },\n\n    removeMatch(idx) {\n      this.matches.splice(idx, 1);\n    },\n\n    updateMatch(neu, idx) {\n      this.$set(this.matches, idx, neu);\n    },\n\n    tabChanged({ tab }) {\n      if ( tab.name === 'filters' ) {\n        this.$nextTick(() => {\n          if ( this.$refs.yaml ) {\n            this.$refs.yaml.refresh();\n            this.$refs.yaml.focus();\n          }\n        });\n      }\n    },\n    isMatchEmpty(matches) {\n      if (isEmpty(matches)) {\n        return true;\n      }\n\n      return matches.every((match) => {\n        if (isEmpty(match.select) && isEmpty(match.exclude)) {\n          return true;\n        }\n\n        const select = match.select || {};\n        const exclude = match.exclude || {};\n        const allValuesAreEmpty = (o) => Object.values(o).every(isEmpty);\n\n        return allValuesAreEmpty(select) && allValuesAreEmpty(exclude);\n      });\n    },\n    willSave() {\n      if (this.value.spec.filters && isEmpty(this.value.spec.filters)) {\n        this.$delete(this.value.spec, 'filters');\n      }\n\n      if (this.value.spec.match && this.isMatchEmpty(this.value.spec.match)) {\n        this.$delete(this.value.spec, 'match');\n      }\n    },\n    onYamlEditorReady(cm) {\n      cm.getMode().fold = 'yamlcomments';\n      cm.execCommand('foldAll');\n      cm.execCommand('unfold');\n    },\n    isTag(options, option) {\n      return !options.find((o) => o.value === option.value);\n    }\n  }\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n  <CruResource\n    v-else-if=\"formSupported\"\n    class=\"flow\"\n    :done-route=\"doneRoute\"\n    :mode=\"mode\"\n    :resource=\"value\"\n    :subtypes=\"[]\"\n    :validation-passed=\"true\"\n    :errors=\"errors\"\n    :apply-hooks=\"applyHooks\"\n    @error=\"e=>errors = e\"\n    @finish=\"save\"\n    @cancel=\"done\"\n  >\n    <NameNsDescription\n      v-if=\"!isView\"\n      v-model=\"value\"\n      :mode=\"mode\"\n      :namespaced=\"value.type !== LOGGING.CLUSTER_FLOW\"\n    />\n\n    <Tabbed\n      :side-tabs=\"true\"\n      @changed=\"tabChanged($event)\"\n    >\n      <Tab\n        name=\"match\"\n        :label=\"t('logging.flow.matches.label')\"\n        :weight=\"3\"\n      >\n        <Banner\n          color=\"info\"\n          class=\"mt-0\"\n          :label=\"t('logging.flow.matches.banner')\"\n        />\n        <ArrayListGrouped\n          v-model=\"matches\"\n          :add-label=\"t('ingress.rules.addRule')\"\n          :default-add-value=\"{}\"\n          :mode=\"mode\"\n        >\n          <template #default=\"props\">\n            <Match\n              class=\"rule mb-20\"\n              :value=\"props.row.value\"\n              :mode=\"mode\"\n              :namespaces=\"namespaceChoices\"\n              :nodes=\"nodeChoices\"\n              :containers=\"containerChoices\"\n              :is-cluster-flow=\"value.type === LOGGING.CLUSTER_FLOW\"\n              @remove=\"e=>removeMatch(props.row.i)\"\n              @input=\"e=>updateMatch(e,props.row.i)\"\n            />\n          </template>\n          <template #add>\n            <button\n              class=\"btn role-tertiary add\"\n              type=\"button\"\n              @click=\"addMatch(true)\"\n            >\n              {{ t('logging.flow.matches.addSelect') }}\n            </button>\n            <button\n              class=\"btn role-tertiary add\"\n              type=\"button\"\n              @click=\"addMatch(false)\"\n            >\n              {{ t('logging.flow.matches.addExclude') }}\n            </button>\n          </template>\n        </ArrayListGrouped>\n      </Tab>\n\n      <Tab\n        name=\"outputs\"\n        :label=\"t('logging.flow.outputs.label')\"\n        :weight=\"2\"\n      >\n        <Banner\n          v-if=\"value.type !== LOGGING.CLUSTER_FLOW\"\n          :label=\"t('logging.flow.outputs.sameNamespaceError')\"\n          color=\"info\"\n        />\n        <LabeledSelect\n          v-model=\"globalOutputRefs\"\n          :label=\"t('logging.flow.clusterOutputs.label')\"\n          :options=\"clusterOutputChoices\"\n          :multiple=\"true\"\n          :taggable=\"true\"\n          :clearable=\"true\"\n          :close-on-select=\"false\"\n          :reduce=\"opt=>opt.value\"\n        >\n          <template #selected-option=\"option\">\n            <i\n              v-if=\"isTag(clusterOutputChoices, option)\"\n              v-clean-tooltip=\"t('logging.flow.clusterOutputs.doesntExistTooltip')\"\n              class=\"icon icon-info status-icon text-warning\"\n            />\n            {{ option.label }}\n          </template>\n        </LabeledSelect>\n        <LabeledSelect\n          v-if=\"value.type === LOGGING.FLOW\"\n          v-model=\"localOutputRefs\"\n          :label=\"t('logging.flow.outputs.label')\"\n          class=\"mt-10\"\n          :options=\"outputChoices\"\n          :multiple=\"true\"\n          :taggable=\"true\"\n          :clearable=\"true\"\n          :close-on-select=\"false\"\n          :reduce=\"opt=>opt.value\"\n        >\n          <template #selected-option=\"option\">\n            <i\n              v-if=\"isTag(outputChoices, option)\"\n              v-clean-tooltip=\"t('logging.flow.outputs.doesntExistTooltip')\"\n              class=\"icon icon-info status-icon text-warning\"\n            />\n            {{ option.label }}\n          </template>\n        </LabeledSelect>\n      </Tab>\n\n      <Tab\n        name=\"filters\"\n        :label=\"t('logging.flow.filters.label')\"\n        :weight=\"1\"\n      >\n        <YamlEditor\n          ref=\"yaml\"\n          v-model=\"filtersYaml\"\n          :scrolling=\"false\"\n          :initial-yaml-values=\"initialFiltersYaml\"\n          :editor-mode=\"isView ? EDITOR_MODES.VIEW_CODE : EDITOR_MODES.EDIT_CODE\"\n          @onReady=\"onYamlEditorReady\"\n        />\n      </Tab>\n    </Tabbed>\n  </CruResource>\n  <Banner\n    v-else\n    :label=\"t('logging.flow.matches.unsupportedConfig')\"\n    color=\"error\"\n  />\n</template>\n\n<style lang=\"scss\" scoped>\n::v-deep {\n  .icon-info {\n    margin-top: -3px;\n    margin-right: 4px;\n  }\n}\n</style>\n"],"mappings":"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"}]}