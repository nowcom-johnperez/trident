{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/models/networking.k8s.io.ingress.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/models/networking.k8s.io.ingress.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["SECRET","SERVICE","isUrl","get","isEmpty","SteveModel","tlsHosts","spec","tls","flatMap","hosts","isTlsHost","host","includes","ingressFullPath","resource","rule","path","arguments","length","undefined","hostValue","pathValue","protocol","concat","Ingress","_SteveModel","_inherits","_super","_createSuper","_classCallCheck","apply","_createClass","key","_this","value","targetTo","workloads","serviceName","isTargetsWorkload","startsWith","id","namespace","workload","find","w","detailLocation","name","params","createRulesForListPage","certificates","_this2","rules","_rule$http","paths","http","map","createPathForListPage","backend","serviceNamePath","fullPath","pathType","serviceTargetTo","certs","certLinks","targetLink","port","servicePortPath","certLink","cert","secretName","t","to","text","options","internal","_this3","matchingCerts","filter","createDefaultService","defaultBackendPath","cacheObject","cache","showPathType","$rootGetters","type","useNestedBackendField","nestedPath","flatPath","defaultBackend","_this$spec","out","_details","ingressClassName","push","label","content","default"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/models/networking.k8s.io.ingress.js"],"sourcesContent":["import { SECRET, SERVICE } from '@shell/config/types';\nimport isUrl from 'is-url';\nimport { get } from '@shell/utils/object';\nimport isEmpty from 'lodash/isEmpty';\nimport SteveModel from '@shell/plugins/steve/steve-class';\n\nfunction tlsHosts(spec) {\n  const tls = spec.tls || [];\n\n  return tls.flatMap((tls) => tls.hosts || []);\n}\n\nfunction isTlsHost(spec, host) {\n  return tlsHosts(spec).includes(host);\n}\n\nexport function ingressFullPath(resource, rule, path = {}) {\n  const spec = resource.spec;\n  const hostValue = rule.host || '';\n  const pathValue = path.path || '';\n  let protocol = '';\n\n  if (hostValue) {\n    protocol = isTlsHost(spec, hostValue) ? 'https://' : 'http://';\n  }\n\n  return `${ protocol }${ hostValue }${ pathValue }`;\n}\n\nexport default class Ingress extends SteveModel {\n  get tlsHosts() {\n    return tlsHosts(this.spec);\n  }\n\n  get isTlsHost() {\n    return (host) => isTlsHost(this.spec, host);\n  }\n\n  targetTo(workloads, serviceName) {\n    if (!serviceName) {\n      return null;\n    }\n\n    const isTargetsWorkload = serviceName.startsWith('ingress-');\n    const id = `${ this.namespace }/${ serviceName }`;\n\n    if ( isTargetsWorkload ) {\n      const workload = workloads.find((w) => w.id === (id));\n\n      return workload?.detailLocation || '';\n    } else {\n      return {\n        name:   'c-cluster-product-resource-namespace-id',\n        params: {\n          resource:  SERVICE,\n          id:        serviceName,\n          namespace: this.namespace,\n        }\n      };\n    }\n  }\n\n  createRulesForListPage(workloads, certificates) {\n    const rules = this.spec.rules || [];\n\n    return rules.flatMap((rule) => {\n      const paths = rule?.http?.paths || [];\n\n      return paths.map((path) => this.createPathForListPage(workloads, rule, path, certificates));\n    });\n  }\n\n  createPathForListPage(workloads, rule, path, certificates) {\n    const serviceName = get(path?.backend, this.serviceNamePath);\n    const fullPath = this.fullPath(rule, path);\n\n    return {\n      // isUrl thinks urls which contain '*' are valid so I'm adding an additional check for '*'\n      isUrl:           isUrl(fullPath) && !fullPath.includes('*'),\n      pathType:        path.pathType,\n      fullPath,\n      serviceName,\n      serviceTargetTo: this.targetTo(workloads, serviceName),\n      certs:           this.certLinks(rule, certificates),\n      targetLink:      this.targetLink(workloads, serviceName),\n      port:            get(path?.backend, this.servicePortPath)\n    };\n  }\n\n  fullPath(rule, path) {\n    return ingressFullPath(this, rule, path);\n  }\n\n  certLink(cert, certificates = []) {\n    const secretName = cert.secretName || this.t('ingress.rulesAndCertificates.defaultCertificate');\n    let to;\n\n    if (cert.secretName && certificates.includes(secretName)) {\n      to = {\n        name:   'c-cluster-product-resource-namespace-id',\n        params: {\n          resource: SECRET,\n          id:       secretName\n        }\n      };\n    }\n\n    return {\n      to,\n      text:    secretName,\n      options: { internal: true }\n    };\n  }\n\n  certLinks(rule, certificates) {\n    const certs = this.spec.tls || [];\n    const matchingCerts = certs.filter((cert) => {\n      const hosts = cert.hosts || [];\n\n      return hosts.includes(rule.host);\n    });\n\n    return matchingCerts.map((cert) => this.certLink(cert, certificates));\n  }\n\n  targetLink(workloads, serviceName) {\n    return {\n      to:      this.targetTo(workloads, serviceName),\n      text:    serviceName,\n      options: { internal: true }\n    };\n  }\n\n  createDefaultService(workloads) {\n    const backend = get(this.spec, this.defaultBackendPath);\n    const serviceName = get(backend, this.serviceNamePath);\n\n    if ( !serviceName ) {\n      return null;\n    }\n\n    return {\n      name:     serviceName,\n      targetTo: this.targetTo(workloads, serviceName)\n    };\n  }\n\n  get cache() {\n    if (!this.cacheObject) {\n      this.cacheObject = {};\n    }\n\n    return this.cacheObject;\n  }\n\n  get showPathType() {\n    if (!this.cache.showPathType) {\n      this.cache.showPathType = this.$rootGetters['cluster/pathExistsInSchema'](this.type, 'spec.rules.http.paths.pathType');\n    }\n\n    return this.cache.showPathType;\n  }\n\n  get useNestedBackendField() {\n    if (!this.cache.useNestedBackendField) {\n      this.cache.useNestedBackendField = this.$rootGetters['cluster/pathExistsInSchema'](this.type, 'spec.rules.http.paths.backend.service.name');\n    }\n\n    return this.cache.useNestedBackendField;\n  }\n\n  get serviceNamePath() {\n    const nestedPath = 'service.name';\n    const flatPath = 'serviceName';\n\n    return this.useNestedBackendField ? nestedPath : flatPath;\n  }\n\n  get servicePortPath() {\n    const nestedPath = 'service.port.number';\n    const flatPath = 'servicePort';\n\n    return this.useNestedBackendField ? nestedPath : flatPath;\n  }\n\n  get defaultBackendPath() {\n    const defaultBackend = this.$rootGetters['cluster/pathExistsInSchema'](this.type, 'spec.defaultBackend');\n\n    return defaultBackend ? 'defaultBackend' : 'backend';\n  }\n\n  get hasDefaultBackend() {\n    return !isEmpty(this.spec[this.defaultBackendPath]);\n  }\n\n  get details() {\n    const out = this._details;\n\n    if (this.spec?.ingressClassName) {\n      out.push({\n        label:   this.t('ingress.ingressClass.label'),\n        content: this.spec.ingressClassName,\n      });\n    }\n\n    return out;\n  }\n}\n"],"mappings":"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"}]}