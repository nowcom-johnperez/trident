{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/plugins/dashboard-store/mutations.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/plugins/dashboard-store/mutations.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["Vue","addObject","addObjects","clear","removeObject","SCHEMA","COUNT","normalizeType","keyFieldFor","addSchemaIndexFields","classify","garbageCollect","registerType","state","type","cache","types","list","haveAll","haveSelector","haveNamespace","undefined","revision","generation","loadCounter","Object","defineProperty","value","Map","process","server","__rehydrateAll","concat","config","namespace","enumerable","set","replace","existing","data","_i","_Object$keys","keys","length","k","_i2","_Object$keys2","replaceResource","getters","cleanResource","load","_ref","ctx","keyField","keyFieldForType","opts","rootGetters","limit","id","entry","map","get","rm","shift","delete","baseType","forgetType","gcResetType","resetStore","commit","console","log","_i3","_Object$keys3","gcResetStore","remove","obj","_remove","batchChanges","_ref2","batch","batchTypes","combinedBatch","forEach","batchType","_typeOption$alias","typeOption","alias","aliasType","_i4","_Object$entries","entries","_Object$entries$_i","_slicedToArray","key","_objectSpread","combinedBatchTypes","normalizedType","typeCache","typeCacheIndexMap","resource","index","removeAtIndexes","push","classyResource","sort","cacheIndex","loopIndex","splice","loadAll","_ref3","skipHaveAll","slice","proxies","x","i","applyConfig","assign","loadMulti","_ref4","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","e","f","loadSelector","_ref5","selector","_iterator2","_step2","loadMerge","_ref6","allLatest","find","toLoadEntry","loadAdd","_ref7","forgetAll","_ref8","setHaveAll","_ref9","setHaveNamespace","_ref10","loadedAll","_ref11","reset","incrementLoadCounter","typeData"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/plugins/dashboard-store/mutations.js"],"sourcesContent":["import Vue from 'vue';\nimport { addObject, addObjects, clear, removeObject } from '@shell/utils/array';\nimport { SCHEMA, COUNT } from '@shell/config/types';\nimport { normalizeType, keyFieldFor } from '@shell/plugins/dashboard-store/normalize';\nimport { addSchemaIndexFields } from '@shell/plugins/steve/schema.utils';\nimport { classify } from '@shell/plugins/dashboard-store/classify';\nimport garbageCollect from '@shell/utils/gc/gc';\n\nfunction registerType(state, type) {\n  let cache = state.types[type];\n\n  if ( !cache ) {\n    cache = {\n      list:          [],\n      haveAll:       false,\n      haveSelector:  {},\n      haveNamespace: undefined, // If the cached list only contains resources for a namespace, this will contain the ns name\n      revision:      0, // The highest known resourceVersion from the server for this type\n      generation:    0, // Updated every time something is loaded for this type\n      loadCounter:   0, // Used to cancel incremental loads if the page changes during load\n    };\n\n    // Not enumerable so they don't get sent back to the client for SSR\n    Object.defineProperty(cache, 'map', { value: new Map() });\n\n    if ( process.server && !cache.list.__rehydrateAll ) {\n      Object.defineProperty(cache.list, '__rehydrateAll', { value: `${ state.config.namespace }/${ type }`, enumerable: true });\n    }\n\n    Vue.set(state.types, type, cache);\n  }\n\n  return cache;\n}\n\nexport function replace(existing, data) {\n  for ( const k of Object.keys(existing) ) {\n    delete existing[k];\n  }\n\n  for ( const k of Object.keys(data) ) {\n    Vue.set(existing, k, data[k]);\n  }\n\n  return existing;\n}\n\nfunction replaceResource(existing, data, getters) {\n  data = getters.cleanResource(existing, data);\n\n  return replace(existing, data);\n}\n\nexport function load(state, { data, ctx, existing }) {\n  const { getters } = ctx;\n  let type = normalizeType(data.type);\n  const keyField = getters.keyFieldForType(type);\n  const opts = ctx.rootGetters[`type-map/optionsFor`](type);\n  const limit = opts?.limit;\n\n  // Inject special fields for indexing schemas\n  if ( type === SCHEMA ) {\n    addSchemaIndexFields(data);\n  }\n\n  const id = data[keyField];\n\n  let cache = registerType(state, type);\n\n  cache.generation++;\n\n  let entry;\n\n  if ( existing && !existing.id ) {\n    // A specific proxy instance to used was passed in (for create -> save),\n    // use it instead of making a new proxy\n    entry = replaceResource(existing, data, getters);\n    addObject(cache.list, entry);\n    cache.map.set(id, entry);\n    // console.log('### Mutation added from existing proxy', type, id);\n  } else {\n    entry = cache.map.get(id);\n\n    if ( entry ) {\n      // There's already an entry in the store, update it\n      replaceResource(entry, data, getters);\n      // console.log('### Mutation Updated', type, id);\n    } else {\n      // There's no entry, make a new proxy\n      entry = classify(ctx, data);\n      addObject(cache.list, entry);\n      cache.map.set(id, entry);\n      // console.log('### Mutation', type, id);\n\n      // If there is a limit to the number of resources we can store for this type then\n      // remove the first one to keep the list size to that limit\n      if (limit && cache.list.length > limit) {\n        const rm = cache.list.shift();\n\n        cache.map.delete(rm.id);\n      }\n    }\n  }\n\n  if ( data.baseType ) {\n    type = normalizeType(data.baseType);\n    cache = state.types[type];\n    if ( cache ) {\n      addObject(cache.list, entry);\n      cache.map.set(id, entry);\n    }\n  }\n\n  return entry;\n}\n\nexport function forgetType(state, type) {\n  const cache = state.types[type];\n\n  if ( cache ) {\n    cache.haveAll = false;\n    cache.haveSelector = {};\n    cache.haveNamespace = undefined;\n    cache.revision = 0;\n    cache.generation = 0;\n    clear(cache.list);\n    cache.map.clear();\n    delete state.types[type];\n\n    garbageCollect.gcResetType(state, type);\n\n    return true;\n  }\n}\n\nexport function resetStore(state, commit) {\n  // eslint-disable-next-line no-console\n  console.log('Reset store: ', state.config.namespace);\n\n  for ( const type of Object.keys(state.types) ) {\n    commit(`${ state.config.namespace }/forgetType`, type);\n  }\n\n  garbageCollect.gcResetStore(state);\n}\n\nexport function remove(state, obj, getters) {\n  if (obj) {\n    let type = normalizeType(obj.type);\n    const keyField = getters[`${ state.config.namespace }/keyFieldForType`](type);\n    const id = obj[keyField];\n\n    let entry = state.types[type];\n\n    if ( entry ) {\n      removeObject(entry.list, obj);\n      entry.map.delete(id);\n    }\n\n    if ( obj.baseType ) {\n      type = normalizeType(obj.baseType);\n      entry = state.types[type];\n\n      if ( entry ) {\n        removeObject(entry.list, obj);\n        entry.map.delete(id);\n      }\n    }\n  }\n}\n\nexport function batchChanges(state, { ctx, batch }) {\n  const batchTypes = Object.keys(batch);\n  const combinedBatch = {};\n\n  batchTypes.forEach((batchType) => {\n    combinedBatch[batchType] = batch[batchType];\n    const typeOption = ctx.rootGetters['type-map/optionsFor'](batchType);\n\n    if (typeOption?.alias?.length > 0) {\n      const alias = typeOption?.alias || [];\n\n      alias.forEach((aliasType) => {\n        combinedBatch[aliasType] = {};\n        for (const [key, value] of Object.entries(batch[batchType])) {\n          combinedBatch[aliasType][key] = {\n            ...value,\n            type: aliasType\n          };\n        }\n      });\n    }\n  });\n\n  const combinedBatchTypes = Object.keys(combinedBatch);\n\n  combinedBatchTypes.forEach((type) => {\n    const normalizedType = normalizeType(type === 'counts' ? COUNT : type);\n    const keyField = keyFieldFor(normalizedType);\n    const typeCache = registerType(state, normalizedType);\n\n    // making a map for every resource's location in the list is gonna ensure we only have to loop through the big list once.\n    const typeCacheIndexMap = {};\n\n    typeCache.list.forEach((resource, index) => {\n      typeCacheIndexMap[resource[keyField]] = index;\n    });\n\n    const removeAtIndexes = [];\n\n    // looping through the batch, executing changes, deferring creates and removes since they change the array length\n    Object.keys(combinedBatch[normalizedType]).forEach((id) => {\n      const index = typeCacheIndexMap[id];\n      const resource = combinedBatch[normalizedType][id];\n\n      // an empty resource passed into batch changes is how we'll signal which ones to delete\n      if (Object.keys(resource).length === 0 && index !== undefined) {\n        typeCache.map.delete(id);\n        removeAtIndexes.push(index);\n      } else if (Object.keys(resource).length === 0) {\n        // No op. We're removing it... but we don't have it in the cache\n      } else {\n        if (normalizedType === SCHEMA) {\n          addSchemaIndexFields(resource);\n        }\n        const classyResource = classify(ctx, resource);\n\n        if (index === undefined) {\n          typeCache.list.push(classyResource);\n          typeCache.map.set(id, classyResource);\n\n          typeCacheIndexMap[classyResource[keyField]] = typeCache.list.length - 1;\n        } else {\n          replaceResource(typeCache.list[index], resource, ctx.getters);\n        }\n      }\n    });\n\n    // looping through the removeAtIndexes, making sure to offset by iteration so the array changing doesn't mess us up\n    removeAtIndexes.sort().forEach((cacheIndex, loopIndex) => {\n      typeCache.list.splice(cacheIndex - loopIndex, 1);\n    });\n\n    const opts = ctx.rootGetters[`type-map/optionsFor`](type);\n    const limit = opts?.limit;\n\n    // If there is a limit to the number of resources we can store for this type then\n    // remove the first one to keep the list size to that limit\n    if (limit && typeCache.list.length > limit) {\n      const rm = typeCache.list.shift();\n\n      typeCache.map.delete(rm.id);\n    }\n\n    typeCache.generation++;\n  });\n}\n\nexport function loadAll(state, {\n  type,\n  data,\n  ctx,\n  skipHaveAll,\n  namespace,\n  revision\n}) {\n  const { getters } = ctx;\n\n  if (!data) {\n    return;\n  }\n\n  const opts = ctx.rootGetters[`type-map/optionsFor`](type);\n  const limit = opts?.limit;\n\n  // If there is a limit, only store the last elements from the list to keep to that limit\n  if (limit) {\n    data = data.slice(-limit);\n  }\n\n  const keyField = getters.keyFieldForType(type);\n  const proxies = data.map((x) => classify(ctx, x));\n  const cache = registerType(state, type);\n\n  clear(cache.list);\n  cache.map.clear();\n  cache.revision = revision || 0;\n  cache.generation++;\n\n  addObjects(cache.list, proxies);\n\n  for ( let i = 0 ; i < proxies.length ; i++ ) {\n    cache.map.set(proxies[i][keyField], proxies[i]);\n  }\n\n  // Allow requester to skip setting that everything has loaded\n  if (!skipHaveAll) {\n    cache.haveNamespace = namespace;\n    cache.haveAll = !namespace;\n  }\n\n  return proxies;\n}\n\nexport default {\n  registerType,\n  load,\n\n  applyConfig(state, config) {\n    if ( !state.config ) {\n      state.config = {};\n    }\n\n    Object.assign(state.config, config);\n  },\n\n  loadMulti(state, { data, ctx }) {\n    // console.log('### Mutation loadMulti', data?.length);\n    for ( const entry of data ) {\n      load(state, { data: entry, ctx });\n    }\n  },\n\n  loadSelector(state, {\n    type, entries, ctx, selector, revision\n  }) {\n    const cache = registerType(state, type);\n\n    for ( const data of entries ) {\n      load(state, { data, ctx });\n    }\n\n    cache.haveSelector[selector] = true;\n    cache.revision = revision || 0;\n  },\n\n  loadAll,\n\n  /**\n   * Handles changes (add, update, remove) to multiple resources for multiple types\n   */\n  batchChanges,\n\n  loadMerge(state, { type, data: allLatest, ctx }) {\n    const { commit, getters } = ctx;\n    // const allLatest = await dispatch('findAll', { type, opt: { force: true, load, _NONE } });\n    // const allExisting = getters.all({type});\n    const keyField = getters.keyFieldForType(type);\n    const cache = state.types[type];\n\n    allLatest.forEach((entry) => {\n      const existing = state.types[type].map.get(entry[keyField]);\n\n      load(state, {\n        data: entry, ctx, existing\n      });\n    });\n    cache.list.forEach((entry) => {\n      if (!allLatest.find((toLoadEntry) => toLoadEntry.id === entry.id)) {\n        commit('remove', entry);\n      }\n    });\n  },\n\n  // Add a set of resources to the store for a given type\n  // Don't mark the 'haveAll' field - this is used for incremental loading\n  loadAdd(state, { type, data: allLatest, ctx }) {\n    const { getters } = ctx;\n    const keyField = getters.keyFieldForType(type);\n\n    allLatest.forEach((entry) => {\n      const existing = state.types[type].map.get(entry[keyField]);\n\n      load(state, {\n        data: entry, ctx, existing\n      });\n    });\n  },\n\n  forgetAll(state, { type }) {\n    const cache = registerType(state, type);\n\n    clear(cache.list);\n    cache.map.clear();\n    cache.generation++;\n  },\n\n  setHaveAll(state, { type }) {\n    const cache = registerType(state, type);\n\n    cache.haveAll = true;\n  },\n\n  setHaveNamespace(state, { type, namespace }) {\n    const cache = registerType(state, type);\n\n    cache.haveNamespace = namespace;\n  },\n\n  loadedAll(state, { type }) {\n    const cache = registerType(state, type);\n\n    cache.generation++;\n    cache.haveAll = true;\n  },\n\n  remove(state, obj) {\n    if (obj) {\n      remove(state, obj, this.getters);\n    }\n  },\n\n  reset(state) {\n    resetStore(state, this.commit);\n  },\n\n  forgetType,\n\n  incrementLoadCounter(state, type) {\n    const typeData = state.types[type];\n\n    if (typeData) {\n      typeData.loadCounter++;\n    }\n  },\n\n};\n"],"mappings":"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"}]}