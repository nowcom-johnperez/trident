{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/mixins/resource-fetch.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/mixins/resource-fetch.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["mapGetters","COUNT","MANAGEMENT","SETTING","DEFAULT_PERF_SETTING","ResourceFetchNamespaced","PAGES","mixins","data","perfSetting","$store","getters","UI_PERFORMANCE","perfConfig","value","JSON","parse","e","console","warn","init","multipleResources","loadResources","resource","hasManualRefresh","watch","isTooManyItemsToAutoUpdate","force","incremental","fetchedResourceType","beforeDestroy","_this","dispatch","forEach","item","concat","currStore","type","computed","_objectSpread","refreshFlag","rows","_this2","currResource","find","loading","length","$fetchState","pending","neu","$fetch","methods","$initializeFetchData","arguments","undefined","storeType","__gatherResourceFetchData","$fetchType","_schema$attributes","push","resourceCount","__getCountForResources","namespaceFilter","Math","ceil","opt","schema","attributes","namespaced","resourceNames","namespace","_this3","reduce","res","__getCountForResource","resourceName","_this$$store$getters$","_resourceCounts$names","_resourceCounts$summa","resourceCounts","counts","namespaces","count","summary","_this$perfConfig","_this$perfConfig2","_this$perfConfig3","_this$perfConfig4","manualDataRefreshEnabled","manualRefresh","enabled","manualDataRefreshThreshold","parseInt","threshold","incrementalLoadingEnabled","incrementalLoading","incrementalLoadingThreshold","resourcesForCount"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/mixins/resource-fetch.js"],"sourcesContent":["import { mapGetters } from 'vuex';\nimport { COUNT, MANAGEMENT } from '@shell/config/types';\nimport { SETTING, DEFAULT_PERF_SETTING } from '@shell/config/settings';\nimport ResourceFetchNamespaced from '@shell/mixins/resource-fetch-namespaced';\n\n// Number of pages to fetch when loading incrementally\nconst PAGES = 4;\n\nexport default {\n\n  mixins: [ResourceFetchNamespaced],\n\n  data() {\n    // fetching the settings related to manual refresh from global settings\n    const perfSetting = this.$store.getters['management/byId'](MANAGEMENT.SETTING, SETTING.UI_PERFORMANCE);\n    let perfConfig = {};\n\n    if (perfSetting && perfSetting.value) {\n      try {\n        perfConfig = JSON.parse(perfSetting.value);\n      } catch (e) {\n        console.warn('ui-performance setting contains invalid data'); // eslint-disable-line no-console\n      }\n    } else {\n      perfConfig = DEFAULT_PERF_SETTING;\n    }\n\n    return {\n      perfConfig,\n      init:                       false,\n      multipleResources:          [],\n      loadResources:              [this.resource],\n      // manual refresh vars\n      hasManualRefresh:           false,\n      watch:                      true,\n      isTooManyItemsToAutoUpdate: false,\n      force:                      false,\n      // incremental loading vars\n      incremental:                false,\n      fetchedResourceType:        [],\n    };\n  },\n  beforeDestroy() {\n    // make sure this only runs once, for the initialized instance\n    if (this.init) {\n      // clear up the store to make sure we aren't storing anything that might interfere with the next rendered list view\n      this.$store.dispatch('resource-fetch/clearData');\n\n      this.fetchedResourceType.forEach((item) => {\n        this.$store.dispatch(`${ item.currStore }/incrementLoadCounter`, item.type);\n      });\n    }\n  },\n\n  computed: {\n    ...mapGetters({ refreshFlag: 'resource-fetch/refreshFlag' }),\n    rows() {\n      const currResource = this.fetchedResourceType.find((item) => item.type === this.resource);\n\n      if (currResource) {\n        return this.$store.getters[`${ currResource.currStore }/all`](this.resource);\n      } else {\n        return [];\n      }\n    },\n    loading() {\n      return this.rows.length ? false : this.$fetchState.pending;\n    },\n  },\n  watch: {\n    refreshFlag(neu) {\n      // this is where the data assignment will trigger the update of the list view...\n      if (this.init && neu) {\n        this.$fetch();\n      }\n    }\n  },\n  methods: {\n    // this defines all the flags needed for the mechanism\n    // to work. They should be defined based on the main list view\n    // resource that is to be displayed. The secondary resources\n    // fetched should follow what was defined (if it is manual and/or incremental)\n    $initializeFetchData(type, multipleResources = [], storeType) {\n      if (!this.init) {\n        const currStore = storeType || this.$store.getters['currentStore']();\n\n        this.__gatherResourceFetchData(type, multipleResources, currStore);\n\n        // make sure after init that, if we have a manual refresh, we always set the force = true\n        if (!this.watch) {\n          this.force = true;\n        }\n\n        if (this.isTooManyItemsToAutoUpdate) {\n          this.hasManualRefresh = true;\n        }\n      }\n    },\n    // data fetching for the mechanism\n    $fetchType(type, multipleResources = [], storeType) {\n      const currStore = storeType || this.$store.getters['currentStore']();\n\n      this.$initializeFetchData(type, multipleResources, currStore);\n\n      if (!this.fetchedResourceType.find((item) => item.type === type)) {\n        this.fetchedResourceType.push({\n          type,\n          currStore\n        });\n      }\n\n      let incremental = 0;\n\n      if (this.incremental) {\n        const resourceCount = this.__getCountForResources([type], this.namespaceFilter, currStore);\n\n        incremental = Math.ceil(resourceCount / PAGES);\n      }\n\n      const opt = {\n        incremental,\n        watch:            this.watch,\n        force:            this.force,\n        hasManualRefresh: this.hasManualRefresh\n      };\n\n      const schema = this.$store.getters[`${ currStore }/schemaFor`](type);\n\n      if (schema?.attributes?.namespaced) { // Is this specific resource namespaced (could be primary or secondary resource)?\n        opt.namespaced = this.namespaceFilter; // namespaceFilter will only be populated if applicable for primary resource\n      }\n\n      return this.$store.dispatch(`${ currStore }/findAll`, {\n        type,\n        opt\n      });\n    },\n\n    __getCountForResources(resourceNames, namespace, storeType) {\n      const currStore = storeType || this.$store.getters['currentStore']();\n\n      return resourceNames.reduce((res, type) => res + this.__getCountForResource(type, namespace, currStore), 0);\n    },\n\n    __getCountForResource(resourceName, namespace, storeType) {\n      const resourceCounts = this.$store.getters[`${ storeType }/all`](COUNT)[0]?.counts[`${ resourceName }`]; // NB `rancher` store behaves differently, lacks counts but has resource\n      const resourceCount = namespace && resourceCounts?.namespaces ? resourceCounts?.namespaces[namespace]?.count : resourceCounts?.summary?.count;\n\n      return resourceCount || 0;\n    },\n\n    __gatherResourceFetchData(resourceName, multipleResources, currStore) {\n      // flag to prevent a first data update being triggered from the requestData watcher\n      this.init = true;\n\n      // manual refresh settings config\n      const manualDataRefreshEnabled = this.perfConfig?.manualRefresh?.enabled;\n      const manualDataRefreshThreshold = parseInt(this.perfConfig?.manualRefresh?.threshold || '0', 10);\n\n      // incremental loading settings config\n      const incrementalLoadingEnabled = this.perfConfig?.incrementalLoading?.enabled;\n      const incrementalLoadingThreshold = parseInt(this.perfConfig?.incrementalLoading?.threshold || '0', 10);\n\n      // other vars\n      this.multipleResources = multipleResources;\n      let resourceCount = 0;\n\n      // manual refresh vars\n      let watch = true;\n      let isTooManyItemsToAutoUpdate = false;\n\n      // incremental loading vars\n      let incremental = false;\n\n      // get resource counts\n      const resourcesForCount = this.multipleResources.length ? this.multipleResources : [resourceName];\n\n      resourceCount = this.__getCountForResources(resourcesForCount, this.namespaceFilter, currStore);\n\n      // manual refresh check\n      if (manualDataRefreshEnabled && resourceCount >= manualDataRefreshThreshold) {\n        watch = false;\n        isTooManyItemsToAutoUpdate = true;\n      }\n\n      // incremental loading check\n      incremental = incrementalLoadingEnabled && incrementalLoadingThreshold > 0 && resourceCount >= incrementalLoadingThreshold;\n\n      // pass on the flag that controls the appearance of the manual refresh button on the sortable table\n      this.$store.dispatch('resource-fetch/updateIsTooManyItems', isTooManyItemsToAutoUpdate);\n\n      // set vars on mixin to be used on $fetchType\n      this.watch = watch;\n      this.isTooManyItemsToAutoUpdate = isTooManyItemsToAutoUpdate;\n      this.incremental = incremental;\n    },\n  },\n};\n"],"mappings":";;;;;;;;;;;AAAA,SAASA,UAAU,QAAQ,MAAM;AACjC,SAASC,KAAK,EAAEC,UAAU,QAAQ,qBAAqB;AACvD,SAASC,OAAO,EAAEC,oBAAoB,QAAQ,wBAAwB;AACtE,OAAOC,uBAAuB,MAAM,yCAAyC;;AAE7E;AACA,IAAMC,KAAK,GAAG,CAAC;AAEf,eAAe;EAEbC,MAAM,EAAE,CAACF,uBAAuB,CAAC;EAEjCG,IAAI,WAAAA,KAAA,EAAG;IACL;IACA,IAAMC,WAAW,GAAG,IAAI,CAACC,MAAM,CAACC,OAAO,CAAC,iBAAiB,CAAC,CAACT,UAAU,CAACC,OAAO,EAAEA,OAAO,CAACS,cAAc,CAAC;IACtG,IAAIC,UAAU,GAAG,CAAC,CAAC;IAEnB,IAAIJ,WAAW,IAAIA,WAAW,CAACK,KAAK,EAAE;MACpC,IAAI;QACFD,UAAU,GAAGE,IAAI,CAACC,KAAK,CAACP,WAAW,CAACK,KAAK,CAAC;MAC5C,CAAC,CAAC,OAAOG,CAAC,EAAE;QACVC,OAAO,CAACC,IAAI,CAAC,8CAA8C,CAAC,CAAC,CAAC;MAChE;IACF,CAAC,MAAM;MACLN,UAAU,GAAGT,oBAAoB;IACnC;IAEA,OAAO;MACLS,UAAU,EAAVA,UAAU;MACVO,IAAI,EAAwB,KAAK;MACjCC,iBAAiB,EAAW,EAAE;MAC9BC,aAAa,EAAe,CAAC,IAAI,CAACC,QAAQ,CAAC;MAC3C;MACAC,gBAAgB,EAAY,KAAK;MACjCC,KAAK,EAAuB,IAAI;MAChCC,0BAA0B,EAAE,KAAK;MACjCC,KAAK,EAAuB,KAAK;MACjC;MACAC,WAAW,EAAiB,KAAK;MACjCC,mBAAmB,EAAS;IAC9B,CAAC;EACH,CAAC;EACDC,aAAa,WAAAA,cAAA,EAAG;IAAA,IAAAC,KAAA;IACd;IACA,IAAI,IAAI,CAACX,IAAI,EAAE;MACb;MACA,IAAI,CAACV,MAAM,CAACsB,QAAQ,CAAC,0BAA0B,CAAC;MAEhD,IAAI,CAACH,mBAAmB,CAACI,OAAO,CAAC,UAACC,IAAI,EAAK;QACzCH,KAAI,CAACrB,MAAM,CAACsB,QAAQ,IAAAG,MAAA,CAAKD,IAAI,CAACE,SAAS,4BAA0BF,IAAI,CAACG,IAAI,CAAC;MAC7E,CAAC,CAAC;IACJ;EACF,CAAC;EAEDC,QAAQ,EAAAC,aAAA,CAAAA,aAAA,KACHvC,UAAU,CAAC;IAAEwC,WAAW,EAAE;EAA6B,CAAC,CAAC;IAC5DC,IAAI,WAAAA,KAAA,EAAG;MAAA,IAAAC,MAAA;MACL,IAAMC,YAAY,GAAG,IAAI,CAACd,mBAAmB,CAACe,IAAI,CAAC,UAACV,IAAI;QAAA,OAAKA,IAAI,CAACG,IAAI,KAAKK,MAAI,CAACnB,QAAQ;MAAA,EAAC;MAEzF,IAAIoB,YAAY,EAAE;QAChB,OAAO,IAAI,CAACjC,MAAM,CAACC,OAAO,IAAAwB,MAAA,CAAKQ,YAAY,CAACP,SAAS,UAAQ,CAAC,IAAI,CAACb,QAAQ,CAAC;MAC9E,CAAC,MAAM;QACL,OAAO,EAAE;MACX;IACF,CAAC;IACDsB,OAAO,WAAAA,QAAA,EAAG;MACR,OAAO,IAAI,CAACJ,IAAI,CAACK,MAAM,GAAG,KAAK,GAAG,IAAI,CAACC,WAAW,CAACC,OAAO;IAC5D;EAAC,EACF;EACDvB,KAAK,EAAE;IACLe,WAAW,WAAAA,YAACS,GAAG,EAAE;MACf;MACA,IAAI,IAAI,CAAC7B,IAAI,IAAI6B,GAAG,EAAE;QACpB,IAAI,CAACC,MAAM,CAAC,CAAC;MACf;IACF;EACF,CAAC;EACDC,OAAO,EAAE;IACP;IACA;IACA;IACA;IACAC,oBAAoB,WAAAA,qBAACf,IAAI,EAAqC;MAAA,IAAnChB,iBAAiB,GAAAgC,SAAA,CAAAP,MAAA,QAAAO,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;MAAA,IAAEE,SAAS,GAAAF,SAAA,CAAAP,MAAA,OAAAO,SAAA,MAAAC,SAAA;MAC1D,IAAI,CAAC,IAAI,CAAClC,IAAI,EAAE;QACd,IAAMgB,SAAS,GAAGmB,SAAS,IAAI,IAAI,CAAC7C,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;QAEpE,IAAI,CAAC6C,yBAAyB,CAACnB,IAAI,EAAEhB,iBAAiB,EAAEe,SAAS,CAAC;;QAElE;QACA,IAAI,CAAC,IAAI,CAACX,KAAK,EAAE;UACf,IAAI,CAACE,KAAK,GAAG,IAAI;QACnB;QAEA,IAAI,IAAI,CAACD,0BAA0B,EAAE;UACnC,IAAI,CAACF,gBAAgB,GAAG,IAAI;QAC9B;MACF;IACF,CAAC;IACD;IACAiC,UAAU,WAAAA,WAACpB,IAAI,EAAqC;MAAA,IAAAqB,kBAAA;MAAA,IAAnCrC,iBAAiB,GAAAgC,SAAA,CAAAP,MAAA,QAAAO,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;MAAA,IAAEE,SAAS,GAAAF,SAAA,CAAAP,MAAA,OAAAO,SAAA,MAAAC,SAAA;MAChD,IAAMlB,SAAS,GAAGmB,SAAS,IAAI,IAAI,CAAC7C,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;MAEpE,IAAI,CAACyC,oBAAoB,CAACf,IAAI,EAAEhB,iBAAiB,EAAEe,SAAS,CAAC;MAE7D,IAAI,CAAC,IAAI,CAACP,mBAAmB,CAACe,IAAI,CAAC,UAACV,IAAI;QAAA,OAAKA,IAAI,CAACG,IAAI,KAAKA,IAAI;MAAA,EAAC,EAAE;QAChE,IAAI,CAACR,mBAAmB,CAAC8B,IAAI,CAAC;UAC5BtB,IAAI,EAAJA,IAAI;UACJD,SAAS,EAATA;QACF,CAAC,CAAC;MACJ;MAEA,IAAIR,WAAW,GAAG,CAAC;MAEnB,IAAI,IAAI,CAACA,WAAW,EAAE;QACpB,IAAMgC,aAAa,GAAG,IAAI,CAACC,sBAAsB,CAAC,CAACxB,IAAI,CAAC,EAAE,IAAI,CAACyB,eAAe,EAAE1B,SAAS,CAAC;QAE1FR,WAAW,GAAGmC,IAAI,CAACC,IAAI,CAACJ,aAAa,GAAGtD,KAAK,CAAC;MAChD;MAEA,IAAM2D,GAAG,GAAG;QACVrC,WAAW,EAAXA,WAAW;QACXH,KAAK,EAAa,IAAI,CAACA,KAAK;QAC5BE,KAAK,EAAa,IAAI,CAACA,KAAK;QAC5BH,gBAAgB,EAAE,IAAI,CAACA;MACzB,CAAC;MAED,IAAM0C,MAAM,GAAG,IAAI,CAACxD,MAAM,CAACC,OAAO,IAAAwB,MAAA,CAAKC,SAAS,gBAAc,CAACC,IAAI,CAAC;MAEpE,IAAI6B,MAAM,aAANA,MAAM,gBAAAR,kBAAA,GAANQ,MAAM,CAAEC,UAAU,cAAAT,kBAAA,eAAlBA,kBAAA,CAAoBU,UAAU,EAAE;QAAE;QACpCH,GAAG,CAACG,UAAU,GAAG,IAAI,CAACN,eAAe,CAAC,CAAC;MACzC;MAEA,OAAO,IAAI,CAACpD,MAAM,CAACsB,QAAQ,IAAAG,MAAA,CAAKC,SAAS,eAAa;QACpDC,IAAI,EAAJA,IAAI;QACJ4B,GAAG,EAAHA;MACF,CAAC,CAAC;IACJ,CAAC;IAEDJ,sBAAsB,WAAAA,uBAACQ,aAAa,EAAEC,SAAS,EAAEf,SAAS,EAAE;MAAA,IAAAgB,MAAA;MAC1D,IAAMnC,SAAS,GAAGmB,SAAS,IAAI,IAAI,CAAC7C,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;MAEpE,OAAO0D,aAAa,CAACG,MAAM,CAAC,UAACC,GAAG,EAAEpC,IAAI;QAAA,OAAKoC,GAAG,GAAGF,MAAI,CAACG,qBAAqB,CAACrC,IAAI,EAAEiC,SAAS,EAAElC,SAAS,CAAC;MAAA,GAAE,CAAC,CAAC;IAC7G,CAAC;IAEDsC,qBAAqB,WAAAA,sBAACC,YAAY,EAAEL,SAAS,EAAEf,SAAS,EAAE;MAAA,IAAAqB,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA;MACxD,IAAMC,cAAc,IAAAH,qBAAA,GAAG,IAAI,CAAClE,MAAM,CAACC,OAAO,IAAAwB,MAAA,CAAKoB,SAAS,UAAQ,CAACtD,KAAK,CAAC,CAAC,CAAC,CAAC,cAAA2E,qBAAA,uBAAnDA,qBAAA,CAAqDI,MAAM,IAAA7C,MAAA,CAAKwC,YAAY,EAAI,CAAC,CAAC;MACzG,IAAMf,aAAa,GAAGU,SAAS,IAAIS,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAEE,UAAU,GAAGF,cAAc,aAAdA,cAAc,gBAAAF,qBAAA,GAAdE,cAAc,CAAEE,UAAU,CAACX,SAAS,CAAC,cAAAO,qBAAA,uBAArCA,qBAAA,CAAuCK,KAAK,GAAGH,cAAc,aAAdA,cAAc,gBAAAD,qBAAA,GAAdC,cAAc,CAAEI,OAAO,cAAAL,qBAAA,uBAAvBA,qBAAA,CAAyBI,KAAK;MAE7I,OAAOtB,aAAa,IAAI,CAAC;IAC3B,CAAC;IAEDJ,yBAAyB,WAAAA,0BAACmB,YAAY,EAAEtD,iBAAiB,EAAEe,SAAS,EAAE;MAAA,IAAAgD,gBAAA,EAAAC,iBAAA,EAAAC,iBAAA,EAAAC,iBAAA;MACpE;MACA,IAAI,CAACnE,IAAI,GAAG,IAAI;;MAEhB;MACA,IAAMoE,wBAAwB,IAAAJ,gBAAA,GAAG,IAAI,CAACvE,UAAU,cAAAuE,gBAAA,gBAAAA,gBAAA,GAAfA,gBAAA,CAAiBK,aAAa,cAAAL,gBAAA,uBAA9BA,gBAAA,CAAgCM,OAAO;MACxE,IAAMC,0BAA0B,GAAGC,QAAQ,CAAC,EAAAP,iBAAA,OAAI,CAACxE,UAAU,cAAAwE,iBAAA,gBAAAA,iBAAA,GAAfA,iBAAA,CAAiBI,aAAa,cAAAJ,iBAAA,uBAA9BA,iBAAA,CAAgCQ,SAAS,KAAI,GAAG,EAAE,EAAE,CAAC;;MAEjG;MACA,IAAMC,yBAAyB,IAAAR,iBAAA,GAAG,IAAI,CAACzE,UAAU,cAAAyE,iBAAA,gBAAAA,iBAAA,GAAfA,iBAAA,CAAiBS,kBAAkB,cAAAT,iBAAA,uBAAnCA,iBAAA,CAAqCI,OAAO;MAC9E,IAAMM,2BAA2B,GAAGJ,QAAQ,CAAC,EAAAL,iBAAA,OAAI,CAAC1E,UAAU,cAAA0E,iBAAA,gBAAAA,iBAAA,GAAfA,iBAAA,CAAiBQ,kBAAkB,cAAAR,iBAAA,uBAAnCA,iBAAA,CAAqCM,SAAS,KAAI,GAAG,EAAE,EAAE,CAAC;;MAEvG;MACA,IAAI,CAACxE,iBAAiB,GAAGA,iBAAiB;MAC1C,IAAIuC,aAAa,GAAG,CAAC;;MAErB;MACA,IAAInC,KAAK,GAAG,IAAI;MAChB,IAAIC,0BAA0B,GAAG,KAAK;;MAEtC;MACA,IAAIE,WAAW,GAAG,KAAK;;MAEvB;MACA,IAAMqE,iBAAiB,GAAG,IAAI,CAAC5E,iBAAiB,CAACyB,MAAM,GAAG,IAAI,CAACzB,iBAAiB,GAAG,CAACsD,YAAY,CAAC;MAEjGf,aAAa,GAAG,IAAI,CAACC,sBAAsB,CAACoC,iBAAiB,EAAE,IAAI,CAACnC,eAAe,EAAE1B,SAAS,CAAC;;MAE/F;MACA,IAAIoD,wBAAwB,IAAI5B,aAAa,IAAI+B,0BAA0B,EAAE;QAC3ElE,KAAK,GAAG,KAAK;QACbC,0BAA0B,GAAG,IAAI;MACnC;;MAEA;MACAE,WAAW,GAAGkE,yBAAyB,IAAIE,2BAA2B,GAAG,CAAC,IAAIpC,aAAa,IAAIoC,2BAA2B;;MAE1H;MACA,IAAI,CAACtF,MAAM,CAACsB,QAAQ,CAAC,qCAAqC,EAAEN,0BAA0B,CAAC;;MAEvF;MACA,IAAI,CAACD,KAAK,GAAGA,KAAK;MAClB,IAAI,CAACC,0BAA0B,GAAGA,0BAA0B;MAC5D,IAAI,CAACE,WAAW,GAAGA,WAAW;IAChC;EACF;AACF,CAAC"}]}