{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/models/provisioning.cattle.io.cluster.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/models/provisioning.cattle.io.cluster.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["CAPI","MANAGEMENT","NORMAN","SNAPSHOT","HCI","SteveModel","findBy","get","set","sortBy","ucFirst","compare","AS","MODE","_VIEW","_YAML","HARVESTER_NAME","HARVESTER","CAPI_ANNOTATIONS","ProvCluster","_SteveModel","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","out","label","t","content","provisionerDisplay","machineProvider","machineProviderDisplay","kubernetesVersion","pools","length","desired","filter","x","rkeTemplate","push","formatter","splice","_this$metadata","_this$mgmt","provCreationTimestamp","Date","parse","metadata","creationTimestamp","mgmtCreationTimestamp","mgmt","_this$mgmt2","_get","_getPrototypeOf","prototype","_this$mgmt3","canExplore","isReady","hasError","action","$rootGetters","enabled","_this$mgmt4","_this$mgmt5","_this$mgmt6","_clusterTemplatesSche","_clusterTemplatesSche2","_this$normanCluster","_this$mgmt7","_this$mgmt8","_this$mgmt9","_this$mgmt10","_this$mgmt11","_this$mgmt12","_this$mgmt13","isLocal","remove","findIndex","a","ready","canEditRKE2cluster","isRke2","canUpdate","canSnapshot","isRke1","hasAction","clusterTemplatesSchema","$getters","canUpdateClusterTemplate","resourceMethods","includes","normanClusterSaveTemplateAction","normanCluster","actions","saveAsTemplate","canSaveRKETemplate","status","driver","spec","clusterTemplateName","hasLink","icon","links","shell","bulkAction","bulkable","divider","concat","_this$status","name","clusterName","CLUSTER","value","explore","location","params","cluster","id","currentRouter","_goToHarvesterCluster","_asyncToGenerator","regeneratorRuntime","mark","_callee","harvesterCluster","wrap","_callee$","_context","prev","next","$dispatch","_objectSpread","type","sent","goToCluster","t0","stop","goToHarvesterCluster","goToViewYaml","_this$mgmt14","detailLocation","query","_defineProperty","stateObj","providers","provisioner","_this$spec","rkeConfig","machinePools","_this$pools","isImported","isK3s","_this$mgmt15","provider","startsWith","_this$mgmt16","_this$spec2","_this$mgmt17","rancherKubernetesEngineConfig","_this$mgmt18","isHarvester","_this$mgmt19","_this$id","replace","namespace","_this$status2","_this$mgmt20","_this$mgmt21","eksConfig","nodeGroups","waitForProvisioner","timeout","interval","_this","waitForTestFn","waitForMgmt","_this2","undefined","_this2$status","_pCluster$status","pCluster","RANCHER_CLUSTER","allKeys","Object","keys","configKey","find","k","endsWith","_this$spec3","toLowerCase","isImportedK3s","isImportedRke2","_this$mgmt22","providerLogo","unknown","_this$status3","_this$spec4","fromStatus","version","gitVersion","fromSpec","_this$annotations","_this$mgmt23","fromAnnotation","annotations","UI_CUSTOM_PROVIDER","_this$spec5","kind","machineConfigRef","_this$spec$rkeConfig","machinePoolDefaults","_this$spec$rkeConfig2","hostnameLengthLimit","removeDefaultHostnameLengthLimit","_this$machinePoolDefa","_this$spec6","_this3","NODE","node","mgmtClusterId","_this4","MACHINE","machine","_machine$metadata","_machine$spec","displayName","_this5","deployments","MACHINE_DEPLOYMENT","pool","_pool$spec","NODE_POOL","_this5$status","reduce","acc","pending","outdated","unavailable","_this6","names","nodes","conditions","c","error","map","nodeName","join","machines","_machine$status","_machine$status2","nodeRef","color","textColor","sort","_getOrCreateToken","_callee2","tokens","token","_callee2$","_context2","abrupt","CLUSTER_TOKEN","force","root","update","clusterId","save","getOrCreateToken","openShell","_this$mgmt24","generateKubeConfig","_this$mgmt25","_copyKubeConfig","_callee3","_this$mgmt26","_callee3$","_context3","copyKubeConfig","title","downloadKubeConfig","_this$mgmt27","downloadKubeConfigBulk","items","_this$mgmt28","_snapshotAction","_callee4","_callee4$","_context4","takeSnapshot","nameDisplay","message","err","snapshotAction","_snapshotBulk","_callee5","res","successful","i","_callee5$","_context5","Promise","allSettled","row","count","snapshotBulk","_x","url","escape","method","_this$spec7","_this$spec8","now","etcdSnapshotCreate","generation","args","etcd","s3","_this7","allSnapshots","s","restoreSnapshotAction","resource","saveAsRKETemplate","componentProps","component","rotateCertificates","rotateEncryptionKey","_stateObj","_this$mgmt$spec","_template$spec","_revision$spec","clusterTemplateRevisionName","template","RKE_TEMPLATE","revision","RKE_TEMPLATE_REVISION","upgrade","rkeTemplateUpgrade","_this$mgmt$spec2","_this8","_revisions$0$spec","revisions","b","parseInt","resourceVersion","reverse","_this$metadata3","_this$mgmt29","_this$metadata2","state","_this$spec9","_this$mgmt30","windowsPreferedCluster","cni","machineGlobalConfig","path","translationKey","validators","maxLength","machineSelectorConfig","machineLabelSelector","config","agentConfig","_remove","_callee6","_this$spec10","_pool$machineConfigRe","opt","cloudCredentialSecretName","credential","harvesterClusterId","_pool$machineConfigRe2","_pool$machineConfigRe3","poolConfig","_args6","_callee6$","_context6","CLOUD_CREDENTIAL","MACHINE_CONFIG_GROUP","vmNamespace","console","_status","data","_this$status4","some","condition","default"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/models/provisioning.cattle.io.cluster.js"],"sourcesContent":["import {\n  CAPI, MANAGEMENT, NORMAN, SNAPSHOT, HCI\n} from '@shell/config/types';\nimport SteveModel from '@shell/plugins/steve/steve-class';\nimport { findBy } from '@shell/utils/array';\nimport { get, set } from '@shell/utils/object';\nimport { sortBy } from '@shell/utils/sort';\nimport { ucFirst } from '@shell/utils/string';\nimport { compare } from '@shell/utils/version';\nimport { AS, MODE, _VIEW, _YAML } from '@shell/config/query-params';\nimport { HARVESTER_NAME as HARVESTER } from '@shell/config/features';\nimport { CAPI as CAPI_ANNOTATIONS } from '@shell/config/labels-annotations';\n\n/**\n * Class representing Cluster resource.\n * @extends SteveModel\n */\nexport default class ProvCluster extends SteveModel {\n  get details() {\n    const out = [\n      {\n        label:   this.t('cluster.detail.provisioner'),\n        content: this.provisionerDisplay || this.t('generic.none'),\n      },\n      {\n        label:   this.t('cluster.detail.machineProvider'),\n        content: this.machineProvider ? this.machineProviderDisplay : null,\n      },\n      {\n        label:   this.t('cluster.detail.kubernetesVersion'),\n        content: this.kubernetesVersion,\n      },\n      {\n        label:   this.t('cluster.detail.machinePools'),\n        content: this.pools.length,\n      },\n      {\n        label:   this.t('cluster.detail.machines'),\n        content: this.desired,\n      },\n    ].filter((x) => !!x.content);\n\n    // RKE Template details\n    const rkeTemplate = this.rkeTemplate;\n\n    if (rkeTemplate) {\n      out.push({\n        label:     this.t('cluster.detail.rkeTemplate'),\n        formatter: 'RKETemplateName',\n        content:   rkeTemplate,\n      });\n    }\n\n    if (!this.machineProvider) {\n      out.splice(1, 1);\n\n      return out;\n    }\n\n    return out;\n  }\n\n  // using this computed because on the provisioning cluster we are\n  // displaying the oldest age between provisioning.cluster and management.cluster\n  // so that on a version upgrade of Rancher (ex: 2.5.x to 2.6.x)\n  // we can have the correct age of the cluster displayed on the UI side\n  get creationTimestamp() {\n    const provCreationTimestamp = Date.parse(this.metadata?.creationTimestamp);\n    const mgmtCreationTimestamp = Date.parse(this.mgmt?.metadata?.creationTimestamp);\n\n    if (mgmtCreationTimestamp && mgmtCreationTimestamp < provCreationTimestamp) {\n      return this.mgmt?.metadata?.creationTimestamp;\n    }\n\n    return super.creationTimestamp;\n  }\n\n  // Models can specify a single action that will be shown as a button in the details masthead\n  get detailsAction() {\n    const canExplore = this.mgmt?.isReady && !this.hasError;\n\n    return {\n      action:  'explore',\n      label:   this.$rootGetters['i18n/t']('cluster.explore'),\n      enabled: canExplore,\n    };\n  }\n\n  get _availableActions() {\n    const out = super._availableActions;\n    const isLocal = this.mgmt?.isLocal;\n\n    // Don't let the user delete the local cluster from the UI\n    if (isLocal) {\n      const remove = out.findIndex((a) => a.action === 'promptRemove');\n\n      if (remove > -1) {\n        out.splice(remove, 1);\n      }\n    }\n    const ready = this.mgmt?.isReady;\n\n    const canEditRKE2cluster = this.isRke2 && ready && this.canUpdate;\n\n    const canSnapshot = ready && ((this.isRke2 && this.canUpdate) || (this.isRke1 && this.mgmt?.hasAction('backupEtcd')));\n\n    const clusterTemplatesSchema = this.$getters['schemaFor']('management.cattle.io.clustertemplate');\n    let canUpdateClusterTemplate = false;\n\n    if (clusterTemplatesSchema && (clusterTemplatesSchema.resourceMethods?.includes('blocked-PUT') || clusterTemplatesSchema.resourceMethods?.includes('PUT'))) {\n      canUpdateClusterTemplate = true;\n    }\n\n    const normanClusterSaveTemplateAction = !!this.normanCluster?.actions?.saveAsTemplate;\n\n    const canSaveRKETemplate = this.isRke1 && this.mgmt?.status?.driver === 'rancherKubernetesEngine' && !this.mgmt?.spec?.clusterTemplateName && this.hasLink('update') && canUpdateClusterTemplate && normanClusterSaveTemplateAction;\n\n    const actions = [\n      // Note: Actions are not supported in the Steve API, so we check\n      // available actions for RKE1 clusters, but not RKE2 clusters.\n      {\n        action:  'openShell',\n        label:   this.$rootGetters['i18n/t']('nav.shell'),\n        icon:    'icon icon-terminal',\n        enabled: !!this.mgmt?.links.shell && ready,\n      }, {\n        action:     'downloadKubeConfig',\n        bulkAction: 'downloadKubeConfigBulk',\n        label:      this.$rootGetters['i18n/t']('nav.kubeconfig.download'),\n        icon:       'icon icon-download',\n        bulkable:   true,\n        enabled:    this.mgmt?.hasAction('generateKubeconfig'),\n      }, {\n        action:   'copyKubeConfig',\n        label:    this.t('cluster.copyConfig'),\n        bulkable: false,\n        enabled:  this.mgmt?.hasAction('generateKubeconfig'),\n        icon:     'icon icon-copy',\n      }, {\n        action:     'snapshotAction',\n        label:      this.$rootGetters['i18n/t']('nav.takeSnapshot'),\n        icon:       'icon icon-snapshot',\n        bulkAction: 'snapshotBulk',\n        bulkable:   true,\n        enabled:    canSnapshot,\n      }, {\n        action:  'restoreSnapshotAction',\n        label:   this.$rootGetters['i18n/t']('nav.restoreSnapshot'),\n        icon:    'icon icon-fw icon-backup-restore',\n        enabled: canSnapshot,\n      }, {\n        action:  'rotateCertificates',\n        label:   this.$rootGetters['i18n/t']('nav.rotateCertificates'),\n        icon:    'icon icon-backup',\n        enabled: canEditRKE2cluster || (this.mgmt?.hasAction('rotateCertificates') && ready),\n      }, {\n        action:  'rotateEncryptionKey',\n        label:   this.$rootGetters['i18n/t']('nav.rotateEncryptionKeys'),\n        icon:    'icon icon-refresh',\n        enabled: canEditRKE2cluster || (this.isRke1 && this.mgmt?.hasAction('rotateEncryptionKey') && ready)\n      }, {\n        action:  'saveAsRKETemplate',\n        label:   this.$rootGetters['i18n/t']('nav.saveAsRKETemplate'),\n        icon:    'icon icon-folder',\n        enabled: canSaveRKETemplate,\n      }, { divider: true }];\n\n    return actions.concat(out);\n  }\n\n  get normanCluster() {\n    const name = this.status?.clusterName;\n\n    if ( !name ) {\n      return null;\n    }\n\n    const out = this.$rootGetters['rancher/byId'](NORMAN.CLUSTER, name);\n\n    return out;\n  }\n\n  explore() {\n    const location = {\n      name:   'c-cluster',\n      params: { cluster: this.mgmt.id }\n    };\n\n    this.currentRouter().push(location);\n  }\n\n  async goToHarvesterCluster() {\n    const harvesterCluster = await this.$dispatch('create', {\n      ...this,\n      type: HCI.CLUSTER\n    });\n\n    try {\n      await harvesterCluster.goToCluster();\n    } catch {\n    }\n  }\n\n  goToViewYaml() {\n    let location;\n\n    if ( !this.isRke2 ) {\n      location = this.mgmt?.detailLocation;\n    }\n\n    if ( !location ) {\n      location = this.detailLocation;\n    }\n\n    location.query = {\n      ...location.query,\n      [MODE]: _VIEW,\n      [AS]:   _YAML\n    };\n\n    this.currentRouter().push(location);\n  }\n\n  get canDelete() {\n    return super.canDelete && this.stateObj.name !== 'removing';\n  }\n\n  get canEditYaml() {\n    if (!this.isRke2) {\n      return false;\n    }\n\n    return super.canEditYaml;\n  }\n\n  get isHostedKubernetesProvider() {\n    const providers = ['AKS', 'EKS', 'GKE'];\n\n    return providers.includes(this.provisioner);\n  }\n\n  get isImported() {\n    // As of Rancher v2.6.7, this returns false for imported K3s clusters,\n    // in which this.provisioner is `k3s`.\n    return this.provisioner === 'imported';\n  }\n\n  get isCustom() {\n    if ( this.isRke2 ) {\n      return !(this.spec?.rkeConfig?.machinePools?.length);\n    }\n\n    if ( this.isRke1 ) {\n      return !this.pools?.length;\n    }\n\n    return false;\n  }\n\n  get confirmRemove() {\n    return true;\n  }\n\n  get isImportedK3s() {\n    // As of Rancher v2.6.7, this returns false for imported K3s clusters,\n    // in which this.provisioner is `k3s`.\n    return this.isImported && this.isK3s;\n  }\n\n  get isImportedRke2() {\n    return this.isImported && this.mgmt?.status?.provider?.startsWith('rke2');\n  }\n\n  get isK3s() {\n    return this.mgmt?.status?.provider === 'k3s';\n  }\n\n  get isRke2() {\n    return !!this.spec?.rkeConfig;\n  }\n\n  get isRke1() {\n    return !!this.mgmt?.spec?.rancherKubernetesEngineConfig;\n  }\n\n  get isHarvester() {\n    return !!this.mgmt?.isHarvester;\n  }\n\n  get mgmtClusterId() {\n    return this.mgmt?.id || this.id?.replace(`${ this.metadata.namespace }/`, '');\n  }\n\n  get mgmt() {\n    const name = this.status?.clusterName;\n\n    if ( !name ) {\n      return null;\n    }\n\n    const out = this.$rootGetters['management/byId'](MANAGEMENT.CLUSTER, name);\n\n    return out;\n  }\n\n  get isReady() {\n    return !!this.mgmt?.isReady;\n  }\n\n  // nodeGroups can be undefined for an EKS cluster that has just been created and has not\n  // had any node groups added to it\n  get eksNodeGroups() {\n    return this.mgmt?.spec?.eksConfig?.nodeGroups || [];\n  }\n\n  waitForProvisioner(timeout, interval) {\n    return this.waitForTestFn(() => {\n      return !!this.provisioner;\n    }, `set provisioner`, timeout, interval);\n  }\n\n  waitForMgmt(timeout = 60000, interval) {\n    return this.waitForTestFn(() => {\n      // `this` instance isn't getting updated with `status.clusterName`\n      // Workaround - Get fresh copy from the store\n      const pCluster = this.$rootGetters['management/byId'](CAPI.RANCHER_CLUSTER, this.id);\n      const name = this.status?.clusterName || pCluster?.status?.clusterName;\n\n      return name && !!this.$rootGetters['management/byId'](MANAGEMENT.CLUSTER, name);\n    }, this.$rootGetters['i18n/t']('cluster.managementTimeout'), timeout, interval);\n  }\n\n  get provisioner() {\n    if ( this.isRke2 ) {\n      const allKeys = Object.keys(this.spec);\n      const configKey = allKeys.find( (k) => k.endsWith('Config'));\n\n      if ( configKey === 'rkeConfig') {\n        return 'rke2';\n      } else if ( configKey ) {\n        return configKey.replace(/config$/i, '');\n      }\n    } else if ( this.mgmt ) {\n      return this.mgmt.provisioner;\n    }\n\n    return null;\n  }\n\n  get provisionerDisplay() {\n    let provisioner = (this.provisioner || '').toLowerCase();\n\n    // RKE provisioner can actually do K3s too...\n    if ( provisioner === 'rke2' && this.spec?.kubernetesVersion?.includes('k3s') ) {\n      provisioner = 'k3s';\n    } else if ( this.isImportedK3s ) {\n      provisioner = 'k3s';\n    } else if ( this.isImportedRke2 ) {\n      provisioner = 'rke2';\n    }\n\n    return this.$rootGetters['i18n/withFallback'](`cluster.provider.\"${ provisioner }\"`, null, ucFirst(provisioner));\n  }\n\n  get providerLogo() {\n    return this.mgmt?.providerLogo;\n  }\n\n  get kubernetesVersion() {\n    const unknown = this.$rootGetters['i18n/t']('generic.unknown');\n\n    if ( this.isRke2 ) {\n      const fromStatus = this.status?.version?.gitVersion;\n      const fromSpec = this.spec?.kubernetesVersion;\n\n      return fromStatus || fromSpec || unknown;\n    } else if ( this.mgmt ) {\n      return this.mgmt.kubernetesVersion || unknown;\n    } else {\n      return unknown;\n    }\n  }\n\n  get machineProvider() {\n    // First check annotation - useful for clusters created by extension providers\n    const fromAnnotation = this.annotations?.[CAPI_ANNOTATIONS.UI_CUSTOM_PROVIDER];\n\n    if (fromAnnotation) {\n      return fromAnnotation;\n    }\n\n    if (this.isHarvester) {\n      return HARVESTER;\n    } else if ( this.isImported ) {\n      return null;\n    } else if ( this.isRke2 ) {\n      const kind = this.spec?.rkeConfig?.machinePools?.[0]?.machineConfigRef?.kind?.toLowerCase();\n\n      if ( kind ) {\n        return kind.replace(/config$/i, '').toLowerCase();\n      }\n\n      return null;\n    } else if ( this.mgmt?.machineProvider ) {\n      return this.mgmt.machineProvider.toLowerCase();\n    }\n\n    return null;\n  }\n\n  get machineProviderDisplay() {\n    if ( this.isImported ) {\n      return null;\n    }\n\n    const provider = (this.machineProvider || '').toLowerCase();\n\n    if ( provider ) {\n      return this.$rootGetters['i18n/withFallback'](`cluster.provider.\"${ provider }\"`, null, provider);\n    } else {\n      return this.$rootGetters['i18n/t']('generic.unknown');\n    }\n  }\n\n  get machinePoolDefaults() {\n    return this.spec.rkeConfig?.machinePoolDefaults;\n  }\n\n  set defaultHostnameLengthLimit(value) {\n    this.spec.rkeConfig = this.spec.rkeConfig || {};\n    this.spec.rkeConfig.machinePoolDefaults = this.spec.rkeConfig.machinePoolDefaults || {};\n    this.spec.rkeConfig.machinePoolDefaults.hostnameLengthLimit = value;\n  }\n\n  get defaultHostnameLengthLimit() {\n    return this.spec.rkeConfig?.machinePoolDefaults?.hostnameLengthLimit;\n  }\n\n  removeDefaultHostnameLengthLimit() {\n    if (this.machinePoolDefaults?.hostnameLengthLimit) {\n      delete this.spec.rkeConfig.machinePoolDefaults.hostnameLengthLimit;\n\n      if (Object.keys(this.spec?.rkeConfig?.machinePoolDefaults).length === 0) {\n        delete this.spec.rkeConfig.machinePoolDefaults;\n      }\n    }\n  }\n\n  get nodes() {\n    return this.$rootGetters['management/all'](MANAGEMENT.NODE).filter((node) => node.id.startsWith(this.mgmtClusterId));\n  }\n\n  get machines() {\n    return this.$rootGetters['management/all'](CAPI.MACHINE).filter((machine) => {\n      if ( machine.metadata?.namespace !== this.metadata.namespace ) {\n        return false;\n      }\n\n      return machine.spec?.clusterName === this.metadata.name;\n    });\n  }\n\n  get displayName() {\n    if ( this.mgmt && !this.isRke2 ) {\n      return this.mgmt.spec.displayName;\n    }\n\n    return null;\n  }\n\n  get pools() {\n    const deployments = this.$rootGetters['management/all'](CAPI.MACHINE_DEPLOYMENT).filter((pool) => pool.spec?.clusterName === this.metadata.name);\n\n    if (!!deployments.length) {\n      return deployments;\n    }\n\n    return this.$rootGetters['management/all'](MANAGEMENT.NODE_POOL).filter((pool) => pool.spec.clusterName === this.status?.clusterName);\n  }\n\n  get desired() {\n    return this.pools.reduce((acc, pool) => acc + (pool.desired || 0), 0);\n  }\n\n  get pending() {\n    return this.pools.reduce((acc, pool) => acc + (pool.pending || 0), 0);\n  }\n\n  get outdated() {\n    return this.pools.reduce((acc, pool) => acc + (pool.outdated || 0), 0);\n  }\n\n  get ready() {\n    return this.pools.reduce((acc, pool) => acc + (pool.ready || 0), 0);\n  }\n\n  get unavailable() {\n    return this.pools.reduce((acc, pool) => acc + (pool.unavailable || 0), 0);\n  }\n\n  get unavailableMachines() {\n    if (this.isReady) {\n      if (this.isRke1) {\n        const names = this.nodes.filter((node) => {\n          return node.status.conditions.find((c) => c.error && c.type === 'Ready');\n        }).map((node) => {\n          const name = node.status.nodeName || node.metadata.name;\n\n          return this.t('cluster.availabilityWarnings.node', { name });\n        });\n\n        return names.join('<br>');\n      } else {\n        const names = this.machines.filter((machine) => {\n          return machine.status?.conditions?.find((c) => c.error && c.type === 'NodeHealthy');\n        }).map((machine) => {\n          if (machine.status?.nodeRef?.name) {\n            return this.t('cluster.availabilityWarnings.node', { name: machine.status.nodeRef.name });\n          }\n\n          return this.t('cluster.availabilityWarnings.machine', { name: machine.metadata.name });\n        });\n\n        return names.join('<br>');\n      }\n    }\n\n    return '';\n  }\n\n  get stateParts() {\n    const out = [\n      {\n        label:     'Pending',\n        color:     'bg-info',\n        textColor: 'text-info',\n        value:     this.pending,\n        sort:      1,\n      },\n      {\n        label:     'Outdated',\n        color:     'bg-warning',\n        textColor: 'text-warning',\n        value:     this.outdated,\n        sort:      2,\n      },\n      {\n        label:     'Unavailable',\n        color:     'bg-error',\n        textColor: 'text-error',\n        value:     this.unavailable,\n        sort:      3,\n      },\n      {\n        label:     'Ready',\n        color:     'bg-success',\n        textColor: 'text-success',\n        value:     this.ready,\n        sort:      4,\n      },\n    ].filter((x) => x.value > 0);\n\n    return sortBy(out, 'sort:desc');\n  }\n\n  async getOrCreateToken() {\n    await this.waitForMgmt();\n\n    if ( !this.mgmt ) {\n      return;\n    }\n\n    const tokens = await this.$dispatch('rancher/findAll', { type: NORMAN.CLUSTER_TOKEN, force: true }, { root: true });\n\n    let token = findBy(tokens, 'clusterId', this.mgmt.id);\n\n    if ( token ) {\n      return token;\n    }\n\n    if ( !this.links.update ) {\n      return;\n    }\n\n    token = await this.$dispatch('rancher/create', {\n      type:      NORMAN.CLUSTER_TOKEN,\n      clusterId: this.mgmt.id\n    }, { root: true });\n\n    return token.save();\n  }\n\n  openShell() {\n    return this.mgmt?.openShell();\n  }\n\n  generateKubeConfig() {\n    return this.mgmt?.generateKubeConfig();\n  }\n\n  async copyKubeConfig() {\n    await this.mgmt?.copyKubeConfig();\n\n    this.$dispatch('growl/success', {\n      title:   this.t('cluster.copiedConfig'),\n      timeout: 3000,\n    }, { root: true });\n  }\n\n  downloadKubeConfig() {\n    return this.mgmt?.downloadKubeConfig();\n  }\n\n  downloadKubeConfigBulk(items) {\n    return this.mgmt?.downloadKubeConfigBulk(items);\n  }\n\n  async snapshotAction() {\n    try {\n      await this.takeSnapshot();\n      this.$dispatch('growl/success', {\n        title:   this.$rootGetters['i18n/t']('cluster.snapshot.successTitle', { name: this.nameDisplay }),\n        message: this.$rootGetters['i18n/t']('cluster.snapshot.successMessage', { name: this.nameDisplay })\n      }, { root: true });\n    } catch (err) {\n      this.$dispatch('growl/fromError', {\n        title: this.$rootGetters['i18n/t']('cluster.snapshot.errorTitle', { name: this.nameDisplay }),\n        err,\n      }, { root: true });\n    }\n  }\n\n  async snapshotBulk(items) {\n    const res = await Promise.allSettled(items.map((row) => {\n      return row.takeSnapshot();\n    }));\n\n    const successful = res.filter( (x) => x.status === 'fulfilled').length;\n\n    if ( successful ) {\n      this.$dispatch('growl/success', {\n        title:   this.$rootGetters['i18n/t']('cluster.snapshot.bulkSuccessTitle'),\n        message: this.$rootGetters['i18n/t']('cluster.snapshot.bulkSuccessMessage', { count: successful })\n      }, { root: true });\n    }\n\n    for ( let i = 0 ; i < res.length ; i++ ) {\n      if ( res[i].status !== 'fulfilled' ) {\n        this.$dispatch('growl/fromError', {\n          title: this.$rootGetters['i18n/t']('cluster.snapshot.errorTitle', { name: items[i].nameDisplay }),\n          err:   res[i].value,\n        }, { root: true });\n      }\n    }\n  }\n\n  takeSnapshot() {\n    if ( this.isRke1 ) {\n      return this.$dispatch('rancher/request', {\n        url:    `/v3/clusters/${ escape(this.mgmt.id) }?action=backupEtcd`,\n        method: 'post',\n      }, { root: true });\n    } else {\n      const now = this.spec?.rkeConfig?.etcdSnapshotCreate?.generation || 0;\n      const args = { generation: now + 1 };\n\n      if ( this.spec?.rkeConfig?.etcd?.s3 ) {\n        args.s3 = this.spec.rkeConfig.etcd.s3;\n      }\n\n      set(this.spec.rkeConfig, 'etcdSnapshotCreate', args);\n\n      return this.save();\n    }\n  }\n\n  get etcdSnapshots() {\n    const allSnapshots = this.$rootGetters['management/all']({ type: SNAPSHOT });\n\n    return allSnapshots\n      .filter((s) => s.metadata.namespace === this.namespace && s.clusterName === this.name );\n  }\n\n  restoreSnapshotAction(resource = this) {\n    this.$dispatch('promptRestore', [resource]);\n  }\n\n  saveAsRKETemplate(cluster = this) {\n    this.$dispatch('promptModal', {\n      componentProps: { cluster },\n      component:      'SaveAsRKETemplateDialog'\n    });\n  }\n\n  rotateCertificates(cluster = this) {\n    this.$dispatch('promptModal', {\n      componentProps: { cluster },\n\n      component: 'RotateCertificatesDialog'\n    });\n  }\n\n  rotateEncryptionKey(cluster = this) {\n    this.$dispatch('promptModal', {\n      componentProps: { cluster },\n      component:      'RotateEncryptionKeyDialog'\n    });\n  }\n\n  get stateObj() {\n    return this._stateObj;\n  }\n\n  get rkeTemplate() {\n    if (!this.isRke1 || !this.mgmt) {\n      // Not an RKE! cluster or no management cluster available\n      return false;\n    }\n\n    if (!this.mgmt.spec?.clusterTemplateRevisionName) {\n      // Cluster does not use an RKE template\n      return false;\n    }\n\n    const clusterTemplateName = this.mgmt.spec.clusterTemplateName.replace(':', '/');\n    const clusterTemplateRevisionName = this.mgmt.spec.clusterTemplateRevisionName.replace(':', '/');\n    const template = this.$rootGetters['management/all'](MANAGEMENT.RKE_TEMPLATE).find((t) => t.id === clusterTemplateName);\n    const revision = this.$rootGetters['management/all'](MANAGEMENT.RKE_TEMPLATE_REVISION).find((t) => t.spec.enabled && t.id === clusterTemplateRevisionName);\n\n    if (!template || !revision) {\n      return false;\n    }\n\n    return {\n      displayName: `${ template.spec?.displayName }/${ revision.spec?.displayName }`,\n      upgrade:     this.rkeTemplateUpgrade,\n      template,\n      revision,\n    };\n  }\n\n  get rkeTemplateUpgrade() {\n    if (!this.isRke1 || !this.mgmt) {\n      // Not an RKE! cluster or no management cluster available\n      return false;\n    }\n\n    if (!this.mgmt.spec?.clusterTemplateRevisionName) {\n      // Cluster does not use an RKE template\n      return false;\n    }\n\n    const clusterTemplateRevisionName = this.mgmt.spec.clusterTemplateRevisionName.replace(':', '/');\n\n    // Get all of the template revisions for this template\n    const revisions = this.$rootGetters['management/all'](MANAGEMENT.RKE_TEMPLATE_REVISION).filter((t) => t.spec.enabled && t.spec.clusterTemplateName === this.mgmt.spec.clusterTemplateName);\n\n    if (revisions.length <= 1) {\n      // Only one template revision\n      return false;\n    }\n\n    revisions.sort((a, b) => {\n      return parseInt(a.metadata.resourceVersion, 10) - parseInt(b.metadata.resourceVersion, 10);\n    }).reverse();\n\n    return revisions[0].id !== clusterTemplateRevisionName ? revisions[0].spec?.displayName : false;\n  }\n\n  get _stateObj() {\n    if (!this.isRke2) {\n      return this.mgmt?.stateObj || this.metadata?.state;\n    }\n\n    return this.metadata?.state;\n  }\n\n  get supportsWindows() {\n    if (this.isK3s || this.isImportedK3s) {\n      return false;\n    }\n\n    if ( this.isRke1 ) {\n      return this.mgmt?.spec?.windowsPreferedCluster || false;\n    }\n\n    if ( !this.isRke2 ) {\n      return false;\n    }\n\n    if ( !this.kubernetesVersion || compare(this.kubernetesVersion, 'v1.21.0') < 0 ) {\n      return false;\n    }\n\n    const cni = this.spec?.rkeConfig?.machineGlobalConfig?.cni;\n\n    if ( cni && cni !== 'calico' ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  get customValidationRules() {\n    return [\n      {\n        path:           'metadata.name',\n        translationKey: 'cluster.name.label',\n        validators:     [`clusterName:${ this.isRke2 }`],\n        maxLength:      63,\n      },\n    ];\n  }\n\n  get agentConfig() {\n    // The one we want is the first one with no selector.\n    // If there are multiple with no selector, that will fall under the unsupported message below.\n    return this.spec.rkeConfig.machineSelectorConfig.find((x) => !x.machineLabelSelector).config;\n  }\n\n  get cloudProvider() {\n    return this.agentConfig['cloud-provider-name'];\n  }\n\n  get canClone() {\n    return false;\n  }\n\n  async remove(opt = {}) {\n    if ( !opt.url ) {\n      opt.url = (this.links || {})['self'];\n    }\n\n    opt.method = 'delete';\n\n    const res = await this.$dispatch('request', opt);\n\n    const pool = (this.spec?.rkeConfig?.machinePools || [])[0];\n\n    if (pool?.machineConfigRef?.kind === 'HarvesterConfig') {\n      const cloudCredentialSecretName = this.spec.cloudCredentialSecretName;\n\n      await this.$dispatch('rancher/findAll', { type: NORMAN.CLOUD_CREDENTIAL }, { root: true });\n\n      const credential = this.$rootGetters['rancher/byId'](NORMAN.CLOUD_CREDENTIAL, cloudCredentialSecretName);\n\n      if (credential) {\n        const harvesterClusterId = get(credential, 'decodedData.clusterId');\n\n        try {\n          const poolConfig = await this.$dispatch('management/find', {\n            type: `${ CAPI.MACHINE_CONFIG_GROUP }.${ (pool?.machineConfigRef?.kind || '').toLowerCase() }`,\n            id:   `${ this.metadata.namespace }/${ pool?.machineConfigRef?.name }`,\n          }, { root: true });\n\n          await this.$dispatch('management/request', {\n            url:    `/k8s/clusters/${ harvesterClusterId }/v1/harvester/serviceaccounts/${ poolConfig.vmNamespace }/${ this.metadata.name }`,\n            method: 'DELETE',\n          }, { root: true });\n        } catch (e) {\n          console.error(e); // eslint-disable-line no-console\n        }\n      }\n    }\n\n    if ( res?._status === 204 ) {\n      await this.$dispatch('ws.resource.remove', { data: this });\n    }\n  }\n\n  get hasError() {\n    return this.status?.conditions?.some((condition) => condition.error === true);\n  }\n}\n"],"mappings":"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"}]}