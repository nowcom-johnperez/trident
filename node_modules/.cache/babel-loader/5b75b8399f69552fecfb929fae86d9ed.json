{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/pkg/nowcom/pages/listnetwork.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/pkg/nowcom/pages/listnetwork.vue","mtime":1716430386795},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5IjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiOwpmdW5jdGlvbiBvd25LZXlzKGUsIHIpIHsgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpOyByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgcikuZW51bWVyYWJsZTsgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7IH0gcmV0dXJuIHQ7IH0KZnVuY3Rpb24gX29iamVjdFNwcmVhZChlKSB7IGZvciAodmFyIHIgPSAxOyByIDwgYXJndW1lbnRzLmxlbmd0aDsgcisrKSB7IHZhciB0ID0gbnVsbCAhPSBhcmd1bWVudHNbcl0gPyBhcmd1bWVudHNbcl0gOiB7fTsgciAlIDIgPyBvd25LZXlzKE9iamVjdCh0KSwgITApLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgX2RlZmluZVByb3BlcnR5KGUsIHIsIHRbcl0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModCkpIDogb3duS2V5cyhPYmplY3QodCkpLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCwgcikpOyB9KTsgfSByZXR1cm4gZTsgfQppbXBvcnQgeyBTT1JUQUJMRV9TVUJfTkVUV09SS19IRUFERVJTLCBTT1JUQUJMRV9ORVRXT1JLX0hFQURFUlMgfSBmcm9tICcuLi9jb25maWcvdGFibGUnOwppbXBvcnQgeyBWTkVUX0JVVFRPTlMgfSBmcm9tICcuLi9jb25maWcvYnV0dG9ucyc7CmltcG9ydCB7IG1hcEdldHRlcnMgfSBmcm9tICd2dWV4JzsKaW1wb3J0IFNvcnRhYmxlVGFibGUgZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvUmVzb3VyY2VUYWJsZS52dWUnOwppbXBvcnQgY0J1dHRvbiBmcm9tICcuLi9jb21wb25lbnRzL2NvbW1vbi9CdXR0b24nOwppbXBvcnQgU2lkZUJhciBmcm9tICcuLi9jb21wb25lbnRzL1NpZGViYXInOwppbXBvcnQgR3JvdXBCdXR0b25zIGZyb20gJy4uL2NvbXBvbmVudHMvY29tbW9uL0dyb3VwQnV0dG9ucyc7CmltcG9ydCBNb2RhbCBmcm9tICcuLi9jb21wb25lbnRzL2NvbW1vbi9Nb2RhbCc7CmltcG9ydCBBbGVydCBmcm9tICcuLi9jb21wb25lbnRzL2NvbW1vbi9BbGVydCc7CmltcG9ydCBBZGRTdWJuZXQgZnJvbSAnLi4vY29tcG9uZW50cy9mb3Jtcy9BZGRTdWJuZXQnOwppbXBvcnQgeyBQUk9EVUNUX05BTUUsIENSRUFURV9ORVRXT1JLLCBCTEFOS19DTFVTVEVSIH0gZnJvbSAnLi4vY29uZmlnL2NvbnN0YW50cyc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnTGlzdE5ldHdvcmsnLAogIGNvbXBvbmVudHM6IHsKICAgIFNvcnRhYmxlVGFibGU6IFNvcnRhYmxlVGFibGUsCiAgICBjQnV0dG9uOiBjQnV0dG9uLAogICAgU2lkZUJhcjogU2lkZUJhciwKICAgIEdyb3VwQnV0dG9uczogR3JvdXBCdXR0b25zLAogICAgTW9kYWw6IE1vZGFsLAogICAgQWxlcnQ6IEFsZXJ0LAogICAgQWRkU3VibmV0OiBBZGRTdWJuZXQKICB9LAogIC8vIGxheW91dDogJ2hvbWUnLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBzZWxlY3RlZE5hbWU6ICcnLAogICAgICAvLyBEcm9wZG93biBmb3IgbmV0d29yayBuYW1lCiAgICAgIHNlbGVjdGVkVm5ldE5hbWU6ICcnLAogICAgICBzZWxlY3RlZFN1Ym5ldE5hbWU6ICcnLAogICAgICBzZWxlY3RlZFZuZXRTdWJuZXRzOiAnMTAuNTUuMC4wJywKICAgICAgbG9hZGluZzogZmFsc2UsCiAgICAgIGlzTW9kYWxPcGVuOiBmYWxzZSwKICAgICAgYXBpUmVzcG9uc2U6IG51bGwsCiAgICAgIHN1Ym5ldFJlc3BvbnNlOiBudWxsLAogICAgICBpc01vZGFsU3VibmV0T3BlbjogZmFsc2UsCiAgICAgIHZuZXRfbmFtZTogJycsCiAgICAgIHN1Ym5ldF9uYW1lOiAnJywKICAgICAgc3VibmV0X2FkZHJlc3M6ICcnLAogICAgICBzdWJuZXRfcHJlZml4X2xlbjogJycsCiAgICAgIHN1Ym5ldF9pZDogJycsCiAgICAgIHNlbGVjdGVkTmV0d29yazogbnVsbCwKICAgICAgc2lkZWJhclZpc2libGU6IGZhbHNlLAogICAgICBhZGRTdWJuZXRTaWRlYmFyVmlzaWJsZTogZmFsc2UsCiAgICAgIGFwaUVycm9yOiBudWxsLAogICAgICBhcGlSZXNwb25zZU1lc3NhZ2U6ICcnLAogICAgICBmaWx0ZXJzOiB7CiAgICAgICAgbmFtZTogewogICAgICAgICAgdmFsdWU6ICcnLAogICAgICAgICAga2V5czogWydsb25nTmFtZSddCiAgICAgICAgfQogICAgICB9LAogICAgICBjdXJyZW50UGFnZTogMSwKICAgICAgdG90YWxQYWdlczogMCwKICAgICAgbmV0d29ya0hlYWRlcjogW10sCiAgICAgIHN1Ym5ldHdvcmtIZWFkZXI6IFtdLAogICAgICB2bmV0QnV0dG9uczogW10KICAgIH07CiAgfSwKICBjb21wdXRlZDogX29iamVjdFNwcmVhZCh7fSwgbWFwR2V0dGVycyhQUk9EVUNUX05BTUUsIHsKICAgIG5ldHdvcmtzOiAnaXRlbXMnCiAgfSkpLAogIG1ldGhvZHM6IHsKICAgIGFjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uIGFjdGlvbkhhbmRsZXIoYWN0aW9uKSB7CiAgICAgIGlmIChhY3Rpb24gPT09ICdjcmVhdGUnKSB7CiAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goIi8iLmNvbmNhdChQUk9EVUNUX05BTUUsICIvYy8iKS5jb25jYXQoQkxBTktfQ0xVU1RFUiwgIi8iKS5jb25jYXQoQ1JFQVRFX05FVFdPUkspKTsKICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT09ICdyZWZyZXNoJykgewogICAgICAgIHRoaXMuZmV0Y2hOZXR3b3JrcygpOwogICAgICB9CiAgICB9LAogICAgZ2V0U3VibmV0QnlOYW1lOiBmdW5jdGlvbiBnZXRTdWJuZXRCeU5hbWUobmV0d29ya05hbWUpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAvLyBjb25zdCBzdWJuZXRSZXMgPSBhd2FpdCB2TmV0U2VydmljZS5nZXRTdWJuZXRCeU5hbWUobmV0d29ya05hbWUpOwoKICAgICAgICAgICAgICBfdGhpcy5zZWxlY3RlZE5ldHdvcmsgPSBudWxsOwoKICAgICAgICAgICAgICAvLyB0aGlzLnNlbGVjdGVkTmV0d29yay5zdWJuZXRzID0gc3VibmV0UmVzLmRhdGEuc3BlYy5zdWJuZXRzLm1hcChzdWJuZXQgPT4gKHsKICAgICAgICAgICAgICAvLyAgIGFkZHJlc3M6ICAgIHN1Ym5ldC5hZGRyZXNzLAogICAgICAgICAgICAgIC8vICAgZm9ybWF0dGVkQWRkcmVzczogICAgYCR7c3VibmV0LmFkZHJlc3N9LyR7c3VibmV0LnByZWZpeExlbmd0aH1gLAogICAgICAgICAgICAgIC8vICAgbmFtZTogICAgICAgc3RyaXBTdHJpbmdzKHN1Ym5ldC5uYW1lKSwKICAgICAgICAgICAgICAvLyAgIGxvbmdOYW1lOiAgIHN1Ym5ldC5uYW1lLAogICAgICAgICAgICAgIC8vICAgcHJlZml4X2xlbjogc3VibmV0LnByZWZpeExlbmd0aCwKICAgICAgICAgICAgICAvLyAgIHRyYW5zbGF0ZWRBZGRyZXNzOiBzdWJuZXQuYWRkcmVzc1RyYW5zbGF0aW9uPy5vdXRzaWRlCiAgICAgICAgICAgICAgLy8gfSkpOwoKICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgc3VibmV0UmVzYCwgdGhpcy5zZWxlY3RlZE5ldHdvcmsuc3VibmV0cykKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZmV0Y2hOZXR3b3JrcygpOwogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgX3RoaXMuc2VsZWN0ZWROZXR3b3JrID0gX3RoaXMubmV0d29ya3MuZmluZChmdW5jdGlvbiAobmV0d29yaykgewogICAgICAgICAgICAgICAgcmV0dXJuIG5ldHdvcmsubmFtZSA9PT0gbmV0d29ya05hbWU7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBzdWJuZXRBZGRlZEhhbmRsZXI6IGZ1bmN0aW9uIHN1Ym5ldEFkZGVkSGFuZGxlcigpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfdGhpczIuc3VibmV0UmVzcG9uc2UgPSAnc3VjY2Vzcyc7CiAgICAgICAgICAgICAgX3RoaXMyLnN1Ym5ldFJlc3BvbnNlTWVzc2FnZSA9ICdTdWNjZXNzZnVsbHkgYWRkZWQgc3VibmV0ISc7CiAgICAgICAgICAgICAgX3RoaXMyLmFkZFN1Ym5ldFNpZGViYXJWaXNpYmxlID0gZmFsc2U7CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA1OwogICAgICAgICAgICAgIHJldHVybiBfdGhpczIuZ2V0U3VibmV0QnlOYW1lKF90aGlzMi5zZWxlY3RlZE5ldHdvcmsubmFtZSk7CiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMik7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIGFkZFN1Ym5ldFNpZGViYXI6IGZ1bmN0aW9uIGFkZFN1Ym5ldFNpZGViYXIoKSB7CiAgICAgIHRoaXMuc2VsZWN0ZWRTdWJuZXROYW1lID0gbnVsbDsKICAgICAgdGhpcy5hZGRTdWJuZXRTaWRlYmFyVmlzaWJsZSA9IHRydWU7CiAgICB9LAogICAgY2xvc2VTdWJuZXRTaWRlYmFyOiBmdW5jdGlvbiBjbG9zZVN1Ym5ldFNpZGViYXIoKSB7CiAgICAgIHRoaXMuYWRkU3VibmV0U2lkZWJhclZpc2libGUgPSBmYWxzZTsKICAgIH0sCiAgICBvcGVuU2lkZWJhcjogZnVuY3Rpb24gb3BlblNpZGViYXIoaXRlbSkgewogICAgICAvLyBVcGRhdGUgdGhlIGl0ZW0gd2l0aCB0aGUgZmV0Y2hlZCBkYXRhCiAgICAgIHRoaXMuc3VibmV0UmVzcG9uc2UgPSBudWxsOwogICAgICB0aGlzLnNlbGVjdGVkTmV0d29yayA9IGl0ZW07CiAgICAgIHRoaXMuc2lkZWJhclZpc2libGUgPSB0cnVlOwogICAgfSwKICAgIGNsb3NlU2lkZWJhcjogZnVuY3Rpb24gY2xvc2VTaWRlYmFyKCkgewogICAgICB0aGlzLnNlbGVjdGVkTmV0d29yayA9IG51bGw7CiAgICAgIHRoaXMuc2lkZWJhclZpc2libGUgPSBmYWxzZTsKICAgIH0sCiAgICBvcGVuTW9kYWw6IGZ1bmN0aW9uIG9wZW5Nb2RhbCh2bmV0Um93KSB7CiAgICAgIHZhciBuYW1lID0gdm5ldFJvdy5uYW1lOwogICAgICAvLyBTZXQgdGhlIHNlbGVjdGVkIFZMQU4gbmFtZQogICAgICB0aGlzLnNlbGVjdGVkVm5ldE5hbWUgPSBuYW1lOwogICAgICB0aGlzLnN1Ym5ldFJlc3BvbnNlID0gbnVsbDsKICAgICAgLy8gT3BlbiB0aGUgbW9kYWwKICAgICAgdGhpcy5pc01vZGFsT3BlbiA9IHRydWU7CiAgICB9LAogICAgY2xvc2VNb2RhbDogZnVuY3Rpb24gY2xvc2VNb2RhbCgpIHsKICAgICAgdGhpcy5pc01vZGFsT3BlbiA9IGZhbHNlOwogICAgfSwKICAgIG9wZW5Nb2RhbEFjdGlvbjogZnVuY3Rpb24gb3Blbk1vZGFsQWN0aW9uKHN1Ym5ldFJvdykgewogICAgICB2YXIgbmFtZSA9IHN1Ym5ldFJvdy5uYW1lLAogICAgICAgIGFkZHJlc3MgPSBzdWJuZXRSb3cuYWRkcmVzcywKICAgICAgICBwcmVmaXhfbGVuID0gc3VibmV0Um93LnByZWZpeF9sZW47CiAgICAgIC8vIFNldCB0aGUgc2VsZWN0ZWQgVkxBTiBuYW1lCiAgICAgIGNvbnNvbGUubG9nKG5hbWUsIGFkZHJlc3MsIHByZWZpeF9sZW4pOwogICAgICB0aGlzLnZuZXRfbmFtZSA9IHRoaXMuc2VsZWN0ZWROZXR3b3JrLm5hbWU7CiAgICAgIHRoaXMuc3VibmV0X25hbWUgPSBuYW1lOwogICAgICB0aGlzLnN1Ym5ldF9hZGRyZXNzID0gYWRkcmVzczsKICAgICAgdGhpcy5zdWJuZXRfcHJlZml4X2xlbiA9IHByZWZpeF9sZW47CgogICAgICAvLyBPcGVuIHRoZSBtb2RhbAogICAgICB0aGlzLmlzTW9kYWxTdWJuZXRPcGVuID0gdHJ1ZTsKICAgIH0sCiAgICBjbG9zZU1vZGFsU3VibmV0OiBmdW5jdGlvbiBjbG9zZU1vZGFsU3VibmV0KCkgewogICAgICB0aGlzLmlzTW9kYWxTdWJuZXRPcGVuID0gZmFsc2U7CiAgICB9LAogICAgZmV0Y2hOZXR3b3JrczogZnVuY3Rpb24gZmV0Y2hOZXR3b3JrcygpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZmV0Y2hpbmcgbmV0d29ya3MnKTsKICAgICAgICAgICAgICAvLyBGZXRjaCB0aGUgbmV0d29yayBsaXN0IGZyb20geW91ciBBUEkKICAgICAgICAgICAgICBfY29udGV4dDMucHJldiA9IDE7CiAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA0OwogICAgICAgICAgICAgIHJldHVybiBfdGhpczMuJHN0b3JlLmRpc3BhdGNoKCIiLmNvbmNhdChQUk9EVUNUX05BTUUsICIvZmluZEFsbCIpKTsKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gOTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gNjsKICAgICAgICAgICAgICBfY29udGV4dDMudDAgPSBfY29udGV4dDNbImNhdGNoIl0oMSk7CiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgTmV0d29yayBMaXN0OicsIF9jb250ZXh0My50MCk7CiAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMywgbnVsbCwgW1sxLCA2XV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBkZWxldGVOZXR3b3JrOiBmdW5jdGlvbiBkZWxldGVOZXR3b3JrKCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0NC5wcmV2ID0gMDsKICAgICAgICAgICAgICBjb25zb2xlLmxvZygiRGVsZXRlIE5ldHdvcmsgRW5kcG9pbnQsICIuY29uY2F0KF90aGlzNC5zZWxlY3RlZFZuZXROYW1lKSk7CiAgICAgICAgICAgICAgX3RoaXM0LmxvYWRpbmcgPSB0cnVlOwogICAgICAgICAgICAgIC8vIENsb3NlIHRoZSBtb2RhbCBiZWZvcmUgZGVsZXRpb24KICAgICAgICAgICAgICBfdGhpczQuY2xvc2VNb2RhbCgpOwogICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gNjsKICAgICAgICAgICAgICByZXR1cm4gX3RoaXM0LiRzdG9yZS5kaXNwYXRjaCgiIi5jb25jYXQoUFJPRFVDVF9OQU1FLCAiL2RlbGV0ZU5ldHdvcmsiKSwgX3RoaXM0LnNlbGVjdGVkVm5ldE5hbWUpOwogICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgX3RoaXM0LmxvYWRpbmcgPSBmYWxzZTsKCiAgICAgICAgICAgICAgLy8gZGVmaW5lcyB3aGF0IGtpbmQgb2YgY29tcG9uZW50IHNob3VsZCB0aGUgbm90aWZpY2F0aW9uIHNob3cKICAgICAgICAgICAgICBfdGhpczQuYXBpUmVzcG9uc2UgPSAnZXJyb3InOwogICAgICAgICAgICAgIC8vIFNldCB0aGUgQVBJIHJlc3BvbnNlIGRhdGEgaW4gdGhlIGNvbXBvbmVudAogICAgICAgICAgICAgIF90aGlzNC5hcGlSZXNwb25zZU1lc3NhZ2UgPSAiWW91IGhhdmUgc3VjY2Vzc2Z1bGx5IGRlbGV0ZWQgVk5FVDogIi5jb25jYXQoX3RoaXM0LnNlbGVjdGVkVm5ldE5hbWUpOwogICAgICAgICAgICAgIF90aGlzNC5hcGlFcnJvciA9IG51bGw7IC8vIFJlc2V0IGVycm9yIHN0YXRlCiAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAxMjsKICAgICAgICAgICAgICByZXR1cm4gX3RoaXM0LmZldGNoTmV0d29ya3MoKTsKICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDIyOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICAgIF9jb250ZXh0NC5wcmV2ID0gMTQ7CiAgICAgICAgICAgICAgX2NvbnRleHQ0LnQwID0gX2NvbnRleHQ0WyJjYXRjaCJdKDApOwogICAgICAgICAgICAgIC8vIEhhbmRsZSBhbnkgZXJyb3JzIGhlcmUKICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBkZWxldGluZyBuZXR3b3JrOicsIF9jb250ZXh0NC50MCk7CiAgICAgICAgICAgICAgX3RoaXM0LmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgICAgICBfdGhpczQuaXNNb2RhbE9wZW4gPSB0cnVlOwogICAgICAgICAgICAgIF90aGlzNC5hcGlSZXNwb25zZU1lc3NhZ2UgPSAnRXJyb3InOwogICAgICAgICAgICAgIC8vIFNldCB0aGUgQVBJIGVycm9yIGluIHRoZSBjb21wb25lbnQKICAgICAgICAgICAgICBfdGhpczQuYXBpRXJyb3IgPSBfY29udGV4dDQudDAucmVzcG9uc2UgPyBfY29udGV4dDQudDAucmVzcG9uc2UuZGF0YSA6IF9jb250ZXh0NC50MC5tZXNzYWdlOwogICAgICAgICAgICAgIF90aGlzNC5hcGlSZXNwb25zZSA9IDE7IC8vIFJlc2V0IHJlc3BvbnNlIHN0YXRlCiAgICAgICAgICAgIGNhc2UgMjI6CiAgICAgICAgICAgICAgX2NvbnRleHQ0LnByZXYgPSAyMjsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmZpbmlzaCgyMik7CiAgICAgICAgICAgIGNhc2UgMjQ6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTQsIG51bGwsIFtbMCwgMTQsIDIyLCAyNF1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgZGVsZXRlU3VibmV0OiBmdW5jdGlvbiBkZWxldGVTdWJuZXQoKSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzOwogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNSgpIHsKICAgICAgICB2YXIgdm5ldF9kYXRhOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNSQoX2NvbnRleHQ1KSB7CiAgICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDUucHJldiA9IF9jb250ZXh0NS5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDUucHJldiA9IDA7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coIkRlbGV0ZSBTdWJuZXQgRW5kcG9pbnQsICIuY29uY2F0KF90aGlzNS52bmV0X25hbWUsICIsICIpLmNvbmNhdChfdGhpczUuc3VibmV0X25hbWUsICIsICIpLmNvbmNhdChfdGhpczUuc3VibmV0X2lkKSk7CiAgICAgICAgICAgICAgX3RoaXM1LnNlbGVjdGVkTmV0d29yay5zdWJuZXRzID0gX3RoaXM1LnNlbGVjdGVkTmV0d29yay5zdWJuZXRzLmZpbHRlcihmdW5jdGlvbiAoc3VibmV0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gc3VibmV0Lm5hbWUgIT09IF90aGlzNS5zdWJuZXRfbmFtZTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBjb25zb2xlLmxvZygnbmV3IHN1Ym5ldCcsIF90aGlzNS5zZWxlY3RlZE5ldHdvcmsuc3VibmV0KTsKICAgICAgICAgICAgICB2bmV0X2RhdGEgPSB7CiAgICAgICAgICAgICAgICBhcGlWZXJzaW9uOiAncGFja2V0bGlmdGVyLmRldi92MScsCiAgICAgICAgICAgICAgICBraW5kOiAnVm5ldCcsCiAgICAgICAgICAgICAgICAvLyB2bmV0X3ZsYW46IHRoaXMuc2VsZWN0ZWRWbmV0VmxhbiwKICAgICAgICAgICAgICAgIG1ldGFkYXRhOiB7CiAgICAgICAgICAgICAgICAgIG5hbWU6IF90aGlzNS52bmV0X25hbWUudG9Mb3dlckNhc2UoKSwKICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlOiAnZGVmYXVsdCcKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBzcGVjOiB7CiAgICAgICAgICAgICAgICAgIG5hbWU6IF90aGlzNS52bmV0X25hbWUudG9Mb3dlckNhc2UoKSwKICAgICAgICAgICAgICAgICAgc3VibmV0czogX3RoaXM1LnNlbGVjdGVkTmV0d29yay5zdWJuZXRzCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBfdGhpczUubG9hZGluZyA9IHRydWU7CiAgICAgICAgICAgICAgLy8gQ2xvc2UgdGhlIG1vZGFsIGJlZm9yZSBkZWxldGlvbgogICAgICAgICAgICAgIF90aGlzNS5jbG9zZU1vZGFsU3VibmV0KCk7CiAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSA5OwogICAgICAgICAgICAgIHJldHVybiBfdGhpczUuJHN0b3JlLmRpc3BhdGNoKCIiLmNvbmNhdChQUk9EVUNUX05BTUUsICIvZGVsZXRlU3VibmV0IiksIHsKICAgICAgICAgICAgICAgIHZuZXROYW1lOiBfdGhpczUudm5ldF9uYW1lLAogICAgICAgICAgICAgICAgdm5ldERhdGE6IHZuZXRfZGF0YQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgX3RoaXM1LmxvYWRpbmcgPSBmYWxzZTsKCiAgICAgICAgICAgICAgLy8gZGVmaW5lcyB3aGF0IGtpbmQgb2YgY29tcG9uZW50IHNob3VsZCB0aGUgbm90aWZpY2F0aW9uIHNob3cKICAgICAgICAgICAgICBfdGhpczUuc3VibmV0UmVzcG9uc2UgPSAnZXJyb3InOwogICAgICAgICAgICAgIF90aGlzNS5zdWJuZXRSZXNwb25zZU1lc3NhZ2UgPSAiU3VjY2Vzc2Z1bGx5IGRlbGV0ZWQgc3VibmV0OiAiLmNvbmNhdChfdGhpczUuc3VibmV0X25hbWUpOwogICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMTQ7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzNS5nZXRTdWJuZXRCeU5hbWUoX3RoaXM1LnZuZXRfbmFtZSk7CiAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBzZWxlY3RlZE5ldHdvcmsgd2l0aCB0aGUgc2VsZWN0ZWQgdm5ldF9uYW1lCiAgICAgICAgICAgICAgX3RoaXM1LnNlbGVjdGVkTmV0d29yay52bmV0X25hbWUgPSBfdGhpczUudm5ldF9uYW1lOwogICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMjQ7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgX2NvbnRleHQ1LnByZXYgPSAxNzsKICAgICAgICAgICAgICBfY29udGV4dDUudDAgPSBfY29udGV4dDVbImNhdGNoIl0oMCk7CiAgICAgICAgICAgICAgLy8gSGFuZGxlIGFueSBlcnJvcnMgaGVyZQogICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGRlbGV0aW5nIG5ldHdvcms6JywgX2NvbnRleHQ1LnQwKTsKICAgICAgICAgICAgICBfdGhpczUubG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgICAgIF90aGlzNS5pc01vZGFsU3VibmV0T3BlbiA9IHRydWU7CiAgICAgICAgICAgICAgLy8gU2V0IHRoZSBBUEkgZXJyb3IgaW4gdGhlIGNvbXBvbmVudAogICAgICAgICAgICAgIF90aGlzNS5zdWJuZXRSZXNwb25zZU1lc3NhZ2UgPSBfY29udGV4dDUudDAucmVzcG9uc2UgPyBfY29udGV4dDUudDAucmVzcG9uc2UuZGF0YSA6IF9jb250ZXh0NS50MC5tZXNzYWdlOwogICAgICAgICAgICAgIF90aGlzNS5zdWJuZXRSZXNwb25zZSA9ICdlcnJvcic7CiAgICAgICAgICAgIGNhc2UgMjQ6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTUsIG51bGwsIFtbMCwgMTddXSk7CiAgICAgIH0pKSgpOwogICAgfQogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHRoaXMubmV0d29ya0hlYWRlciA9IFNPUlRBQkxFX05FVFdPUktfSEVBREVSUzsKICAgIHRoaXMuc3VibmV0d29ya0hlYWRlciA9IFNPUlRBQkxFX1NVQl9ORVRXT1JLX0hFQURFUlM7CiAgICB0aGlzLnZuZXRCdXR0b25zID0gVk5FVF9CVVRUT05TOwogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIC8vIEZldGNoIHRoZSBWTEFOIGxpc3QgYW5kIG5ldHdvcmsgbGlzdCB3aGVuIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZAogICAgdGhpcy5mZXRjaE5ldHdvcmtzKCk7CiAgICAvLyB0aGlzLmZldGNoSGFydmVzdGVyTmV0d29ya3MoKTsKICB9Cn07"},{"version":3,"names":["SORTABLE_SUB_NETWORK_HEADERS","SORTABLE_NETWORK_HEADERS","VNET_BUTTONS","mapGetters","SortableTable","cButton","SideBar","GroupButtons","Modal","Alert","AddSubnet","PRODUCT_NAME","CREATE_NETWORK","BLANK_CLUSTER","name","components","data","selectedName","selectedVnetName","selectedSubnetName","selectedVnetSubnets","loading","isModalOpen","apiResponse","subnetResponse","isModalSubnetOpen","vnet_name","subnet_name","subnet_address","subnet_prefix_len","subnet_id","selectedNetwork","sidebarVisible","addSubnetSidebarVisible","apiError","apiResponseMessage","filters","value","keys","currentPage","totalPages","networkHeader","subnetworkHeader","vnetButtons","computed","_objectSpread","networks","methods","actionHandler","action","$router","push","concat","fetchNetworks","getSubnetByName","networkName","_this","_asyncToGenerator","regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","find","network","stop","subnetAddedHandler","_this2","_callee2","_callee2$","_context2","subnetResponseMessage","addSubnetSidebar","closeSubnetSidebar","openSidebar","item","closeSidebar","openModal","vnetRow","closeModal","openModalAction","subnetRow","address","prefix_len","console","log","closeModalSubnet","_this3","_callee3","_callee3$","_context3","$store","dispatch","t0","error","deleteNetwork","_this4","_callee4","_callee4$","_context4","response","message","finish","deleteSubnet","_this5","_callee5","vnet_data","_callee5$","_context5","subnets","filter","subnet","apiVersion","kind","metadata","toLowerCase","namespace","spec","vnetName","vnetData","created","mounted"],"sources":["pkg/nowcom/pages/listnetwork.vue"],"sourcesContent":["<!-- eslint-disable no-console -->\n<template>\n  <div class=\"base\">\n    <h1 class=\"text-label\">Virtual Network</h1>\n    <div class=\"mt-10 mb-10\" v-if=\"apiResponse\">\n      <Alert :variant=\"apiResponse\" @close=\"apiResponse = null\">{{ apiResponseMessage }}</Alert>\n    </div>\n    <GroupButtons :list=\"vnetButtons\" @action=\"actionHandler\"/>\n    <div class=\"form-row mt-10\">\n      <div class=\"form-column\">\n        <SortableTable :headers=\"networkHeader\" :rows=\"networks\" :paging=\"true\" :rowActionsWidth=\"10\" :rows-per-page=\"5\" keyField=\"longName\" :loading=\"loading\">\n          <template #cell:name=\"{row}\">\n            <a href=\"#\" @click.prevent=\"openSidebar(row)\">{{ row.name }}</a>\n          </template>\n          <template #row-actions=\"row\">\n            <cButton class=\"cbtn btn-primary\" @click=\"openModal(row.row)\" :disabled=\"loading\">\n              <span class=\"fa fa-trash fa-lg mr-5\"></span> Delete\n            </cButton>\n          </template>\n        </SortableTable>\n        </br> </br>\n      </div>\n    </div>\n\n    <SideBar type=\"main\" :sidebar-visible=\"sidebarVisible\" @close=\"closeSidebar\">\n      <h2 class=\"text-label\">{{ selectedNetwork ? selectedNetwork.name : 'No Network Selected' }}</h2>\n        <div class=\"form-row\">\n          <div class=\"form-column\" align=\"left\">\n            <cButton class=\"cbtn btn-light\" @click=\"addSubnetSidebar\">\n              <i class=\"fa fa-plus fa-lg mr-5\"></i> Add Subnet\n            </cButton> \n          </div>\n        </div>\n        <div class=\"mt-10 mb-10\" v-if=\"subnetResponse\">\n          <Alert :variant=\"subnetResponse\" @close=\"subnetResponse = null\">{{ subnetResponseMessage }}</Alert>\n        </div>\n        <SortableTable v-if=\"selectedNetwork\" :headers=\"subnetworkHeader\" :rows=\"selectedNetwork.subnets\" :paging=\"true\" :rowActionsWidth=\"10\" :rows-per-page=\"5\" keyField=\"name\" :loading=\"loading\">\n          <template #row-actions=\"row\">\n            <cButton class=\"cbtn btn-primary\" @click=\"openModalAction(row.row)\" :disabled=\"loading\">\n              <span class=\"fa fa-trash fa-lg mr-5\"></span> Delete\n            </cButton>\n          </template>  \n        </SortableTable>\n    </SideBar>\n\n    <SideBar type=\"sub\" :sidebar-visible=\"addSubnetSidebarVisible\" @close=\"closeSubnetSidebar\">\n      <AddSubnet v-if=\"selectedNetwork\" :is-open=\"addSubnetSidebarVisible\" :current-network=\"selectedNetwork\" @success=\"subnetAddedHandler\" />\n    </SideBar>\n\n    <!-- Modal -->\n    <Modal v-if=\"isModalOpen\">\n      <template v-slot:content>\n        <h2>Delete?</h2>\n        <p>Are you sure that you want to delete VLAN \"{{ selectedVnetName }}\"?</p>\n      </template>\n\n      <template v-slot:footer>\n        <cButton class=\"cbtn btn-danger\" @click=\"deleteNetwork\" :disabled=\"loading\" label=\"Yes\" />\n        <cButton class=\"cbtn btn-light\" @click=\"closeModal\" :disabled=\"loading\" label=\"No\" />\n      </template>\n    </Modal>\n\n    <Modal v-if=\"isModalSubnetOpen\">\n      <template v-slot:content>\n        <h2>Are you sure that you want to delete:</h2>\n        <p>Subnet \"{{ subnet_name }}\" under VNET \"{{ vnet_name }}\"?</p>\n      </template>\n\n      <template v-slot:footer>\n        <cButton class=\"cbtn btn-danger\" @click=\"deleteSubnet\" :disabled=\"loading\" label=\"Yes\" />\n        <cButton class=\"cbtn btn-light\" @click=\"closeModalSubnet\" :disabled=\"loading\" label=\"No\" />\n      </template>\n    </Modal>\n  </div>\n</template>\n\n<script>\nimport { SORTABLE_SUB_NETWORK_HEADERS, SORTABLE_NETWORK_HEADERS } from '../config/table'\nimport { VNET_BUTTONS } from '../config/buttons'\nimport { mapGetters } from 'vuex'\nimport SortableTable from '@shell/components/ResourceTable.vue'\n\nimport cButton from '../components/common/Button'\nimport SideBar from '../components/Sidebar'\nimport GroupButtons from '../components/common/GroupButtons'\nimport Modal from '../components/common/Modal'\nimport Alert from '../components/common/Alert'\nimport AddSubnet from '../components/forms/AddSubnet'\n\nimport { PRODUCT_NAME, CREATE_NETWORK, BLANK_CLUSTER } from '../config/constants'\n\nexport default {\n  name: 'ListNetwork',\n  components: {\n    SortableTable,\n    cButton,\n    SideBar,\n    GroupButtons,\n    Modal,\n    Alert,\n    AddSubnet\n  },\n  // layout: 'home',\n  data() {\n    return {\n      selectedName:            '', // Dropdown for network name\n      selectedVnetName:        '',\n      selectedSubnetName:      '',\n      selectedVnetSubnets:     '10.55.0.0',\n      loading:                 false,\n      isModalOpen:             false,\n      apiResponse:             null,\n      subnetResponse:          null,\n      isModalSubnetOpen:       false,\n      vnet_name:               '',\n      subnet_name:             '',\n      subnet_address:          '',\n      subnet_prefix_len:       '',\n      subnet_id:               '',\n      selectedNetwork:         null,\n      sidebarVisible:          false,\n      addSubnetSidebarVisible: false,\n      apiError:                null,\n      apiResponseMessage:      '',\n      filters:                 { name: { value: '', keys: ['longName'] } },\n      currentPage:             1,\n      totalPages:              0,\n      networkHeader: [],\n      subnetworkHeader: [],\n      vnetButtons: [],\n    };\n  },\n  computed: {\n    ...mapGetters(PRODUCT_NAME, {\n      networks: 'items',\n    })\n  },\n  methods: {\n    actionHandler (action) {\n      if (action === 'create') {\n        this.$router.push(`/${ PRODUCT_NAME }/c/${ BLANK_CLUSTER }/${ CREATE_NETWORK }`);\n      } else if (action === 'refresh') {\n        this.fetchNetworks();\n      }\n    },\n    async getSubnetByName (networkName) {\n      // const subnetRes = await vNetService.getSubnetByName(networkName);\n\n      this.selectedNetwork = null;\n\n      // this.selectedNetwork.subnets = subnetRes.data.spec.subnets.map(subnet => ({\n      //   address:    subnet.address,\n      //   formattedAddress:    `${subnet.address}/${subnet.prefixLength}`,\n      //   name:       stripStrings(subnet.name),\n      //   longName:   subnet.name,\n      //   prefix_len: subnet.prefixLength,\n      //   translatedAddress: subnet.addressTranslation?.outside\n      // }));\n\n      // console.log(`subnetRes`, this.selectedNetwork.subnets)\n      await this.fetchNetworks();\n\n      this.selectedNetwork = this.networks.find((network) => network.name === networkName);\n    },\n    async subnetAddedHandler() {\n      this.subnetResponse = 'success';\n      this.subnetResponseMessage = 'Successfully added subnet!';\n      this.addSubnetSidebarVisible = false;\n      await this.getSubnetByName(this.selectedNetwork.name);\n    },\n    addSubnetSidebar() {\n      this.selectedSubnetName = null;\n      this.addSubnetSidebarVisible = true;\n    },\n    closeSubnetSidebar() {\n      this.addSubnetSidebarVisible = false;\n    },\n    openSidebar(item) {\n      // Update the item with the fetched data\n      this.subnetResponse = null;\n      this.selectedNetwork = item;\n      this.sidebarVisible = true;\n    },\n    closeSidebar() {\n      this.selectedNetwork = null;\n      this.sidebarVisible = false;\n    },\n    openModal(vnetRow) {\n      const { name } = vnetRow;\n      // Set the selected VLAN name\n      this.selectedVnetName = name;\n      this.subnetResponse = null;\n      // Open the modal\n      this.isModalOpen = true;\n    },\n    closeModal() {\n      this.isModalOpen = false;\n    },\n\n    openModalAction(subnetRow) {\n      const { name, address, prefix_len } = subnetRow;\n      // Set the selected VLAN name\n      console.log(name, address, prefix_len);\n      this.vnet_name = this.selectedNetwork.name;\n      this.subnet_name = name;\n      this.subnet_address = address;\n      this.subnet_prefix_len = prefix_len;\n\n      // Open the modal\n      this.isModalSubnetOpen = true;\n    },\n\n    closeModalSubnet() {\n      this.isModalSubnetOpen = false;\n    },\n\n    async fetchNetworks() {\n      console.log('fetching networks');\n      // Fetch the network list from your API\n      try {\n        await this.$store.dispatch(`${PRODUCT_NAME}/findAll`)\n      } catch (error) {\n        console.error('Error fetching Network List:', error);\n      }\n    },\n    async deleteNetwork() {\n      try {\n        console.log(`Delete Network Endpoint, ${ this.selectedVnetName }`);\n        this.loading = true;\n        // Close the modal before deletion\n        this.closeModal();\n        await this.$store.dispatch(`${PRODUCT_NAME}/deleteNetwork`, this.selectedVnetName);\n        this.loading = false;\n\n        // defines what kind of component should the notification show\n        this.apiResponse = 'error';\n        // Set the API response data in the component\n        this.apiResponseMessage = `You have successfully deleted VNET: ${this.selectedVnetName}`;\n        this.apiError = null; // Reset error state\n\n        await this.fetchNetworks();\n      } catch (error) {\n        // Handle any errors here\n        console.error('Error deleting network:', error);\n        this.loading = false;\n        this.isModalOpen = true;\n        this.apiResponseMessage = 'Error';\n        // Set the API error in the component\n        this.apiError = error.response ? error.response.data : error.message;\n        this.apiResponse = 1; // Reset response state\n      } finally {\n        \n      }\n    },\n\n    async deleteSubnet() {\n      try {\n        console.log(\n          `Delete Subnet Endpoint, ${ this.vnet_name }, ${ this.subnet_name }, ${ this.subnet_id }`\n        );\n        this.selectedNetwork.subnets = this.selectedNetwork.subnets.filter(subnet => subnet.name !== this.subnet_name);\n        console.log('new subnet', this.selectedNetwork.subnet);\n\n        const vnet_data = {\n          apiVersion: 'packetlifter.dev/v1',\n          kind:       'Vnet',\n          // vnet_vlan: this.selectedVnetVlan,\n          metadata:   {\n            name:      this.vnet_name.toLowerCase(),\n            namespace: 'default'\n          },\n          spec: {\n            name:    this.vnet_name.toLowerCase(),\n            subnets: this.selectedNetwork.subnets,\n          }\n        };\n\n        this.loading = true;\n        // Close the modal before deletion\n        this.closeModalSubnet();\n        await this.$store.dispatch(`${PRODUCT_NAME}/deleteSubnet`, {\n          vnetName: this.vnet_name,\n          vnetData: vnet_data\n        })\n        this.loading = false;\n\n        // defines what kind of component should the notification show\n        this.subnetResponse = 'error';\n        this.subnetResponseMessage = `Successfully deleted subnet: ${this.subnet_name}`;\n\n        await this.getSubnetByName(this.vnet_name);\n\n        // Update the selectedNetwork with the selected vnet_name\n        this.selectedNetwork.vnet_name = this.vnet_name;\n        \n      } catch (error) {\n        // Handle any errors here\n        console.error('Error deleting network:', error);\n        this.loading = false;\n        this.isModalSubnetOpen = true;\n        // Set the API error in the component\n        this.subnetResponseMessage = error.response ? error.response.data : error.message;\n        this.subnetResponse = 'error';\n      }\n    },\n  },\n  created() {\n    this.networkHeader = SORTABLE_NETWORK_HEADERS;\n    this.subnetworkHeader = SORTABLE_SUB_NETWORK_HEADERS;\n    this.vnetButtons = VNET_BUTTONS;\n  },\n  mounted() {\n    // Fetch the VLAN list and network list when the component is mounted\n    this.fetchNetworks();\n    // this.fetchHarvesterNetworks();\n  },\n};\n</script>\n\n<style scoped>\n/* notif */\n/* Your existing style code */\n.notification {\n  position: fixed;\n  top: 10px;\n  right: 10px;\n  padding: 10px;\n  border-radius: 5px;\n  color: #fff;\n  font-weight: bold;\n}\n</style>\n"],"mappings":"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"}]}