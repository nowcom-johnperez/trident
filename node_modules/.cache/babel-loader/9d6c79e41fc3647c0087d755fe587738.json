{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/detail/management.cattle.io.user.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/detail/management.cattle.io.user.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["CreateEditView","Tab","ResourceTabs","SortableTable","MANAGEMENT","NORMAN","Loading","NAME","components","mixins","fetch","_this","_asyncToGenerator","regeneratorRuntime","mark","_callee","canSeeGlobalRoles","wrap","_callee$","_context","prev","next","$store","getters","GLOBAL_ROLE","fetchGlobalRoleBindings","value","id","globalBindings","sent","canSeeRoleTemplates","ROLE_TEMPLATE","t0","Promise","dispatch","type","USER","t1","t2","CLUSTER_ROLE_TEMPLATE_BINDING","t3","PROJECT_ROLE_TEMPLATE_BINDING","t4","t5","all","call","stop","data","role","name","labelKey","sort","since","search","formatter","formatterOpts","addSuffix","width","headers","gp","align","_objectSpread","cr","reference","pr","isAdmin","computed","clusterBindings","fetchClusterRoles","projectBindings","fetchProjectRoles","methods","userId","_this2","_callee2","roles","out","globalRoleBindings","_callee2$","_context2","filter","r","isSpecial","map","resource","forEach","hasBound","GLOBAL_ROLE_BINDING","binding","userName","globalRole","find","globalRoleName","getEnabledRoles","bound","metadata","creationTimestamp","entry","o","abrupt","console","error","_this3","templateBindings","userTemplateBindings","b","CLUSTER","clusterName","_this4","PROJECT","projectId","hasPermission","globalRoleRules","permission","gRule","apiGroups","includes","apiGroup","resources","verbs","verb","containsRule","rule","_this5","permissions","push","every","_this6","rules","_r$rules","length"],"sources":["node_modules/@rancher/shell/detail/management.cattle.io.user.vue"],"sourcesContent":["<script>\nimport CreateEditView from '@shell/mixins/create-edit-view';\nimport Tab from '@shell/components/Tabbed/Tab';\nimport ResourceTabs from '@shell/components/form/ResourceTabs';\nimport SortableTable from '@shell/components/SortableTable';\nimport { MANAGEMENT, NORMAN } from '@shell/config/types';\nimport Loading from '@shell/components/Loading';\nimport { NAME } from '@shell/config/table-headers';\n\nexport default {\n  components: {\n    Tab,\n    ResourceTabs,\n    SortableTable,\n    Loading\n  },\n  mixins: [\n    CreateEditView\n  ],\n  async fetch() {\n    const canSeeGlobalRoles = !!this.$store.getters[`management/canList`](MANAGEMENT.GLOBAL_ROLE);\n\n    if (canSeeGlobalRoles) {\n      this.globalBindings = await this.fetchGlobalRoleBindings(this.value.id);\n    }\n\n    this.canSeeRoleTemplates = !!this.$store.getters[`management/canList`](MANAGEMENT.ROLE_TEMPLATE);\n\n    if (this.canSeeRoleTemplates) {\n      // Upfront fetch, avoid async computes\n      await Promise.all([\n        await this.$store.dispatch('rancher/find', { type: NORMAN.USER, id: this.value.id }),\n        await this.$store.dispatch('management/findAll', { type: MANAGEMENT.ROLE_TEMPLATE }),\n        await this.$store.dispatch('management/findAll', { type: MANAGEMENT.CLUSTER_ROLE_TEMPLATE_BINDING }),\n        await this.$store.dispatch('management/findAll', { type: MANAGEMENT.PROJECT_ROLE_TEMPLATE_BINDING })\n      ]);\n    }\n  },\n  data() {\n    const role = {\n      name:     'role',\n      labelKey: 'user.detail.generic.tableHeaders.role',\n      value:    'roleTemplate.displayName',\n      sort:     'roleTemplate.displayName',\n    };\n    const since = {\n      name:          'since',\n      labelKey:      'user.detail.generic.tableHeaders.granted',\n      value:         'metadata.creationTimestamp',\n      sort:          'metadata.creationTimestamp:desc',\n      search:        false,\n      formatter:     'LiveDate',\n      formatterOpts: { addSuffix: true },\n      width:         '20%',\n    };\n\n    return {\n      headers: {\n        gp: [\n          {\n            name:      'permission',\n            labelKey:  'user.detail.globalPermissions.tableHeaders.permission',\n            value:     'hasBound',\n            sort:      ['hasBound:desc'],\n            formatter: 'Checked',\n            width:     75,\n            align:     'center'\n          },\n          NAME,\n          {\n            ...since,\n            value: 'bound',\n            sort:  'bound',\n          }\n        ],\n        cr: [\n          {\n            name:          'cluster',\n            labelKey:      'user.detail.clusterRoles.tableHeaders.cluster',\n            value:         'clusterDisplayName',\n            sort:          'clusterDisplayName',\n            formatter:     'LinkDetail',\n            formatterOpts: { reference: 'clusterDetailLocation' },\n          }, { ...role },\n          { ...since }\n        ],\n        pr: [\n          {\n            name:          'project',\n            labelKey:      'user.detail.projectRoles.tableHeaders.project',\n            value:         'projectDisplayName',\n            sort:          'projectDisplayName',\n            formatter:     'LinkDetail',\n            formatterOpts: { reference: 'projectDetailLocation' },\n          }, {\n            name:          'cluster',\n            labelKey:      'user.detail.clusterRoles.tableHeaders.cluster',\n            value:         'clusterDisplayName',\n            sort:          'clusterDisplayName',\n            formatter:     'LinkDetail',\n            formatterOpts: { reference: 'clusterDetailLocation' },\n          }, { ...role },\n          { ...since }\n        ]\n      },\n      globalBindings:      null,\n      canSeeRoleTemplates: false,\n      isAdmin:             false,\n    };\n  },\n  computed: {\n    clusterBindings() {\n      return this.canSeeRoleTemplates ? this.fetchClusterRoles(this.value.id) : null;\n    },\n    projectBindings() {\n      return this.canSeeRoleTemplates ? this.fetchProjectRoles(this.value.id) : null;\n    }\n\n  },\n  methods: {\n    async fetchGlobalRoleBindings(userId) {\n      try {\n        const roles = await this.$store.dispatch('management/findAll', { type: MANAGEMENT.GLOBAL_ROLE });\n\n        const out = await Promise.all(roles\n          .filter((r) => !r.isSpecial)\n          .map((r) => this.$store.dispatch(`rancher/clone`, { resource: r }))\n        );\n\n        out.forEach((r) => {\n          r.hasBound = false;\n        });\n\n        const globalRoleBindings = await this.$store.dispatch('management/findAll', { type: MANAGEMENT.GLOBAL_ROLE_BINDING });\n\n        globalRoleBindings\n          .filter((binding) => binding.userName === userId)\n          .forEach((binding) => {\n            const globalRole = roles.find((r) => r.id === binding.globalRoleName);\n\n            if (globalRole.id === 'admin') {\n              this.isAdmin = true;\n            }\n\n            if (globalRole.isSpecial) {\n              this.getEnabledRoles(globalRole, out).forEach((r) => {\n                r.hasBound = true;\n                r.bound = binding?.metadata.creationTimestamp;\n              });\n            } else {\n              const entry = out.find((o) => o.id === binding.globalRoleName);\n\n              if (entry) {\n                entry.hasBound = true;\n                entry.bound = binding?.metadata.creationTimestamp;\n              }\n            }\n          });\n\n        return out;\n      } catch (e) {\n        // Swallow the error. It's probably due to the user not having the correct permissions to read global roles\n        console.error('Failed to fetch global role bindings: ', e); // eslint-disable-line no-console\n      }\n    },\n\n    fetchClusterRoles(userId) {\n      const templateBindings = this.$store.getters['management/all'](MANAGEMENT.CLUSTER_ROLE_TEMPLATE_BINDING);\n      const userTemplateBindings = templateBindings.filter((binding) => binding.userName === userId);\n\n      // Upfront load clusters\n      userTemplateBindings.map((b) => this.$store.dispatch('management/find', { type: MANAGEMENT.CLUSTER, id: b.clusterName }));\n\n      return userTemplateBindings;\n    },\n\n    fetchProjectRoles(userId) {\n      const templateBindings = this.$store.getters['management/all'](MANAGEMENT.PROJECT_ROLE_TEMPLATE_BINDING );\n      const userTemplateBindings = templateBindings.filter((binding) => binding.userName === userId);\n\n      // Upfront load projects\n      userTemplateBindings.map((b) => this.$store.dispatch('management/find', { type: MANAGEMENT.PROJECT, id: b.projectId }));\n\n      return userTemplateBindings;\n    },\n\n    // Global Permissions Helpers (brought over from ember)\n    hasPermission(globalRoleRules, permission) {\n      return globalRoleRules.find((gRule) => {\n        return ((gRule.apiGroups || []).includes('*') || (gRule.apiGroups || []).includes(permission.apiGroup)) &&\n        ((gRule.resources || []).includes('*') || (gRule.resources || []).includes(permission.resource)) &&\n        ((gRule.verbs || []).includes('*') || (gRule.verbs || []).includes(permission.verb));\n      })\n      ;\n    },\n    containsRule(globalRoleRules, rule) {\n      const apiGroups = (rule.apiGroups || []);\n      const resources = (rule.resources || []);\n      const verbs = (rule.verbs || []);\n      const permissions = [];\n\n      apiGroups.forEach((apiGroup) => resources.forEach((resource) => verbs.forEach((verb) => permissions.push({\n        apiGroup,\n        resource,\n        verb\n      }))));\n\n      return permissions.every((permission) => this.hasPermission(globalRoleRules, permission));\n    },\n    getEnabledRoles(globalRole, out) {\n      const globalRoleRules = globalRole.rules || [];\n\n      return out.filter((r) => {\n        // If the global role doesn't contain any rules... don't show the user as having the role (confusing)\n        if (!r?.rules?.length) {\n          return false;\n        }\n\n        return r.rules.every((rule) => this.containsRule(globalRoleRules, rule));\n      });\n    },\n\n  }\n\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n  <div v-else>\n    <ResourceTabs\n      v-model=\"value\"\n      :mode=\"mode\"\n    >\n      <Tab\n        v-if=\"globalBindings\"\n        label-key=\"user.detail.globalPermissions.label\"\n        name=\"gp\"\n        :weight=\"3\"\n      >\n        <div class=\"subtext\">\n          {{ t(\"user.detail.globalPermissions.description\") }}\n        </div>\n        <div\n          v-if=\"isAdmin\"\n          class=\"admin\"\n        >\n          {{ t(\"user.detail.globalPermissions.adminMessage\") }}\n        </div>\n        <SortableTable\n          v-else\n          :rows=\"globalBindings\"\n          :headers=\"headers.gp\"\n          key-field=\"id\"\n          :table-actions=\"false\"\n          :row-actions=\"false\"\n          :search=\"false\"\n        />\n      </Tab>\n      <Tab\n        v-if=\"clusterBindings\"\n        label-key=\"user.detail.clusterRoles.label\"\n        name=\"cr\"\n        :weight=\"2\"\n      >\n        <div class=\"subtext\">\n          {{ t(\"user.detail.clusterRoles.description\") }}\n        </div>\n        <SortableTable\n          :rows=\"clusterBindings\"\n          :headers=\"headers.cr\"\n          key-field=\"id\"\n          :table-actions=\"false\"\n          :search=\"false\"\n        />\n      </Tab>\n      <Tab\n        v-if=\"projectBindings\"\n        label-key=\"user.detail.projectRoles.label\"\n        name=\"pr\"\n        :weight=\"1\"\n      >\n        <div class=\"subtext\">\n          {{ t(\"user.detail.projectRoles.description\") }}\n        </div>\n        <SortableTable\n          :rows=\"projectBindings\"\n          :headers=\"headers.pr\"\n          key-field=\"id\"\n          :table-actions=\"false\"\n          :search=\"false\"\n        />\n      </Tab>\n    </ResourceTabs>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.subtext {\n  margin-bottom: 10px;\n  font-style: italic;\n}\n.admin {\n  display: flex;\n  justify-content: center;\n  margin: 30px 0 10px;\n  font-weight: bold;\n}\n</style>\n"],"mappings":"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"}]}