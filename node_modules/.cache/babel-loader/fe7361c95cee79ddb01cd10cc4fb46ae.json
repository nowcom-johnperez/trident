{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/validators/pod-affinity.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/validators/pod-affinity.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["isEmpty","podAffinity","spec","getters","errors","podAntiAffinity","_podAffinity$preferre","preferredDuringSchedulingIgnoredDuringExecution","_podAffinity$required","requiredDuringSchedulingIgnoredDuringExecution","forEach","term","i","errorOpts","index","group","rules","validateTermWeight","_term$podAffinityTerm","podAffinityTerm","validateTopologyKey","validateLabelSelector","_podAntiAffinity$pref","_podAntiAffinity$requ","_term$podAffinityTerm2","affinityTerm","_affinityTerm$weight","weight","push","_objectSpread","key","min","max","topologyKey","regexp","RegExp","test","validOperators","labelSelector","_labelSelector$matchE","matchExpressions","rule","operator","values","includes","length"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/validators/pod-affinity.js"],"sourcesContent":["import { isEmpty } from '@shell/utils/object';\n\n// spec = podSpec.affinity\nexport function podAffinity(spec, getters, errors) {\n  if (!spec) {\n    return;\n  }\n  const { podAffinity, podAntiAffinity } = spec;\n\n  // pod affinity\n  if (podAffinity && !isEmpty(podAffinity)) {\n    const { preferredDuringSchedulingIgnoredDuringExecution = [], requiredDuringSchedulingIgnoredDuringExecution = [] } = podAffinity;\n\n    preferredDuringSchedulingIgnoredDuringExecution.forEach((term, i) => {\n      const errorOpts = {\n        index: i,\n        group: getters['i18n/t']('validation.podAffinity.affinityTitle'),\n        rules: getters['i18n/t']('validation.podAffinity.preferredDuringSchedulingIgnoredDuringExecution')\n      };\n\n      validateTermWeight(term, errorOpts, getters, errors);\n\n      const { podAffinityTerm = {} } = term;\n\n      validateTopologyKey(podAffinityTerm, errorOpts, getters, errors);\n      validateLabelSelector(podAffinityTerm, errorOpts, getters, errors);\n    });\n\n    requiredDuringSchedulingIgnoredDuringExecution.forEach((term, i) => {\n      const errorOpts = {\n        index: i,\n        group: getters['i18n/t']('validation.podAffinity.affinityTitle'),\n        rules: getters['i18n/t']('validation.podAffinity.requiredDuringSchedulingIgnoredDuringExecution')\n      };\n\n      validateTopologyKey(term, errorOpts, getters, errors);\n      validateLabelSelector(term, errorOpts, getters, errors);\n    });\n  }\n\n  // pod antiaffinity\n  if (podAntiAffinity && !isEmpty(podAntiAffinity)) {\n    const { preferredDuringSchedulingIgnoredDuringExecution = [], requiredDuringSchedulingIgnoredDuringExecution = [] } = podAntiAffinity;\n\n    preferredDuringSchedulingIgnoredDuringExecution.forEach((term, i) => {\n      const errorOpts = {\n        index: i,\n        group: getters['i18n/t']('validation.podAffinity.antiAffinityTitle'),\n        rules: getters['i18n/t']('validation.podAffinity.preferredDuringSchedulingIgnoredDuringExecution')\n      };\n\n      validateTermWeight(term, errorOpts, getters, errors);\n\n      const { podAffinityTerm = {} } = term;\n\n      validateTopologyKey(podAffinityTerm, errorOpts, getters, errors);\n\n      validateLabelSelector(podAffinityTerm, errorOpts, getters, errors);\n    });\n\n    requiredDuringSchedulingIgnoredDuringExecution.forEach((term, i) => {\n      const errorOpts = {\n        index: i,\n        group: getters['i18n/t']('validation.podAffinity.antiAffinityTitle'),\n        rules: getters['i18n/t']('validation.podAffinity.requiredDuringSchedulingIgnoredDuringExecution')\n      };\n\n      validateTopologyKey(term, errorOpts, getters, errors);\n\n      validateLabelSelector(term, errorOpts, getters, errors);\n    });\n  }\n}\n\n// verify weight (if present) is integer 1-100\nfunction validateTermWeight(affinityTerm, errorOpts, getters, errors) {\n  const { weight = 1 } = affinityTerm;\n\n  if (typeof weight !== 'number' || weight > 100 || weight < 1 ) {\n    errors.push(getters['i18n/t']('validation.number.between', {\n      key: getters['i18n/t']('workload.scheduling.matchExpressions.weight'),\n      min: 1,\n      max: 100,\n      ...errorOpts\n    }));\n  }\n}\n\n// verify topology key is present and matches regexp for labels\nfunction validateTopologyKey(affinityTerm, errorOpts, getters, errors) {\n  const { topologyKey } = affinityTerm;\n  const regexp = RegExp('([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]');\n\n  if (!topologyKey || !regexp.test(topologyKey)) {\n    errors.push(getters['i18n/t']('validation.podAffinity.topologyKey', errorOpts));\n  }\n}\n\n/*\n    verify that each matchExpression in labelSelector:\n    operator is one of ['In', 'NotIn', 'Exists', 'DoesNotExist']\n    values is defined if operator is In or NotIn\n    values is empty if operator is Exists or DoesNotExist\n */\nfunction validateLabelSelector(affinityTerm, errorOpts, getters, errors) {\n  const validOperators = ['In', 'NotIn', 'Exists', 'DoesNotExist'];\n\n  const { labelSelector } = affinityTerm;\n\n  if (labelSelector && !isEmpty(labelSelector)) {\n    const { matchExpressions = [] } = labelSelector;\n\n    matchExpressions.forEach((rule, i) => {\n      const { operator, values } = rule;\n\n      if (!validOperators.includes(operator)) {\n        errors.push(getters['i18n/t']('validation.podAffinity.matchExpressions.operator', errorOpts));\n      }\n      if (operator === 'In' || operator === 'NotIn') {\n        if (!values || !values.length) {\n          errors.push(getters['i18n/t']('validation.podAffinity.matchExpressions.valuesMustBeDefined', errorOpts));\n        }\n      } else if (values && values.length) {\n        errors.push(getters['i18n/t']('validation.podAffinity.matchExpressions.valueMustBeEmpty', errorOpts));\n      }\n    });\n  }\n}\n"],"mappings":"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"}]}