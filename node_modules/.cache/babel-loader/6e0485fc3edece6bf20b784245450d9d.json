{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/models/fleet.cattle.io.gitrepo.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/models/fleet.cattle.io.gitrepo.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["Vue","convert","matching","convertSelectorObj","jsyaml","escapeHtml","randomStr","FLEET","FLEET_ANNOTATIONS","addObject","addObjects","findBy","insertAt","set","SteveModel","STATES_ENUM","colorForState","stateDisplay","stateSort","NAME","quacksLikeAHash","str","match","GitRepo","_SteveModel","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","applyDefaults","spec","meta","metadata","namespace","$rootGetters","repo","branch","revision","paths","clientSecretName","enabled","get","_this$spec","_this$spec2","out","_get","_getPrototypeOf","prototype","action","label","icon","bulkable","links","update","paused","divider","pause","save","unpause","forceUpdate","now","forceSyncGeneration","_this$spec3","_this$metadata","state","name","workspace","$getters","WORKSPACE","clusters","groups","clusterGroups","id","local","targetClusters","targets","_iterator","_createForOfIteratorHelper","_step","s","n","done","tgt","clusterName","cluster","clusterGroup","group","clusterGroupSelector","expressions","matchingGroups","_iterator2","_step2","err","e","f","clusterSelector","matchingClusters","github","replace","_this$status","hash","status","commit","substr","concat","_this$status2","_this$status3","ready","readyClusters","total","desiredReadyClusters","unready","mode","advanced","dump","length","target","Object","keys","matchLabels","matchExpressions","CLUSTER_NAME","operator","values","modeDisplay","t","_this","all","BUNDLE","filter","bundle","repoName","namespacedName","startsWith","bundles","_this2","bds","BUNDLE_DEPLOYMENT","bd","_bd$metadata","labels","_this$status4","_this$status5","_this3","resources","conditions","_iterator3","_step3","_loop","_this3$bundleDeployme","c","clusterBundleDeploymentResources","bundleDeployments","find","_bd$metadata2","CLUSTER","forEach","r","i","_r$perClusterState","_r$perClusterState2","_clusterBundleDeploym","perEntry","perClusterState","x","clusterId","tooMany","UNKNOWN","READY","color","display","detailLocation","params","product","resource","type","push","tableKey","kind","apiVersion","nameDisplay","stateBackground","bundleDeploymentStatus","creationTimestamp","createdAt","default"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/models/fleet.cattle.io.gitrepo.js"],"sourcesContent":["import Vue from 'vue';\nimport { convert, matching, convertSelectorObj } from '@shell/utils/selector';\nimport jsyaml from 'js-yaml';\nimport { escapeHtml, randomStr } from '@shell/utils/string';\nimport { FLEET } from '@shell/config/types';\nimport { FLEET as FLEET_ANNOTATIONS } from '@shell/config/labels-annotations';\nimport { addObject, addObjects, findBy, insertAt } from '@shell/utils/array';\nimport { set } from '@shell/utils/object';\nimport SteveModel from '@shell/plugins/steve/steve-class';\nimport { STATES_ENUM, colorForState, stateDisplay, stateSort } from '@shell/plugins/dashboard-store/resource-class';\nimport { NAME } from '@shell/config/product/explorer';\n\nfunction quacksLikeAHash(str) {\n  if (str.match(/^[a-f0-9]{40,}$/i)) {\n    return true;\n  }\n\n  return false;\n}\n\nexport default class GitRepo extends SteveModel {\n  applyDefaults() {\n    const spec = this.spec || {};\n    const meta = this.metadata || {};\n\n    meta.namespace = this.$rootGetters['workspace'];\n\n    spec.repo = spec.repo || '';\n\n    if (!spec.branch && !spec.revision) {\n      spec.branch = 'master';\n    }\n\n    spec.paths = spec.paths || [];\n    spec.clientSecretName = spec.clientSecretName || null;\n\n    Vue.set(spec, 'correctDrift', { enabled: false });\n\n    set(this, 'spec', spec);\n    set(this, 'metadata', meta);\n  }\n\n  get _availableActions() {\n    const out = super._availableActions;\n\n    insertAt(out, 0, {\n      action:   'pause',\n      label:    'Pause',\n      icon:     'icon icon-pause',\n      bulkable: true,\n      enabled:  !!this.links.update && !this.spec?.paused\n    });\n\n    insertAt(out, 1, {\n      action:   'unpause',\n      label:    'Unpause',\n      icon:     'icon icon-play',\n      bulkable: true,\n      enabled:  !!this.links.update && this.spec?.paused === true\n    });\n\n    insertAt(out, 2, {\n      action:   'forceUpdate',\n      label:    'Force Update',\n      icon:     'icon icon-refresh',\n      bulkable: true,\n      enabled:  !!this.links.update\n    });\n\n    insertAt(out, 3, { divider: true });\n\n    return out;\n  }\n\n  pause() {\n    this.spec.paused = true;\n    this.save();\n  }\n\n  unpause() {\n    this.spec.paused = false;\n    this.save();\n  }\n\n  forceUpdate() {\n    const now = this.spec.forceSyncGeneration || 1;\n\n    this.spec.forceSyncGeneration = now + 1;\n    this.save();\n  }\n\n  get state() {\n    if (this.spec?.paused === true) {\n      return 'paused';\n    }\n\n    return this.metadata?.state?.name || 'unknown';\n  }\n\n  get targetClusters() {\n    const workspace = this.$getters['byId'](FLEET.WORKSPACE, this.metadata.namespace);\n    const clusters = workspace?.clusters || [];\n    const groups = workspace?.clusterGroups || [];\n\n    if (workspace?.id === 'fleet-local') {\n      const local = findBy(groups, 'id', 'fleet-local/default');\n\n      if (local) {\n        return local.targetClusters;\n      }\n\n      return [];\n    }\n\n    if (!this.spec.targets) {\n      return [];\n    }\n\n    const out = [];\n\n    for (const tgt of this.spec.targets) {\n      if (tgt.clusterName) {\n        const cluster = findBy(clusters, 'metadata.name', tgt.clusterName);\n\n        if (cluster) {\n          addObject(out, cluster);\n        }\n      } else if (tgt.clusterGroup) {\n        const group = findBy(groups, {\n          'metadata.namespace': this.metadata.namespace,\n          'metadata.name':      tgt.clusterGroup,\n        });\n\n        if (group) {\n          addObjects(out, group.targetClusters);\n        }\n      } else if (tgt.clusterGroupSelector) {\n        const expressions = convertSelectorObj(tgt.clusterGroupSelector);\n        const matchingGroups = matching(groups, expressions);\n\n        for (const group of matchingGroups) {\n          addObjects(out, group.targetClusters);\n        }\n      } else if (tgt.clusterSelector) {\n        const expressions = convertSelectorObj(tgt.clusterSelector);\n        const matchingClusters = matching(clusters, expressions);\n\n        addObjects(out, matchingClusters);\n      }\n    }\n\n    return out;\n  }\n\n  get github() {\n    const match = this.spec.repo.match(/^https?:\\/\\/github\\.com\\/(.*?)(\\.git)?\\/*$/);\n\n    if (match) {\n      return match[1];\n    }\n\n    return false;\n  }\n\n  get repoIcon() {\n    if (this.github) {\n      return 'icon icon-github';\n    }\n\n    return '';\n  }\n\n  get repoDisplay() {\n    let repo = this.spec.repo;\n\n    repo = repo.replace(/.git$/, '');\n    repo = repo.replace(/^https:\\/\\//, '');\n    repo = repo.replace(/\\/+$/, '');\n\n    if (this.github) {\n      return this.github;\n    }\n\n    return repo;\n  }\n\n  get commitDisplay() {\n    const spec = this.spec;\n    const hash = this.status?.commit?.substr(0, 7);\n\n    if (!spec || !spec.repo) {\n      return null;\n    }\n\n    if (spec.revision && quacksLikeAHash(spec.revision)) {\n      return spec.revision.substr(0, 7);\n    } else if (spec.revision) {\n      return spec.revision;\n    } else if (spec.branch) {\n      return spec.branch + (hash ? ` @ ${ hash }` : '');\n    }\n\n    return hash;\n  }\n\n  get clusterInfo() {\n    const ready = this.status?.readyClusters || 0;\n    const total = this.status?.desiredReadyClusters || 0;\n\n    return {\n      ready,\n      unready: total - ready,\n      total,\n    };\n  }\n\n  get targetInfo() {\n    let mode = null;\n    let cluster = null;\n    let clusterGroup = null;\n    let advanced = null;\n\n    const targets = this.spec.targets || [];\n\n    advanced = jsyaml.dump(targets);\n\n    if (advanced === '[]\\n') {\n      advanced = `# - name:\n#  clusterSelector:\n#    matchLabels:\n#     foo: bar\n#    matchExpressions:\n#     - key: foo\n#       op: In\n#       values: [bar, baz]\n#  clusterGroup: foo\n#  clusterGroupSelector:\n#    matchLabels:\n#     foo: bar\n#    matchExpressions:\n#     - key: foo\n#       op: In\n#       values: [bar, baz]\n`;\n    }\n\n    if (this.metadata.namespace === 'fleet-local') {\n      mode = 'local';\n    } else if (!targets.length) {\n      mode = 'none';\n    } else if (targets.length === 1) {\n      const target = targets[0];\n\n      if (Object.keys(target).length > 1) {\n        // There are multiple properties in a single target, so use the 'advanced' mode\n        // (otherwise any existing content is nuked for what we provide)\n        mode = 'advanced';\n      } else if (target.clusterGroup) {\n        clusterGroup = target.clusterGroup;\n\n        if (!mode) {\n          mode = 'clusterGroup';\n        }\n      } else if (target.clusterName) {\n        mode = 'cluster';\n        cluster = target.clusterName;\n      } else if (target.clusterSelector) {\n        if (Object.keys(target.clusterSelector).length === 0) {\n          mode = 'all';\n        } else {\n          const expressions = convert(target.clusterSelector.matchLabels, target.clusterSelector.matchExpressions);\n\n          if (expressions.length === 1 &&\n            expressions[0].key === FLEET_ANNOTATIONS.CLUSTER_NAME &&\n            expressions[0].operator === 'In' &&\n            expressions[0].values.length === 1\n          ) {\n            cluster = expressions[0].values[0];\n            if (!mode) {\n              mode = 'cluster';\n            }\n          }\n        }\n      }\n    }\n\n    if (!mode) {\n      mode = 'advanced';\n    }\n\n    return {\n      mode,\n      modeDisplay: this.t(`fleet.gitRepo.targetDisplay.\"${ mode }\"`),\n      cluster,\n      clusterGroup,\n      advanced\n    };\n  }\n\n  get groupByLabel() {\n    const name = this.metadata.namespace;\n\n    if (name) {\n      return this.$rootGetters['i18n/t']('resourceTable.groupLabel.workspace', { name: escapeHtml(name) });\n    } else {\n      return this.$rootGetters['i18n/t']('resourceTable.groupLabel.notInAWorkspace');\n    }\n  }\n\n  get bundles() {\n    const all = this.$getters['all'](FLEET.BUNDLE);\n\n    return all.filter((bundle) => bundle.repoName === this.name &&\n      bundle.namespace === this.namespace &&\n      bundle.namespacedName.startsWith(`${ this.namespace }:${ this.name }`));\n  }\n\n  get bundlesReady() {\n    if (this.bundles && this.bundles.length) {\n      return this.bundles.filter((bundle) => bundle.state === 'active');\n    }\n\n    return 0;\n  }\n\n  get bundleDeployments() {\n    const bds = this.$getters['all'](FLEET.BUNDLE_DEPLOYMENT);\n\n    return bds.filter((bd) => bd.metadata?.labels?.['fleet.cattle.io/repo-name'] === this.name);\n  }\n\n  get resourcesStatuses() {\n    const clusters = this.targetClusters || [];\n    const resources = this.status?.resources || [];\n    const conditions = this.status?.conditions || [];\n\n    const out = [];\n\n    for (const c of clusters) {\n      const clusterBundleDeploymentResources = this.bundleDeployments\n        .find((bd) => bd.metadata?.labels?.[FLEET_ANNOTATIONS.CLUSTER] === c.metadata.name)\n        ?.status?.resources || [];\n\n      resources.forEach((r, i) => {\n        let namespacedName = r.name;\n\n        if (r.namespace) {\n          namespacedName = `${ r.namespace }:${ r.name }`;\n        }\n\n        let state = r.state;\n        const perEntry = r.perClusterState?.find((x) => x.clusterId === c.id);\n        const tooMany = r.perClusterState?.length >= 10 || false;\n\n        if (perEntry) {\n          state = perEntry.state;\n        } else if (tooMany) {\n          state = STATES_ENUM.UNKNOWN;\n        } else {\n          state = STATES_ENUM.READY;\n        }\n\n        const color = colorForState(state).replace('text-', 'bg-');\n        const display = stateDisplay(state);\n\n        const detailLocation = {\n          name:   `c-cluster-product-resource${ r.namespace ? '-namespace' : '' }-id`,\n          params: {\n            product:   NAME,\n            cluster:   c.metadata.labels[FLEET_ANNOTATIONS.CLUSTER_NAME],\n            resource:  r.type,\n            namespace: r.namespace,\n            id:        r.name,\n          }\n        };\n\n        out.push({\n          key:                    `${ r.id }-${ c.id }-${ r.type }-${ r.namespace }-${ r.name }`,\n          tableKey:               `${ r.id }-${ c.id }-${ r.type }-${ r.namespace }-${ r.name }-${ randomStr(8) }`,\n          kind:                   r.kind,\n          apiVersion:             r.apiVersion,\n          type:                   r.type,\n          id:                     r.id,\n          namespace:              r.namespace,\n          name:                   r.name,\n          clusterId:              c.id,\n          clusterName:            c.nameDisplay,\n          state,\n          stateBackground:        color,\n          stateDisplay:           display,\n          stateSort:              stateSort(color, display),\n          namespacedName,\n          detailLocation,\n          conditions:             conditions[i],\n          bundleDeploymentStatus: clusterBundleDeploymentResources?.[i],\n          creationTimestamp:      clusterBundleDeploymentResources?.[i]?.createdAt\n        });\n      });\n    }\n\n    return out;\n  }\n\n  get clustersList() {\n    return this.$getters['all'](FLEET.CLUSTER);\n  }\n}\n"],"mappings":"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"}]}