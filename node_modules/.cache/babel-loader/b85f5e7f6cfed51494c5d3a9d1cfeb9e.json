{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/mixins/form-validation.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/mixins/form-validation.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["getAllValues","formRulesGenerator","data","fvFormRuleSets","fvReportedValidationPaths","methods","fvGetPathRules","path","_this$fvRulesets$find","fvRulesets","find","ruleset","rules","fvGetAndReportPathRules","length","includes","concat","_toConsumableArray","fvGetPathValues","relevantRuleset","rootObject","value","fvGetValues","val","idx","arr","_typeof","Array","isArray","_objectSpread","fvGetPathErrors","_this","paths","arguments","undefined","messages","reduce","acc","pathErrors","relevantRules","relevantValues","map","forEach","rule","push","filter","Boolean","computed","fvExtraRules","_this2","_this$value","nullValidator","formRules","$store","getters","displayKey","translationKey","formValidationRule","modelValidationRules","fvUnreportedValidationErrors","_this3","formErrors","modelErrors","customValidationErrors","errors","fvValidationErrors","fvFormIsValid"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/mixins/form-validation.js"],"sourcesContent":["import { getAllValues } from '@shell/utils/object';\nimport formRulesGenerator from '@shell/utils/validators/formRules/index';\n\nexport default {\n  data() {\n    return {\n      /**\n       * Define the validation rules for the entire form.\n       * These should almost always be overridden in the form-component using the mixin\n       *\n       * path (required): defines the path of the value to be tested against it's rules. Looks for the relevant path in `this.value` unless an is passed in via rootObject\n       * rules (required): array of strings that match which validator functions to run against the value of the field defined by the path (and optionally the rulesets rootObject),\n       * rootObject (optional): redirects the path to the object passed here,\n       * translationKey (optional): defines the displaykey, overrides displaykeys that may otherwise be passed into the translation\n       *\n       * NOTE: path of type 'value.value' will be only 'value'\n       *\n       * Example:\n       * {\n       *   path:  'container.image',\n       *   rules: ['noSpaces', 'noPeriods'],\n       *   rootObject: { container: { image: 'name' } },\n       *   translationKey: 'Image Name',\n       * }\n       */\n      fvFormRuleSets:            [],\n      /**\n       * An array of strings that track which ruleset paths have been bound to a field for error\n       * reporting tracked in a separate array from the actual rulesets since we want the option\n       * of keeping track of modelValidationRules without mutating the model itself you may place\n       * a path in here manually as part of your form's data props or you may place a path in\n       * here programmatically by using the \"fvGetAndReportPathRules\" method\n       */\n      fvReportedValidationPaths: []\n    };\n  },\n\n  methods: {\n    /**\n     * Returns an array of validator functions based off path property of the ruleset, use this if you want\n     * the array but you don't want the form to track that the rules have been bound to a field\n     * @param {*} path\n     * @returns\n     */\n    fvGetPathRules(path) {\n      return this.fvRulesets.find((ruleset) => ruleset.path === path)?.rules || [];\n    },\n\n    /**\n     * Returns an array of validator functions and pushes the path of the relevant ruleset into\n     * fvReportedValidationPaths so that we know any error messages are handled by the field using it\n     * @param {*} path\n     * @returns\n     */\n    fvGetAndReportPathRules(path) {\n      const rules = this.fvGetPathRules(path);\n\n      if (rules.length > 0 && !this.fvReportedValidationPaths.includes(path)) {\n        this.fvReportedValidationPaths = [...this.fvReportedValidationPaths, path];\n      }\n\n      return rules;\n    },\n\n    /**\n     * Validates that the path is one that belongs to a ruleset (either a formRuleset or from the\n     * modelValidationRules) and returns its value(s) in an array\n     * @param {*} path\n     * @returns\n     */\n    fvGetPathValues(path) { //\n      // returns even single values as an array to simplify validation logic since\n      // some fields may have multiple values\n      const relevantRuleset = this.fvRulesets.find((ruleset) => ruleset.path === path);\n\n      if (!relevantRuleset) {\n        return [];\n      }\n\n      return getAllValues(relevantRuleset?.rootObject || this.value, relevantRuleset?.path);\n    },\n\n    fvGetValues(val, idx, arr) {\n      return (arr.length > 1 &&\n        typeof val === 'object' &&\n        !Array.isArray(val) &&\n        val !== null ? { ...val, idx } : val\n      );\n    },\n\n    /**\n     * Gets errors from multiple paths, usually used externally to check a single path but used\n     * within the mixin to check all paths for errors\n     * @param {*} paths\n     * @returns\n     */\n    fvGetPathErrors(paths = []) {\n      const messages = paths.reduce((acc, path) => {\n        const pathErrors = [];\n        const relevantRules = this.fvGetPathRules(path);\n        const relevantValues = this.fvGetPathValues(path).map(this.fvGetValues);\n\n        relevantRules.forEach((rule) => {\n          relevantValues.forEach((value) => {\n            pathErrors.push(rule(value));\n          });\n        });\n\n        return [...acc, ...pathErrors].filter(Boolean);\n      }, []);\n\n      return messages;\n    },\n  },\n\n  computed: {\n    /**\n     * fvExtraRules allows you to create rules that might be specific to a form inside of\n     * that form component and pass them into the mixin's logic.\n     * fvExtraRules needs to return an object with a validation rule function in each key.\n     * This is a computed property as returning functions in the data props is not considered\n     * a best practice\n     * @returns\n     */\n    fvExtraRules() {\n      return {};\n    },\n\n    /**\n     * Rulesets is a combination of the rules defined in the fvFormRuleSets array and the\n     * modelValidationRules in the model. Theoretically, a form could just use the rulesets\n     * defined in the model however in practice this can be limiting\n     * @returns\n     */\n    fvRulesets() {\n      const nullValidator = () => undefined;\n\n      return [\n        ...this.fvFormRuleSets.map((ruleset) => {\n          const formRules = {\n            ...formRulesGenerator(\n              this.$store.getters['i18n/t'],\n              { displayKey: ruleset?.translationKey ? this.$store.getters['i18n/t'](ruleset.translationKey) : 'Value' }),\n            ...this.fvExtraRules\n          };\n\n          return {\n            ...ruleset,\n            rules:              ruleset.rules.map((rule) => formRules[rule] || nullValidator),\n            formValidationRule: true\n          };\n        }),\n        ...(this?.value?.modelValidationRules || []).map((rule) => ({\n          ...rule,\n          formValidationRule: false\n        }))\n      ];\n    },\n\n    /**\n     * If either the fvFormRuleSets or the modelValidationRules throw an error and the associated path\n     * isn't in the reportValidationPaths then it'll show up here.\n     * Useful for throwing unreported errors into a generic banner\n     * @returns\n     */\n    fvUnreportedValidationErrors() { //\n      const paths = this.fvRulesets\n        .filter((ruleset) => !!ruleset.formValidationRule && !this.fvReportedValidationPaths.includes(ruleset.path))\n        .map((ruleset) => ruleset.path);\n\n      const formErrors = this.fvGetPathErrors(paths);\n\n      // the model already has a means of producing errors, not reinventing the wheel... yet...\n      const modelErrors = this.value.customValidationErrors ? this.value.customValidationErrors(this.value, this.fvReportedValidationPaths) : [];\n\n      return [...formErrors, ...modelErrors, ...(this.errors || [])];\n    },\n\n    /**\n     * Checks for any and all errors, regardless of being bound, from the model, or from the form\n     * @returns\n     */\n    fvValidationErrors() {\n      const paths = this.fvRulesets.filter((ruleset) => !!ruleset.formValidationRule).map((ruleset) => ruleset.path);\n      const formErrors = this.fvGetPathErrors(paths);\n\n      // the model already has a means of producing errors, not reinventing the wheel... yet...\n      const modelErrors = this.value.customValidationErrors ? this.value.customValidationErrors(this.value) : [];\n\n      return [...formErrors, ...modelErrors];\n    },\n\n    fvFormIsValid() {\n      return this.fvValidationErrors.length === 0;\n    }\n  }\n};\n"],"mappings":"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"}]}