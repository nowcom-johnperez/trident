{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/ResourceDetail/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/ResourceDetail/index.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["CreateEditView","Loading","ResourceYaml","_VIEW","_EDIT","_CLONE","_IMPORT","_STAGE","_CREATE","AS","_YAML","_DETAIL","_CONFIG","_GRAPH","PREVIEW","MODE","FLEET","SCHEMA","createYaml","Masthead","DetailTop","clone","diff","IconMessage","ForceDirectedTreeChart","checkSchemasForFindAllHash","modeFor","route","_route$query","_route$params","query","mode","params","id","getYaml","_x","_x2","_getYaml","apply","arguments","_asyncToGenerator","regeneratorRuntime","mark","_callee3","store","model","inStore","yaml","opt","cleanedYaml","wrap","_callee3$","_context3","prev","next","getters","type","headers","accept","hasLink","followLink","sent","data","dispatch","concat","abrupt","stop","components","mixins","props","storeOverride","String","default","resourceOverride","parentRouteOverride","flexContent","Boolean","componentTestid","fetch","_this","_callee","resource","realMode","namespace","getGraphConfig","hasGraph","hasCustomDetail","hasCustomEdit","schemas","requested","as","notFound","options","canViewYaml","schema","initialModel","liveModel","_schema$attributes","_schema$attributes2","graphSchema","fqid","out","key","_callee$","_context","$store","$route","includes","showMasthead","resourceEditMasthead","canYaml","attributes","namespaced","metadata","forceYaml","cluster","inStoreType","CLUSTER","bundle","BUNDLE","bundleDeployment","BUNDLE_DEPLOYMENT","canViewChart","watch","t0","status","Error","t","chartData","cleanForNew","cleanYaml","value","applyDefaults","resourceSubtype","asYaml","computed","isView","isYaml","isDetail","isGraph","offerPreview","showComponent","detailComponent","editComponent","$routeQuery","inNeu","inOld","neu","old","queryDiff","Object","keys","$fetch","valueMetadataResourceVersion","a","b","_this2","_callee2","_callee2$","_context2","created","detailResource","resourceDetail","editResource","resourceEdit","methods","setSubtype","subtype","keyAction","act","m"],"sources":["node_modules/@rancher/shell/components/ResourceDetail/index.vue"],"sourcesContent":["<script>\nimport CreateEditView from '@shell/mixins/create-edit-view/impl';\nimport Loading from '@shell/components/Loading';\nimport ResourceYaml from '@shell/components/ResourceYaml';\nimport {\n  _VIEW, _EDIT, _CLONE, _IMPORT, _STAGE, _CREATE,\n  AS, _YAML, _DETAIL, _CONFIG, _GRAPH, PREVIEW, MODE,\n} from '@shell/config/query-params';\nimport { FLEET, SCHEMA } from '@shell/config/types';\nimport { createYaml } from '@shell/utils/create-yaml';\nimport Masthead from '@shell/components/ResourceDetail/Masthead';\nimport DetailTop from '@shell/components/DetailTop';\nimport { clone, diff } from '@shell/utils/object';\nimport IconMessage from '@shell/components/IconMessage';\nimport ForceDirectedTreeChart from '@shell/components/fleet/ForceDirectedTreeChart';\nimport { checkSchemasForFindAllHash } from '@shell/utils/auth';\n\nfunction modeFor(route) {\n  if ( route.query?.mode === _IMPORT ) {\n    return _IMPORT;\n  }\n\n  if ( route.params?.id ) {\n    return route.query.mode || _VIEW;\n  } else {\n    return _CREATE;\n  }\n}\n\nasync function getYaml(store, model) {\n  const inStore = store.getters['currentStore'](model.type);\n  let yaml;\n  const opt = { headers: { accept: 'application/yaml' } };\n\n  if ( model.hasLink('view') ) {\n    yaml = (await model.followLink('view', opt)).data;\n  }\n\n  const cleanedYaml = await store.dispatch(`${ inStore }/cleanForDownload`, yaml);\n\n  return cleanedYaml;\n}\n\nexport default {\n  components: {\n    Loading,\n    DetailTop,\n    ForceDirectedTreeChart,\n    ResourceYaml,\n    Masthead,\n    IconMessage,\n  },\n\n  mixins: [CreateEditView],\n\n  props: {\n    storeOverride: {\n      type:    String,\n      default: null,\n    },\n\n    resourceOverride: {\n      type:    String,\n      default: null,\n    },\n\n    parentRouteOverride: {\n      type:    String,\n      default: null,\n    },\n\n    flexContent: {\n      type:    Boolean,\n      default: false,\n    },\n\n    /**\n     * Inherited global identifier prefix for tests\n     * Define a term based on the parent component to avoid conflicts on multiple components\n     */\n    componentTestid: {\n      type:    String,\n      default: 'resource-details'\n    }\n  },\n\n  async fetch() {\n    const store = this.$store;\n    const route = this.$route;\n    const params = route.params;\n    let resource = this.resourceOverride || params.resource;\n\n    const inStore = this.storeOverride || store.getters['currentStore'](resource);\n    const realMode = this.realMode;\n\n    // eslint-disable-next-line prefer-const\n    let { namespace, id } = params;\n\n    // There are 6 \"real\" modes that can be put into the query string\n    // These are mapped down to the 3 regular page \"mode\"s that create-edit-view components\n    // know about:  view, edit, create (stage, import and clone become \"create\")\n    const mode = ([_CLONE, _IMPORT, _STAGE].includes(realMode) ? _CREATE : realMode);\n\n    const getGraphConfig = store.getters['type-map/hasGraph'](resource);\n    const hasGraph = !!getGraphConfig;\n    const hasCustomDetail = store.getters['type-map/hasCustomDetail'](resource, id);\n    const hasCustomEdit = store.getters['type-map/hasCustomEdit'](resource, id);\n\n    const schemas = store.getters[`${ inStore }/all`](SCHEMA);\n\n    // As determines what component will be rendered\n    const requested = route.query[AS];\n    let as;\n    let notFound = false;\n\n    if ( mode === _VIEW && hasCustomDetail && (!requested || requested === _DETAIL) ) {\n      as = _DETAIL;\n    } else if ( mode === _VIEW && hasGraph && requested === _GRAPH) {\n      as = _GRAPH;\n    } else if ( hasCustomEdit && (!requested || requested === _CONFIG) ) {\n      as = _CONFIG;\n    } else {\n      as = _YAML;\n    }\n\n    this.as = as;\n\n    const options = store.getters[`type-map/optionsFor`](resource);\n\n    this.showMasthead = [_CREATE, _EDIT].includes(mode) ? options.resourceEditMasthead : true;\n    const canViewYaml = options.canYaml;\n\n    if ( options.resource ) {\n      resource = options.resource;\n    }\n\n    const schema = store.getters[`${ inStore }/schemaFor`](resource);\n    let model, initialModel, liveModel, yaml;\n\n    if ( realMode === _CREATE || realMode === _IMPORT ) {\n      if ( !namespace ) {\n        namespace = store.getters['defaultNamespace'];\n      }\n\n      const data = { type: resource };\n\n      if ( schema?.attributes?.namespaced ) {\n        data.metadata = { namespace };\n      }\n\n      liveModel = await store.dispatch(`${ inStore }/create`, data);\n      initialModel = await store.dispatch(`${ inStore }/clone`, { resource: liveModel });\n      model = await store.dispatch(`${ inStore }/clone`, { resource: liveModel });\n\n      if (model.forceYaml === true) {\n        as = _YAML;\n        this.as = as;\n      }\n\n      if ( as === _YAML ) {\n        yaml = createYaml(schemas, resource, data);\n      }\n    } else {\n      if ( as === _GRAPH ) {\n        const graphSchema = await checkSchemasForFindAllHash({\n          cluster: {\n            inStoreType: 'management',\n            type:        FLEET.CLUSTER\n          },\n          bundle: {\n            inStoreType: 'management',\n            type:        FLEET.BUNDLE\n          },\n\n          bundleDeployment: {\n            inStoreType: 'management',\n            type:        FLEET.BUNDLE_DEPLOYMENT\n          }\n\n        }, this.$store);\n\n        this.canViewChart = graphSchema.cluster && graphSchema.bundle && graphSchema.bundleDeployment;\n      }\n\n      let fqid = id;\n\n      if ( schema.attributes?.namespaced && namespace ) {\n        fqid = `${ namespace }/${ fqid }`;\n      }\n\n      try {\n        liveModel = await store.dispatch(`${ inStore }/find`, {\n          type: resource,\n          id:   fqid,\n          opt:  { watch: true }\n        });\n      } catch (e) {\n        if (e.status === 404 || e.status === 403) {\n          store.dispatch('loadingError', new Error(this.t('nav.failWhale.resourceIdNotFound', { resource, fqid }, true)));\n        }\n        liveModel = {};\n        notFound = fqid;\n      }\n\n      if (realMode === _VIEW) {\n        model = liveModel;\n      } else {\n        model = await store.dispatch(`${ inStore }/clone`, { resource: liveModel });\n      }\n\n      initialModel = await store.dispatch(`${ inStore }/clone`, { resource: liveModel });\n\n      if ( as === _YAML ) {\n        yaml = await getYaml(this.$store, liveModel);\n      }\n\n      if ( as === _GRAPH ) {\n        this.chartData = liveModel;\n      }\n\n      if ( [_CLONE, _IMPORT, _STAGE].includes(realMode) ) {\n        model.cleanForNew();\n        yaml = model.cleanYaml(yaml, realMode);\n      }\n    }\n\n    // Ensure common properties exists\n    model = await store.dispatch(`${ inStore }/cleanForDetail`, model);\n\n    const out = {\n      hasGraph,\n      getGraphConfig,\n      hasCustomDetail,\n      hasCustomEdit,\n      canViewYaml,\n      resource,\n      as,\n      yaml,\n      initialModel,\n      liveModel,\n      mode,\n      value: model,\n      notFound,\n    };\n\n    for ( const key in out ) {\n      this[key] = out[key];\n    }\n\n    if ( this.mode === _CREATE ) {\n      this.value.applyDefaults(this, realMode);\n    }\n  },\n  data() {\n    return {\n      chartData:       null,\n      resourceSubtype: null,\n\n      // Set by fetch\n      hasGraph:        null,\n      hasCustomDetail: null,\n      hasCustomEdit:   null,\n      resource:        null,\n      asYaml:          null,\n      yaml:            null,\n      liveModel:       null,\n      initialModel:    null,\n      mode:            null,\n      as:              null,\n      value:           null,\n      model:           null,\n      notFound:        null,\n      canViewChart:    true,\n    };\n  },\n\n  computed: {\n    realMode() {\n      // There are 5 \"real\" modes that you can start in: view, edit, create, stage, clone\n      const realMode = modeFor(this.$route);\n\n      return realMode;\n    },\n\n    isView() {\n      return this.mode === _VIEW;\n    },\n\n    isYaml() {\n      return this.as === _YAML;\n    },\n\n    isDetail() {\n      return this.as === _DETAIL;\n    },\n\n    isGraph() {\n      return this.as === _GRAPH;\n    },\n\n    offerPreview() {\n      return this.as === _YAML && [_EDIT, _CLONE, _IMPORT, _STAGE].includes(this.mode);\n    },\n\n    showComponent() {\n      switch ( this.as ) {\n      case _DETAIL: return this.detailComponent;\n      case _CONFIG: return this.editComponent;\n      }\n\n      return null;\n    },\n  },\n\n  watch: {\n    '$route.query'(inNeu, inOld) {\n      const neu = clone(inNeu);\n      const old = clone(inOld);\n\n      delete neu[PREVIEW];\n      delete old[PREVIEW];\n\n      if ( !this.isView ) {\n        delete neu[AS];\n        delete old[AS];\n      }\n\n      const queryDiff = Object.keys(diff(neu, old));\n\n      if ( queryDiff.includes(MODE) || queryDiff.includes(AS)) {\n        this.$fetch();\n      }\n    },\n\n    // Auto refresh YAML when the model changes\n    async 'value.metadata.resourceVersion'(a, b) {\n      if ( this.mode === _VIEW && this.as === _YAML && a && b && a !== b) {\n        this.yaml = await getYaml(this.$store, this.liveModel);\n      }\n    }\n  },\n\n  created() {\n    // eslint-disable-next-line prefer-const\n    const id = this.$route.params.id;\n    const resource = this.resourceOverride || this.$route.params.resource;\n    const options = this.$store.getters[`type-map/optionsFor`](resource);\n\n    const detailResource = options.resourceDetail || options.resource || resource;\n    const editResource = options.resourceEdit || options.resource || resource;\n\n    // FIXME: These aren't right... signature is (rawType, subType).. not (rawType, resourceId)\n    // Remove id? How does subtype get in (cluster/node)\n    this.detailComponent = this.$store.getters['type-map/importDetail'](detailResource, id);\n    this.editComponent = this.$store.getters['type-map/importEdit'](editResource, id);\n  },\n\n  methods: {\n    setSubtype(subtype) {\n      this.resourceSubtype = subtype;\n    },\n\n    keyAction(act) {\n      const m = this.liveModel;\n\n      if ( m?.[act] ) {\n        m[act]();\n      }\n    },\n  }\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending || notFound\" />\n  <div v-else>\n    <Masthead\n      v-if=\"showMasthead\"\n      :resource=\"resource\"\n      :value=\"liveModel\"\n      :mode=\"mode\"\n      :real-mode=\"realMode\"\n      :as=\"as\"\n      :has-graph=\"hasGraph\"\n      :has-detail=\"hasCustomDetail\"\n      :has-edit=\"hasCustomEdit\"\n      :can-view-yaml=\"canViewYaml\"\n      :resource-subtype=\"resourceSubtype\"\n      :parent-route-override=\"parentRouteOverride\"\n      :store-override=\"storeOverride\"\n    >\n      <DetailTop\n        v-if=\"isView && isDetail\"\n        :value=\"liveModel\"\n      />\n    </Masthead>\n\n    <ForceDirectedTreeChart\n      v-if=\"isGraph && canViewChart\"\n      :data=\"chartData\"\n      :fdc-config=\"getGraphConfig\"\n    />\n\n    <ResourceYaml\n      v-else-if=\"isYaml\"\n      ref=\"resourceyaml\"\n      v-model=\"value\"\n      :mode=\"mode\"\n      :yaml=\"yaml\"\n      :offer-preview=\"offerPreview\"\n      :done-route=\"doneRoute\"\n      :done-override=\"value.doneOverride\"\n      :class=\"{'flex-content': flexContent}\"\n    />\n\n    <component\n      :is=\"showComponent\"\n      v-else\n      ref=\"comp\"\n      v-model=\"value\"\n      v-bind=\"_data\"\n      :done-params=\"doneParams\"\n      :done-route=\"doneRoute\"\n      :mode=\"mode\"\n      :initial-value=\"initialModel\"\n      :live-value=\"liveModel\"\n      :real-mode=\"realMode\"\n      :class=\"{'flex-content': flexContent}\"\n      @set-subtype=\"setSubtype\"\n    />\n\n    <button\n      v-if=\"isView\"\n      v-shortkey.once=\"['shift','d']\"\n      :data-testid=\"componentTestid + '-detail'\"\n      class=\"hide\"\n      @shortkey=\"keyAction('goToDetail')\"\n    />\n    <button\n      v-if=\"isView\"\n      v-shortkey.once=\"['shift','c']\"\n      :data-testid=\"componentTestid + '-config'\"\n      class=\"hide\"\n      @shortkey=\"keyAction('goToViewConfig')\"\n    />\n    <button\n      v-if=\"isView\"\n      v-shortkey.once=\"['shift','y']\"\n      :data-testid=\"componentTestid + '-yaml'\"\n      class=\"hide\"\n      @shortkey=\"keyAction('goToViewYaml')\"\n    />\n    <button\n      v-if=\"isView\"\n      v-shortkey.once=\"['shift','e']\"\n      :data-testid=\"componentTestid + '-edit'\"\n      class=\"hide\"\n      @shortkey=\"keyAction('goToEdit')\"\n    />\n  </div>\n</template>\n\n<style lang='scss' scoped>\n.flex-content {\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n}\n</style>\n"],"mappings":"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"}]}