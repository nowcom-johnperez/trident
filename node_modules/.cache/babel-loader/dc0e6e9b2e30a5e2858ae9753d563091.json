{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/store/type-map.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/store/type-map.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["AGE","NAME","NAMESPACE","NAMESPACE_COL","STATE","CATALOG","COUNT","SCHEMA","MANAGEMENT","VIEW_IN_API","EXPANDED_GROUPS","FAVORITE_TYPES","addObject","findBy","insertAt","isArray","removeObject","filterBy","clone","get","ensureRegex","escapeHtml","escapeRegex","ucFirst","pluralize","importChart","importList","importDetail","importEdit","listProducts","loadProduct","importCustomPromptRemove","resolveList","resolveEdit","resolveWindowComponent","importWindowComponent","importLogin","resolveChart","resolveDetail","importDialog","importMachineConfig","resolveMachineConfigComponent","resolveCloudCredentialComponent","importCloudCredential","EXPLORER","isObject","normalizeType","sortBy","haveV1Monitoring","haveV2Monitoring","NEU_VECTOR_NAMESPACE","NAMESPACED","CLUSTER_LEVEL","BOTH","ALL","BASIC","FAVORITE","USED","ROOT","SPOOFED_PREFIX","SPOOFED_API_PREFIX","instanceMethods","graphConfigMap","FIELD_REGEX","IF_HAVE","V1_MONITORING","V2_MONITORING","PROJECT","NO_PROJECT","NOT_V1_ISTIO","MULTI_CLUSTER","NEUVECTOR_NAMESPACE","ADMIN","MCM_DISABLED","NOT_STANDALONE_HARVESTER","DSL","store","product","module","arguments","length","undefined","inOpt","opt","_objectSpread","name","weight","inStore","inExplorer","removable","showClusterSwitcher","showNamespaceFilter","public","filterMode","_i","_arr","k","regexToString","commit","concat","basicType","types","group","Object","values","groupBy","type","field","headers","forEach","header","getValue","valueProp","value","hideBulkActions","configureType","match","options","graphConfig","componentForType","replace","ignoreType","regexOrString","ignoreGroup","cb","weightGroup","input","forBasic","groups","setGroupDefaultType","defaultType","weightType","mapGroup","continueOnMatch","mapType","moveType","virtualType","obj","spoofedType","called","applyProducts","_x","_x2","_applyProducts","apply","_asyncToGenerator","regeneratorRuntime","mark","_callee3","$plugin","_iterator19","_step19","impl","wrap","_callee3$","_context3","prev","next","abrupt","_createForOfIteratorHelper","s","n","done","sent","init","t0","e","f","finish","loadProducts","stop","productsLoaded","state","products","virtualTypes","spoofedTypes","basicTypes","groupIgnore","groupWeights","groupDefaultTypes","basicGroupWeights","_defineProperty","groupMappings","typeIgnore","basicTypeWeights","typeWeights","typeMappings","typeMoveMappings","typeToComponentMappings","typeOptions","schemaGeneration","cache","typeMove","groupLabel","ignore","list","chart","detail","edit","componentFor","promptRemove","windowComponents","getters","labelFor","rootState","rootGetters","schema","count","language","_applyMapping","_schema$attributes","key","id","toLowerCase","trim","out","attributes","kind","groupLabelFor","schemaOrName","_typeof","moved","_iterator","_step","rule","re","stringToRegex","err","split","map","x","join","groupForBasicType","schemaId","_state$basicTypes","optionsFor","def","isCreatable","isEditable","isRemovable","showState","showAge","canYaml","namespaced","listGroups","depaginate","customRoute","resourceEditMasthead","schemaOrType","found","find","entry","test","opts","assign","isFavorite","includes","typeWeightFor","_type","groupWeightFor","groupDefaultTypeFor","getTree","productId","mode","allTypes","clusterId","namespaceMode","namespaces","currentType","search","isBasic","searchRegex","RegExp","root","children","keys","sort","a","b","currentLocal","defaultLocal","_iterator2","_step2","_typeObj$schema","typeObj","isIgnored","_matchingCounts","label","labelKey","labelDisplay","highlightLabel","_ensureGroup","route","params","cluster","resource","push","exact","overview","_sortGroup","tree","isRoot","startsWith","parent","_name$split","_name$split2","_slicedToArray","original","defaultLabel","isSpoofed","productSpoofedTypes","some","st","isVirtual","productVirtualTypes","getSpoofedInstances","_ref","_callee","_instanceMethods$prod","getInstances","instances","_callee$","_context","instance","_instance$links","_instance$links2","_instance$links3","_instance$links4","link","apiLink","links","remove","self","update","view","_x3","_x4","getSpoofedInstance","_ref2","_callee2","productInstances","_callee2$","_context2","_x5","_x6","_x7","allSpoofedTypes","flat","spoofedSchemas","flatMap","schemas","allSpoofedSchemas","_findBy","_rootGetters","counts","isDev","_iterator3","_step3","_rootGetters$currentC","attrs","ifRancherCluster","isRancher","localOnly","currentCluster","isLocal","summary","byNamespace","revision","_toConsumableArray","_iterator4","_step4","item","ifHave","ifHaveType","_item$ifHaveType","targetedSchemas","haveIds","ifHaveVerb","ifHaveSubTypes","hasSome","groupByFor","hideBulkActionsFor","headersFor","columns","col","fromSchema","filter","hasName","_iterator5","_step5","format","formatter","width","formatterOpts","multiline","colName","word","charAt","toUpperCase","substring","exists","t","slice","description","tooltip","_rowValueGetter","hasCustomList","rawType","hasCustom","hasCustomChart","hasCustomDetail","subType","hasGraph","hasCustomEdit","hasComponent","path","hasCustomPromptRemove","require","resolve","hasCustomWindowComponent","hasCustomMachineConfigComponent","hasCustomCloudCredentialComponent","importComponent","loadExtension","authType","mapping","_iterator6","_step6","_schema$attributes2","_iterator7","_step7","activeProducts","knownTypes","knownGroups","p","ifGetter","_iterator8","_step8","_id","_group","ifFeature","features","Array","_iterator9","_step9","ifHaveGroup","isProductActive","rowValueGetter","_findColumnByName","isProductRegistered","productName","prod","mutations","schemaChanged","_ref3","plugin","existing","findIndex","splice","v","_ref4","copy","virtual","_ref5","collection","_ref6","_iterator10","_step10","_ref7","_ref8","_ref9","_ref10","_ref11","_iterator11","_step11","g","_ref12","_iterator12","_step12","_ref13","_iterator13","_step13","_ref14","_ref14$weight","_ref14$continueOnMatc","_addMapping","_ref15","_ref15$weight","_ref15$continueOnMatc","_ref16","_ref16$weight","_ref17","idx","actions","removeProduct","_ref18","metadata","addFavorite","_ref19","dispatch","removeFavorite","_ref20","toggleGroup","_ref21","_ref22","expanded","_ref23","by","_iterator14","_step14","_iterator15","_step15","_typeObj$byNamespace$","namespace","objOrValue","mappings","keyField","defaultFn","_iterator16","_step16","captured","insertIndex","pri","regexCache","regex","source","str","option","project","isV1Istio","isMultiCluster","isAdminUser","_getters$managementS","_getters$managementS2","_getters$managementS3","_getters$managementS4","_getters$managementS5","canEditSettings","SETTING","resourceMethods","canEditFeatureFlags","FEATURE","canInstallApps","APP","canAddRepos","CLUSTER_REPO","canPutHelmOperations","OPERATION","process","client","fieldIndex","parseInt","row","_row$metadata","fields","_cluster$status","status","istioEnabled","verb","_iterator17","_step17","haveId","want","collectionMethods","have","_getters$currentClust","filters","projectName","_iterator18","_step18","_filter$split","_filter$split2","prjNamespaceMap","reduce","m","ns","total","fallback","getDynamic","ext"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/store/type-map.js"],"sourcesContent":["// This file has 2 sections that control getting and using specializations of particular types\n// over the generic info that is specified or generated from schemas.\n//\n// 1) Getting info about types\n//\n// labelFor(schema, count)    Get the display label for a schema.  Count is (in English) 1 or not-1 for pluralizing\n// groupLabelFor(schema)      Get the label for the API group of this schema's type\n// isIgnored(schema)          Returns true if this type should be hidden from the tree\n// groupForBasicType(schema)  Returns the group a type should be shown in basic view, or false-y if it shouldn't be shown.\n// typeWeightFor(type, forBasic)   Get the weight value for a particular type label\n// groupWeightFor(group, forBasic) Get the weight value for a particular group\n// headersFor(schema)         Returns the column definitions for a type to give to SortableTable\n// activeProducts()           Returns the list of products that are installed and should be shown\n//\n// 2) Detecting and using custom list/detail/edit/header components\n//\n// hasCustomList(type)              Does type have a custom list implementation?\n// hasCustomDetail(type[,subType])  Does type have a custom detail implementation?\n// hasCustomEdit(type[,subType])    Does type have a custom edit implementation?\n// importList(type)                 Returns a promise that resolves to the list component for type\n// importDetail(type[,subType])     Returns a promise that resolves to the detail component for type\n// importEdit(type[,subType])       Returns a promise that resolves to the edit component for type\n// optionsFor(schemaOrType)         Return the configured options for a type (from configureType)\n//\n// 3) Changing specialization info about a type\n// For all:\n//   let { thingYouWant } = DSL(instanceOfTheStore, 'product');\n//\n// product(                   Add a product into the nav\n//   removable,               -- Is the product removable (true) or built-in (false).\n//   weight,                  -- Sort order and divider sections in the product menu.  3=global (fleet, ecm), 2=always on (apps, explorer) 1=other\n//   showClusterSwitcher,     -- Show the cluster switcher in the header (default true)\n//   showNamespaceFilter,     -- Show the namespace filter in the header (default false)\n//   showWorkspaceSwitcher,   -- Show the workspace switcher in the header (conflicts with namespace) (default false)\n//   ifHave,                  -- Show this product only if the given capability is available\n//   ifHaveGroup,             -- Show this product only if the given group exists in the store [inStore]\n//   ifHaveType,              -- Show this product only if the given type exists in the store [inStore], This can also be specified as an object { type: TYPE, store: 'management' } if the type isn't in the current [inStore]\n//   ifHaveVerb,              -- In combination with ifHaveTYpe, show it only if the type also has this collectionMethod\n//   inStore,                 -- Which store to look at for if* above and the left-nav, defaults to \"cluster\"\n//   inExplorer,              -- Determines if the product is to be scoped to the explorer\n//   public,                  -- If true, show to all users.  If false, only show when the Developer Tools pref is on (default true)\n//   category,                -- Group to show the product in for the nav hamburger menu\n//   typeStoreMap,            -- An object mapping types to the store that should be used to retrieve information about the type\n//   hideSystemResources      -- Hide resources in namespaces where namespace.isSystem === true, or a namespace managed by fleet (per its annotation) and hide those namespaces from ns/project list and nsfilter (default false)\n//   hideNamespaceLocation    -- Hide the namespace link in the ResourceDetail masthead of namespaced resources and hide the ExplorerProjectsNamespaces namespace link (default false)\n// })\n//\n// externalLink(stringOrFn)  The product has an external page (function gets context object\n//\n// virtualType(obj)           Add an item to the tree that goes to a route instead of an actual type.\n//                            --  obj can contain anything in the objects getTree returns.\n//                            --  obj must have a `name` that is unique among all virtual types.\n//                            -- `cluster` is automatically added to route.params if it exists.\n//\n// spoofedType(obj)           Create a fake type that can be treated like a normal type\n//\n// basicType(                 Mark type(s) as always shown in the top of the nav\n//   type(s),                 -- Type name or array of type names\n//   group                    -- Group to show the type(s) under; false-y for top-level.\n// )\n// basicType(                 Mark all types in group as always shown in the top of the nav\n//   group,                   -- Group to show\n//   asLabel                  -- Label to display the group as; false-y for top-level.\n// )\n// ignoreType(type)           Never show type\n// weightType(                Set the weight (sorting) order of one or more types\n//   typeOrArrayOfTypes,\n//   weight,                  -- Higher numbers are shown first/higher up on the nav tree\n//   forBasic                 -- Apply to basic type instead of regular type tree\n// )\n// mapType(                   Remap a type id to a display name\n//   matchRegexOrString,      -- Type to match, or regex that matches types\n//   replacementStringOrFn,   -- String to replace the type with, or\n//                            -- sync function: (type, capturedString, schemaObj => { return 'new-type'; }\n//   mapWeight,               -- Priority for apply this mapping (higher numbers applied first)\n//   continueOnMatch          -- If true, continue applying to hit other rules that might match the new type.\n// )\n// moveType(                  Change the group a type is in\n//   matchRegexOrString,      -- Type to match, or regex that matches types\n//   newGroup,                -- Group to move the type into\n//   mapWeight,               -- Priority for apply this mapping (higher numbers applied first)\n// )\n// componentForType(          Map matching types to a single component name\n// (                          (this is helpful if multiple types should be rendered by a single component)\n//   matchRegexOrString,      -- Type to match, or regex that matches types\n//   replacementString        -- String to replace the type with\n// )\n// configureType(            Display options for a particular type\n//   type,                    -- Type to apply to\n//  options                   -- Object of options.  Defaults/Supported: {\n//                               isCreatable: true, -- If false, disable create even if schema says it's allowed\n//                               isEditable: true,  -- Ditto, for edit\n//                               isRemovable: true,  -- Ditto, for remove/delete\n//                               showState: true,  -- If false, hide state in columns and masthead\n//                               showAge: true,    -- If false, hide age in columns and masthead\n//                               showConfigView: true -- If false, hide masthead config button in view mode\n//                               showListMasthead: true, -- If false, hide masthead in list view\n//                               canYaml: true,\n//                               resource: undefined       -- Use this resource in ResourceDetails instead\n//                               resourceDetail: undefined -- Use this resource specifically for ResourceDetail's detail component\n//                               resourceEdit: undefined   -- Use this resource specifically for ResourceDetail's edit component\n//                               depaginate: undefined -- Use this to depaginate requests for this type\n//                               resourceEditMasthead: true   -- Show the Masthead in the edit resource component\n//                               customRoute: undefined,\n//                               hasGraph: undefined   -- If true, render ForceDirectedTreeChart graph (ATTENTION: option graphConfig is needed also!!!)\n//                               graphConfig: undefined   -- Use this to pass along the graph configuration\n//                               notFilterNamespace:  undefined -- Define namespaces that do not need to be filtered\n//                               localOnly: False -- Hide this type from the nav/search bar on downstream clusters\n//                           }\n// )\n// ignoreGroup(group):        Never show group or any types in it\n// weightGroup(               Set the weight (sorting) of one or more groups\n//   groupOrArrayOfGroups,    -- see weightType...\n//   weight\n// )\n// setGroupDefaultType(       Set the default child type to show when the group is expanded\n//   groupOrArrayOfGroups,    -- see setGroupDefaultType...\n//   defaultType\n// )\n// mapGroup(                  Remap a group name to a display name\n//   matchRegexOrString,      -- see mapType...\n//   replacementString,\n//   mapWeight,\n//   continueOnMatch\n// )\nimport { AGE, NAME, NAMESPACE as NAMESPACE_COL, STATE } from '@shell/config/table-headers';\nimport {\n  CATALOG,\n  COUNT,\n  SCHEMA,\n  MANAGEMENT,\n  NAMESPACE\n} from '@shell/config/types';\nimport { VIEW_IN_API, EXPANDED_GROUPS, FAVORITE_TYPES } from '@shell/store/prefs';\nimport {\n  addObject, findBy, insertAt, isArray, removeObject, filterBy\n} from '@shell/utils/array';\nimport { clone, get } from '@shell/utils/object';\nimport {\n  ensureRegex, escapeHtml, escapeRegex, ucFirst, pluralize\n} from '@shell/utils/string';\nimport {\n  importChart, importList, importDetail, importEdit, listProducts, loadProduct, importCustomPromptRemove, resolveList, resolveEdit, resolveWindowComponent, importWindowComponent, importLogin, resolveChart, resolveDetail, importDialog, importMachineConfig, resolveMachineConfigComponent, resolveCloudCredentialComponent, importCloudCredential\n} from '@shell/utils/dynamic-importer';\n\nimport { NAME as EXPLORER } from '@shell/config/product/explorer';\nimport isObject from 'lodash/isObject';\nimport { normalizeType } from '@shell/plugins/dashboard-store/normalize';\nimport { sortBy } from '@shell/utils/sort';\n\nimport { haveV1Monitoring, haveV2Monitoring } from '@shell/utils/monitoring';\nimport { NEU_VECTOR_NAMESPACE } from '@shell/config/product/neuvector';\n\nexport const NAMESPACED = 'namespaced';\nexport const CLUSTER_LEVEL = 'cluster';\nexport const BOTH = 'both';\n\nexport const ALL = 'all';\nexport const BASIC = 'basic';\nexport const FAVORITE = 'favorite';\nexport const USED = 'used';\n\nexport const ROOT = 'root';\n\nexport const SPOOFED_PREFIX = '__[[spoofed]]__';\nexport const SPOOFED_API_PREFIX = '__[[spoofedapi]]__';\n\nconst instanceMethods = {};\nconst graphConfigMap = {};\n\nconst FIELD_REGEX = /^\\$\\.metadata\\.fields\\[([0-9]*)\\]/;\n\nexport const IF_HAVE = {\n  V1_MONITORING:            'v1-monitoring',\n  V2_MONITORING:            'v2-monitoring',\n  PROJECT:                  'project',\n  NO_PROJECT:               'no-project',\n  NOT_V1_ISTIO:             'not-v1-istio',\n  MULTI_CLUSTER:            'multi-cluster',\n  NEUVECTOR_NAMESPACE:      'neuvector-namespace',\n  ADMIN:                    'admin-user',\n  MCM_DISABLED:             'mcm-disabled',\n  NOT_STANDALONE_HARVESTER: 'not-standalone-harvester',\n};\n\nexport function DSL(store, product, module = 'type-map') {\n  // store.commit(`${ module }/product`, { name: product });\n\n  return {\n    product(inOpt) {\n      const opt = {\n        name:                product,\n        weight:              1,\n        inStore:             'cluster',\n        inExplorer:          false,\n        removable:           true,\n        showClusterSwitcher: true,\n        showNamespaceFilter: false,\n        public:              true,\n        filterMode:          'namespaces',\n        ...inOpt\n      };\n\n      for ( const k of ['ifHaveGroup', 'ifHaveType'] ) {\n        if ( opt[k] ) {\n          opt[k] = regexToString(ensureRegex(opt[k]));\n        }\n      }\n\n      store.commit(`${ module }/product`, opt);\n    },\n\n    basicType(types, group) {\n      // Support passing in a map of types and using just the values\n      if ( !isArray(types) && types && isObject(types) ) {\n        types = Object.values(types);\n      }\n\n      store.commit(`${ module }/basicType`, {\n        product, types, group\n      });\n    },\n\n    // Type- and Group-dependent\n    groupBy(type, field) {\n      store.commit(`${ module }/groupBy`, { type, field });\n    },\n\n    headers(type, headers) {\n      headers.forEach((header) => {\n        // If on the client, then use the value getter if there is one\n        if (header.getValue) {\n          // we need to store the .value prop for the advanced filtering\n          header.valueProp = header.value;\n          header.value = header.getValue;\n        }\n\n        delete header.getValue;\n      });\n\n      store.commit(`${ module }/headers`, { type, headers });\n    },\n\n    hideBulkActions(type, field) {\n      store.commit(`${ module }/hideBulkActions`, { type, field });\n    },\n\n    configureType(match, options) {\n      if (options.graphConfig) {\n        graphConfigMap[match] = options.graphConfig;\n        delete options.graphConfig;\n      }\n      store.commit(`${ module }/configureType`, { ...options, match });\n    },\n\n    componentForType(match, replace) {\n      store.commit(`${ module }/componentForType`, { match, replace });\n    },\n\n    ignoreType(regexOrString) {\n      store.commit(`${ module }/ignoreType`, regexOrString);\n    },\n\n    ignoreGroup(regexOrString, cb) {\n      store.commit(`${ module }/ignoreGroup`, { regexOrString, cb });\n    },\n\n    weightGroup(input, weight, forBasic) {\n      if ( isArray(input) ) {\n        store.commit(`${ module }/weightGroup`, {\n          groups: input, weight, forBasic\n        });\n      } else {\n        store.commit(`${ module }/weightGroup`, {\n          group: input, weight, forBasic\n        });\n      }\n    },\n\n    setGroupDefaultType(input, defaultType) {\n      if ( isArray(input) ) {\n        store.commit(`${ module }/setGroupDefaultType`, { groups: input, defaultType });\n      } else {\n        store.commit(`${ module }/setGroupDefaultType`, { group: input, defaultType });\n      }\n    },\n\n    weightType(input, weight, forBasic) {\n      if ( isArray(input) ) {\n        store.commit(`${ module }/weightType`, {\n          types: input, weight, forBasic\n        });\n      } else {\n        store.commit(`${ module }/weightType`, {\n          type: input, weight, forBasic\n        });\n      }\n    },\n\n    mapGroup(match, replace, weight = 5, continueOnMatch = false) {\n      store.commit(`${ module }/mapGroup`, {\n        match, replace, weight, continueOnMatch\n      });\n    },\n\n    mapType(match, replace, weight = 5, continueOnMatch = false) {\n      store.commit(`${ module }/mapType`, {\n        match, replace, weight, continueOnMatch\n      });\n    },\n\n    moveType(match, group, weight = 5, continueOnMatch = false) {\n      store.commit(`${ module }/moveType`, {\n        match, group, weight,\n      });\n    },\n\n    virtualType(obj) {\n      store.commit(`${ module }/virtualType`, { product, obj });\n    },\n\n    spoofedType(obj) {\n      store.commit(`${ module }/spoofedType`, { product, obj });\n    }\n  };\n}\n\nlet called = false;\n\nexport async function applyProducts(store, $plugin) {\n  if (called) {\n    return;\n  }\n\n  called = true;\n  for ( const product of listProducts() ) {\n    const impl = await loadProduct(product);\n\n    if ( impl?.init ) {\n      impl.init(store);\n    }\n  }\n  // Load the products from all plugins\n  $plugin.loadProducts();\n}\n\nexport function productsLoaded() {\n  return called;\n}\n\nexport const state = function() {\n  return {\n    products:                [],\n    virtualTypes:            {},\n    spoofedTypes:            {},\n    basicTypes:              {},\n    groupIgnore:             [],\n    groupWeights:            {},\n    groupDefaultTypes:       {},\n    basicGroupWeights:       { [ROOT]: 1000 },\n    groupMappings:           [],\n    typeIgnore:              [],\n    basicTypeWeights:        {},\n    typeWeights:             {},\n    typeMappings:            [],\n    typeMoveMappings:        [],\n    typeToComponentMappings: [],\n    typeOptions:             [],\n    groupBy:                 {},\n    headers:                 {},\n    hideBulkActions:         {},\n    schemaGeneration:        1,\n    cache:                   {\n      typeMove:           {},\n      groupLabel:         {},\n      ignore:             {},\n      list:               {},\n      chart:              {},\n      detail:             {},\n      edit:               {},\n      componentFor:       {},\n      promptRemove:       {},\n      windowComponents:   {},\n      'machine-config':   {},\n      'cloud-credential': {}\n\n    },\n  };\n};\n\nexport const getters = {\n  // ----------------------------------------------------------------------------\n  // 1 ) Getting info\n  // ----------------------------------------------------------------------------\n  // Turns a type name into a display label (e.g. management.cattle.io.cluster -> Cluster)\n  labelFor(state, getters, rootState, rootGetters) {\n    return (schema, count = 1, language = null) => {\n      return _applyMapping(schema, state.typeMappings, 'id', false, () => {\n        const key = `typeLabel.\"${ schema.id.toLowerCase() }\"`;\n\n        if ( rootGetters['i18n/exists'](key, language) ) {\n          return rootGetters['i18n/t'](key, { count }, language).trim();\n        }\n\n        const out = schema?.attributes?.kind || schema.id || '?';\n\n        // Add spaces, but breaks typing names into jump menu naturally\n        // out = ucFirst(out.replace(/([a-z])([A-Z])/g,'$1 $2'));\n\n        if ( count === 1 ) {\n          return out;\n        }\n\n        // This works for most things... if you don't like it, put in a typeLabel translation for above.\n        return pluralize(out);\n      });\n    };\n  },\n\n  // Turns a group name into a display label (e.g. management.cattle.io.v3.cluster -> Cluster)\n  groupLabelFor(state) {\n    return (schemaOrName) => {\n      let group = schemaOrName;\n\n      if ( typeof schemaOrName === 'object' ) {\n        let moved = false;\n\n        for ( const rule of state.typeMoveMappings ) {\n          const re = stringToRegex(rule.match);\n\n          if ( schemaOrName.id.match(re) ) {\n            moved = true;\n            group = rule.replace;\n          }\n        }\n\n        if ( !moved ) {\n          group = group.attributes.group;\n        }\n      }\n\n      if ( typeof group !== 'string' ) {\n        return null;\n      }\n\n      const out = _applyMapping(group, state.groupMappings, null, state.cache.groupLabel, (group) => {\n        const match = group.match(/^(.*)\\.k8s\\.io$/);\n\n        if ( match ) {\n          return match[1].split(/\\./).map((x) => ucFirst(x)).join('.');\n        }\n\n        return group;\n      });\n\n      return out;\n    };\n  },\n\n  groupForBasicType(state) {\n    return (product, schemaId) => {\n      return state.basicTypes?.[product]?.[schemaId];\n    };\n  },\n\n  optionsFor(state) {\n    const def = {\n      isCreatable:          true,\n      isEditable:           true,\n      isRemovable:          true,\n      showState:            true,\n      showAge:              true,\n      canYaml:              true,\n      namespaced:           null,\n      listGroups:           [],\n      depaginate:           false,\n      customRoute:          undefined,\n      resourceEditMasthead: true,\n    };\n\n    return (schemaOrType) => {\n      if (!schemaOrType) {\n        return {};\n      }\n\n      const type = (typeof schemaOrType === 'object' ? schemaOrType.id : schemaOrType);\n      const found = state.typeOptions.find((entry) => {\n        const re = stringToRegex(entry.match);\n\n        return re.test(type);\n      });\n\n      const opts = Object.assign({}, def, found || {});\n\n      return opts;\n    };\n  },\n\n  isFavorite(state, getters, rootState, rootGetters) {\n    return (schemaId) => {\n      return rootGetters['prefs/get'](FAVORITE_TYPES).includes(schemaId) || false;\n    };\n  },\n\n  typeWeightFor(state) {\n    return (type, forBasic) => {\n      type = type?.toLowerCase();\n\n      if ( forBasic ) {\n        return state.basicTypeWeights[type] || 0;\n      } else {\n        return state.typeWeights[type] || 0;\n      }\n    };\n  },\n\n  groupWeightFor(state) {\n    return (group, forBasic) => {\n      group = group.toLowerCase();\n\n      if ( forBasic ) {\n        return state.basicGroupWeights[group] || 0;\n      } else {\n        return state.groupWeights[group] || 0;\n      }\n    };\n  },\n\n  groupDefaultTypeFor(state) {\n    return (group) => {\n      group = group.toLowerCase();\n\n      return state.groupDefaultTypes[group];\n    };\n  },\n\n  getTree(state, getters, rootState, rootGetters) {\n    return (productId, mode, allTypes, clusterId, namespaceMode, namespaces, currentType, search) => {\n      // getTree has four modes:\n      // - `basic` matches data types that should always be shown even if there\n      //    are 0 of them.\n      // - `used` matches the data types where there are more than 0 of them\n      //    in the current set of namespaces.\n      // - `all` matches all types.\n      // - `favorite` matches starred types.\n      // namespaceMode: 'namespaced', 'cluster', or 'both'\n      // namespaces: null means all, otherwise it will be an array of specific namespaces to include\n      const isBasic = mode === BASIC;\n\n      let searchRegex;\n\n      if ( search ) {\n        searchRegex = new RegExp(`^(.*)(${ escapeRegex(search) })(.*)$`, 'i');\n      }\n\n      const root = { children: [] };\n\n      // Add types from shortest to longest so that parents\n      // get added before children\n      const keys = Object.keys(allTypes).sort((a, b) => a.length - b.length);\n\n      // Set these for later\n      const currentLocal = rootGetters['i18n/current']();\n      const defaultLocal = rootGetters['i18n/default']();\n\n      for ( const type of keys ) {\n        const typeObj = allTypes[type];\n\n        if ( typeObj.schema && getters.isIgnored(typeObj.schema) ) {\n          // Skip ignored groups & types\n          continue;\n        }\n\n        const namespaced = typeObj.namespaced;\n\n        if ( (namespaceMode === NAMESPACED && !namespaced ) || (namespaceMode === CLUSTER_LEVEL && namespaced) ) {\n          // Skip types that are not the right namespace mode\n          continue;\n        }\n\n        const count = _matchingCounts(typeObj, namespaces);\n        const groupForBasicType = getters.groupForBasicType(productId, typeObj.name);\n\n        if ( typeObj.id === currentType ) {\n          // If this is the type currently being shown, always show it\n        } else if ( isBasic && !groupForBasicType ) {\n          // If we want the basic tree only return basic types;\n          continue;\n        } else if ( mode === USED && count <= 0 ) {\n          // If there's none of this type, ignore this entry when viewing only in-use types\n          // Note: count is sometimes null, which is <= 0.\n          continue;\n        }\n\n        const label = typeObj.labelKey ? rootGetters['i18n/t'](typeObj.labelKey) || typeObj.label : typeObj.label;\n\n        const labelDisplay = highlightLabel(label, typeObj.count, typeObj.schema);\n\n        if ( !labelDisplay ) {\n          // Search happens in highlight and returns null if not found\n          continue;\n        }\n\n        let group;\n\n        if ( isBasic ) {\n          group = _ensureGroup(root, groupForBasicType, true);\n        } else if ( mode === FAVORITE ) {\n          group = _ensureGroup(root, 'starred');\n          group.weight = 1000;\n        } else if ( mode === USED ) {\n          group = _ensureGroup(root, `inUse::${ getters.groupLabelFor(typeObj.schema) }`);\n        } else {\n          group = _ensureGroup(root, typeObj.schema || typeObj.group || ROOT);\n        }\n\n        let route = typeObj.route;\n\n        // Make the default route if one isn't set\n        if (!route ) {\n          route = {\n            name:   'c-cluster-product-resource',\n            params: {\n              product:  productId,\n              cluster:  clusterId,\n              resource: typeObj.name,\n            }\n          };\n\n          typeObj.route = route;\n        }\n\n        // Cluster ID and Product should always be set\n        if ( route && typeof route === 'object' ) {\n          route.params = route.params || {};\n          route.params.cluster = clusterId;\n          route.params.product = productId;\n        }\n\n        group.children.push({\n          label,\n          labelDisplay,\n          mode:     typeObj.mode,\n          count,\n          exact:    typeObj.exact || false,\n          namespaced,\n          route,\n          name:     typeObj.name,\n          weight:   typeObj.weight || getters.typeWeightFor(typeObj.schema?.id || label, isBasic),\n          overview: !!typeObj.overview,\n        });\n      }\n\n      // Recursively sort the groups\n      _sortGroup(root, mode);\n\n      return root.children;\n\n      // ----------------------\n\n      function _ensureGroup(tree, schemaOrName, forBasic = false) {\n        let name = getters.groupLabelFor(schemaOrName);\n        const isRoot = ( name === ROOT || name.startsWith(`${ ROOT }::`) );\n\n        if ( name && name.includes('::') ) {\n          let parent;\n\n          [parent, name] = name.split('::', 2);\n          tree = _ensureGroup(tree, parent);\n        }\n\n        // Translate if an entry exists\n        let label = name;\n        const key = `nav.group.\"${ name }\"`;\n\n        if ( rootGetters['i18n/exists'](key) ) {\n          label = rootGetters['i18n/t'](key);\n        }\n\n        let group = findBy(tree.children, 'name', name);\n\n        if ( !group ) {\n          group = {\n            name,\n            label,\n            weight:      getters.groupWeightFor(name, forBasic),\n            defaultType: getters.groupDefaultTypeFor(name),\n          };\n\n          tree.children.push(group);\n        }\n\n        if ( isRoot ) {\n          group.isRoot = true;\n        }\n\n        if ( !group.children ) {\n          group.children = [];\n        }\n\n        return group;\n      }\n\n      function highlightLabel(original, count, schema) {\n        let label = escapeHtml(original);\n\n        if ( searchRegex ) {\n          let match = label.match(searchRegex);\n\n          if (!match) {\n            if ( currentLocal !== defaultLocal && schema ) {\n              const defaultLabel = getters.labelFor(schema, count, defaultLocal);\n\n              if (defaultLabel && defaultLabel !== label ) {\n                label += ` (${ defaultLabel })`;\n                match = label.match(searchRegex);\n              }\n            }\n          }\n\n          if ( match ) {\n            label = `${ escapeHtml(match[1]) }<span class=\"highlight\">${ escapeHtml(match[2]) }</span>${ escapeHtml(match[3]) }`;\n          } else {\n            return null;\n          }\n        }\n\n        return label;\n      }\n    };\n  },\n\n  isSpoofed(state, getters, rootState, rootGetters) {\n    return (type, product) => {\n      product = product || rootGetters['productId'];\n      const productSpoofedTypes = state.spoofedTypes[product] || [];\n\n      return productSpoofedTypes.some((st) => st.type === type);\n    };\n  },\n\n  isVirtual(state, getters, rootState, rootGetters) {\n    return (name, product) => {\n      product = product || rootGetters['productId'];\n      const productVirtualTypes = state.virtualTypes[product] || [];\n\n      return productVirtualTypes.some((st) => st.name === name);\n    };\n  },\n\n  getSpoofedInstances(state, getters, rootState, rootGetters) {\n    return async(type, product) => {\n      product = product || rootGetters['productId'];\n      const getInstances = instanceMethods[product]?.[type] || (() => []);\n      const instances = await getInstances();\n\n      instances.forEach((instance) => {\n        const type = instance.type;\n        const id = instance.id;\n        const link = `/${ SPOOFED_PREFIX }/${ type }/${ id }`;\n        const apiLink = `/${ SPOOFED_API_PREFIX }/${ type }/${ id }`;\n\n        instance.links = {\n          remove: instance.links?.remove || link,\n          self:   instance.links?.self || link,\n          update: instance.links?.update || link,\n          view:   instance.links?.view || apiLink,\n        };\n        instance.isSpoofed = true;\n      });\n\n      return instances;\n    };\n  },\n\n  getSpoofedInstance(state, getters, rootState, rootGetters) {\n    return async(type, product, id) => {\n      const productInstances = await getters.getSpoofedInstances(type, product);\n\n      return productInstances.find( (instance) => instance.id === id);\n    };\n  },\n\n  allSpoofedTypes(state, getters, rootState, rootGetters) {\n    return Object.values(state.spoofedTypes).flat();\n  },\n\n  spoofedSchemas(state, getters, rootState, rootGetters) {\n    return (product) => {\n      const types = state.spoofedTypes[product] || [];\n\n      return types.flatMap((type) => {\n        const schemas = type.schemas || [];\n\n        return schemas.map((schema) => ({\n          ...schema,\n          isSpoofed: true\n        }));\n      });\n    };\n  },\n\n  allSpoofedSchemas(state, getters, rootState, rootGetters) {\n    return getters.allSpoofedTypes.flatMap((type) => {\n      const schemas = type.schemas || [];\n\n      return schemas.map((schema) => ({\n        ...schema,\n        isSpoofed: true\n      }));\n    });\n  },\n\n  allTypes(state, getters, rootState, rootGetters) {\n    return (product, mode = ALL) => {\n      const module = findBy(state.products, 'name', product)?.inStore;\n      const schemas = rootGetters[`${ module }/all`](SCHEMA);\n      const counts = rootGetters[`${ module }/all`](COUNT)?.[0]?.counts || {};\n      const isDev = rootGetters['prefs/get'](VIEW_IN_API);\n      const isBasic = mode === BASIC;\n\n      const out = {};\n\n      for ( const schema of schemas ) {\n        const attrs = schema.attributes || {};\n        const count = counts[schema.id];\n        const label = getters.labelFor(schema, count);\n        const weight = getters.typeWeightFor(schema?.id || label, isBasic);\n        const typeOptions = getters['optionsFor'](schema);\n\n        if ( isBasic ) {\n          // These are separate ifs so that things with no kind can still be basic\n          if ( !getters.groupForBasicType(product, schema.id) ) {\n            continue;\n          }\n        } else if ( mode === FAVORITE && !getters.isFavorite(schema.id) ) {\n          continue;\n        } else if ( !attrs.kind ) {\n          // Skip the schemas that aren't top-level types\n          continue;\n        } else if ( typeof typeOptions.ifRancherCluster !== 'undefined' && typeOptions.ifRancherCluster !== rootGetters.isRancher ) {\n          continue;\n        } else if (typeOptions.localOnly && !rootGetters.currentCluster?.isLocal) {\n          continue;\n        }\n\n        out[schema.id] = {\n          label,\n          mode,\n          weight,\n          schema,\n          name:        schema.id,\n          namespaced:  typeOptions.namespaced === null ? attrs.namespaced : typeOptions.namespaced,\n          count:       count ? count.summary.count || 0 : null,\n          byNamespace: count ? count.namespaces : {},\n          revision:    count ? count.revision : null,\n          route:       typeOptions.customRoute\n        };\n      }\n\n      // Add virtual and spoofed types\n      if ( mode !== USED ) {\n        const virtualTypes = state.virtualTypes[product] || [];\n        const spoofedTypes = state.spoofedTypes[product] || [];\n        const allTypes = [...virtualTypes, ...spoofedTypes];\n\n        for ( const type of allTypes ) {\n          const item = clone(type);\n          const id = item.name;\n          const weight = type.weight || getters.typeWeightFor(item.label, isBasic);\n\n          // Is there a virtual/spoofed type override for schema type?\n          // Currently used by harvester, this should be investigated and removed if possible\n          if (out[id]) {\n            delete out[id];\n          }\n\n          if ( item['public'] === false && !isDev ) {\n            continue;\n          }\n\n          if (item.ifHave && !ifHave(rootGetters, item.ifHave)) {\n            continue;\n          }\n\n          if ( item.ifHaveType ) {\n            const targetedSchemas = typeof item.ifHaveType === 'string' ? schemas : rootGetters[`${ item.ifHaveType.store }/all`](SCHEMA);\n            const type = typeof item.ifHaveType === 'string' ? item.ifHaveType : item.ifHaveType?.type;\n\n            const haveIds = filterBy(targetedSchemas, 'id', normalizeType(type)).map((s) => s.id);\n\n            if (!haveIds.length) {\n              continue;\n            }\n\n            if (item.ifHaveVerb && !ifHaveVerb(rootGetters, module, item.ifHaveVerb, haveIds)) {\n              continue;\n            }\n          }\n\n          if ( item.ifHaveSubTypes ) {\n            const hasSome = (item.ifHaveSubTypes || []).some((type) => {\n              return !!findBy(schemas, 'id', normalizeType(type));\n            });\n\n            if (!hasSome) {\n              continue;\n            }\n          }\n\n          if ( typeof item.ifRancherCluster !== 'undefined' && item.ifRancherCluster !== rootGetters.isRancher ) {\n            continue;\n          }\n\n          if ( isBasic && !getters.groupForBasicType(product, id) ) {\n            continue;\n          } else if ( mode === FAVORITE && !getters.isFavorite(id) ) {\n            continue;\n          }\n\n          item.mode = mode;\n          item.weight = weight;\n\n          // Ensure labelKey is taken into account... with a mock count\n          // This is harmless if the translation doesn't require count\n          if (item.labelKey && rootGetters['i18n/exists'](item.labelKey)) {\n            item.label = rootGetters['i18n/t'](item.labelKey, { count: 2 }).trim();\n            delete item.labelKey; // Label should really take precedence over labelKey, but it doesn't, so remove it\n          } else {\n            item.label = item.label || item.name;\n          }\n\n          out[id] = item;\n        }\n      }\n\n      return out;\n    };\n  },\n\n  groupByFor(state) {\n    return (schema) => {\n      return state.groupBy[schema?.id];\n    };\n  },\n\n  hideBulkActionsFor(state) {\n    return (schema) => {\n      return state.hideBulkActions[schema.id];\n    };\n  },\n\n  headersFor(state, getters, rootState, rootGetters) {\n    return (schema) => {\n      const attributes = schema.attributes || {};\n      const columns = attributes.columns || [];\n      const typeOptions = getters['optionsFor'](schema);\n\n      // A specific list has been provided\n      if ( state.headers[schema.id] ) {\n        return state.headers[schema.id].map((entry) => {\n          if ( typeof entry === 'string' ) {\n            const col = findBy(columns, 'name', entry);\n\n            if ( col ) {\n              return fromSchema(col, rootGetters);\n            } else {\n              return null;\n            }\n          } else {\n            return entry;\n          }\n        }).filter((col) => !!col);\n      }\n\n      // Otherwise make one up from schema\n      const out = typeOptions.showState ? [STATE] : [];\n      const namespaced = attributes.namespaced || false;\n      let hasName = false;\n\n      for ( const col of columns ) {\n        if ( col.format === 'name' ) {\n          hasName = true;\n          out.push(NAME);\n          if ( namespaced ) {\n            out.push(NAMESPACE_COL);\n          }\n        } else {\n          out.push(fromSchema(col, rootGetters));\n        }\n      }\n\n      if ( !hasName ) {\n        insertAt(out, 1, NAME);\n        if ( namespaced ) {\n          insertAt(out, 2, NAMESPACE_COL);\n        }\n      }\n\n      // Age always goes last\n      if ( out.includes(AGE) ) {\n        removeObject(out, AGE);\n        if ( typeOptions.showAge ) {\n          out.push(AGE);\n        }\n      }\n\n      return out;\n\n      function fromSchema(col, rootGetters) {\n        let formatter, width, formatterOpts;\n\n        if ( (col.format === '' || col.format === 'date') && col.name === 'Age' ) {\n          return AGE;\n        }\n\n        if ( col.format === 'date' || col.type === 'date' ) {\n          formatter = 'Date';\n          width = 120;\n          formatterOpts = { multiline: true };\n        }\n\n        if ( col.type === 'number' || col.type === 'int' ) {\n          formatter = 'Number';\n        }\n\n        const colName = col.name.includes(' ') ? col.name.split(' ').map((word) => word.charAt(0).toUpperCase() + word.substring(1) ).join('') : col.name;\n\n        const exists = rootGetters['i18n/exists'];\n        const t = rootGetters['i18n/t'];\n        const labelKey = `tableHeaders.${ colName.charAt(0).toLowerCase() + colName.slice(1) }`;\n        const description = col.description || '';\n        const tooltip = description && description[description.length - 1] === '.' ? description.slice(0, -1) : description;\n\n        return {\n          name:  col.name.toLowerCase(),\n          label: exists(labelKey) ? t(labelKey) : col.name,\n          value: _rowValueGetter(col),\n          sort:  [col.field],\n          formatter,\n          formatterOpts,\n          width,\n          tooltip\n        };\n      }\n    };\n  },\n\n  // ------------------------------------\n  // Custom list/detail/edit/header component detection\n  //\n  // Note: you can't refactor these into one function that does `@/${kind}/${type}`,\n  // because babel needs some hardcoded idea where to look for the dependency.\n  //\n  // Note 2: Yes these are editing state in a getter for caching... it's ok, probably.\n  // ------------------------------------\n  hasCustomList(state, getters, rootState) {\n    return (rawType) => {\n      const key = getters.componentFor(rawType);\n\n      return hasCustom(state, rootState, 'list', key, (key) => resolveList(key));\n    };\n  },\n\n  hasCustomChart(state, getters, rootState) {\n    return (rawType) => {\n      const key = getters.componentFor(rawType);\n\n      return hasCustom(state, rootState, 'chart', key, (key) => resolveChart(key));\n    };\n  },\n\n  hasCustomDetail(state, getters, rootState) {\n    return (rawType, subType) => {\n      const key = getters.componentFor(rawType, subType);\n\n      return hasCustom(state, rootState, 'detail', key, (key) => resolveDetail(key));\n    };\n  },\n\n  hasGraph(state, getters) {\n    return (resource) => {\n      const typeOptions = getters['optionsFor'](resource);\n\n      if (typeOptions && typeOptions.hasGraph) {\n        return graphConfigMap[resource];\n      }\n\n      return null;\n    };\n  },\n\n  hasCustomEdit(state, getters, rootState) {\n    return (rawType, subType) => {\n      const key = getters.componentFor(rawType, subType);\n\n      return hasCustom(state, rootState, 'edit', key, (key) => resolveEdit(key));\n    };\n  },\n\n  hasComponent(state, getters, rootState) {\n    return (path) => {\n      return hasCustom(state, rootState, 'edit', path, (path) => resolveEdit(path));\n    };\n  },\n\n  hasCustomPromptRemove(state, getters, rootState) {\n    return (rawType, subType) => {\n      const key = getters.componentFor(rawType, subType);\n\n      return hasCustom(state, rootState, 'promptRemove', key, () => require.resolve(`@shell/promptRemove/${ key }`));\n    };\n  },\n\n  hasCustomWindowComponent(state, getters, rootState) {\n    return (rawType, subType) => {\n      const key = getters.componentFor(rawType, subType);\n\n      return hasCustom(state, rootState, 'windowComponents', key, (key) => resolveWindowComponent(key));\n    };\n  },\n\n  hasCustomMachineConfigComponent(state, getters, rootState) {\n    return (rawType, subType) => {\n      const key = getters.componentFor(rawType, subType);\n\n      return hasCustom(state, rootState, 'machine-config', key, (key) => resolveMachineConfigComponent(key));\n    };\n  },\n\n  hasCustomCloudCredentialComponent(state, getters, rootState) {\n    return (rawType, subType) => {\n      const key = getters.componentFor(rawType, subType);\n\n      return hasCustom(state, rootState, 'cloud-credential', key, (key) => resolveCloudCredentialComponent(key));\n    };\n  },\n\n  importComponent(state, getters) {\n    return (path) => {\n      return importEdit(path);\n    };\n  },\n\n  importDialog(state, getters, rootState) {\n    return (rawType, subType) => {\n      return loadExtension(rootState, 'dialog', getters.componentFor(rawType, subType), importDialog);\n    };\n  },\n\n  importList(state, getters, rootState) {\n    return (rawType) => {\n      return loadExtension(rootState, 'list', getters.componentFor(rawType), importList);\n    };\n  },\n\n  importChart(state, getters, rootState) {\n    return (rawType) => {\n      return loadExtension(rootState, 'chart', getters.componentFor(rawType), importChart);\n    };\n  },\n\n  importDetail(state, getters, rootState) {\n    return (rawType, subType) => {\n      return loadExtension(rootState, 'detail', getters.componentFor(rawType, subType), importDetail);\n    };\n  },\n\n  importEdit(state, getters, rootState) {\n    return (rawType, subType) => {\n      return loadExtension(rootState, 'edit', getters.componentFor(rawType, subType), importEdit);\n    };\n  },\n\n  importCustomPromptRemove(state, getters, rootState) {\n    return (rawType, subType) => {\n      return loadExtension(rootState, 'promptRemove', getters.componentFor(rawType, subType), importCustomPromptRemove);\n    };\n  },\n\n  importWindowComponent(state, getters, rootState) {\n    return (rawType, subType) => {\n      return loadExtension(rootState, 'windowComponents', getters.componentFor(rawType, subType), importWindowComponent);\n    };\n  },\n\n  importLogin(state, getters, rootState) {\n    return (authType) => {\n      return loadExtension(rootState, 'login', authType, importLogin);\n    };\n  },\n\n  importMachineConfig(state, getters, rootState) {\n    return (rawType, subType) => {\n      return loadExtension(rootState, 'machine-config', getters.componentFor(rawType, subType), importMachineConfig);\n    };\n  },\n\n  importCloudCredential(state, getters, rootState) {\n    return (rawType, subType) => {\n      return loadExtension(rootState, 'cloud-credential', getters.componentFor(rawType, subType), importCloudCredential);\n    };\n  },\n\n  componentFor(state, getters) {\n    return (type, subType) => {\n      let key = type;\n\n      if ( subType ) {\n        key = `${ type }/${ subType }`;\n      }\n\n      if ( state.cache.componentFor[key] !== undefined ) {\n        return state.cache.componentFor[key];\n      }\n\n      let out = type;\n\n      const mapping = state.typeToComponentMappings.find((mapping) => {\n        const re = stringToRegex(mapping.match);\n\n        return re.test(key);\n      });\n\n      if ( mapping ) {\n        out = mapping.replace;\n      } else if ( subType ) {\n        // Try again without the subType\n        out = getters.componentFor(type);\n      }\n\n      state.cache.componentFor[key] = out;\n\n      return out;\n    };\n  },\n\n  isIgnored(state, getters, rootState, rootGetters) {\n    return (schema) => {\n      let out = false;\n\n      for ( const rule of state.groupIgnore ) {\n        const group = schema?.attributes?.group;\n\n        if (group && group.match(stringToRegex(rule.type) && isObject(rule) && rule.type)) {\n          out = rule.cb(rootGetters);\n          break;\n        }\n\n        if ( group && typeof rule === 'string' && group.match(stringToRegex(rule)) ) {\n          out = true;\n          break;\n        }\n      }\n\n      if ( !out ) {\n        for ( const rule of state.typeIgnore ) {\n          if ( schema.id.match(stringToRegex(rule)) ) {\n            out = true;\n            break;\n          }\n        }\n      }\n\n      state.cache.ignore[schema.id] = out;\n\n      return out;\n    };\n  },\n\n  activeProducts(state, getters, rootState, rootGetters) {\n    const knownTypes = {};\n    const knownGroups = {};\n    const isDev = rootGetters['prefs/get'](VIEW_IN_API);\n\n    if ( state.schemaGeneration < 0 ) {\n      // This does nothing, but makes activeProducts depend on schemaGeneration\n      // so that it can be used to update the product list on schema change.\n      return;\n    }\n\n    return state.products.filter((p) => {\n      const module = p.inStore;\n\n      if ( p['public'] === false && !isDev ) {\n        return false;\n      }\n\n      if ( p.ifGetter && !rootGetters[p.ifGetter] ) {\n        return false;\n      }\n\n      if ( !knownTypes[module] ) {\n        const schemas = rootGetters[`${ module }/all`](SCHEMA);\n\n        knownTypes[module] = [];\n        knownGroups[module] = [];\n\n        for ( const s of schemas ) {\n          knownTypes[module].push(s._id);\n\n          if ( s._group ) {\n            addObject(knownGroups[module], s._group);\n          }\n        }\n      }\n\n      if ( p.ifFeature) {\n        const features = Array.isArray(p.ifFeature) ? p.ifFeature : [p.ifFeature];\n\n        for (const f of features) {\n          if (!rootGetters['features/get'](f)) {\n            return false;\n          }\n        }\n      }\n\n      if ( p.ifHave && !ifHave(rootGetters, p.ifHave)) {\n        return false;\n      }\n\n      if ( p.ifHaveType ) {\n        const haveIds = knownTypes[module].filter((t) => t.match(stringToRegex(p.ifHaveType)) );\n\n        if ( !haveIds.length ) {\n          return false;\n        }\n\n        if ( p.ifHaveVerb && !ifHaveVerb(rootGetters, module, p.ifHaveVerb, haveIds)) {\n          return false;\n        }\n      }\n\n      if ( p.ifHaveGroup && !knownGroups[module].find((t) => t.match(stringToRegex(p.ifHaveGroup)) ) ) {\n        return false;\n      }\n\n      return true;\n    });\n  },\n\n  isProductActive(state, getters) {\n    return (name) => {\n      if ( findBy(getters['activeProducts'], 'name', name) ) {\n        return true;\n      }\n\n      return false;\n    };\n  },\n\n  rowValueGetter(state) {\n    return (schema, colName) => {\n      const col = _findColumnByName(schema, colName);\n\n      return _rowValueGetter(col);\n    };\n  },\n\n  isProductRegistered(state) {\n    return (productName) => {\n      const prod = state.products.find((p) => p.name === productName);\n\n      return !!prod;\n    };\n  },\n};\n\nexport const mutations = {\n  schemaChanged(state) {\n    state.schemaGeneration = state.schemaGeneration + 1;\n  },\n\n  // Remove the specified product\n  remove(state, { product, plugin }) {\n    const existing = state.products.findIndex((p) => p.name === product);\n\n    // Remove the product\n    if (existing !== -1) {\n      state.products.splice(existing, 1);\n    }\n\n    // Go through the basic types and remove the headers\n    if (state.virtualTypes[product]) {\n      delete state.virtualTypes[product];\n    }\n\n    if (state.basicTypes[product]) {\n      // Remove table header configuration\n      Object.keys(state.basicTypes[product]).forEach((type) => {\n        delete state.headers[type];\n        delete state.basicTypeWeights[type];\n        delete state.cache.ignore[type];\n        // These track whether the type has a custom component\n        delete state.cache.detail[type];\n        delete state.cache.edit[type];\n        delete state.cache.list[type];\n\n        // Delete all of the entries from the componentFor cache where the valye is the type\n        // Can do this more efficiently\n        Object.keys(state.cache.componentFor).forEach((k) => {\n          const v = state.cache.componentFor[k];\n\n          if (v === type) {\n            delete state.cache.componentFor[k];\n          }\n        });\n      });\n\n      delete state.basicTypes[product];\n    }\n\n    if (plugin) {\n      // kind is list, edit, detail etc\n      Object.keys(plugin.types).forEach((kind) => {\n        if (state.cache[kind]) {\n          Object.keys(plugin.types[kind]).forEach((type) => {\n            delete state.cache[kind][type];\n          });\n        }\n      });\n    }\n  },\n\n  product(state, obj) {\n    const existing = findBy(state.products, 'name', obj.name);\n\n    if ( existing ) {\n      Object.assign(existing, obj);\n    } else {\n      addObject(state.products, obj);\n    }\n  },\n\n  virtualType(state, { product, obj }) {\n    if ( !state.virtualTypes[product] ) {\n      state.virtualTypes[product] = [];\n    }\n\n    const copy = clone(obj);\n\n    copy.virtual = true;\n\n    const existing = findBy(state.virtualTypes[product], 'name', copy.name);\n\n    if ( existing ) {\n      Object.assign(existing, copy);\n    } else {\n      addObject(state.virtualTypes[product], copy);\n    }\n  },\n\n  spoofedType(state, { product, obj }) {\n    if ( !state.spoofedTypes[product] ) {\n      state.spoofedTypes[product] = [];\n    }\n\n    const copy = clone(obj);\n\n    instanceMethods[product] = instanceMethods[product] || {};\n    instanceMethods[product][copy.type] = copy.getInstances;\n    delete copy.getInstances;\n\n    copy.name = copy.type;\n    copy.isSpoofed = true;\n    copy.virtual = true;\n    copy.schemas.forEach((schema) => {\n      schema.links = {\n        collection: `/${ SPOOFED_PREFIX }/${ schema.id }`,\n        ...(schema.links || {})\n      };\n    });\n\n    const existing = findBy(state.spoofedTypes[product], 'type', copy.type);\n\n    if ( existing ) {\n      Object.assign(existing, copy);\n    } else {\n      addObject(state.spoofedTypes[product], copy);\n    }\n  },\n\n  basicType(state, { product, group, types }) {\n    if ( !product ) {\n      product = EXPLORER;\n    }\n\n    if ( !group ) {\n      group = ROOT;\n    }\n\n    if ( !isArray(types) ) {\n      types = [types];\n    }\n\n    if ( !state.basicTypes[product] ) {\n      state.basicTypes[product] = {};\n    }\n\n    for ( const t of types ) {\n      state.basicTypes[product][t] = group;\n    }\n  },\n\n  ignoreGroup(state, { regexOrString: match, cb }) {\n    match = ensureRegex(match);\n    // State shouldn't contain actual RegExp objects, because they don't serialize\n    cb ? state.groupIgnore.push({\n      type: regexToString(match),\n      cb\n    }) : state.groupIgnore.push(regexToString(match));\n  },\n\n  ignoreType(state, match) {\n    match = ensureRegex(match);\n    state.typeIgnore.push(regexToString(match));\n  },\n\n  groupBy(state, { type, field }) {\n    state.groupBy[type] = field;\n  },\n\n  headers(state, { type, headers }) {\n    state.headers[type] = headers;\n  },\n\n  hideBulkActions(state, { type, field }) {\n    state.hideBulkActions[type] = field;\n  },\n\n  // weightGroup({group: 'core', weight: 99}); -- higher groups are shown first\n  // These operate on group names *after* mapping but *before* translation\n  weightGroup(state, {\n    group, groups, weight, forBasic\n  }) {\n    if ( !groups ) {\n      groups = [];\n    }\n\n    if ( group ) {\n      groups.push(group);\n    }\n\n    const map = forBasic ? state.basicGroupWeights : state.groupWeights;\n\n    for ( const g of groups ) {\n      map[g.toLowerCase()] = weight;\n    }\n  },\n\n  // setGroupDefaultType({group: 'core', defaultType: 'name'});\n  // By default when a group is clicked, the first item is selected - this allows\n  // this behaviour to be changed and a named child type can be chosen\n  // These operate on group names *after* mapping but *before* translation\n  setGroupDefaultType(state, { group, groups, defaultType }) {\n    if ( !groups ) {\n      groups = [];\n    }\n\n    if ( group ) {\n      groups.push(group);\n    }\n\n    for ( const g of groups ) {\n      state.groupDefaultTypes[g.toLowerCase()] = defaultType;\n    }\n  },\n\n  // weightType('Cluster' 99); -- higher groups are shown first\n  // These operate on *schema* type names, before mapping\n  weightType(state, {\n    type, types, weight, forBasic\n  }) {\n    if ( !types ) {\n      types = [];\n    }\n\n    if ( type ) {\n      types.push(type);\n    }\n\n    const map = forBasic ? state.basicTypeWeights : state.typeWeights;\n\n    for ( const t of types ) {\n      map[t.toLowerCase()] = weight;\n    }\n  },\n\n  // mapGroup('ugly.thing', 'Nice Thing', 1);\n  // mapGroup(/ugly.thing.(stuff)', '$1', 2);\n  // mapGroup(/ugly.thing.(stuff)', function(groupStr, ruleObj, regexMatch, typeObj) { return ucFirst(group.id) } , 2);\n  mapGroup(state, {\n    match, replace, weight = 5, continueOnMatch = false\n  }) {\n    _addMapping(state.groupMappings, match, replace, weight, continueOnMatch);\n  },\n\n  mapType(state, {\n    match, replace, weight = 5, continueOnMatch = false\n  }) {\n    _addMapping(state.typeMappings, match, replace, weight, continueOnMatch);\n  },\n\n  // moveType('apps.deployment', 'Core');\n  moveType(state, { match, group, weight = 5 }) {\n    _addMapping(state.typeMoveMappings, match, group, weight);\n  },\n\n  componentForType(state, { match, replace }) {\n    match = ensureRegex(match);\n    match = regexToString(match);\n    state.typeToComponentMappings.push({ match, replace });\n  },\n\n  configureType(state, options) {\n    const match = regexToString(ensureRegex(options.match));\n\n    const idx = state.typeOptions.findIndex((obj) => obj.match === match);\n    let obj = { ...options, match };\n\n    if ( idx >= 0 ) {\n      obj = Object.assign(state.typeOptions[idx], obj);\n      state.typeOptions.splice(idx, 1, obj);\n    } else {\n      const obj = Object.assign({}, options, { match });\n\n      state.typeOptions.push(obj);\n    }\n  },\n\n};\n\nexport const actions = {\n  removeProduct({ commit }, metadata) {\n    commit('remove', metadata);\n  },\n\n  addFavorite({ dispatch, rootGetters }, type) {\n    const types = rootGetters['prefs/get'](FAVORITE_TYPES) || [];\n\n    addObject(types, type);\n\n    dispatch('prefs/set', { key: FAVORITE_TYPES, value: types }, { root: true });\n  },\n\n  removeFavorite({ dispatch, rootGetters }, type) {\n    const types = rootGetters['prefs/get'](FAVORITE_TYPES) || [];\n\n    removeObject(types, type);\n\n    dispatch('prefs/set', { key: FAVORITE_TYPES, value: types }, { root: true });\n  },\n\n  toggleGroup({ dispatch, rootGetters }, { group, expanded }) {\n    const groups = rootGetters['prefs/get'](EXPANDED_GROUPS);\n\n    if ( expanded ) {\n      addObject(groups, group);\n    } else {\n      removeObject(groups, group);\n    }\n\n    dispatch('prefs/set', { key: EXPANDED_GROUPS, value: groups }, { root: true });\n  },\n\n  configureType({ commit }, options) {\n    commit('configureType', options);\n  }\n};\n\nfunction _sortGroup(tree, mode) {\n  const by = ['weight:desc', 'namespaced', 'label'];\n\n  tree.children = sortBy(tree.children, by);\n\n  for (const entry of tree.children ) {\n    if ( entry.children ) {\n      _sortGroup(entry, mode);\n    }\n  }\n}\n\nfunction _matchingCounts(typeObj, namespaces) {\n  // That was easy\n  if ( !typeObj.namespaced || !typeObj.byNamespace || namespaces === null || typeObj.count === null) {\n    return typeObj.count;\n  }\n\n  let out = 0;\n\n  // Otherwise start with 0 and count up\n  for ( const namespace of namespaces ) {\n    out += typeObj.byNamespace[namespace]?.count || 0;\n  }\n\n  return out;\n}\n\nfunction _applyMapping(objOrValue, mappings, keyField, cache, defaultFn) {\n  let key = objOrValue;\n  let found = false;\n\n  if ( keyField ) {\n    if ( typeof objOrValue !== 'object' ) {\n      return objOrValue;\n    }\n\n    key = get(objOrValue, keyField);\n\n    if ( typeof key !== 'string' ) {\n      return null;\n    }\n  }\n\n  if ( key && cache && cache[key] ) {\n    return cache[key];\n  }\n\n  let out = `${ key }`;\n\n  for ( const rule of mappings ) {\n    const re = stringToRegex(rule.match);\n    const captured = out.match(re);\n\n    if ( captured && rule.replace ) {\n      out = out.replace(re, rule.replace);\n\n      found = true;\n      if ( !rule.continueOnMatch ) {\n        break;\n      }\n    }\n  }\n\n  if ( !found && defaultFn ) {\n    out = defaultFn(out, objOrValue);\n  }\n\n  if ( cache ) {\n    cache[key] = out;\n  }\n\n  return out;\n}\n\nfunction _addMapping(mappings, match, replace, weight, continueOnMatch) {\n  match = regexToString(ensureRegex(match));\n\n  mappings.push({\n    match,\n    replace,\n    weight,\n    continueOnMatch,\n    insertIndex: mappings.length,\n  });\n\n  // Re-sort the list by weight (highest first) and insert time (oldest first)\n  mappings.sort((a, b) => {\n    const pri = b.weight - a.weight;\n\n    if ( pri ) {\n      return pri;\n    }\n\n    return a.insertIndex - b.insertIndex;\n  });\n}\n\n// Regexes can't be represented in state because they don't serialize to JSON..\nconst regexCache = {};\n\nfunction regexToString(regex) {\n  return regex.source;\n}\n\nfunction stringToRegex(str) {\n  let out = regexCache[str];\n\n  if ( !out ) {\n    out = new RegExp(str);\n    regexCache[str] = out;\n  }\n\n  return out;\n}\n\nfunction ifHave(getters, option) {\n  switch (option) {\n  case IF_HAVE.V2_MONITORING: {\n    return haveV2Monitoring(getters);\n  }\n  case IF_HAVE.V1_MONITORING: {\n    return haveV1Monitoring(getters);\n  }\n  case IF_HAVE.PROJECT: {\n    return !!project(getters);\n  }\n  case IF_HAVE.NO_PROJECT: {\n    return !project(getters);\n  }\n  case IF_HAVE.NOT_V1_ISTIO: {\n    return !isV1Istio(getters);\n  }\n  case IF_HAVE.MULTI_CLUSTER: {\n    return getters.isMultiCluster;\n  }\n  case IF_HAVE.NEUVECTOR_NAMESPACE: {\n    return getters[`cluster/all`](NAMESPACE).find((n) => n.metadata.name === NEU_VECTOR_NAMESPACE);\n  }\n  case IF_HAVE.ADMIN: {\n    return isAdminUser(getters);\n  }\n  case IF_HAVE.MCM_DISABLED: {\n    return !getters['isRancherInHarvester'];\n  }\n  case IF_HAVE.NOT_STANDALONE_HARVESTER: {\n    return !getters['isStandaloneHarvester'];\n  }\n  default:\n    return false;\n  }\n}\n\n// Could list a larger set of resources that typically only an admin user would have\nexport function isAdminUser(getters) {\n  const canEditSettings = (getters['management/schemaFor'](MANAGEMENT.SETTING)?.resourceMethods || []).includes('PUT');\n  const canEditFeatureFlags = (getters['management/schemaFor'](MANAGEMENT.FEATURE)?.resourceMethods || []).includes('PUT');\n  const canInstallApps = (getters['management/schemaFor'](CATALOG.APP)?.resourceMethods || []).includes('PUT');\n  const canAddRepos = (getters['management/schemaFor'](CATALOG.CLUSTER_REPO)?.resourceMethods || []).includes('PUT');\n  const canPutHelmOperations = (getters['management/schemaFor'](CATALOG.OPERATION)?.resourceMethods || []).includes('PUT');\n\n  return canEditSettings && canEditFeatureFlags && canInstallApps && canAddRepos && canPutHelmOperations;\n}\n\nfunction _findColumnByName(schema, colName) {\n  const attributes = schema.attributes || {};\n  const columns = attributes.columns || [];\n\n  return findBy(columns, 'name', colName);\n}\n\nfunction _rowValueGetter(col) {\n  // 'field' comes from the schema - typically it is of the form $.metadata.field[N]\n  // We will use JsonPath to look up this value, which is costly - so if we can detect this format\n  // Use a more efficient function to get the value\n  const value = col.field.startsWith('.') ? `$${ col.field }` : col.field;\n\n  if (process.client) {\n    const found = value.match(FIELD_REGEX);\n\n    if (found && found.length === 2) {\n      const fieldIndex = parseInt(found[1], 10);\n\n      return (row) => row.metadata?.fields?.[fieldIndex];\n    }\n  }\n\n  return value;\n}\n\n// Is V1 Istio installed?\nfunction isV1Istio(getters) {\n  const cluster = getters['currentCluster'];\n\n  return !!cluster?.status?.istioEnabled;\n}\n\nfunction ifHaveVerb(rootGetters, module, verb, haveIds) {\n  for ( const haveId of haveIds ) {\n    const schema = rootGetters[`${ module }/schemaFor`](haveId);\n    const want = verb.toLowerCase();\n    const collectionMethods = schema.collectionMethods || [];\n    const resourceMethods = schema.resourceMethods || [];\n    const have = [...collectionMethods, ...resourceMethods].map((x) => x.toLowerCase());\n\n    if ( !have.includes(want) && !have.includes(`blocked-${ want }`) ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n// Look at the namespace filters to determine if a project is selected\nexport function project(getters) {\n  const clusterId = getters['currentCluster']?.id;\n\n  if ( !clusterId ) {\n    return null;\n  }\n\n  const filters = getters['namespaceFilters'];\n  const namespaces = [];\n  let projectName = null;\n\n  for (const filter of filters) {\n    const [type, id] = filter.split('://', 2);\n\n    if (type === 'project') {\n      if (projectName !== null) {\n        // More than one project selected\n        return null;\n      }\n      projectName = id;\n    } else if (type === 'ns') {\n      namespaces.push(id);\n    } else {\n      // Something other than project or namespace\n      return null;\n    }\n  }\n\n  // No project found?\n  if (!projectName) {\n    return null;\n  }\n\n  // We have one project and a set of namespaces\n  // Check that all of the namespaces belong to the project\n  const project = getters['management/byId'](MANAGEMENT.PROJECT, `${ clusterId }/${ projectName }`);\n\n  // No additional namespaces means just the project is selected\n  if (namespaces.length === 0) {\n    return project;\n  }\n\n  // Convert the project namespaces into a map so we can check existence easily\n  const prjNamespaceMap = project.namespaces.reduce((m, ns) => {\n    m[ns.metadata.name] = true;\n\n    return m;\n  }, {});\n\n  // All of the namespace filters must belong to the project\n  const found = namespaces.reduce((total, ns) => {\n    return prjNamespaceMap[ns] ? total + 1 : 0;\n  }, 0);\n\n  if (found !== namespaces.length) {\n    return null;\n  }\n\n  return project;\n}\n\nfunction hasCustom(state, rootState, kind, key, fallback) {\n  const cache = state.cache[kind];\n\n  if ( cache[key] !== undefined ) {\n    return cache[key];\n  }\n\n  // Check to see if the custom kind is provided by a plugin\n  if (!!rootState.$plugin.getDynamic(kind, key)) {\n    cache[key] = true;\n\n    return cache[key];\n  }\n\n  // Fallback\n  try {\n    fallback(key);\n    cache[key] = true;\n  } catch (e) {\n    cache[key] = false;\n  }\n\n  return cache[key];\n}\n\nfunction loadExtension(rootState, kind, key, fallback) {\n  const ext = rootState.$plugin.getDynamic(kind, key);\n\n  if (ext) {\n    if (typeof ext === 'function') {\n      return ext;\n    }\n\n    return () => ext;\n  }\n\n  return fallback(key);\n}\n"],"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"}]}