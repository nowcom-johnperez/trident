{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/models/fleet.cattle.io.bundle.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/models/fleet.cattle.io.bundle.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["escapeHtml","ucFirst","SteveModel","typeHelper","addObject","addObjects","findBy","FLEET","convertSelectorObj","matching","FleetBundle","_SteveModel","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","get","_this$status","_this$status2","ready","status","summary","total","desiredReady","unready","_this$status3","conditions","lastUpdateTime","memberOfObject","spec","metadata","labels","workspace","$getters","WORKSPACE","namespace","clusters","groups","clusterGroups","out","id","local","targetClusters","_iterator","_createForOfIteratorHelper","targets","_step","s","n","done","tgt","value","clusterName","cluster","clusterGroup","group","clusterGroupSelector","expressions","matchingGroups","_iterator2","_step2","err","e","f","clusterSelector","matchingClusters","_this$stateObj","_this$stateObj2","error","stateObj","message","_this$status4","errorState","find","item","errState","hasErrorMessage","toLowerCase","includes","_errorState$message","name","_objectSpread","state","$rootGetters","default"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/models/fleet.cattle.io.bundle.js"],"sourcesContent":["import { escapeHtml, ucFirst } from '@shell/utils/string';\nimport SteveModel from '@shell/plugins/steve/steve-class';\nimport typeHelper from '@shell/utils/type-helpers';\nimport { addObject, addObjects, findBy } from '@shell/utils/array';\nimport { FLEET } from '@shell/config/types';\nimport { convertSelectorObj, matching } from '@shell/utils/selector';\n\nexport default class FleetBundle extends SteveModel {\n  get deploymentInfo() {\n    const ready = this.status?.summary?.ready || 0;\n    const total = this.status?.summary?.desiredReady || 0;\n\n    return {\n      ready,\n      unready: total - ready,\n      total\n    };\n  }\n\n  get lastUpdateTime() {\n    return this.status?.conditions?.[0].lastUpdateTime;\n  }\n\n  get bundleType() {\n    if (typeHelper.memberOfObject(this.spec, 'helm')) {\n      return 'helm';\n    }\n\n    return '';\n  }\n\n  get repoName() {\n    return this.metadata.labels['fleet.cattle.io/repo-name'];\n  }\n\n  get targetClusters() {\n    const workspace = this.$getters['byId'](\n      FLEET.WORKSPACE,\n      this.metadata.namespace\n    );\n    const clusters = workspace?.clusters || [];\n    const groups = workspace?.clusterGroups || [];\n    const out = [];\n\n    if (workspace.id === 'fleet-local') {\n      const local = findBy(groups, 'id', 'fleet-local/default');\n\n      if (local) {\n        return local.targetClusters;\n      }\n\n      return [];\n    }\n\n    for (const tgt of this.spec.targets) {\n      if (tgt.clusterName) {\n        const cluster = findBy(clusters, 'metadata.name', tgt.clusterName);\n\n        if (cluster) {\n          addObject(out, cluster);\n        }\n      } else if (tgt.clusterGroup) {\n        const group = findBy(groups, {\n          'metadata.namespace': this.metadata.namespace,\n          'metadata.name':      tgt.clusterGroup\n        });\n\n        if (group) {\n          addObjects(out, group.targetClusters);\n        }\n      } else if (tgt.clusterGroupSelector) {\n        const expressions = convertSelectorObj(tgt.clusterGroupSelector);\n        const matchingGroups = matching(groups, expressions);\n\n        for (const group of matchingGroups) {\n          addObjects(out, group.targetClusters);\n        }\n      } else if (tgt.clusterSelector) {\n        const expressions = convertSelectorObj(tgt.clusterSelector);\n        const matchingClusters = matching(clusters, expressions);\n\n        addObjects(out, matchingClusters);\n      }\n    }\n\n    return out;\n  }\n\n  get stateDescription() {\n    const error = this.stateObj?.error || false;\n    const message = this.stateObj?.message;\n\n    return error ? ucFirst(message) : '';\n  }\n\n  get stateObj() {\n    const errorState = this.status?.conditions?.find((item) => {\n      const { error, message } = item;\n      const errState = !!error;\n\n      /**\n       * error.trainsitioning = true when error applied. So checking non existance of tranistioning is not enough.\n       * {\n       *  \"error\": true,\n       *    \"lastUpdateTime\": \"2022-03-03T08:28:15Z\",\n       *    \"message\": \"ErrApplied(1) [Cluster test-do/c-b5rsv: rendered manifests contain a resource that already exists. Unable to continue with install: Service \\\"frontend\\\" in namespace \\\"fleet-mc-helm-kustomize-example\\\" exists and cannot be imported into the current release: invalid ownership metadata; annotation validation error: key \\\"meta.helm.sh/release-name\\\" must equal \\\"sf-mchk-multi-cluster-helm-kustomize\\\": current value is \\\"test-bug-multi-cluster-helm-kustomize\\\"]; NotReady(1) [Cluster test-do/c-5fhtx]; deployment.apps fleet-mc-helm-kustomize-example/redis-master [progressing] Deployment does not have minimum availability., Available: 0/1; deployment.apps shavin/frontend extra; deployment.apps shavin/redis-master extra; deployment.apps shavin/redis-slave extra; service.v1 shavin/frontend extra\",\n       *    \"status\": \"False\",\n       *    \"transitioning\": true,\n       *    \"type\": \"Ready\"\n       *    },\n       */\n      const hasErrorMessage =\n        message?.toLowerCase().includes('errapplied') ||\n        message?.toLowerCase().includes('error');\n\n      return errState && hasErrorMessage;\n    });\n\n    if (errorState) {\n      errorState.name = errorState.message?.toLowerCase().includes('errapplied') ? 'errapplied' : 'error';\n\n      return errorState;\n    }\n\n    return { ...this.metadata.state };\n  }\n\n  get groupByLabel() {\n    const name = this.metadata.namespace;\n\n    if (name) {\n      return this.$rootGetters['i18n/t']('resourceTable.groupLabel.workspace', { name: escapeHtml(name) });\n    } else {\n      return this.$rootGetters['i18n/t'](\n        'resourceTable.groupLabel.notInAWorkspace'\n      );\n    }\n  }\n}\n"],"mappings":"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"}]}