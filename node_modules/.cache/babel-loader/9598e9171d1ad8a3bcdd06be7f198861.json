{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/plugins/steve/worker/web-worker.advanced.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/plugins/steve/worker/web-worker.advanced.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["SCHEMA","COUNT","ResourceWatcher","watchKeyFromMessage","ResourceCache","EVENT_MESSAGE","EVENT_CONNECT_ERROR","EVENT_DISCONNECT_ERROR","normalizeType","keyFieldFor","addSchemaIndexFields","caches","state","watcher","undefined","store","workerQueue","batchChanges","debugWorker","trace","_console","_len","arguments","length","args","Array","_key","console","info","apply","concat","maintenanceInterval","setInterval","Object","keys","self","postMessage","makeResourceProps","msg","resourceType","type","data","rawType","normalizedType","keyField","id","handleConnectionError","eventType","event","_defineProperty","detail","srcElement","disconnectedAt","url","removeFromWorkerQueue","watchKey","filter","workerMessage","_Object$entries$","_slicedToArray","entries","workerMessageWatchKey","workerActions","loadSchemas","collection","load","createWatcher","opt","metadata","maxTries","csrf","addEventListener","e","JSON","parse","name","resourceWatcherActions","dispatch","redispatch","resyncWatch","setDebug","connect","shift","_Object$entries$2","action","warn","watch","_state$watcher","stop","unwatch","force","watches","error","push","namespace","selector","resourceVersion","resourceVersionTime","Date","now","skipResourceVersion","includes","watchObject","initWorker","_ref","storeName","destroyWorker","clearInterval","destroyWorkerComplete","onmessage","_state$watcher2","disconnect","then","toggleDebug","_ref2","on","updateBatch","change","resourceChange","_makeResourceProps","resourceCreate","_makeResourceProps2","create","resourceStart","resourceRemove","_makeResourceProps3","remove","resourceStop","_state$watcher3","_objectSpread","advancedWorker","resourceError","messageActions","forEach"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/plugins/steve/worker/web-worker.advanced.js"],"sourcesContent":["/**\n * Advanced Worker is enabled by performance setting\n * relocates cluster resource sockets off the UI thread and into a webworker\n */\n\nimport { SCHEMA, COUNT } from '@shell/config/types';\nimport ResourceWatcher, { watchKeyFromMessage } from '@shell/plugins/steve/resourceWatcher';\nimport ResourceCache from '@shell/plugins/steve/caches/resourceCache';\nimport { EVENT_MESSAGE, EVENT_CONNECT_ERROR, EVENT_DISCONNECT_ERROR } from '@shell/utils/socket';\nimport { normalizeType, keyFieldFor } from '@shell/plugins/dashboard-store/normalize';\nimport { addSchemaIndexFields } from '@shell/plugins/steve/schema.utils';\n\nconst caches = {};\n\nconst state = {\n  watcher:      undefined,\n  store:        '', // Store name\n  /**\n   * Store `watch`/`unwatch` events to process when the socket is created\n   */\n  workerQueue:  [],\n  batchChanges: {},\n  debugWorker:  false\n};\n\nconst trace = (...args) => {\n  state.debugWorker && console.info('Advanced Worker:', ...args); // eslint-disable-line no-console\n};\n\ntrace('created');\n\nconst maintenanceInterval = setInterval(() => {\n  if (Object.keys(state.batchChanges).length) {\n    self.postMessage({ batchChanges: state.batchChanges });\n    state.batchChanges = {};\n  }\n}, 5000); // 5 seconds\n\nconst makeResourceProps = (msg) => {\n  const { resourceType, data: { type }, data } = msg;\n  const rawType = resourceType || type;\n  const normalizedType = normalizeType(rawType === 'counts' ? COUNT : rawType);\n  const keyField = keyFieldFor(normalizedType);\n\n  if ( normalizedType === SCHEMA ) {\n    addSchemaIndexFields(data);\n  }\n\n  return {\n    type: normalizedType,\n    id:   data[keyField],\n    data\n  };\n};\n\n/**\n * Pass the EVENT_CONNECT_ERROR / EVENT_DISCONNECT_ERROR back to the UI thread\n */\nconst handleConnectionError = (eventType, event, watcher) => {\n  trace('createWatcher', eventType, event);\n  self.postMessage({\n    [eventType]: {\n      type:       event.type,\n      detail:     event.detail,\n      srcElement: {\n        disconnectedAt: watcher.disconnectedAt,\n        url:            watcher.url,\n      }\n    }\n  });\n};\n\n/**\n * Remove any pending messages related to this resource from the queue\n */\nconst removeFromWorkerQueue = (watchKey) => {\n  state.workerQueue = state.workerQueue.filter((workerMessage) => {\n    const [, msg] = Object.entries(workerMessage)[0];\n    const workerMessageWatchKey = watchKeyFromMessage(msg);\n\n    return watchKey !== workerMessageWatchKey;\n  });\n};\n\n/**\n * These are things that we do when we get a message from the UI thread\n */\nconst workerActions = {\n  // ToDo: SM we'll make a generic loader for all resource types when we need it but it'll be pretty similar to this\n  loadSchemas: (collection) => {\n    if (!caches[SCHEMA]) {\n      caches[SCHEMA] = new ResourceCache(SCHEMA);\n    }\n    caches[SCHEMA].load(collection);\n  },\n  createWatcher: (opt) => {\n    trace('createWatcher', opt);\n\n    const {\n      metadata, maxTries, url, csrf\n    } = opt;\n\n    if (!state.watcher) {\n      state.watcher = new ResourceWatcher(url, true, null, null, maxTries, csrf);\n\n      state.watcher.addEventListener(EVENT_MESSAGE, (e) => {\n        const event = e.detail;\n\n        if (event.data) {\n          const msg = JSON.parse(event.data);\n\n          if (msg.name) {\n            if (resourceWatcherActions[msg.name]) {\n              resourceWatcherActions[msg.name](msg);\n            } else {\n              resourceWatcherActions.dispatch(msg);\n            }\n          }\n        }\n      });\n\n      state.watcher.addEventListener('resync', (e) => {\n        self.postMessage({ redispatch: { resyncWatch: e.detail.data } });\n      });\n\n      state.watcher.addEventListener(EVENT_CONNECT_ERROR, (e) => {\n        handleConnectionError(EVENT_CONNECT_ERROR, e, state.watcher);\n      });\n\n      state.watcher.addEventListener(EVENT_DISCONNECT_ERROR, (e) => {\n        handleConnectionError(EVENT_DISCONNECT_ERROR, e, state.watcher);\n      });\n\n      state.watcher.setDebug(state.debugWorker);\n\n      state.watcher.connect(metadata);\n\n      // Flush the workerQueue\n      while (state.workerQueue.length > 0) {\n        trace('createWatcher', 'flushing workerQueue', state.workerQueue);\n\n        const workerMessage = state.workerQueue.shift();\n        const [action, msg] = Object.entries(workerMessage)[0];\n\n        if (workerActions[action]) {\n          workerActions[action](msg);\n        } else {\n          console.warn('no associated action for:', action); // eslint-disable-line no-console\n        }\n      }\n    }\n  },\n  watch: (msg) => {\n    trace('watch', msg);\n\n    const watchKey = watchKeyFromMessage(msg);\n\n    if (msg.stop) {\n      workerActions.unwatch(watchKey);\n\n      return;\n    }\n\n    // If socket is in error don't try to watch.... unless we `force` it\n    if (!msg.force && !!state.watcher?.watches[watchKey]?.error) {\n      return;\n    }\n\n    if (!state.watcher) {\n      state.workerQueue.push({ watch: msg });\n\n      return;\n    }\n\n    const {\n      resourceType,\n      namespace,\n      id,\n      selector,\n      resourceVersion\n    } = msg;\n\n    const resourceVersionTime = resourceVersion ? Date.now() : undefined;\n    const skipResourceVersion = [SCHEMA, COUNT].includes(resourceType);\n\n    const watchObject = {\n      resourceType,\n      id,\n      namespace,\n      selector,\n      force: msg.force,\n    };\n\n    state.watcher.watch(watchKey, resourceVersion, resourceVersionTime, watchObject, skipResourceVersion);\n  },\n  unwatch: (watchKey) => {\n    trace('unwatch', watchKey);\n\n    removeFromWorkerQueue(watchKey);\n\n    if (!state.watcher) {\n      return;\n    }\n\n    state.watcher.unwatch(watchKey);\n  },\n  initWorker: ({ storeName }) => {\n    trace('initWorker', storeName);\n\n    state.store = storeName;\n  },\n  destroyWorker: () => {\n    trace('destroyWorker');\n\n    clearInterval(maintenanceInterval);\n\n    function destroyWorkerComplete() {\n      delete self.onmessage;\n      self.postMessage({ destroyWorker: true }); // we're only passing the boolean here because the key needs to be something truthy to ensure it's passed on the object.\n    }\n\n    // disconnect takes a callback which we'll use to close the webworker\n    if (state.watcher) {\n      state.watcher?.disconnect().then(destroyWorkerComplete);\n    } else {\n      destroyWorkerComplete();\n    }\n  },\n\n  toggleDebug: ({ on }) => {\n    state.debugWorker = !!on;\n    state.watcher.setDebug(!!on);\n  },\n  updateBatch(type, id, change) {\n    if (!state.batchChanges[type]) {\n      state.batchChanges[type] = {};\n    }\n    state.batchChanges[type][id] = change;\n  }\n};\n\n/**\n * These are things that we do when we get a message from the resourceWatcher\n */\nconst resourceWatcherActions = {\n  'resource.change': (msg) => {\n    const { type, id, data } = makeResourceProps(msg);\n\n    if (caches[type]) {\n      caches[type].change(data, () => workerActions.updateBatch(type, id, data));\n    } else {\n      workerActions.updateBatch(type, id, data);\n    }\n  },\n  // ToDo: SM create is functionally identical to change in the cache but the worker isn't supposed to know that hence the near-duplicate code\n  'resource.create': (msg) => {\n    const { type, id, data } = makeResourceProps(msg);\n\n    if (caches[type]) {\n      caches[type].create(data, () => workerActions.updateBatch(type, id, data));\n    } else {\n      workerActions.updateBatch(type, id, data);\n    }\n  },\n  'resource.start': (msg) => {\n    // State is handled in the resourceWatcher, no need to bubble out to UI thread\n  },\n  'resource.remove': (msg) => {\n    const { type, id } = makeResourceProps(msg);\n\n    if (caches[type]) {\n      caches[type].remove(id, () => workerActions.updateBatch(type, id, {}));\n    } else {\n      workerActions.updateBatch(type, id, {});\n    }\n  },\n  'resource.stop': (msg) => {\n    trace('resource.stop', msg);\n\n    // State is handled in the resourceWatcher....\n    const watchKey = watchKeyFromMessage(msg);\n\n    removeFromWorkerQueue(watchKey);\n\n    // ... however we still want to bubble out to UI thread\n    // We'll save some hassle and ignore any resource.stop bubble if we're in error. the only thing that will clear that is a resync\n    if (!state.watcher?.watches[watchKey]?.error) {\n      // See comment in resourceWatcher 'resource.stop' handler, until we can resolve the resourceVersion within the resourceWatcher\n      // internally, we'll want to bubble this out to the UI thread. When that's resolved this won't be needed\n      resourceWatcherActions.dispatch({\n        ...msg,\n        advancedWorker: true,\n      });\n    }\n  },\n  'resource.error': (msg) => {\n    // State is handled in the resourceWatcher, no need to bubble out to UI thread\n    console.warn(`Resource error [${ state.store }]`, msg.resourceType, ':', msg.data.error); // eslint-disable-line no-console\n  },\n  dispatch: (msg) => {\n    self.postMessage({ dispatch: msg });\n  }\n};\n\n/**\n * Covers message from UI Thread to Worker\n */\nself.onmessage = (e) => {\n  /* on the off chance there's more than key in the message, we handle them in the order that they \"keys\" method provides which is\n  // good enough for now considering that we never send more than one message action at a time right now */\n  const messageActions = Object.keys(e?.data);\n\n  messageActions.forEach((action) => {\n    if (workerActions[action]) {\n      workerActions[action](e?.data[action]);\n    } else {\n      console.warn('no associated action for:', action); // eslint-disable-line no-console\n    }\n  });\n}; // bind everything to the worker's onmessage handler via the workerActions\n"],"mappings":"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"}]}