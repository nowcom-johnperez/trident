{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/plugins/steve/actions.js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/plugins/steve/actions.js","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["https","addParam","parse","parseUrl","stringify","unParseUrl","handleSpoofedRequest","loadSchemas","set","deferred","streamJson","streamingSupported","isObject","classify","NAMESPACE","jsyaml","handleKubeApiHeaderWarnings","ctx","_arguments","arguments","_asyncToGenerator","regeneratorRuntime","mark","_callee","watch","wrap","_callee$","_context","prev","next","length","undefined","abrupt","sent","stop","request","_ref","pOpt","_this","_callee2","state","dispatch","rootGetters","opt","spoofedRes","prependPath","url","method","headers","key","waiting","later","paginatedResult","_out$pagination","out","_paginatedResult$pagi","_paginatedResult$pagi2","_paginatedResult$pagi3","_paginatedResult$pagi4","makeRequest","finishDeferred","responseObject","onError","_callee2$","_context2","_onError","err","response","res","redirectUnauthorized","status","logoutOnError","root","data","Promise","reject","_responseObject","fromHeader","_typeof","Object","defineProperties","_status","value","_statusText","statusText","_headers","_req","_url","_finishDeferred","action","deferredRequests","pop","_makeRequest","that","$axios","then","responseType","replace","$config","rancherEnv","startsWith","path","httpsAgent","Agent","rejectUnauthorized","toLowerCase","JSON","push","promise","stream","allowStreaming","config","supportsStream","onData","bind","catch","depaginate","concat","pagination","first","last","partial","t0","promptMove","_ref2","resources","commit","promptRestore","_ref3","assignTo","_ref4","resourceAction","_ref5","_ref6","_callee3","getters","resource","actionName","body","_callee3$","_context3","actionLinkFor","load","type","map","x","byId","id","promptUpdate","_ref7","collectionAction","_ref8","_ref9","_callee4","schema","_callee4$","_context4","links","collection","createNamespace","obj","metadata","name","cleanForNew","_obj$spec","m","dropKeys","newRootKeys","newMetadataKeys","dropCattleKeys","annotations","labels","spec","crd","names","kind","cleanForDiff","dropUnderscores","diffRootKeys","diffMetadataKeys","cleanForDetail","cleanForDownload","yaml","_obj$status","rootKeys","metadataKeys","conditionKeys","conditions","forEach","condition","dump","k","v","keys","_iterator","_createForOfIteratorHelper","_step","s","n","done","e","f","match"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/plugins/steve/actions.js"],"sourcesContent":["import https from 'https';\nimport { addParam, parse as parseUrl, stringify as unParseUrl } from '@shell/utils/url';\nimport { handleSpoofedRequest, loadSchemas } from '@shell/plugins/dashboard-store/actions';\nimport { set } from '@shell/utils/object';\nimport { deferred } from '@shell/utils/promise';\nimport { streamJson, streamingSupported } from '@shell/utils/stream';\nimport isObject from 'lodash/isObject';\nimport { classify } from '@shell/plugins/dashboard-store/classify';\nimport { NAMESPACE } from '@shell/config/types';\nimport jsyaml from 'js-yaml';\nimport { handleKubeApiHeaderWarnings } from '@shell/plugins/steve/header-warnings';\n\nexport default {\n\n  // Need to override this, so that the 'this' context is correct (this class not the base class)\n  async loadSchemas(ctx, watch = true) {\n    return await loadSchemas(ctx, watch);\n  },\n\n  async request({ state, dispatch, rootGetters }, pOpt ) {\n    const opt = pOpt.opt || pOpt;\n\n    const spoofedRes = await handleSpoofedRequest(rootGetters, 'cluster', opt);\n\n    if (spoofedRes) {\n      return spoofedRes;\n    }\n\n    opt.url = opt.url.replace(/\\/*$/g, '');\n\n    // FIXME: RC Standalone - Tech Debt move this to steve store get/set prependPath\n    // Cover cases where the steve store isn't actually going out to steve (epinio standalone)\n    const prependPath = this.$config.rancherEnv === 'epinio' ? `/pp/v1/epinio/rancher` : '';\n\n    if (prependPath) {\n      if (opt.url.startsWith('/')) {\n        opt.url = prependPath + opt.url;\n      } else {\n        const url = parseUrl(opt.url);\n\n        if (!url.path.startsWith(prependPath)) {\n          url.path = prependPath + url.path;\n          opt.url = unParseUrl(url);\n        }\n      }\n    }\n\n    opt.httpsAgent = new https.Agent({ rejectUnauthorized: false });\n\n    const method = (opt.method || 'get').toLowerCase();\n    const headers = (opt.headers || {});\n    const key = JSON.stringify(headers) + method + opt.url;\n    let waiting;\n\n    if ( (method === 'get') ) {\n      waiting = state.deferredRequests[key];\n\n      if ( waiting ) {\n        const later = deferred();\n\n        waiting.push(later);\n\n        // console.log('Deferred request for', key, waiting.length);\n\n        return later.promise;\n      } else {\n        // Set it to something so that future requests know to defer.\n        waiting = [];\n        state.deferredRequests[key] = waiting;\n      }\n    }\n\n    if ( opt.stream && state.allowStreaming && state.config.supportsStream && streamingSupported() ) {\n      // console.log('Using Streaming for', opt.url);\n\n      return streamJson(opt.url, opt, opt.onData).then(() => {\n        return { finishDeferred: finishDeferred.bind(null, key, 'resolve') };\n      }).catch((err) => {\n        return onError(err);\n      });\n    } else {\n      // console.log('NOT Using Streaming for', opt.url);\n    }\n\n    let paginatedResult;\n\n    while (true) {\n      try {\n        const out = await makeRequest(this, opt, rootGetters);\n\n        if (!opt.depaginate) {\n          return out;\n        }\n\n        if (!paginatedResult) {\n          // First result, so store it\n          paginatedResult = out;\n        } else {\n          // Subsequent request, so add to it\n          paginatedResult.data = paginatedResult.data.concat(out.data);\n        }\n\n        if (out?.pagination?.next) {\n          // More results to come, update options\n          opt.url = out.pagination.next;\n        } else {\n          // No more results, so clear out the pagination section (which will be stale from the first request)\n          delete paginatedResult.pagination?.first;\n          delete paginatedResult.pagination?.last;\n          delete paginatedResult.pagination?.next;\n          delete paginatedResult.pagination?.partial;\n\n          return paginatedResult;\n        }\n      } catch (err) {\n        return onError(err);\n      }\n    }\n\n    function makeRequest(that, opt, rootGetters) {\n      return that.$axios(opt).then((res) => {\n        let out;\n\n        if ( opt.responseType ) {\n          out = res;\n        } else {\n          out = responseObject(res);\n        }\n\n        finishDeferred(key, 'resolve', out);\n\n        handleKubeApiHeaderWarnings(res, dispatch, rootGetters, opt.method);\n\n        return out;\n      });\n    }\n\n    function finishDeferred(key, action = 'resolve', res) {\n      const waiting = state.deferredRequests[key] || [];\n\n      // console.log('Resolving deferred for', key, waiting.length);\n\n      while ( waiting.length ) {\n        waiting.pop()[action](res);\n      }\n\n      delete state.deferredRequests[key];\n    }\n\n    function responseObject(res) {\n      let out = res.data;\n\n      const fromHeader = res.headers['x-api-cattle-auth'];\n\n      if ( fromHeader && fromHeader !== rootGetters['auth/fromHeader'] ) {\n        dispatch('auth/gotHeader', fromHeader, { root: true });\n      }\n\n      if ( res.status === 204 || out === null ) {\n        out = {};\n      }\n\n      if ( typeof out !== 'object' ) {\n        out = { data: out };\n      }\n\n      Object.defineProperties(out, {\n        _status:     { value: res.status },\n        _statusText: { value: res.statusText },\n        _headers:    { value: res.headers },\n        _req:        { value: res.request },\n        _url:        { value: opt.url },\n      });\n\n      return out;\n    }\n\n    function onError(err) {\n      let out = err;\n\n      if ( err?.response ) {\n        const res = err.response;\n\n        // Go to the logout page for 401s, unless redirectUnauthorized specifically disables (for the login page)\n        if ( opt.redirectUnauthorized !== false && res.status === 401 ) {\n          dispatch('auth/logout', opt.logoutOnError, { root: true });\n        }\n\n        if ( typeof res.data !== 'undefined' ) {\n          out = responseObject(res);\n        }\n      }\n\n      finishDeferred(key, 'reject', out);\n\n      return Promise.reject(out);\n    }\n  },\n\n  promptMove({ commit, state }, resources) {\n    commit('action-menu/togglePromptMove', resources, { root: true });\n  },\n\n  promptRestore({ commit, state }, resources ) {\n    commit('action-menu/togglePromptRestore', resources, { root: true });\n  },\n\n  assignTo({ commit, state }, resources = []) {\n    commit('action-menu/toggleAssignTo', resources, { root: true });\n  },\n\n  async resourceAction({ getters, dispatch }, {\n    resource, actionName, body, opt,\n  }) {\n    opt = opt || {};\n\n    if ( !opt.url ) {\n      opt.url = resource.actionLinkFor(actionName);\n      // opt.url = (resource.actions || resource.actionLinks)[actionName];\n    }\n\n    opt.method = 'post';\n    opt.data = body;\n\n    const res = await dispatch('request', { opt });\n\n    if ( opt.load !== false && res.type === 'collection' ) {\n      await dispatch('loadMulti', res.data);\n\n      return res.data.map((x) => getters.byId(x.type, x.id) || x);\n    } else if ( opt.load !== false && res.type && res.id ) {\n      return dispatch('load', { data: res });\n    } else {\n      return res;\n    }\n  },\n\n  promptUpdate({ commit, state }, resources = []) {\n    commit('action-menu/togglePromptUpdate', resources, { root: true });\n  },\n\n  async collectionAction({ getters, dispatch }, {\n    type, actionName, body, opt\n  }) {\n    opt = opt || {};\n\n    if ( !opt.url ) {\n      // Cheating, but cheaper than loading the whole collection...\n      const schema = getters['schemaFor'](type);\n\n      opt.url = addParam(schema.links.collection, 'action', actionName);\n    }\n\n    opt.method = 'post';\n    opt.data = body;\n\n    const res = await dispatch('request', { opt });\n\n    if ( opt.load !== false && res.type === 'collection' ) {\n      await dispatch('loadMulti', res.data);\n\n      return res.data.map((x) => getters.byId(x.type, x.id) || x);\n    } else if ( opt.load !== false && res.type && res.id ) {\n      return dispatch('load', { data: res });\n    } else {\n      return res;\n    }\n  },\n\n  createNamespace(ctx, obj) {\n    return classify(ctx, {\n      type:     NAMESPACE,\n      metadata: { name: obj.name }\n    });\n  },\n\n  cleanForNew(ctx, obj) {\n    const m = obj.metadata || {};\n\n    dropKeys(obj, newRootKeys);\n    dropKeys(m, newMetadataKeys);\n    dropCattleKeys(m.annotations);\n    dropCattleKeys(m.labels);\n\n    m.name = '';\n\n    if ( obj?.spec?.crd?.spec?.names?.kind ) {\n      obj.spec.crd.spec.names.kind = '';\n    }\n\n    return obj;\n  },\n\n  cleanForDiff(ctx, obj) {\n    const m = obj.metadata || {};\n\n    if ( !m.labels ) {\n      m.labels = {};\n    }\n\n    if ( !m.annotations ) {\n      m.annotations = {};\n    }\n\n    dropUnderscores(obj);\n    dropKeys(obj, diffRootKeys);\n    dropKeys(m, diffMetadataKeys);\n    dropCattleKeys(m.annotations);\n    dropCattleKeys(m.labels);\n\n    return obj;\n  },\n\n  cleanForDetail(ctx, resource) {\n    // Ensure labels & annotations exists, since lots of things need them\n    if ( !resource.metadata ) {\n      set(resource, 'metadata', {});\n    }\n\n    if ( !resource.metadata.annotations ) {\n      set(resource, 'metadata.annotations', {});\n    }\n\n    if ( !resource.metadata.labels ) {\n      set(resource, 'metadata.labels', {});\n    }\n\n    return resource;\n  },\n\n  // remove fields added by steve before showing/downloading yamls\n  cleanForDownload(ctx, yaml) {\n    if (!yaml) {\n      return;\n    }\n    const rootKeys = [\n      'id',\n      'links',\n      'type',\n      'actions'\n    ];\n    const metadataKeys = [\n      'fields',\n      'relationships',\n      'state',\n    ];\n    const conditionKeys = [\n      'error',\n      'transitioning',\n    ];\n    const obj = jsyaml.load(yaml);\n\n    dropKeys(obj, rootKeys);\n    dropKeys(obj?.metadata, metadataKeys);\n    (obj?.status?.conditions || []).forEach((condition) => dropKeys(condition, conditionKeys));\n\n    return jsyaml.dump(obj);\n  }\n};\n\nconst diffRootKeys = [\n  'actions', 'links', 'status', '__rehydrate', '__clone'\n];\n\nconst diffMetadataKeys = [\n  'ownerReferences',\n  'selfLink',\n  'creationTimestamp',\n  'deletionTimestamp',\n  'state',\n  'fields',\n  'relationships',\n  'generation',\n  'managedFields',\n  'resourceVersion',\n];\n\nconst newRootKeys = [\n  'actions', 'links', 'status', 'id'\n];\n\nconst newMetadataKeys = [\n  ...diffMetadataKeys,\n  'uid',\n];\n\nfunction dropUnderscores(obj) {\n  for ( const k in obj ) {\n    if ( k.startsWith('__') ) {\n      delete obj[k];\n    } else {\n      const v = obj[k];\n\n      if ( isObject(v) ) {\n        dropUnderscores(v);\n      }\n    }\n  }\n}\n\nfunction dropKeys(obj, keys) {\n  if ( !obj ) {\n    return;\n  }\n\n  for ( const k of keys ) {\n    delete obj[k];\n  }\n}\n\nfunction dropCattleKeys(obj) {\n  if ( !obj ) {\n    return;\n  }\n\n  Object.keys(obj).forEach((key) => {\n    if ( !!key.match(/(^|field\\.)cattle\\.io(\\/.*|$)/) ) {\n      delete obj[key];\n    }\n  });\n}\n"],"mappings":"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"}]}