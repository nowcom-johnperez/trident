{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/SideNav.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/SideNav.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["debounce","isEqual","mapGetters","mapState","mapPref","FAVORITE_TYPES","getVersionInfo","addObjects","replaceWith","clear","addObject","sortBy","ucFirst","HCI","CATALOG","UI","SCHEMA","COUNT","HARVESTER_NAME","HARVESTER","NAME","EXPLORER","BASIC","FAVORITE","USED","NAVLINKS","Group","name","components","data","groups","gettingGroups","created","queueUpdate","getGroups","mounted","_this","$nextTick","syncNav","watch","counts","a","b","allSchemas","allNavLinks","favoriteTypes","locale","productId","namespaceMode","namespaces","clusterReady","product","$route","_this2","computed","_objectSpread","availableLocales","showClusterTools","isExplorer","$store","getters","CLUSTER_REPO","APP","supportLink","currentProduct","supportRoute","params","cluster","clusterId","concat","displayVersion","_this$isSingleProduct","isSingleProduct","_this$isSingleProduct2","_getVersionInfo","singleProductAbout","_this$isSingleProduct3","aboutPage","harvesterVersion","_this$$store$getters$","SETTING","value","showProductFooter","isVirtualProduct","NAV_LINK","managementReady","inStore","methods","namespacesObject","Object","keys","out","loadProducts","productMap","activeProducts","reduce","acc","p","_defineProperty","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","e","f","getProductsGroups","getExplorerGroups","apply","_toConsumableArray","currentType","resource","_iterator2","_step2","modes","push","_i","_modes","length","mode","types","more","_productMap$productId","root","find","x","other","filter","group","label","children","weight","toAdd","haveGroup","_iterator3","_step3","obj","link","groupLabel","spec","groupSlug","normalizedGroup","entry","_key","target","actualTarget","labelDisplay","sideLabel","iconSrc","description","isRoot","route","groupSelected","selected","$refs","forEach","grp","canCollapse","isExpanded","collapseAll","switchLocale","dispatch","_this3","refs","canExpand","expanded","hasActiveRoute","isActive"],"sources":["node_modules/@rancher/shell/components/SideNav.vue"],"sourcesContent":["<script>\nimport debounce from 'lodash/debounce';\nimport isEqual from 'lodash/isEqual';\nimport { mapGetters, mapState } from 'vuex';\nimport {\n  mapPref,\n  FAVORITE_TYPES\n} from '@shell/store/prefs';\nimport { getVersionInfo } from '@shell/utils/version';\nimport { addObjects, replaceWith, clear, addObject } from '@shell/utils/array';\nimport { sortBy } from '@shell/utils/sort';\nimport { ucFirst } from '@shell/utils/string';\n\nimport {\n  HCI, CATALOG, UI, SCHEMA, COUNT\n} from '@shell/config/types';\nimport { HARVESTER_NAME as HARVESTER } from '@shell/config/features';\nimport { NAME as EXPLORER } from '@shell/config/product/explorer';\nimport { BASIC, FAVORITE, USED } from '@shell/store/type-map';\nimport { NAME as NAVLINKS } from '@shell/config/product/navlinks';\nimport Group from '@shell/components/nav/Group';\n\nexport default {\n  name:       'SideNav',\n  components: { Group },\n  data() {\n    return {\n      groups:        [],\n      gettingGroups: false\n    };\n  },\n\n  created() {\n    this.queueUpdate = debounce(this.getGroups, 500);\n\n    this.getGroups();\n  },\n\n  mounted() {\n    // Sync the navigation tree on fresh load\n    this.$nextTick(() => this.syncNav());\n  },\n\n  watch: {\n    counts(a, b) {\n      if ( a !== b ) {\n        this.queueUpdate();\n      }\n    },\n\n    allSchemas(a, b) {\n      if ( a !== b ) {\n        this.queueUpdate();\n      }\n    },\n\n    allNavLinks(a, b) {\n      if ( a !== b ) {\n        this.queueUpdate();\n      }\n    },\n\n    favoriteTypes(a, b) {\n      if ( !isEqual(a, b) ) {\n        this.queueUpdate();\n      }\n    },\n\n    locale(a, b) {\n      if ( !isEqual(a, b) ) {\n        this.getGroups();\n      }\n    },\n\n    productId(a, b) {\n      if ( !isEqual(a, b) ) {\n        // Immediately update because you'll see it come in later\n        this.getGroups();\n      }\n    },\n\n    namespaceMode(a, b) {\n      if ( !isEqual(a, b) ) {\n        // Immediately update because you'll see it come in later\n        this.getGroups();\n      }\n    },\n\n    namespaces(a, b) {\n      if ( !isEqual(a, b) ) {\n        // Immediately update because you'll see it come in later\n        this.getGroups();\n      }\n    },\n\n    clusterReady(a, b) {\n      if ( !isEqual(a, b) ) {\n        // Immediately update because you'll see it come in later\n        this.getGroups();\n      }\n    },\n\n    product(a, b) {\n      if ( !isEqual(a, b) ) {\n        // Immediately update because you'll see it come in later\n        this.getGroups();\n      }\n    },\n\n    $route(a, b) {\n      this.$nextTick(() => this.syncNav());\n    },\n\n  },\n\n  computed: {\n    ...mapState(['managementReady', 'clusterReady']),\n    ...mapGetters(['productId', 'clusterId', 'currentProduct', 'isSingleProduct', 'namespaceMode', 'isExplorer', 'isVirtualCluster']),\n    ...mapGetters({ locale: 'i18n/selectedLocaleLabel', availableLocales: 'i18n/availableLocales' }),\n    ...mapGetters('type-map', ['activeProducts']),\n\n    favoriteTypes: mapPref(FAVORITE_TYPES),\n\n    showClusterTools() {\n      return this.isExplorer &&\n             this.$store.getters['cluster/canList'](CATALOG.CLUSTER_REPO) &&\n             this.$store.getters['cluster/canList'](CATALOG.APP);\n    },\n\n    supportLink() {\n      const product = this.currentProduct;\n\n      if (product?.supportRoute) {\n        return { ...product.supportRoute, params: { ...product.supportRoute.params, cluster: this.clusterId } };\n      }\n\n      return { name: `c-cluster-${ product?.name }-support` };\n    },\n\n    displayVersion() {\n      if (this.isSingleProduct?.getVersionInfo) {\n        return this.isSingleProduct?.getVersionInfo(this.$store);\n      }\n      const { displayVersion } = getVersionInfo(this.$store);\n\n      return displayVersion;\n    },\n\n    singleProductAbout() {\n      return this.isSingleProduct?.aboutPage;\n    },\n\n    harvesterVersion() {\n      return this.$store.getters['cluster/byId'](HCI.SETTING, 'server-version')?.value || 'unknown';\n    },\n\n    showProductFooter() {\n      if (this.isVirtualProduct) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    isVirtualProduct() {\n      return this.currentProduct.name === HARVESTER;\n    },\n\n    allNavLinks() {\n      if ( !this.clusterId || !this.$store.getters['cluster/schemaFor'](UI.NAV_LINK) ) {\n        return [];\n      }\n\n      return this.$store.getters['cluster/all'](UI.NAV_LINK);\n    },\n\n    allSchemas() {\n      const managementReady = this.managementReady;\n      const product = this.currentProduct;\n\n      if ( !managementReady || !product ) {\n        return [];\n      }\n\n      return this.$store.getters[`${ product.inStore }/all`](SCHEMA);\n    },\n\n    counts() {\n      const managementReady = this.managementReady;\n      const product = this.currentProduct;\n\n      if ( !managementReady || !product ) {\n        return {};\n      }\n\n      const inStore = product.inStore;\n\n      // So that there's something to watch for updates\n      if ( this.$store.getters[`${ inStore }/haveAll`](COUNT) ) {\n        const counts = this.$store.getters[`${ inStore }/all`](COUNT)[0].counts;\n\n        return counts;\n      }\n\n      return {};\n    },\n\n    namespaces() {\n      return this.$store.getters['activeNamespaceCache'];\n    },\n  },\n  methods: {\n    /**\n     * Fetch navigation by creating groups from product schemas\n     */\n    getGroups() {\n      if ( this.gettingGroups ) {\n        return;\n      }\n      this.gettingGroups = true;\n\n      if ( !this.clusterReady ) {\n        clear(this.groups);\n        this.gettingGroups = false;\n\n        return;\n      }\n\n      const currentProduct = this.$store.getters['productId'];\n      let namespaces = null;\n\n      if ( !this.$store.getters['isAllNamespaces'] ) {\n        const namespacesObject = this.$store.getters['namespaces']();\n\n        namespaces = Object.keys(namespacesObject);\n      }\n\n      // Always show cluster-level types, regardless of the namespace filter\n      const namespaceMode = 'both';\n      const out = [];\n      const loadProducts = this.isExplorer ? [EXPLORER] : [];\n\n      const productMap = this.activeProducts.reduce((acc, p) => {\n        return { ...acc, [p.name]: p };\n      }, {});\n\n      if ( this.isExplorer ) {\n        for ( const product of this.activeProducts ) {\n          if ( product.inStore === 'cluster' ) {\n            addObject(loadProducts, product.name);\n          }\n        }\n      }\n\n      // This should already have come into the list from above, but in case it hasn't...\n      addObject(loadProducts, currentProduct);\n\n      this.getProductsGroups(out, loadProducts, namespaceMode, namespaces, productMap);\n      this.getExplorerGroups(out);\n\n      replaceWith(this.groups, ...sortBy(out, ['weight:desc', 'label']));\n\n      this.gettingGroups = false;\n    },\n\n    getProductsGroups(out, loadProducts, namespaceMode, namespaces, productMap) {\n      const clusterId = this.$store.getters['clusterId'];\n      const currentType = this.$route.params.resource || '';\n\n      for ( const productId of loadProducts ) {\n        const modes = [BASIC];\n\n        if ( productId === NAVLINKS ) {\n          // Navlinks produce their own top-level nav items so don't need to show it as a product.\n          continue;\n        }\n\n        if ( productId === EXPLORER ) {\n          modes.push(FAVORITE);\n          modes.push(USED);\n        }\n\n        for ( const mode of modes ) {\n          const types = this.$store.getters['type-map/allTypes'](productId, mode) || {};\n\n          const more = this.$store.getters['type-map/getTree'](productId, mode, types, clusterId, namespaceMode, namespaces, currentType);\n\n          if ( productId === EXPLORER || !this.isExplorer ) {\n            addObjects(out, more);\n          } else {\n            const root = more.find((x) => x.name === 'root');\n            const other = more.filter((x) => x.name !== 'root');\n\n            const group = {\n              name:     productId,\n              label:    this.$store.getters['i18n/withFallback'](`product.${ productId }`, null, ucFirst(productId)),\n              children: [...(root?.children || []), ...other],\n              weight:   productMap[productId]?.weight || 0,\n            };\n\n            addObject(out, group);\n          }\n        }\n      }\n    },\n\n    getExplorerGroups(out) {\n      if ( this.isExplorer ) {\n        const allNavLinks = this.allNavLinks;\n        const toAdd = [];\n        const haveGroup = {};\n\n        for ( const obj of allNavLinks ) {\n          if ( !obj.link ) {\n            continue;\n          }\n\n          const groupLabel = obj.spec.group;\n          const groupSlug = obj.normalizedGroup;\n\n          const entry = {\n            name:        `link-${ obj._key }`,\n            link:        obj.link,\n            target:      obj.actualTarget,\n            label:       obj.labelDisplay,\n            sideLabel:   obj.spec.sideLabel,\n            iconSrc:     obj.spec.iconSrc,\n            description: obj.spec.description,\n          };\n\n          // If there's a spec.group (groupLabel), all entries with that name go under one nav group\n          if ( groupSlug ) {\n            if ( haveGroup[groupSlug] ) {\n              continue;\n            }\n\n            haveGroup[groupSlug] = true;\n\n            toAdd.push({\n              name:     `navlink-group-${ groupSlug }`,\n              label:    groupLabel,\n              isRoot:   true,\n              // This is the item that actually shows up in the nav, since this outer group will be invisible\n              children: [\n                {\n                  name:  `navlink-child-${ groupSlug }`,\n                  label: groupLabel,\n                  route: {\n                    name:   'c-cluster-navlinks-group',\n                    params: {\n                      cluster: this.clusterId,\n                      group:   groupSlug,\n                    }\n                  },\n                }\n              ],\n              weight: -100,\n            });\n          } else {\n            toAdd.push({\n              name:     `navlink-${ entry.name }`,\n              label:    entry.label,\n              isRoot:   true,\n              // This is the item that actually shows up in the nav, since this outer group will be invisible\n              children: [entry],\n              weight:   -100,\n            });\n          }\n        }\n\n        addObjects(out, toAdd);\n      }\n    },\n\n    groupSelected(selected) {\n      this.$refs.groups.forEach((grp) => {\n        if (grp.canCollapse) {\n          grp.isExpanded = (grp.group.name === selected.name);\n        }\n      });\n    },\n\n    collapseAll() {\n      this.$refs.groups.forEach((grp) => {\n        grp.isExpanded = false;\n      });\n    },\n\n    switchLocale(locale) {\n      this.$store.dispatch('i18n/switchTo', locale);\n    },\n\n    syncNav() {\n      const refs = this.$refs.groups;\n\n      if (refs) {\n        // Only expand one group - so after the first has been expanded, no more will\n        // This prevents the 'More Resources' group being expanded in addition to the normal group\n        let canExpand = true;\n        const expanded = refs.filter((grp) => grp.isExpanded)[0];\n\n        if (expanded && expanded.hasActiveRoute()) {\n          this.$nextTick(() => expanded.syncNav());\n\n          return;\n        }\n        refs.forEach((grp) => {\n          if (!grp.group.isRoot) {\n            grp.isExpanded = false;\n            if (canExpand) {\n              const isActive = grp.hasActiveRoute();\n\n              if (isActive) {\n                grp.isExpanded = true;\n                canExpand = false;\n                this.$nextTick(() => grp.syncNav());\n              }\n            }\n          }\n        });\n      }\n    },\n  },\n};\n</script>\n\n<template>\n  <nav class=\"side-nav\">\n    <!-- Actual nav -->\n    <div class=\"nav\">\n      <template v-for=\"(g) in groups\">\n        <Group\n          ref=\"groups\"\n          :key=\"g.name\"\n          id-prefix=\"\"\n          class=\"package\"\n          :group=\"g\"\n          :can-collapse=\"!g.isRoot\"\n          :show-header=\"!g.isRoot\"\n          @selected=\"groupSelected($event)\"\n          @expand=\"groupSelected($event)\"\n        />\n      </template>\n    </div>\n    <!-- Cluster tools -->\n    <n-link\n      v-if=\"showClusterTools\"\n      tag=\"div\"\n      class=\"tools\"\n      :to=\"{name: 'c-cluster-explorer-tools', params: {cluster: clusterId}}\"\n    >\n      <a\n        class=\"tools-button\"\n        @click=\"collapseAll()\"\n      >\n        <i class=\"icon icon-gear\" />\n        <span>{{ t('nav.clusterTools') }}</span>\n      </a>\n    </n-link>\n    <!-- SideNav footer area (seems to be tied to harvester) -->\n    <div\n      v-if=\"showProductFooter\"\n      class=\"footer\"\n    >\n      <!-- support link -->\n      <nuxt-link\n        :to=\"supportLink\"\n        class=\"pull-right\"\n      >\n        {{ t('nav.support', {hasSupport: true}) }}\n      </nuxt-link>\n      <!-- version number -->\n      <span\n        v-clean-tooltip=\"{content: displayVersion, placement: 'top'}\"\n        class=\"clip version text-muted\"\n      >\n        {{ displayVersion }}\n      </span>\n\n      <!-- locale selector -->\n      <span v-if=\"isSingleProduct\">\n        <v-popover\n          popover-class=\"localeSelector\"\n          placement=\"top\"\n          trigger=\"click\"\n        >\n          <a\n            data-testid=\"locale-selector\"\n            class=\"locale-chooser\"\n          >\n            {{ locale }}\n          </a>\n\n          <template slot=\"popover\">\n            <ul\n              class=\"list-unstyled dropdown\"\n              style=\"margin: -1px;\"\n            >\n              <li\n                v-for=\"(label, name) in availableLocales\"\n                :key=\"name\"\n                class=\"hand\"\n                @click=\"switchLocale(name)\"\n              >\n                {{ label }}\n              </li>\n            </ul>\n          </template>\n        </v-popover>\n      </span>\n    </div>\n    <!-- SideNav footer alternative -->\n    <div\n      v-else\n      class=\"version text-muted flex\"\n    >\n      <nuxt-link\n        v-if=\"singleProductAbout\"\n        :to=\"singleProductAbout\"\n      >\n        {{ displayVersion }}\n      </nuxt-link>\n      <template v-else>\n        <span>{{ displayVersion }}</span>\n        <span\n          v-if=\"isVirtualCluster && isExplorer\"\n          v-tooltip=\"{content: harvesterVersion, placement: 'top'}\"\n          class=\"clip text-muted ml-5\"\n        >\n          (Harvester-{{ harvesterVersion }})\n        </span>\n      </template>\n    </div>\n  </nav>\n</template>\n\n<style lang=\"scss\" scoped>\n  .side-nav {\n    display: flex;\n    flex-direction: column;\n    .nav {\n      flex: 1;\n      overflow-y: auto;\n    }\n\n    position: relative;\n    background-color: var(--nav-bg);\n    border-right: var(--nav-border-size) solid var(--nav-border);\n    overflow-y: auto;\n\n    // h6 is used in Group element\n    ::v-deep h6 {\n      margin: 0;\n      letter-spacing: normal;\n      line-height: 15px;\n\n      A { padding-left: 0; }\n    }\n\n    .tools {\n      display: flex;\n      margin: 10px;\n      text-align: center;\n\n      A {\n        align-items: center;\n        border: 1px solid var(--border);\n        border-radius: 5px;\n        color: var(--body-text);\n        display: flex;\n        justify-content: center;\n        outline: 0;\n        flex: 1;\n        padding: 10px;\n\n        &:hover {\n          background: var(--nav-hover);\n          text-decoration: none;\n        }\n\n        > I {\n          margin-right: 4px;\n        }\n      }\n\n      &.nuxt-link-active:not(:hover) {\n        A {\n          background-color: var(--nav-active);\n        }\n      }\n    }\n\n    .version {\n      cursor: default;\n      margin: 0 10px 10px 10px;\n    }\n\n    .footer {\n      margin: 20px;\n\n      display: flex;\n      flex: 0;\n      flex-direction: row;\n      > * {\n        flex: 1;\n        color: var(--link);\n\n        &:last-child {\n          text-align: right;\n        }\n\n        &:first-child {\n          text-align: left;\n        }\n\n        text-align: center;\n      }\n\n      .version {\n        cursor: default;\n        margin: 0px;\n      }\n\n      .locale-chooser {\n        cursor: pointer;\n      }\n    }\n  }\n\n  .flex {\n    display: flex;\n  }\n\n</style>\n"],"mappings":"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"}]}