{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/fleet/ForceDirectedTreeChart/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/fleet/ForceDirectedTreeChart/index.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["d3","STATES","BadgeState","getChartIcon","name","components","props","data","type","Array","Object","required","fdcConfig","dataWatcher","undefined","parsedInfo","root","allNodesData","allLinks","rootNode","node","link","svg","zoom","simulation","isChartFirstRendered","isChartFirstRenderAnimationFinished","moreInfo","methods","watcherFunction","newValue","_this","length","parseData","setDetailsInfo","active","renderChart","updateChart","flattenedData","flatten","hasStatusChange","forEach","item","index","findIndex","nodeData","matchingId","state","stateLabel","stateColor","_this2","scaleExtent","on","zoomed","transform","zoomIdentity","scale","translate","append","attr","call","forceSimulation","force","forceManyBody","strength","simulationParams","fdcStrength","distanceMax","fdcDistanceMax","forceCollide","fdcForceCollide","forceCenter","chartWidth","chartHeight","alphaDecay","fdcAlphaDecay","ticked","zoomFit","isStartingData","isSettingNodesAndLinks","_this3","hierarchy","links","selectAll","d","target","id","exit","remove","linkEnter","enter","style","merge","mainNodeClass","nodeEnter","ev","drag","dragStarted","dragging","dragEnded","setNodeRadius","html","icon","fetchNodeIcon","nodeImagePosition","nodeImageSize","nodes","forceLink","distance","_d$data","_d$data2","lowerCaseStatus","toLowerCase","defaultClassArray","color","push","concat","extendedClassArray","extendNodeClass","join","_this$fdcConfig$nodeD","nodeDimensions","radius","_this$fdcConfig$nodeD2","size","_this$fdcConfig$nodeD3","position","toUpdate","_this4","assign","infoDetails","i","select","paddingBuffer","chartDimentions","getBoundingClientRect","chartCoordinates","getBBox","parent","parentElement","fullWidth","clientWidth","fullHeight","clientHeight","width","height","midX","x","midY","y","Math","max","source","alphaTarget","restart","fx","fy","recurse","children","mounted","$watch","watcherProp","unmounted"],"sources":["node_modules/@rancher/shell/components/fleet/ForceDirectedTreeChart/index.vue"],"sourcesContent":["<script>\nimport * as d3 from 'd3';\nimport { STATES } from '@shell/plugins/dashboard-store/resource-class';\nimport { BadgeState } from '@components/BadgeState';\nimport { getChartIcon } from './chartIcons.js';\n\nexport default {\n  name:       'ForceDirectedTreeChart',\n  components: { BadgeState },\n  props:      {\n    data: {\n      type:     [Array, Object],\n      required: true\n    },\n    fdcConfig: {\n      type:     Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      dataWatcher:                         undefined,\n      parsedInfo:                          undefined,\n      root:                                undefined,\n      allNodesData:                        undefined,\n      allLinks:                            undefined,\n      rootNode:                            undefined,\n      node:                                undefined,\n      link:                                undefined,\n      svg:                                 undefined,\n      zoom:                                undefined,\n      simulation:                          undefined,\n      isChartFirstRendered:                false,\n      isChartFirstRenderAnimationFinished: false,\n      moreInfo:                            {}\n    };\n  },\n  methods: {\n    watcherFunction(newValue) {\n      if (newValue.length) {\n        if (!this.isChartFirstRendered) {\n          this.parsedInfo = this.fdcConfig.parseData(this.data);\n\n          // set details info and set active state for node\n          this.setDetailsInfo(this.parsedInfo, false);\n          this.parsedInfo.active = true;\n\n          // render and update chart\n          this.renderChart();\n          this.updateChart(true, true);\n          this.isChartFirstRendered = true;\n\n          // here we just look for changes in the status of the nodes and update them accordingly\n        } else {\n          const parsedInfo = this.fdcConfig.parseData(this.data);\n          const flattenedData = this.flatten(parsedInfo);\n          let hasStatusChange = false;\n\n          flattenedData.forEach((item) => {\n            const index = this.allNodesData.findIndex((nodeData) => item.matchingId === nodeData.data.matchingId);\n\n            // apply status change to each node\n            if (index > -1 && this.allNodesData[index].data.state !== item.state) {\n              this.allNodesData[index].data.state = item.state;\n              this.allNodesData[index].data.stateLabel = item.stateLabel;\n              this.allNodesData[index].data.stateColor = item.stateColor;\n              hasStatusChange = true;\n\n              // if node is selected (active), update details info\n              if (this.allNodesData[index].data.active) {\n                this.setDetailsInfo(this.allNodesData[index].data, false);\n              }\n            }\n          });\n\n          if (hasStatusChange) {\n            this.updateChart(false, false);\n          }\n        }\n      }\n    },\n    renderChart() {\n      this.zoom = d3.zoom().scaleExtent([1 / 8, 16]).on('zoom', this.zoomed);\n      const transform = d3.zoomIdentity.scale(1).translate(0, 0);\n\n      this.rootNode = this.svg.append('g')\n        .attr('class', 'root-node');\n\n      this.svg.call(this.zoom);\n      this.svg.call(this.zoom.transform, transform);\n\n      this.simulation = d3.forceSimulation()\n        .force('charge', d3.forceManyBody().strength(this.fdcConfig.simulationParams.fdcStrength).distanceMax(this.fdcConfig.simulationParams.fdcDistanceMax))\n        .force('collision', d3.forceCollide(this.fdcConfig.simulationParams.fdcForceCollide))\n        .force('center', d3.forceCenter( this.fdcConfig.chartWidth / 2, this.fdcConfig.chartHeight / 2 ))\n        .alphaDecay(this.fdcConfig.simulationParams.fdcAlphaDecay)\n        .on('tick', this.ticked)\n        .on('end', () => {\n          if (!this.isChartFirstRenderAnimationFinished) {\n            this.zoomFit();\n            this.isChartFirstRenderAnimationFinished = true;\n          }\n        });\n    },\n    updateChart(isStartingData, isSettingNodesAndLinks) {\n      if (isStartingData) {\n        this.root = d3.hierarchy(this.parsedInfo);\n      }\n\n      if (isSettingNodesAndLinks) {\n        this.allNodesData = this.flatten(this.root);\n        this.allLinks = this.root.links();\n      }\n\n      this.link = this.rootNode\n        .selectAll('.link')\n        .data(this.allLinks, (d) => {\n          return d.target.id;\n        });\n\n      this.link.exit().remove();\n\n      const linkEnter = this.link\n        .enter()\n        .append('line')\n        .attr('class', 'link')\n        .style('opacity', '0.2')\n        .style('stroke-width', 4);\n\n      this.link = linkEnter.merge(this.link);\n\n      this.node = this.rootNode\n        .selectAll('.node')\n        .data(this.allNodesData, (d) => {\n          return d.id;\n        })\n        // this is where we define which prop changes with any data update (status color)\n        .attr('class', this.mainNodeClass);\n\n      this.node.exit().remove();\n\n      // define the node styling and function\n      const nodeEnter = this.node\n        .enter()\n        .append('g')\n        .attr('class', this.mainNodeClass)\n        .style('opacity', 1)\n        .on('click', (ev, d) => {\n          this.setDetailsInfo(d.data, true);\n        })\n        .call(d3.drag()\n          .on('start', this.dragStarted)\n          .on('drag', this.dragging)\n          .on('end', this.dragEnded));\n\n      // draw status circle (inherits color from main node)\n      nodeEnter.append('circle')\n        .attr('r', this.setNodeRadius);\n\n      nodeEnter.append('circle')\n        .attr('r', (d) => {\n          return this.setNodeRadius(d) - 5;\n        })\n        .attr('class', 'node-hover-layer');\n\n      nodeEnter.append('svg').html((d) => {\n        const icon = this.fdcConfig.fetchNodeIcon(d);\n\n        return getChartIcon(icon);\n      })\n        .attr('x', this.nodeImagePosition)\n        .attr('y', this.nodeImagePosition)\n        .attr('height', this.nodeImageSize)\n        .attr('width', this.nodeImageSize);\n\n      this.node = nodeEnter.merge(this.node);\n\n      this.simulation.nodes(this.allNodesData);\n      this.simulation.force('link', d3.forceLink()\n        .id((d) => {\n          return d.id;\n        })\n        .distance(100)\n        .links(this.allLinks)\n      );\n    },\n    mainNodeClass(d) {\n      const lowerCaseStatus = d.data?.state ? d.data.state.toLowerCase() : 'unkown_status';\n      const defaultClassArray = ['node'];\n\n      if (STATES[lowerCaseStatus] && STATES[lowerCaseStatus].color) {\n        defaultClassArray.push(`node-${ STATES[lowerCaseStatus].color }`);\n      } else {\n        defaultClassArray.push(`node-default-fill`);\n      }\n\n      // node active (clicked)\n      if (d.data?.active) {\n        defaultClassArray.push('active');\n      }\n\n      // here we extend the node classes (different chart types)\n      const extendedClassArray = this.fdcConfig.extendNodeClass(d).concat(defaultClassArray);\n\n      return extendedClassArray.join(' ');\n    },\n    setNodeRadius(d) {\n      const { radius } = this.fdcConfig.nodeDimensions(d);\n\n      return radius;\n    },\n    nodeImageSize(d) {\n      const { size } = this.fdcConfig.nodeDimensions(d);\n\n      return size;\n    },\n    nodeImagePosition(d) {\n      const { position } = this.fdcConfig.nodeDimensions(d);\n\n      return position;\n    },\n    setDetailsInfo(data, toUpdate) {\n      // get the data to be displayed on info box, per each different chart\n      this.moreInfo = Object.assign([], this.fdcConfig.infoDetails(data));\n\n      // update to the chart is needed when active state changes\n      if (toUpdate) {\n        this.allNodesData.forEach((item, i) => {\n          if (item.data.matchingId === data.matchingId) {\n            this.allNodesData[i].data.active = true;\n          } else {\n            this.allNodesData[i].data.active = false;\n          }\n        });\n\n        this.updateChart(false, false);\n      }\n    },\n    zoomFit() {\n      const rootNode = d3.select('.root-node');\n      const paddingBuffer = 30;\n\n      const chartDimentions = rootNode.node().getBoundingClientRect();\n      const chartCoordinates = rootNode.node().getBBox();\n      const parent = rootNode.node().parentElement;\n      const fullWidth = parent.clientWidth;\n      const fullHeight = parent.clientHeight;\n      const width = chartDimentions.width;\n      const height = chartDimentions.height;\n      const midX = chartCoordinates.x + width / 2;\n      const midY = chartCoordinates.y + height / 2;\n\n      if (width === 0 || height === 0) {\n        return;\n      } // nothing to fit\n\n      const scale = 1 / Math.max(width / (fullWidth - paddingBuffer), height / (fullHeight - paddingBuffer));\n      const translate = [fullWidth / 2 - scale * midX, fullHeight / 2 - scale * midY];\n\n      const transform = d3.zoomIdentity\n        .translate(translate[0], translate[1])\n        .scale(scale);\n\n      // this update the cached zoom state!!!!! very important so that any transforms from user interaction keep this base!\n      this.svg.call(this.zoom.transform, transform);\n    },\n    ticked() {\n      this.link\n        .attr('x1', (d) => {\n          return d.source.x;\n        })\n        .attr('y1', (d) => {\n          return d.source.y;\n        })\n        .attr('x2', (d) => {\n          return d.target.x;\n        })\n        .attr('y2', (d) => {\n          return d.target.y;\n        });\n\n      this.node\n        .attr('transform', (d) => {\n          return `translate(${ d.x }, ${ d.y })`;\n        });\n    },\n    dragStarted(ev, d) {\n      if (!ev.active) {\n        this.simulation.alphaTarget(0.3).restart();\n      }\n      d.fx = d.x;\n      d.fy = d.y;\n    },\n    dragging(ev, d) {\n      d.fx = ev.x;\n      d.fy = ev.y;\n    },\n    dragEnded(ev, d) {\n      if (!ev.active) {\n        this.simulation.alphaTarget(0);\n      }\n      d.fx = undefined;\n      d.fy = undefined;\n    },\n    zoomed(ev) {\n      this.rootNode.attr('transform', ev.transform);\n    },\n    flatten(root) {\n      const nodes = [];\n      let i = 0;\n\n      function recurse(node) {\n        if (node.children) {\n          node.children.forEach(recurse);\n        }\n        if (!node.id) {\n          node.id = ++i;\n        } else {\n          ++i;\n        }\n        nodes.push(node);\n      }\n      recurse(root);\n\n      return nodes;\n    }\n  },\n  mounted() {\n    // start by appending SVG to define height of chart area\n    this.svg = d3.select('#tree').append('svg')\n      .attr('viewBox', `0 0 ${ this.fdcConfig.chartWidth } ${ this.fdcConfig.chartHeight }`)\n      .attr('preserveAspectRatio', 'none');\n\n    // set watcher for the chart data\n    this.dataWatcher = this.$watch(this.fdcConfig.watcherProp, function(newValue) {\n      this.watcherFunction(newValue);\n    });\n  },\n  unmounted() {\n    this.dataWatcher();\n  },\n};\n</script>\n\n<template>\n  <div>\n    <div class=\"chart-container\">\n      <!-- loading status container -->\n      <div\n        v-if=\"!isChartFirstRenderAnimationFinished\"\n        class=\"loading-container\"\n      >\n        <p v-show=\"!isChartFirstRendered\">\n          {{ t('fleet.fdc.loadingChart') }}\n        </p>\n        <p v-show=\"isChartFirstRendered && !isChartFirstRenderAnimationFinished\">\n          {{ t('fleet.fdc.renderingChart') }}\n        </p>\n        <i class=\"mt-10 icon-spinner icon-spin\" />\n      </div>\n      <!-- main div for svg container -->\n      <div id=\"tree\" />\n      <!-- info box -->\n      <div class=\"more-info-container\">\n        <div class=\"more-info\">\n          <table>\n            <tr\n              v-for=\"(item, i) in moreInfo\"\n              :key=\"i\"\n            >\n              <td\n                v-if=\"item.type !== 'single-error'\"\n                :class=\"{'align-middle': item.type === 'state-badge'}\"\n              >\n                <span class=\"more-info-item-label\">{{ t(item.labelKey) }}:</span>\n              </td>\n              <!-- title template -->\n              <td v-if=\"item.type === 'title-link'\">\n                <span v-if=\"item.valueObj.detailLocation\">\n                  <n-link\n                    :to=\"item.valueObj.detailLocation\"\n                  >\n                    {{ item.valueObj.id }}\n                  </n-link>\n                </span>\n                <span v-else>{{ item.valueObj.id }}</span>\n              </td>\n              <!-- state-badge template -->\n              <td\n                v-else-if=\"item.type === 'state-badge'\"\n                class=\"align-middle\"\n              >\n                <span>\n                  <BadgeState\n                    :color=\"`bg-${item.valueObj.stateColor}`\"\n                    :label=\"item.valueObj.stateLabel\"\n                    class=\"state-bagde\"\n                  />\n                </span>\n              </td>\n              <!-- single-error template -->\n              <td\n                v-if=\"item.type === 'single-error'\"\n                class=\"single-error\"\n                colspan=\"2\"\n              >\n                <p>{{ item.value }}</p>\n              </td>\n              <!-- default template -->\n              <td v-else>\n                {{ item.value }}\n              </td>\n            </tr>\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\">\n.chart-container {\n  display: flex;\n  background-color: var(--body-bg);\n  position: relative;\n  border: 1px solid var(--border);\n  border-radius: var(--border-radius);\n  min-height: 100px;\n\n  .loading-container {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    border-radius: var(--border-radius);\n    background-color: var(--body-bg);\n    z-index: 2;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n\n    i {\n      font-size: 24px;\n    }\n  }\n\n  #tree {\n    width: 70%;\n    height: fit-content;\n\n    svg {\n      margin-top: 3px;\n    }\n\n    .link {\n      stroke: var(--darker);\n    }\n\n    .node {\n      cursor: pointer;\n\n      &.active {\n        .node-hover-layer {\n          display: block;\n        }\n      }\n\n      &.repo.active > circle {\n        transform: scale(1.2);\n      }\n\n      &.bundle.active > circle {\n        transform: scale(1.35);\n      }\n\n      &.bundle-deployment.active > circle {\n        transform: scale(1.6);\n      }\n\n      &.node-default-fill > circle,\n      &.repo > circle {\n        fill: var(--muted);\n      }\n      &:not(.repo).node-success > circle {\n        fill: var(--success);\n      }\n      &:not(.repo).node-info > circle {\n        fill: var(--info);\n      }\n      &:not(.repo).node-warning > circle {\n        fill: var(--warning);\n      }\n      &:not(.repo).node-error > circle {\n        fill: var(--error);\n      }\n\n      .node-hover-layer {\n        stroke: var(--body-bg);\n        stroke-width: 2;\n        display: none;\n      }\n    }\n  }\n\n  .more-info-container {\n    width: 30%;\n    position: relative;\n    border-left: 1px solid var(--border);\n    background-color: var(--body-bg);\n    border-top-right-radius: var(--border-radius);\n    border-bottom-right-radius: var(--border-radius);\n    overflow: hidden;\n\n    .more-info {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right:0;\n      bottom:0;\n      width: 100%;\n      padding: 20px;\n      border-top-right-radius: var(--border-radius);\n      border-bottom-right-radius: var(--border-radius);\n      overflow-y: auto;\n\n      table {\n        td {\n          vertical-align: top;\n          padding-bottom: 10px;\n\n          &.align-middle {\n            vertical-align: middle;\n          }\n        }\n\n        .more-info-item-label {\n          color: var(--darker);\n          margin-right: 8px;\n        }\n\n        .single-error {\n          color: var(--error);\n        }\n\n        p {\n          line-height: 1.5em;\n        }\n      }\n    }\n  }\n}\n</style>\n"],"mappings":"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"}]}