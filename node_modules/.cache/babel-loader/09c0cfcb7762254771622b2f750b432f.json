{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js??ref--17-0!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js??ref--17-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/gc/gc.ts","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/gc/gc.ts","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/ts-loader/index.js","mtime":1716430466133}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["SETTING","COUNT","MANAGEMENT","GC_DEFAULTS","GarbageCollect","_this","_classCallCheck","cachedGcPrefs","cachedGcPrefsStamp","debugLog","ENABLE_DEBUG_LOGGING","_console","_len","arguments","length","args","Array","_key","console","debug","apply","concat","gcLastRun","getUiPerfGarbageCollection","rootState","uiPerfSetting","_a","management","types","list","find","s","id","UI_PERFORMANCE","value","undefined","stamp","metadata","generation","resourceVersion","uiPerfSettingParsed","JSON","parse","garbageCollection","lastAccessedCache","lastRouteChange","_createClass","key","gcEnabledAll","pseudoCtx","type","gcEnabledForStore","state","gcEnabledSetting","gcEnabledForType","uiPerfGarbageCollection","enabled","config","supportsGc","getters","gcIgnoreTypes","gcEnabledInterval","enabledInterval","interval","gcEnabledRoute","enabledOnNavigate","garbageCollect","ctx","_this2","ignoreTypes","now","Date","getTime","GC_RE_RUN_GAP","gcd","dispatch","clusterReady","maxAge","ageThreshold","maxCount","countThreshold","store","namespace","Object","entries","forEach","_ref","_ref2","_slicedToArray","lastAccessed","countFromResource","all","counts","summary","count","currentCount","e","keys","info","gcUpdateLastAccessed","gcUpdateRouteChanged","gcResetStore","gcResetType","gc"],"sources":["/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/utils/gc/gc.ts"],"sourcesContent":["import { SETTING } from '@shell/config/settings';\nimport { COUNT, MANAGEMENT } from '@shell/config/types';\nimport { GC_DEFAULTS, GC_PREFERENCES } from './gc-types';\n\nclass GarbageCollect {\n  private static ENABLE_DEBUG_LOGGING = false;\n\n  /**\n   * Don't run GC if it's been run within 5 seconds\n   */\n  private static GC_RE_RUN_GAP = 1000 * 5;\n\n  private cachedGcPrefs: GC_PREFERENCES = GC_DEFAULTS;\n\n  private cachedGcPrefsStamp = '';\n\n  private debugLog = (...args: any) => {\n    if (GarbageCollect.ENABLE_DEBUG_LOGGING) {\n      console.debug('GC', ...args); // eslint-disable-line no-console\n    }\n  };\n\n  /**\n   * Time the GC last ran\n   */\n  private gcLastRun: number | null = 0;\n\n  /**\n   * To avoid JSON.parse on the `ui-performance` setting keep a local cache\n   */\n  private getUiPerfGarbageCollection = (rootState: any) => {\n    const uiPerfSetting = rootState.management.types[MANAGEMENT.SETTING]?.list.find((s: any) => s.id === SETTING.UI_PERFORMANCE);\n\n    if (!uiPerfSetting || !uiPerfSetting.value) {\n      // Could be in the process of logging out\n      return undefined;\n    }\n    const stamp = `${ uiPerfSetting.metadata.generation }-${ uiPerfSetting.metadata.resourceVersion }`;\n\n    if (this.cachedGcPrefsStamp !== stamp) {\n      this.debugLog(`Updating ${ SETTING.UI_PERFORMANCE } cache`);\n      this.cachedGcPrefsStamp = stamp;\n      const uiPerfSettingParsed = JSON.parse(uiPerfSetting.value);\n\n      this.cachedGcPrefs = uiPerfSettingParsed.garbageCollection;\n    }\n\n    return this.cachedGcPrefs;\n  };\n\n  /**\n   * The last time a resource was accessed by either find or getters style functions\n   */\n  private lastAccessedCache: {\n    [store: string]: {\n      [type: string]: number;\n    }\n  } = {}\n\n  /**\n   * Track when a logged in route changes.\n   */\n  private lastRouteChange = 0;\n\n  // ------------- GC Enabled ---------------------\n\n  gcEnabledAll(pseudoCtx: any, type: string) {\n    return this.gcEnabledForStore(pseudoCtx.state) && this.gcEnabledSetting(pseudoCtx) && this.gcEnabledForType(pseudoCtx, type);\n  }\n\n  gcEnabledSetting(pseudoCtx: any) {\n    const { rootState } = pseudoCtx;\n\n    // Don't use a getter... as we'll end up triggering ourselves again\n    const uiPerfGarbageCollection = this.getUiPerfGarbageCollection(rootState);\n\n    return uiPerfGarbageCollection?.enabled;\n  }\n\n  gcEnabledForStore(state: any) {\n    return state?.config?.supportsGc;\n  }\n\n  /**\n   * Store can require certain types are not GC'd (for example `cluster` and `schema`s, `counts`, etc)\n   */\n  gcEnabledForType(pseudoCtx: any, type: string) {\n    const { getters } = pseudoCtx;\n\n    if (!type || getters.gcIgnoreTypes[type]) {\n      return false;\n    }\n\n    return true;\n  }\n\n  gcEnabledInterval(pseudoCtx: any) {\n    const { rootState } = pseudoCtx;\n\n    // Don't use a getter... as we'll end up triggering ourselves again\n    const uiPerfGarbageCollection = this.getUiPerfGarbageCollection(rootState);\n\n    return {\n      enabled:  uiPerfGarbageCollection?.enabledInterval,\n      interval: uiPerfGarbageCollection?.interval || 0\n    };\n  }\n\n  gcEnabledRoute(pseudoCtx: any) {\n    const { rootState } = pseudoCtx;\n\n    // Don't use a getter... as we'll end up triggering ourselves again\n    const uiPerfGarbageCollection = this.getUiPerfGarbageCollection(rootState);\n\n    return uiPerfGarbageCollection?.enabledOnNavigate;\n  }\n\n  // ------------- GC (actual) ---------------------\n\n  /**\n   * Remove stale resource types from the store and stop watching them for changes\n   */\n  garbageCollect(ctx: any, ignoreTypes: {[type: string]: boolean} = {}) {\n    const now = new Date().getTime();\n\n    // Is gc currently running OR has run in the past GC_RE_RUN_GAP return early\n    if (this.gcLastRun === null || now - this.gcLastRun < GarbageCollect.GC_RE_RUN_GAP) {\n      this.debugLog('Skipping (running or recently run)', this.gcLastRun ? new Date(this.gcLastRun) : 'running');\n\n      return;\n    }\n\n    this.gcLastRun = null;\n    const gcd: {[type: string]: number} = {};\n\n    try {\n      const { getters, rootState, dispatch } = ctx;\n\n      if (!rootState.clusterReady) {\n        this.debugLog('Skipping (cluster not ready)');\n        this.gcLastRun = new Date().getTime();\n\n        return ;\n      }\n      this.debugLog(`------ Started ------`);\n\n      const uiPerfGarbageCollection = this.getUiPerfGarbageCollection(rootState);\n\n      if (!uiPerfGarbageCollection) {\n        return ;\n      }\n      const maxAge = uiPerfGarbageCollection.ageThreshold * 1000;\n      const maxCount = uiPerfGarbageCollection.countThreshold;\n\n      this.debugLog(`Max Age: ${ maxAge }. Max Count: ${ maxCount }`);// , 'Cache', this.lastAccessedCache\n\n      const store = ctx.state.config.namespace;\n\n      // this.debugLog('Cache', this.lastAccessedCache);\n\n      Object.entries((this.lastAccessedCache[store] || {})).forEach(([type, lastAccessed]) => {\n        if (!lastAccessed) {\n          // There's no last accessed time... gc is probably disabled in another way\n          this.debugLog(`${ type }: Skipping (no accessed time)`);\n\n          return;\n        }\n\n        if (!this.gcEnabledForType(ctx, type)) {\n          // This specific store is telling us to ignore the type (for example `cluster` store will not GC schema's, counts, etc)\n          this.debugLog(`${ type }: Skipping (type ignored by store)`);\n\n          return;\n        }\n\n        if (ignoreTypes[type]) {\n          // We're going to a place that needs the resource\n          this.debugLog(`${ type }: Skipping (navigating to type)`);\n\n          return;\n        }\n\n        if (now - lastAccessed <= maxAge) {\n          // The resource was recently accessed\n\n          this.debugLog(`${ type }: Skipping (recently accessed)`);\n\n          return;\n        }\n\n        if (this.lastRouteChange !== undefined && this.lastRouteChange < lastAccessed ) {\n          // The resource is being used in the current route/page\n          this.debugLog(`${ type }: Skipping (used in current route/page)`);\n\n          return;\n        }\n\n        const countFromResource = getters.all(COUNT)[0].counts[type]?.summary.count;\n        const currentCount = countFromResource ?? 0;\n\n        if (currentCount === undefined || currentCount < maxCount) {\n          // There's too few resources, we might as well keep them to avoid a network request when we need them again\n          this.debugLog(`${ type }: Skipping (too few of resource)`);\n\n          return;\n        }\n\n        this.debugLog(`${ type }: Removing from store`);\n        dispatch('forgetType', type);\n        gcd[type] = currentCount;\n      });\n\n      this.gcLastRun = new Date().getTime();\n    } catch (e) {\n      this.debugLog(`: Error`, e);\n      this.gcLastRun = new Date().getTime();\n    }\n\n    if (Object.keys(gcd).length > 0) {\n      console.info('Garbage Collected Resources', gcd); // eslint-disable-line no-console\n    }\n\n    this.debugLog(`------ Finished ------`);\n  }\n\n  // ------------- GC Update local cache ---------------------\n\n  /**\n   * Update the time that the resource type was accessed\n   * This needs to run after any type initialisation (aka registerType)\n   */\n  gcUpdateLastAccessed(pseudoCtx: any, type: string) {\n    if (!this.gcEnabledAll(pseudoCtx, type)) {\n      return;\n    }\n    const store = pseudoCtx.state.config.namespace;\n\n    if (!this.lastAccessedCache[store]) {\n      this.lastAccessedCache[store] = {};\n    }\n\n    this.lastAccessedCache[store][type] = new Date().getTime();\n  }\n\n  /**\n   * Update the time the user last changed routes\n   */\n  gcUpdateRouteChanged() {\n    this.lastRouteChange = new Date().getTime();\n  }\n\n  // ------------- GC reset ---------------------\n\n  /**\n   * Remove all cached access times for the given store\n   */\n  gcResetStore(state: any) {\n    const store = state.config.namespace;\n\n    delete this.lastAccessedCache[store];\n\n    this.debugLog('Forgetting Store:', store);\n  }\n\n  /**\n   * Remove cached access time for the given resource type\n   */\n  gcResetType(state: any, type: string) {\n    const store = state.config.namespace;\n\n    if (!this.lastAccessedCache[store]) {\n      return;\n    }\n    delete this.lastAccessedCache[store][type];\n\n    this.debugLog('Forgetting Type:', store, type);\n  }\n}\n\nconst gc = new GarbageCollect();\n\nexport default gc;\n"],"mappings":"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"}]}