{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/list/fleet.cattle.io.bundle.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/list/fleet.cattle.io.bundle.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCB7IEZMRUVUIH0gZnJvbSAnQHNoZWxsL2NvbmZpZy90eXBlcyc7CmltcG9ydCB7IEJhbm5lciB9IGZyb20gJ0Bjb21wb25lbnRzL0Jhbm5lcic7CmltcG9ydCBSZXNvdXJjZVRhYmxlIGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL1Jlc291cmNlVGFibGUnOwppbXBvcnQgUmVzb3VyY2VGZXRjaCBmcm9tICdAc2hlbGwvbWl4aW5zL3Jlc291cmNlLWZldGNoJzsKaW1wb3J0IHsgQUdFLCBTVEFURSwgTkFNRSB9IGZyb20gJ0BzaGVsbC9jb25maWcvdGFibGUtaGVhZGVycyc7CmltcG9ydCB7IGlzSGFydmVzdGVyQ2x1c3RlciB9IGZyb20gJ0BzaGVsbC91dGlscy9jbHVzdGVyJzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdMaXN0QnVuZGxlJywKICBjb21wb25lbnRzOiB7CiAgICBCYW5uZXI6IEJhbm5lciwKICAgIFJlc291cmNlVGFibGU6IFJlc291cmNlVGFibGUKICB9LAogIG1peGluczogW1Jlc291cmNlRmV0Y2hdLAogIHByb3BzOiB7CiAgICByZXNvdXJjZTogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9LAogICAgc2NoZW1hOiB7CiAgICAgIHR5cGU6IE9iamVjdCwKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIH0sCiAgICB1c2VRdWVyeVBhcmFtc0ZvclNpbXBsZUZpbHRlcmluZzogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfQogIH0sCiAgZmV0Y2g6IGZ1bmN0aW9uIGZldGNoKCkgewogICAgdmFyIF90aGlzID0gdGhpczsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICByZXR1cm4gX3RoaXMuJGZldGNoVHlwZShfdGhpcy5yZXNvdXJjZSk7CiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIGlmICghX3RoaXMuJHN0b3JlLmdldHRlcnNbJ21hbmFnZW1lbnQvc2NoZW1hRm9yJ10oRkxFRVQuQ0xVU1RFUikpIHsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgcmV0dXJuIF90aGlzLiRzdG9yZS5nZXR0ZXJzWydtYW5hZ2VtZW50L2FsbCddKEZMRUVULkNMVVNURVIpOwogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICBfdGhpcy5hbGxGbGVldCA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZSk7CiAgICB9KSkoKTsKICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBhbGxGbGVldDogW10KICAgIH07CiAgfSwKICBjb21wdXRlZDogewogICAgaGFydmVzdGVyQ2x1c3RlcnM6IGZ1bmN0aW9uIGhhcnZlc3RlckNsdXN0ZXJzKCkgewogICAgICB2YXIgaGFydmVzdGVyID0ge307CiAgICAgIHRoaXMuYWxsRmxlZXQuZm9yRWFjaChmdW5jdGlvbiAoYykgewogICAgICAgIGlmIChpc0hhcnZlc3RlckNsdXN0ZXIoYykpIHsKICAgICAgICAgIGhhcnZlc3RlcltjLm1ldGFkYXRhLm5hbWVdID0gYzsKICAgICAgICB9CiAgICAgIH0pOwogICAgICByZXR1cm4gaGFydmVzdGVyOwogICAgfSwKICAgIGJ1bmRsZXM6IGZ1bmN0aW9uIGJ1bmRsZXMoKSB7CiAgICAgIHZhciBoYXJ2ZXN0ZXIgPSB0aGlzLmhhcnZlc3RlckNsdXN0ZXJzOwogICAgICByZXR1cm4gdGhpcy5yb3dzLmZpbHRlcihmdW5jdGlvbiAoYnVuZGxlKSB7CiAgICAgICAgdmFyIF9idW5kbGUkc3BlYzsKICAgICAgICB2YXIgdGFyZ2V0cyA9ICgoX2J1bmRsZSRzcGVjID0gYnVuZGxlLnNwZWMpID09PSBudWxsIHx8IF9idW5kbGUkc3BlYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2J1bmRsZSRzcGVjLnRhcmdldHMpIHx8IFtdOwoKICAgICAgICAvLyBGaWx0ZXIgb3V0IGFueSBidW5kbGUgdGhhdCBoYXMgb25lIHRhcmdldCB3aG9zZSBjbHVzdGVyIGlzIGEgaGFydmVzdGVyIGNsdXN0ZXIKICAgICAgICBpZiAodGFyZ2V0cy5sZW5ndGggPT09IDEpIHsKICAgICAgICAgIHJldHVybiAhaGFydmVzdGVyW3RhcmdldHNbMF0uY2x1c3Rlck5hbWVdOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfSk7CiAgICB9LAogICAgaGlkZGVuOiBmdW5jdGlvbiBoaWRkZW4oKSB7CiAgICAgIHJldHVybiB0aGlzLnJvd3MubGVuZ3RoIC0gdGhpcy5idW5kbGVzLmxlbmd0aDsKICAgIH0sCiAgICBoZWFkZXJzOiBmdW5jdGlvbiBoZWFkZXJzKCkgewogICAgICB2YXIgb3V0ID0gW1NUQVRFLCBOQU1FLCB7CiAgICAgICAgbmFtZTogJ2RlcGxveW1lbnRzUmVhZHknLAogICAgICAgIGxhYmVsS2V5OiAndGFibGVIZWFkZXJzLmJ1bmRsZURlcGxveW1lbnRzUmVhZHknLAogICAgICAgIHZhbHVlOiAnc3RhdHVzLmRpc3BsYXkucmVhZHlDbHVzdGVycycsCiAgICAgICAgc29ydDogJ3N0YXR1cy5kaXNwbGF5LnJlYWR5Q2x1c3RlcnMnLAogICAgICAgIHNlYXJjaDogWydzdGF0dXMuc3VtbWFyeS5yZWFkeScsICdzdGF0dXMuc3VtbWFyeS5kZXNpcmVkUmVhZHknXQogICAgICB9LCBBR0VdOwogICAgICByZXR1cm4gb3V0OwogICAgfQogIH0sCiAgLy8gb3ZlcnJpZGUgd2l0aCByZWxldmFudCBpbmZvIGZvciB0aGUgbG9hZGluZyBpbmRpY2F0b3Igc2luY2UgdGhpcyBkb2Vzbid0IHVzZSBpdCdzIG93biBtYXN0aGVhZAogICRsb2FkaW5nUmVzb3VyY2VzOiBmdW5jdGlvbiAkbG9hZGluZ1Jlc291cmNlcygpIHsKICAgIC8vIHJlc3VsdHMgYXJlIGZpbHRlcmVkIHNvIHdlIHdvdWxkbid0IGdldCB0aGUgY29ycmVjdCBjb3VudCBvbiBpbmRpY2F0b3IuLi4KICAgIHJldHVybiB7CiAgICAgIGxvYWRJbmRldGVybWluYXRlOiB0cnVlCiAgICB9OwogIH0KfTs="},{"version":3,"names":["FLEET","Banner","ResourceTable","ResourceFetch","AGE","STATE","NAME","isHarvesterCluster","name","components","mixins","props","resource","type","String","required","schema","Object","useQueryParamsForSimpleFiltering","Boolean","default","fetch","_this","_asyncToGenerator","regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","$fetchType","$store","getters","CLUSTER","allFleet","sent","stop","data","computed","harvesterClusters","harvester","forEach","c","metadata","bundles","rows","filter","bundle","_bundle$spec","targets","spec","length","clusterName","hidden","headers","out","labelKey","value","sort","search","$loadingResources","loadIndeterminate"],"sources":["node_modules/@rancher/shell/list/fleet.cattle.io.bundle.vue"],"sourcesContent":["<script>\nimport { FLEET } from '@shell/config/types';\nimport { Banner } from '@components/Banner';\nimport ResourceTable from '@shell/components/ResourceTable';\nimport ResourceFetch from '@shell/mixins/resource-fetch';\nimport {\n  AGE,\n  STATE,\n  NAME,\n} from '@shell/config/table-headers';\nimport { isHarvesterCluster } from '@shell/utils/cluster';\n\nexport default {\n  name:       'ListBundle',\n  components: { Banner, ResourceTable },\n  mixins:     [ResourceFetch],\n  props:      {\n    resource: {\n      type:     String,\n      required: true,\n    },\n    schema: {\n      type:     Object,\n      required: true,\n    },\n    useQueryParamsForSimpleFiltering: {\n      type:    Boolean,\n      default: false\n    }\n  },\n\n  async fetch() {\n    await this.$fetchType(this.resource);\n    if (this.$store.getters['management/schemaFor']( FLEET.CLUSTER )) {\n      this.allFleet = await this.$store.getters['management/all'](FLEET.CLUSTER);\n    }\n  },\n\n  data() {\n    return { allFleet: [] };\n  },\n\n  computed: {\n    harvesterClusters() {\n      const harvester = {};\n\n      this.allFleet.forEach((c) => {\n        if (isHarvesterCluster(c)) {\n          harvester[c.metadata.name] = c;\n        }\n      });\n\n      return harvester;\n    },\n\n    bundles() {\n      const harvester = this.harvesterClusters;\n\n      return this.rows.filter((bundle) => {\n        const targets = bundle.spec?.targets || [];\n\n        // Filter out any bundle that has one target whose cluster is a harvester cluster\n        if (targets.length === 1) {\n          return !harvester[targets[0].clusterName];\n        }\n\n        return true;\n      });\n    },\n\n    hidden() {\n      return this.rows.length - this.bundles.length;\n    },\n\n    headers() {\n      const out = [\n        STATE,\n        NAME,\n        {\n          name:     'deploymentsReady',\n          labelKey: 'tableHeaders.bundleDeploymentsReady',\n          value:    'status.display.readyClusters',\n          sort:     'status.display.readyClusters',\n          search:   ['status.summary.ready', 'status.summary.desiredReady'],\n        },\n        AGE\n      ];\n\n      return out;\n    },\n  },\n\n  // override with relevant info for the loading indicator since this doesn't use it's own masthead\n  $loadingResources() {\n    // results are filtered so we wouldn't get the correct count on indicator...\n    return { loadIndeterminate: true };\n  },\n};\n</script>\n\n<template>\n  <div>\n    <Banner\n      v-if=\"hidden\"\n      color=\"info\"\n      :label=\"t('fleet.bundles.harvester', {count: hidden} )\"\n    />\n    <ResourceTable\n      :schema=\"schema\"\n      :headers=\"headers\"\n      :rows=\"bundles\"\n      :loading=\"loading\"\n      :use-query-params-for-simple-filtering=\"useQueryParamsForSimpleFiltering\"\n      :force-update-live-and-delayed=\"forceUpdateLiveAndDelayed\"\n    >\n      <template #cell:deploymentsReady=\"{row}\">\n        <span\n          v-if=\"row.status && (row.status.summary.desiredReady !== row.status.summary.ready)\"\n          class=\"text-warning\"\n        >\n          {{ row.status.summary.ready }}/{{ row.status.summary.desiredReady }}</span>\n        <span v-else-if=\"row.status\">{{ row.status.summary.desiredReady }}</span>\n        <span v-else>-</span>\n      </template>\n    </ResourceTable>\n  </div>\n</template>\n"],"mappings":";;;;;;AACA,SAAAA,KAAA;AACA,SAAAC,MAAA;AACA,OAAAC,aAAA;AACA,OAAAC,aAAA;AACA,SACAC,GAAA,EACAC,KAAA,EACAC,IAAA,QACA;AACA,SAAAC,kBAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IAAAR,MAAA,EAAAA,MAAA;IAAAC,aAAA,EAAAA;EAAA;EACAQ,MAAA,GAAAP,aAAA;EACAQ,KAAA;IACAC,QAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,QAAA;IACA;IACAC,MAAA;MACAH,IAAA,EAAAI,MAAA;MACAF,QAAA;IACA;IACAG,gCAAA;MACAL,IAAA,EAAAM,OAAA;MACAC,OAAA;IACA;EACA;EAEAC,KAAA,WAAAA,MAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA,eAAAC,kBAAA,CAAAC,IAAA,UAAAC,QAAA;MAAA,OAAAF,kBAAA,CAAAG,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAAF,QAAA,CAAAE,IAAA;YAAA,OACAT,KAAA,CAAAU,UAAA,CAAAV,KAAA,CAAAV,QAAA;UAAA;YAAA,KACAU,KAAA,CAAAW,MAAA,CAAAC,OAAA,yBAAAlC,KAAA,CAAAmC,OAAA;cAAAN,QAAA,CAAAE,IAAA;cAAA;YAAA;YAAAF,QAAA,CAAAE,IAAA;YAAA,OACAT,KAAA,CAAAW,MAAA,CAAAC,OAAA,mBAAAlC,KAAA,CAAAmC,OAAA;UAAA;YAAAb,KAAA,CAAAc,QAAA,GAAAP,QAAA,CAAAQ,IAAA;UAAA;UAAA;YAAA,OAAAR,QAAA,CAAAS,IAAA;QAAA;MAAA,GAAAZ,OAAA;IAAA;EAEA;EAEAa,IAAA,WAAAA,KAAA;IACA;MAAAH,QAAA;IAAA;EACA;EAEAI,QAAA;IACAC,iBAAA,WAAAA,kBAAA;MACA,IAAAC,SAAA;MAEA,KAAAN,QAAA,CAAAO,OAAA,WAAAC,CAAA;QACA,IAAArC,kBAAA,CAAAqC,CAAA;UACAF,SAAA,CAAAE,CAAA,CAAAC,QAAA,CAAArC,IAAA,IAAAoC,CAAA;QACA;MACA;MAEA,OAAAF,SAAA;IACA;IAEAI,OAAA,WAAAA,QAAA;MACA,IAAAJ,SAAA,QAAAD,iBAAA;MAEA,YAAAM,IAAA,CAAAC,MAAA,WAAAC,MAAA;QAAA,IAAAC,YAAA;QACA,IAAAC,OAAA,KAAAD,YAAA,GAAAD,MAAA,CAAAG,IAAA,cAAAF,YAAA,uBAAAA,YAAA,CAAAC,OAAA;;QAEA;QACA,IAAAA,OAAA,CAAAE,MAAA;UACA,QAAAX,SAAA,CAAAS,OAAA,IAAAG,WAAA;QACA;QAEA;MACA;IACA;IAEAC,MAAA,WAAAA,OAAA;MACA,YAAAR,IAAA,CAAAM,MAAA,QAAAP,OAAA,CAAAO,MAAA;IACA;IAEAG,OAAA,WAAAA,QAAA;MACA,IAAAC,GAAA,IACApD,KAAA,EACAC,IAAA,EACA;QACAE,IAAA;QACAkD,QAAA;QACAC,KAAA;QACAC,IAAA;QACAC,MAAA;MACA,GACAzD,GAAA,CACA;MAEA,OAAAqD,GAAA;IACA;EACA;EAEA;EACAK,iBAAA,WAAAA,kBAAA;IACA;IACA;MAAAC,iBAAA;IAAA;EACA;AACA"}]}