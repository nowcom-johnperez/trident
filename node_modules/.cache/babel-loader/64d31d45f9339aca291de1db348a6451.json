{"remainingRequest":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/RoleBindings.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@rancher/shell/components/RoleBindings.vue","mtime":1716430447141},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/babel.config.js","mtime":1716430386710},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/babel-loader/lib/index.js","mtime":1716430465839},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/cache-loader/dist/cjs.js","mtime":1716430465924},{"path":"/Users/nowcom/Documents/nowcom/trident-extension-package/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1716430467929}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["RBAC","RBAC_LABELS","allHash","MANAGEMENT","_CONFIG","_DETAIL","_EDIT","_VIEW","findBy","removeAt","removeObject","Loading","SortableTable","LabeledSelect","SCOPE_NAMESPACE","SCOPE_CLUSTER","components","props","registerAfterHook","type","Function","default","mode","String","as","inStore","roleScope","required","validator","val","includes","bindingScope","namespace","filterRoleKey","PRODUCT","filterRoleValue","fetch","_this","_asyncToGenerator","regeneratorRuntime","mark","_callee","hash","out","key","wrap","_callee$","_context","prev","next","allUsers","$store","dispatch","USER","allRoles","concat","ROLE","CLUSTER_ROLE","Error","allBindings","ROLE_BINDING","CLUSTER_ROLE_BINDING","sent","readExistingBindings","stop","data","rows","computed","isView","showDetail","detailHeaders","name","labelKey","value","sort","search","userOptions","filter","x","isSystem","map","label","labelForSelect","id","roleOptions","roles","nameWithinProduct","_this2","all","role","_role$metadata","metadata","labels","existingBindings","_this3","binding","_binding$roleRef","_binding$metadata","roleRef","kind","unremovedRows","remove","created","saveRoleBindings","methods","_this4","i","subjects","length","subject","subjectKind","userObj","roleKind","roleObj","existing","existingIdx","_this5","_callee2","promises","_iterator","_step","row","obj","subj","neu","_obj","_callee2$","_context2","_createForOfIteratorHelper","s","n","done","console","debug","push","createFrom","save","t0","e","f","finish","Promise","t1","apiGroup","generateName","$set","add"],"sources":["node_modules/@rancher/shell/components/RoleBindings.vue"],"sourcesContent":["<script>\nimport { RBAC as RBAC_LABELS } from '@shell/config/labels-annotations';\nimport { allHash } from '@shell/utils/promise';\nimport { RBAC, MANAGEMENT } from '@shell/config/types';\nimport { _CONFIG, _DETAIL, _EDIT, _VIEW } from '@shell/config/query-params';\nimport { findBy, removeAt, removeObject } from '@shell/utils/array';\nimport Loading from '@shell/components/Loading';\nimport SortableTable from '@shell/components/SortableTable';\nimport LabeledSelect from '@shell/components/form/LabeledSelect';\n\nexport const SCOPE_NAMESPACE = 'Role';\nexport const SCOPE_CLUSTER = 'ClusterRole';\n// export const SCOPE_GLOBAL = 'GlobalRole';\n\nexport default {\n  components: {\n    Loading, LabeledSelect, SortableTable\n  },\n\n  props: {\n    registerAfterHook: {\n      type:    Function,\n      default: null,\n    },\n\n    mode: {\n      type:    String,\n      default: _EDIT,\n    },\n\n    as: {\n      type:    String,\n      default: _CONFIG,\n    },\n\n    inStore: {\n      type:    String,\n      default: 'cluster',\n    },\n\n    roleScope: {\n      type:     String,\n      required: true,\n      validator(val) {\n        return [SCOPE_NAMESPACE, SCOPE_CLUSTER].includes(val);\n      }\n    },\n\n    bindingScope: {\n      type:     String,\n      required: true,\n      validator(val) {\n        return [SCOPE_NAMESPACE, SCOPE_CLUSTER].includes(val);\n      }\n    },\n\n    namespace: {\n      type:    String,\n      default: null,\n    },\n\n    filterRoleKey: {\n      type:    String,\n      default: RBAC_LABELS.PRODUCT\n    },\n\n    filterRoleValue: {\n      type:    String,\n      default: null,\n    },\n  },\n\n  async fetch() {\n    const hash = { allUsers: this.$store.dispatch('management/findAll', { type: MANAGEMENT.USER }) };\n    const inStore = this.inStore;\n\n    if ( this.roleScope === SCOPE_NAMESPACE ) {\n      hash.allRoles = this.$store.dispatch(`${ inStore }/findAll`, { type: RBAC.ROLE });\n    } else if ( this.roleScope === SCOPE_CLUSTER ) {\n      hash.allRoles = this.$store.dispatch(`${ inStore }/findAll`, { type: RBAC.CLUSTER_ROLE });\n    // } else if ( this.roleScope === SCOPE_GLOBAL ) {\n    // hash.allRoles = this.$store.dispatch('management/findAll', { type: MANAGEMENT.GLOBAL_ROLE });\n    } else {\n      throw new Error('Unknown roleScope');\n    }\n\n    if ( this.bindingScope === SCOPE_NAMESPACE ) {\n      hash.allBindings = this.$store.dispatch(`${ inStore }/findAll`, { type: RBAC.ROLE_BINDING });\n    } else if ( this.bindingScope === SCOPE_CLUSTER ) {\n      hash.allBindings = this.$store.dispatch(`${ inStore }/findAll`, { type: RBAC.CLUSTER_ROLE_BINDING });\n    // } else if ( this.bindingScope === SCOPE_GLOBAL ) {\n    // hash.allBindings = this.$store.dispatch('management/findAll', { type: MANAGEMENT.GLOBAL_ROLE_BINDING });\n    } else {\n      throw new Error('Unknown scope');\n    }\n\n    const out = await allHash(hash);\n\n    for ( const key in out ) {\n      this[key] = out[key];\n    }\n\n    this.readExistingBindings();\n  },\n\n  data() {\n    return {\n      allRoles:    null,\n      allBindings: null,\n      allUsers:    null,\n      rows:        null,\n    };\n  },\n\n  computed: {\n    isView() {\n      return this.mode === _VIEW;\n    },\n\n    showDetail() {\n      return this.as === _DETAIL;\n    },\n\n    detailHeaders() {\n      return [\n        {\n          name:     'type',\n          labelKey: 'tableHeaders.type',\n          value:    'subjectKind',\n          sort:     'subjectKind',\n          search:   'subjectKind',\n        },\n        {\n          name:     'subject',\n          labelKey: 'tableHeaders.subject',\n          value:    'userObj.labelForSelect',\n          sort:     'userObj.labelForSelect',\n          search:   'userObj.labelForSelect',\n        },\n        {\n          name:     'role',\n          labelKey: 'tableHeaders.role',\n          value:    'roleObj.nameWithinProduct',\n          sort:     'roleObj.nameWithinProduct',\n          search:   'roleObj.nameWithinProduct',\n        },\n      ];\n    },\n\n    userOptions() {\n      return this.allUsers.filter((x) => {\n        return !x.isSystem;\n      }).map((x) => {\n        return {\n          label: x.labelForSelect,\n          value: x.id,\n        };\n      });\n    },\n\n    roleOptions() {\n      return this.roles.map((x) => {\n        return { label: x.nameWithinProduct, value: x.name };\n      });\n    },\n\n    roles() {\n      const all = this.allRoles;\n\n      if ( !this.filterRoleKey || !this.filterRoleValue ) {\n        return all;\n      }\n\n      const out = all.filter((role) => {\n        return role.metadata?.labels?.[this.filterRoleKey] === this.filterRoleValue;\n      });\n\n      return out;\n    },\n\n    existingBindings() {\n      const roles = this.roles.map((x) => x.name);\n\n      const out = this.allBindings.filter((binding) => {\n        if ( binding.roleRef.kind !== this.roleScope || !binding.roleRef?.name) {\n          return false;\n        }\n\n        if ( this.bindingScope === SCOPE_NAMESPACE && binding.metadata?.namespace !== this.namespace ) {\n          return false;\n        }\n\n        return roles.includes(binding.roleRef.name);\n      });\n\n      return out;\n    },\n\n    unremovedRows() {\n      return this.rows.filter((x) => x.remove !== true);\n    },\n  },\n\n  created() {\n    if ( this.mode !== _VIEW ) {\n      this.registerAfterHook(this.saveRoleBindings, 'saveRoleBindings');\n    }\n  },\n\n  methods: {\n    readExistingBindings() {\n      this.rows = this.existingBindings.map((binding) => {\n        for ( let i = 0 ; i < binding.subjects.length ; i++ ) {\n          const subject = binding.subjects[i];\n\n          // We have no way to do groups right now...\n          if ( subject.kind !== 'User' ) {\n            continue;\n          }\n\n          return {\n            subjectKind: subject.kind,\n            subject:     subject.name,\n            userObj:     findBy(this.allUsers, 'id', subject.name),\n            roleKind:    binding.roleRef.kind,\n            role:        binding.roleRef.name,\n            roleObj:     findBy(this.allRoles, 'id', binding.roleRef.name),\n            existing:    binding,\n            existingIdx: i,\n            remove:      false,\n          };\n        }\n      });\n    },\n\n    async saveRoleBindings() {\n      /* eslint-disable no-console */\n\n      const promises = [];\n\n      for ( const row of this.rows ) {\n        if ( row.remove ) {\n          // Remove an existing entry\n\n          if ( row.existing.subjects.length === 1 ) {\n            // There's only one subject, remove the whole binding\n            console.debug('Remove', row.existing.id, 'only one subject');\n            promises.push(row.existing.remove());\n          } else {\n          // There's multiple subjects, remove just this one\n            removeAt(row.existing.subjects, row.existingIdx);\n            console.debug('Remove', row.existing.id, 'subject', row.existingIdx);\n          }\n        } else if ( row.existing ) {\n          // Maybe update existing, which might be a PUT, or a PUT + POST, or a DELETE + POST\n          // because the role of an existing binding can't be edited in k8s (because reasons, presumably).\n          const obj = row.existing;\n          const subj = obj.subjects[row.existingIdx];\n\n          if ( obj.roleRef.name !== row.role || obj.roleRef.kind !== row.roleKind ) {\n            // The role changed\n            const neu = await this.createFrom(row);\n\n            // Make a new binding\n            promises.push(neu.save());\n            console.debug('Create binding from', row.existing.id, 'because role changed');\n\n            if ( obj.subjects.length === 1 ) {\n              // There's only one subject, remove the whole binding\n              promises.push(obj.remove());\n              console.debug('Remove', row.existing.id, 'because role changed, only one subject');\n            } else {\n              // There's multiple subject, remove this one just this one\n              removeAt(obj.subjects, row.existingIdx);\n              promises.push(obj.save());\n              console.debug('Update', row.existing.id, 'remove subject', row.existingIdx, 'because role changed');\n            }\n          } else if ( subj.name !== row.subject || subj.kind !== row.subjectKind ) {\n            // This subject changed\n            subj.kind = row.subjectKind;\n            subj.name = row.subject;\n\n            promises.push(obj.save());\n            console.debug('Changed', row.existing.id, 'subject', row.existingIdx);\n          } else {\n            // Nothing changed\n            console.debug('Unchanged', row.existing.id, 'subject', row.existingIdx);\n          }\n        } else {\n          // Create new\n          const obj = await this.createFrom(row);\n\n          promises.push(obj.save());\n          console.debug('Create binding');\n        }\n      }\n\n      try {\n        await Promise.all(promises);\n      } catch (e) {\n        // If something goes wrong, forget everything and reload to get the current state.\n        this.readExistingBindings();\n        throw e;\n      }\n\n      /* eslint-enable no-console */\n    },\n\n    createFrom(row) {\n      let type, apiGroup;\n      const inStore = this.inStore;\n\n      if ( this.bindingScope === SCOPE_NAMESPACE ) {\n        type = RBAC.ROLE_BINDING;\n        apiGroup = 'rbac.authorization.k8s.io';\n      } else if ( this.bindingScope === SCOPE_CLUSTER ) {\n        type = RBAC.CLUSTER_ROLE_BINDING;\n        apiGroup = 'rbac.authorization.k8s.io';\n      // } else if ( this.bindingScope === SCOPE_GLOBAL ) {\n      //   type = MANAGEMENT.GLOBAL_ROLE_BINDING;\n      //   inStore = 'management'\n      //   apiGroup = 'management.cattle.io' ?\n      } else {\n        throw new Error('Unknown binding scope');\n      }\n\n      const obj = this.$store.dispatch(`${ inStore }/create`, {\n        type,\n        metadata: {\n          generateName: `ui-${ this.filterRoleValue ? `${ this.filterRoleValue }-` : '' }`,\n          namespace:    this.namespace,\n        },\n        roleRef: {\n          apiGroup,\n          kind: row.roleKind,\n          name: row.role,\n        },\n        subjects: [\n          {\n            apiGroup,\n            kind: row.subjectKind,\n            name: row.subject,\n          },\n        ]\n      });\n\n      return obj;\n    },\n\n    remove(row) {\n      if ( row.existing ) {\n        this.$set(row, 'remove', true);\n      } else {\n        removeObject(this.rows, row);\n      }\n    },\n\n    add() {\n      this.rows.push({\n        subjectKind: 'User',\n        subject:     '',\n        roleKind:    this.roleScope,\n        role:        '',\n      });\n    }\n  },\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n  <div v-else-if=\"showDetail\">\n    <SortableTable\n      :rows=\"unremovedRows\"\n      :headers=\"detailHeaders\"\n      :table-actions=\"false\"\n      :row-actions=\"false\"\n      key-field=\"existing.id\"\n      default-sort-by=\"subject\"\n      :paged=\"true\"\n    />\n  </div>\n  <div v-else>\n    <div\n      v-for=\"(row, idx) in unremovedRows\"\n      :key=\"idx\"\n      class=\"role-row\"\n      :class=\"{[mode]: true}\"\n    >\n      <div class=\"subject\">\n        <LabeledSelect\n          v-model=\"row.subject\"\n          label-key=\"rbac.roleBinding.user.label\"\n          :mode=\"mode\"\n          :searchable=\"true\"\n          :taggable=\"true\"\n          :options=\"userOptions\"\n        />\n      </div>\n      <div class=\"binding\">\n        <LabeledSelect\n          v-model=\"row.role\"\n          label-key=\"rbac.roleBinding.role.label\"\n          :mode=\"mode\"\n          :searchable=\"true\"\n          :taggable=\"true\"\n          :options=\"roleOptions\"\n        />\n      </div>\n      <div class=\"remove\">\n        <button\n          v-t=\"'generic.remove'\"\n          :disabled=\"isView\"\n          type=\"button\"\n          class=\"btn role-link\"\n          @click=\"remove(row)\"\n        />\n      </div>\n    </div>\n    <div>\n      <button\n        v-t=\"'rbac.roleBinding.add'\"\n        :disabled=\"isView\"\n        type=\"button\"\n        class=\"btn role-tertiary add\"\n        @click=\"add()\"\n      />\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.role-row{\n  display: grid;\n  grid-template-columns: 45% 45% 10%;\n\n  grid-column-gap: $column-gutter;\n  margin-bottom: 10px;\n  align-items: center;\n  & .port{\n    display: flex;\n    justify-content: space-between;\n  }\n\n  &.show-host{\n    grid-template-columns: 30% 16% 10% 15% 15% 5%;\n  }\n\n}\n\n.add-host {\n  justify-self: center;\n}\n\n.protocol {\n  height: 100%;\n}\n\n.ports-headers {\n  color: var(--input-label);\n}\n\n.toggle-host-ports {\n  color: var(--primary);\n}\n\n.remove BUTTON {\n  padding: 0px;\n}\n</style>\n"],"mappings":"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"}]}