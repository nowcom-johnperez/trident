"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VerifyCommand = void 0;
const models_0_1 = require("../models/models_0");
const Aws_json1_1_1 = require("../protocols/Aws_json1_1");
const middleware_serde_1 = require("@aws-sdk/middleware-serde");
const smithy_client_1 = require("@aws-sdk/smithy-client");
/**
 * <p>Verifies a digital signature that was generated by the <a>Sign</a> operation. </p>
 *          <p></p>
 *          <p>Verification confirms that an authorized user signed the message with the specified CMK
 *       and signing algorithm, and the message hasn't changed since it was signed. If the signature is
 *       verified, the value of the <code>SignatureValid</code> field in the response is
 *         <code>True</code>. If the signature verification fails, the <code>Verify</code> operation
 *       fails with an <code>KMSInvalidSignatureException</code> exception.</p>
 *          <p>A digital signature is generated by using the private key in an asymmetric CMK. The
 *       signature is verified by using the public key in the same asymmetric CMK.
 *       For information about symmetric and asymmetric CMKs, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Using Symmetric and Asymmetric CMKs</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
 *          <p>To verify a digital signature, you can use the <code>Verify</code> operation. Specify the
 *       same asymmetric CMK, message, and signing algorithm that were used to produce the
 *       signature.</p>
 *          <p>You can also verify the digital signature by using the public key of the CMK outside of
 *       AWS KMS. Use the <a>GetPublicKey</a> operation to download the public key in the
 *       asymmetric CMK and then use the public key to verify the signature outside of AWS KMS. The
 *       advantage of using the <code>Verify</code> operation is that it is performed within AWS KMS. As
 *       a result, it's easy to call, the operation is performed within the FIPS boundary, it is logged
 *       in AWS CloudTrail, and you can use key policy and IAM policy to determine who is authorized to use
 *       the CMK to verify signatures.</p>
 *          <p>The CMK that you use for this operation must be in a compatible key state. For
 * details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">How Key State Affects Use
 * of a Customer Master Key</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
 */
class VerifyCommand extends smithy_client_1.Command {
    // Start section: command_properties
    // End section: command_properties
    constructor(input) {
        // Start section: command_constructor
        super();
        this.input = input;
        // End section: command_constructor
    }
    /**
     * @internal
     */
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "KMSClient";
        const commandName = "VerifyCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: models_0_1.VerifyRequest.filterSensitiveLog,
            outputFilterSensitiveLog: models_0_1.VerifyResponse.filterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return Aws_json1_1_1.serializeAws_json1_1VerifyCommand(input, context);
    }
    deserialize(output, context) {
        return Aws_json1_1_1.deserializeAws_json1_1VerifyCommand(output, context);
    }
}
exports.VerifyCommand = VerifyCommand;
//# sourceMappingURL=VerifyCommand.js.map