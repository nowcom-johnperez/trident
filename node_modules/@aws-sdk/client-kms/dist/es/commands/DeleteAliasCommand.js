import { __extends } from "tslib";
import { DeleteAliasRequest } from "../models/models_0";
import { deserializeAws_json1_1DeleteAliasCommand, serializeAws_json1_1DeleteAliasCommand, } from "../protocols/Aws_json1_1";
import { getSerdePlugin } from "@aws-sdk/middleware-serde";
import { Command as $Command } from "@aws-sdk/smithy-client";
/**
 * <p>Deletes the specified alias. You cannot perform this operation on an alias in a different AWS account. </p>
 *          <p>Because an alias is not a property of a CMK, you can delete and change the aliases of a
 *       CMK without affecting the CMK. Also, aliases do not appear in the response from the <a>DescribeKey</a> operation. To get the aliases of all CMKs, use the <a>ListAliases</a> operation. </p>
 *          <p>Each CMK can have multiple aliases. To change the alias of a CMK, use <a>DeleteAlias</a> to delete the current alias and <a>CreateAlias</a> to
 *       create a new alias. To associate an existing alias with a different customer master key (CMK),
 *       call <a>UpdateAlias</a>.</p>
 */
var DeleteAliasCommand = /** @class */ (function (_super) {
    __extends(DeleteAliasCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function DeleteAliasCommand(input) {
        var _this = 
        // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
        // End section: command_constructor
    }
    /**
     * @internal
     */
    DeleteAliasCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "KMSClient";
        var commandName = "DeleteAliasCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: DeleteAliasRequest.filterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteAliasCommand.prototype.serialize = function (input, context) {
        return serializeAws_json1_1DeleteAliasCommand(input, context);
    };
    DeleteAliasCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_json1_1DeleteAliasCommand(output, context);
    };
    return DeleteAliasCommand;
}($Command));
export { DeleteAliasCommand };
//# sourceMappingURL=DeleteAliasCommand.js.map