import { KMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../KMSClient";
import { VerifyRequest, VerifyResponse } from "../models/models_0";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, MiddlewareStack, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer } from "@aws-sdk/types";
export declare type VerifyCommandInput = VerifyRequest;
export declare type VerifyCommandOutput = VerifyResponse & __MetadataBearer;
/**
 * <p>Verifies a digital signature that was generated by the <a>Sign</a> operation. </p>
 *          <p></p>
 *          <p>Verification confirms that an authorized user signed the message with the specified CMK
 *       and signing algorithm, and the message hasn't changed since it was signed. If the signature is
 *       verified, the value of the <code>SignatureValid</code> field in the response is
 *         <code>True</code>. If the signature verification fails, the <code>Verify</code> operation
 *       fails with an <code>KMSInvalidSignatureException</code> exception.</p>
 *          <p>A digital signature is generated by using the private key in an asymmetric CMK. The
 *       signature is verified by using the public key in the same asymmetric CMK.
 *       For information about symmetric and asymmetric CMKs, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Using Symmetric and Asymmetric CMKs</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
 *          <p>To verify a digital signature, you can use the <code>Verify</code> operation. Specify the
 *       same asymmetric CMK, message, and signing algorithm that were used to produce the
 *       signature.</p>
 *          <p>You can also verify the digital signature by using the public key of the CMK outside of
 *       AWS KMS. Use the <a>GetPublicKey</a> operation to download the public key in the
 *       asymmetric CMK and then use the public key to verify the signature outside of AWS KMS. The
 *       advantage of using the <code>Verify</code> operation is that it is performed within AWS KMS. As
 *       a result, it's easy to call, the operation is performed within the FIPS boundary, it is logged
 *       in AWS CloudTrail, and you can use key policy and IAM policy to determine who is authorized to use
 *       the CMK to verify signatures.</p>
 *          <p>The CMK that you use for this operation must be in a compatible key state. For
 * details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">How Key State Affects Use
 * of a Customer Master Key</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
 */
export declare class VerifyCommand extends $Command<VerifyCommandInput, VerifyCommandOutput, KMSClientResolvedConfig> {
    readonly input: VerifyCommandInput;
    constructor(input: VerifyCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<VerifyCommandInput, VerifyCommandOutput>;
    private serialize;
    private deserialize;
}
