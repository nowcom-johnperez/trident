import { __assign, __awaiter, __generator } from "tslib";
import { HttpRequest } from "@aws-sdk/protocol-http";
import { SignatureV4 } from "@aws-sdk/signature-v4";
import { formatUrl } from "@aws-sdk/util-format-url";
import { escapeUri } from "@aws-sdk/util-uri-escape";
var version = "2016-11-15";
//an initialize middleware to add PresignUrl to input
export function copySnapshotPresignedUrlMiddleware(options) {
    var _this = this;
    return function (next) { return function (args) { return __awaiter(_this, void 0, void 0, function () {
        var input, region, resolvedEndpoint, request, signer, presignedRequest;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    input = args.input;
                    if (!!input.PresignedUrl) return [3 /*break*/, 4];
                    return [4 /*yield*/, options.region()];
                case 1:
                    region = _a.sent();
                    return [4 /*yield*/, options.endpoint()];
                case 2:
                    resolvedEndpoint = _a.sent();
                    resolvedEndpoint.hostname = "ec2." + input.SourceRegion + ".amazonaws.com";
                    request = new HttpRequest(__assign(__assign({}, resolvedEndpoint), { protocol: "https", headers: {
                            host: resolvedEndpoint.hostname,
                        }, query: {
                            Action: "CopySnapshot",
                            Version: version,
                            SourceRegion: input.SourceRegion,
                            SourceSnapshotId: input.SourceSnapshotId,
                            DestinationRegion: region,
                        } }));
                    signer = new SignatureV4({
                        credentials: options.credentials,
                        region: input.SourceRegion,
                        service: "ec2",
                        sha256: options.sha256,
                        uriEscapePath: options.signingEscapePath,
                    });
                    return [4 /*yield*/, signer.presign(request, {
                            expiresIn: 3600,
                        })];
                case 3:
                    presignedRequest = _a.sent();
                    args = __assign(__assign({}, args), { input: __assign(__assign({}, args.input), { DestinationRegion: region, PresignedUrl: escapeUri(formatUrl(presignedRequest)) }) });
                    _a.label = 4;
                case 4: return [2 /*return*/, next(args)];
            }
        });
    }); }; };
}
export var copySnapshotPresignedUrlMiddlewareOptions = {
    step: "initialize",
    tags: ["CROSS_REGION_PRESIGNED_URL"],
    name: "crossRegionPresignedUrlMiddleware",
};
export var getCopySnapshotPresignedUrlPlugin = function (config) { return ({
    applyToStack: function (clientStack) {
        clientStack.add(copySnapshotPresignedUrlMiddleware(config), copySnapshotPresignedUrlMiddlewareOptions);
    },
}); };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFjcEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQVVyRCxJQUFNLE9BQU8sR0FBRyxZQUFZLENBQUM7QUFFN0IscURBQXFEO0FBQ3JELE1BQU0sVUFBVSxrQ0FBa0MsQ0FBQyxPQUEyQjtJQUE5RSxpQkFnREM7SUEvQ0MsT0FBTyxVQUNMLElBQW9DLElBQ0QsT0FBQSxVQUNuQyxJQUFxQzs7Ozs7b0JBRTdCLEtBQUssR0FBSyxJQUFJLE1BQVQsQ0FBVTt5QkFDbkIsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFuQix3QkFBbUI7b0JBQ04scUJBQU0sT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFBOztvQkFBL0IsTUFBTSxHQUFHLFNBQXNCO29CQUNaLHFCQUFNLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBQTs7b0JBQTNDLGdCQUFnQixHQUFHLFNBQXdCO29CQUNqRCxnQkFBZ0IsQ0FBQyxRQUFRLEdBQUcsU0FBTyxLQUFLLENBQUMsWUFBWSxtQkFBZ0IsQ0FBQztvQkFDaEUsT0FBTyxHQUFHLElBQUksV0FBVyx1QkFDMUIsZ0JBQWdCLEtBQ25CLFFBQVEsRUFBRSxPQUFPLEVBQ2pCLE9BQU8sRUFBRTs0QkFDUCxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsUUFBUTt5QkFDaEMsRUFDRCxLQUFLLEVBQUU7NEJBQ0wsTUFBTSxFQUFFLGNBQWM7NEJBQ3RCLE9BQU8sRUFBRSxPQUFPOzRCQUNoQixZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7NEJBQ2hDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0I7NEJBQ3hDLGlCQUFpQixFQUFFLE1BQU07eUJBQzFCLElBQ0QsQ0FBQztvQkFDRyxNQUFNLEdBQUcsSUFBSSxXQUFXLENBQUM7d0JBQzdCLFdBQVcsRUFBRSxPQUFPLENBQUMsV0FBVzt3QkFDaEMsTUFBTSxFQUFFLEtBQUssQ0FBQyxZQUFZO3dCQUMxQixPQUFPLEVBQUUsS0FBSzt3QkFDZCxNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU07d0JBQ3RCLGFBQWEsRUFBRSxPQUFPLENBQUMsaUJBQWlCO3FCQUN6QyxDQUFDLENBQUM7b0JBQ3NCLHFCQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFOzRCQUNyRCxTQUFTLEVBQUUsSUFBSTt5QkFDaEIsQ0FBQyxFQUFBOztvQkFGSSxnQkFBZ0IsR0FBRyxTQUV2QjtvQkFFRixJQUFJLHlCQUNDLElBQUksS0FDUCxLQUFLLHdCQUNBLElBQUksQ0FBQyxLQUFLLEtBQ2IsaUJBQWlCLEVBQUUsTUFBTSxFQUN6QixZQUFZLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE1BRXZELENBQUM7O3dCQUdKLHNCQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBQzs7O1NBQ25CLEVBNUNvQyxDQTRDcEMsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLENBQUMsSUFBTSx5Q0FBeUMsR0FBNkI7SUFDakYsSUFBSSxFQUFFLFlBQVk7SUFDbEIsSUFBSSxFQUFFLENBQUMsNEJBQTRCLENBQUM7SUFDcEMsSUFBSSxFQUFFLG1DQUFtQztDQUMxQyxDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0saUNBQWlDLEdBQUcsVUFBQyxNQUEwQixJQUEwQixPQUFBLENBQUM7SUFDckcsWUFBWSxFQUFFLFVBQUMsV0FBVztRQUN4QixXQUFXLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLHlDQUF5QyxDQUFDLENBQUM7SUFDekcsQ0FBQztDQUNGLENBQUMsRUFKb0csQ0FJcEcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBSZXF1ZXN0IH0gZnJvbSBcIkBhd3Mtc2RrL3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7IFNpZ25hdHVyZVY0IH0gZnJvbSBcIkBhd3Mtc2RrL3NpZ25hdHVyZS12NFwiO1xuaW1wb3J0IHtcbiAgQ3JlZGVudGlhbHMsXG4gIEVuZHBvaW50LFxuICBIYXNoQ29uc3RydWN0b3IsXG4gIEluaXRpYWxpemVIYW5kbGVyLFxuICBJbml0aWFsaXplSGFuZGxlckFyZ3VtZW50cyxcbiAgSW5pdGlhbGl6ZUhhbmRsZXJPcHRpb25zLFxuICBJbml0aWFsaXplSGFuZGxlck91dHB1dCxcbiAgSW5pdGlhbGl6ZU1pZGRsZXdhcmUsXG4gIE1ldGFkYXRhQmVhcmVyLFxuICBQbHVnZ2FibGUsXG4gIFByb3ZpZGVyLFxufSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcbmltcG9ydCB7IGZvcm1hdFVybCB9IGZyb20gXCJAYXdzLXNkay91dGlsLWZvcm1hdC11cmxcIjtcbmltcG9ydCB7IGVzY2FwZVVyaSB9IGZyb20gXCJAYXdzLXNkay91dGlsLXVyaS1lc2NhcGVcIjtcblxuaW50ZXJmYWNlIFByZXZpb3VzbHlSZXNvbHZlZCB7XG4gIGNyZWRlbnRpYWxzOiBQcm92aWRlcjxDcmVkZW50aWFscz47XG4gIGVuZHBvaW50OiBQcm92aWRlcjxFbmRwb2ludD47XG4gIHJlZ2lvbjogUHJvdmlkZXI8c3RyaW5nPjtcbiAgc2hhMjU2OiBIYXNoQ29uc3RydWN0b3I7XG4gIHNpZ25pbmdFc2NhcGVQYXRoOiBib29sZWFuO1xufVxuXG5jb25zdCB2ZXJzaW9uID0gXCIyMDE2LTExLTE1XCI7XG5cbi8vYW4gaW5pdGlhbGl6ZSBtaWRkbGV3YXJlIHRvIGFkZCBQcmVzaWduVXJsIHRvIGlucHV0XG5leHBvcnQgZnVuY3Rpb24gY29weVNuYXBzaG90UHJlc2lnbmVkVXJsTWlkZGxld2FyZShvcHRpb25zOiBQcmV2aW91c2x5UmVzb2x2ZWQpOiBJbml0aWFsaXplTWlkZGxld2FyZTxhbnksIGFueT4ge1xuICByZXR1cm4gPE91dHB1dCBleHRlbmRzIE1ldGFkYXRhQmVhcmVyPihcbiAgICBuZXh0OiBJbml0aWFsaXplSGFuZGxlcjxhbnksIE91dHB1dD5cbiAgKTogSW5pdGlhbGl6ZUhhbmRsZXI8YW55LCBPdXRwdXQ+ID0+IGFzeW5jIChcbiAgICBhcmdzOiBJbml0aWFsaXplSGFuZGxlckFyZ3VtZW50czxhbnk+XG4gICk6IFByb21pc2U8SW5pdGlhbGl6ZUhhbmRsZXJPdXRwdXQ8T3V0cHV0Pj4gPT4ge1xuICAgIGNvbnN0IHsgaW5wdXQgfSA9IGFyZ3M7XG4gICAgaWYgKCFpbnB1dC5QcmVzaWduZWRVcmwpIHtcbiAgICAgIGNvbnN0IHJlZ2lvbiA9IGF3YWl0IG9wdGlvbnMucmVnaW9uKCk7XG4gICAgICBjb25zdCByZXNvbHZlZEVuZHBvaW50ID0gYXdhaXQgb3B0aW9ucy5lbmRwb2ludCgpO1xuICAgICAgcmVzb2x2ZWRFbmRwb2ludC5ob3N0bmFtZSA9IGBlYzIuJHtpbnB1dC5Tb3VyY2VSZWdpb259LmFtYXpvbmF3cy5jb21gO1xuICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBIdHRwUmVxdWVzdCh7XG4gICAgICAgIC4uLnJlc29sdmVkRW5kcG9pbnQsXG4gICAgICAgIHByb3RvY29sOiBcImh0dHBzXCIsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBob3N0OiByZXNvbHZlZEVuZHBvaW50Lmhvc3RuYW1lLFxuICAgICAgICB9LFxuICAgICAgICBxdWVyeToge1xuICAgICAgICAgIEFjdGlvbjogXCJDb3B5U25hcHNob3RcIixcbiAgICAgICAgICBWZXJzaW9uOiB2ZXJzaW9uLFxuICAgICAgICAgIFNvdXJjZVJlZ2lvbjogaW5wdXQuU291cmNlUmVnaW9uLFxuICAgICAgICAgIFNvdXJjZVNuYXBzaG90SWQ6IGlucHV0LlNvdXJjZVNuYXBzaG90SWQsXG4gICAgICAgICAgRGVzdGluYXRpb25SZWdpb246IHJlZ2lvbixcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgICAgY29uc3Qgc2lnbmVyID0gbmV3IFNpZ25hdHVyZVY0KHtcbiAgICAgICAgY3JlZGVudGlhbHM6IG9wdGlvbnMuY3JlZGVudGlhbHMsXG4gICAgICAgIHJlZ2lvbjogaW5wdXQuU291cmNlUmVnaW9uLFxuICAgICAgICBzZXJ2aWNlOiBcImVjMlwiLFxuICAgICAgICBzaGEyNTY6IG9wdGlvbnMuc2hhMjU2LFxuICAgICAgICB1cmlFc2NhcGVQYXRoOiBvcHRpb25zLnNpZ25pbmdFc2NhcGVQYXRoLFxuICAgICAgfSk7XG4gICAgICBjb25zdCBwcmVzaWduZWRSZXF1ZXN0ID0gYXdhaXQgc2lnbmVyLnByZXNpZ24ocmVxdWVzdCwge1xuICAgICAgICBleHBpcmVzSW46IDM2MDAsXG4gICAgICB9KTtcblxuICAgICAgYXJncyA9IHtcbiAgICAgICAgLi4uYXJncyxcbiAgICAgICAgaW5wdXQ6IHtcbiAgICAgICAgICAuLi5hcmdzLmlucHV0LFxuICAgICAgICAgIERlc3RpbmF0aW9uUmVnaW9uOiByZWdpb24sXG4gICAgICAgICAgUHJlc2lnbmVkVXJsOiBlc2NhcGVVcmkoZm9ybWF0VXJsKHByZXNpZ25lZFJlcXVlc3QpKSxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG5leHQoYXJncyk7XG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCBjb3B5U25hcHNob3RQcmVzaWduZWRVcmxNaWRkbGV3YXJlT3B0aW9uczogSW5pdGlhbGl6ZUhhbmRsZXJPcHRpb25zID0ge1xuICBzdGVwOiBcImluaXRpYWxpemVcIixcbiAgdGFnczogW1wiQ1JPU1NfUkVHSU9OX1BSRVNJR05FRF9VUkxcIl0sXG4gIG5hbWU6IFwiY3Jvc3NSZWdpb25QcmVzaWduZWRVcmxNaWRkbGV3YXJlXCIsXG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Q29weVNuYXBzaG90UHJlc2lnbmVkVXJsUGx1Z2luID0gKGNvbmZpZzogUHJldmlvdXNseVJlc29sdmVkKTogUGx1Z2dhYmxlPGFueSwgYW55PiA9PiAoe1xuICBhcHBseVRvU3RhY2s6IChjbGllbnRTdGFjaykgPT4ge1xuICAgIGNsaWVudFN0YWNrLmFkZChjb3B5U25hcHNob3RQcmVzaWduZWRVcmxNaWRkbGV3YXJlKGNvbmZpZyksIGNvcHlTbmFwc2hvdFByZXNpZ25lZFVybE1pZGRsZXdhcmVPcHRpb25zKTtcbiAgfSxcbn0pO1xuIl19