import { __extends } from "tslib";
import { CreateNodegroupRequest, CreateNodegroupResponse } from "../models/models_0";
import { deserializeAws_restJson1CreateNodegroupCommand, serializeAws_restJson1CreateNodegroupCommand, } from "../protocols/Aws_restJson1";
import { getSerdePlugin } from "@aws-sdk/middleware-serde";
import { Command as $Command } from "@aws-sdk/smithy-client";
/**
 * <p>Creates a managed worker node group for an Amazon EKS cluster. You can only create a node
 *             group for your cluster that is equal to the current Kubernetes version for the cluster.
 *             All node groups are created with the latest AMI release version for the respective minor
 *             Kubernetes version of the cluster, unless you deploy a custom AMI using a launch
 *             template. For more information about using launch templates, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html">Launch
 *                 template support</a>.</p>
 *         <p>An Amazon EKS managed node group is an Amazon EC2 Auto Scaling group and associated Amazon EC2 instances that
 *             are managed by AWS for an Amazon EKS cluster. Each node group uses a version of the Amazon EKS
 *             optimized Amazon Linux 2 AMI. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/managed-node-groups.html">Managed
 *                 Node Groups</a> in the <i>Amazon EKS User Guide</i>. </p>
 */
var CreateNodegroupCommand = /** @class */ (function (_super) {
    __extends(CreateNodegroupCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function CreateNodegroupCommand(input) {
        var _this = 
        // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
        // End section: command_constructor
    }
    /**
     * @internal
     */
    CreateNodegroupCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "EKSClient";
        var commandName = "CreateNodegroupCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: CreateNodegroupRequest.filterSensitiveLog,
            outputFilterSensitiveLog: CreateNodegroupResponse.filterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    CreateNodegroupCommand.prototype.serialize = function (input, context) {
        return serializeAws_restJson1CreateNodegroupCommand(input, context);
    };
    CreateNodegroupCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_restJson1CreateNodegroupCommand(output, context);
    };
    return CreateNodegroupCommand;
}($Command));
export { CreateNodegroupCommand };
//# sourceMappingURL=CreateNodegroupCommand.js.map