import { EKSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../EKSClient";
import { UpdateNodegroupConfigRequest, UpdateNodegroupConfigResponse } from "../models/models_0";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, MiddlewareStack, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer } from "@aws-sdk/types";
export declare type UpdateNodegroupConfigCommandInput = UpdateNodegroupConfigRequest;
export declare type UpdateNodegroupConfigCommandOutput = UpdateNodegroupConfigResponse & __MetadataBearer;
/**
 * <p>Updates an Amazon EKS managed node group configuration. Your node group continues to
 *             function during the update. The response output includes an update ID that you can use
 *             to track the status of your node group update with the <a>DescribeUpdate</a>
 *             API operation. Currently you can update the Kubernetes labels for a node group or the
 *             scaling configuration.</p>
 */
export declare class UpdateNodegroupConfigCommand extends $Command<UpdateNodegroupConfigCommandInput, UpdateNodegroupConfigCommandOutput, EKSClientResolvedConfig> {
    readonly input: UpdateNodegroupConfigCommandInput;
    constructor(input: UpdateNodegroupConfigCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EKSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateNodegroupConfigCommandInput, UpdateNodegroupConfigCommandOutput>;
    private serialize;
    private deserialize;
}
